// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"truffle/build/contracts/OmoideStorage.json":[function(require,module,exports) {
module.exports = {
  "contractName": "OmoideStorage",
  "abi": [{
    "inputs": [{
      "internalType": "string",
      "name": "",
      "type": "string"
    }],
    "name": "dataStore",
    "outputs": [{
      "internalType": "string",
      "name": "message",
      "type": "string"
    }, {
      "internalType": "string",
      "name": "facePic",
      "type": "string"
    }, {
      "internalType": "bytes32",
      "name": "dataHash",
      "type": "bytes32"
    }, {
      "internalType": "bytes",
      "name": "dataSignature",
      "type": "bytes"
    }],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  }, {
    "inputs": [{
      "internalType": "string",
      "name": "uuid",
      "type": "string"
    }, {
      "internalType": "string",
      "name": "message",
      "type": "string"
    }, {
      "internalType": "string",
      "name": "facePic",
      "type": "string"
    }, {
      "internalType": "bytes32",
      "name": "dataHash",
      "type": "bytes32"
    }, {
      "internalType": "bytes",
      "name": "dataSignature",
      "type": "bytes"
    }],
    "name": "storeData",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "string",
      "name": "uuid",
      "type": "string"
    }],
    "name": "getData",
    "outputs": [{
      "internalType": "string",
      "name": "",
      "type": "string"
    }, {
      "internalType": "string",
      "name": "",
      "type": "string"
    }, {
      "internalType": "bytes32",
      "name": "",
      "type": "bytes32"
    }, {
      "internalType": "bytes",
      "name": "",
      "type": "bytes"
    }],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  }],
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"dataStore\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"facePic\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"facePic\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataSignature\",\"type\":\"bytes\"}],\"name\":\"storeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/omoide.sol\":\"OmoideStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/omoide.sol\":{\"keccak256\":\"0x10b626a95b2e15f12eae653c36f1defd2871e7f557fb837e5c3fbcbbe57c54f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://28596f2dad7de51f57d323e93b53fc4b0e4bf8c303b02085df7f588566bd60b4\",\"dweb:/ipfs/QmRmcgnsTkiojSuYDicGHP21nNEiQNh2Fhe4UoHvE4XW9c\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c2a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636a50044114610046578063ae55c88814610079578063ce2d4107146100ac575b600080fd5b610060600480360381019061005b91906107f0565b6100c8565b604051610070949392919061092f565b60405180910390f35b610093600480360381019061008e91906107f0565b6102a6565b6040516100a3949392919061092f565b60405180910390f35b6100c660048036038101906100c19190610a56565b6104bd565b005b60008180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461010190610b70565b80601f016020809104026020016040519081016040528092919081815260200182805461012d90610b70565b801561017a5780601f1061014f5761010080835404028352916020019161017a565b820191906000526020600020905b81548152906001019060200180831161015d57829003601f168201915b50505050509080600101805461018f90610b70565b80601f01602080910402602001604051908101604052809291908181526020018280546101bb90610b70565b80156102085780601f106101dd57610100808354040283529160200191610208565b820191906000526020600020905b8154815290600101906020018083116101eb57829003601f168201915b50505050509080600201549080600301805461022390610b70565b80601f016020809104026020016040519081016040528092919081815260200182805461024f90610b70565b801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b5050505050905084565b60608060006060600080866040516102be9190610bdd565b90815260200160405180910390206040518060800160405290816000820180546102e790610b70565b80601f016020809104026020016040519081016040528092919081815260200182805461031390610b70565b80156103605780601f1061033557610100808354040283529160200191610360565b820191906000526020600020905b81548152906001019060200180831161034357829003601f168201915b5050505050815260200160018201805461037990610b70565b80601f01602080910402602001604051908101604052809291908181526020018280546103a590610b70565b80156103f25780601f106103c7576101008083540402835291602001916103f2565b820191906000526020600020905b8154815290600101906020018083116103d557829003601f168201915b505050505081526020016002820154815260200160038201805461041590610b70565b80601f016020809104026020016040519081016040528092919081815260200182805461044190610b70565b801561048e5780601f106104635761010080835404028352916020019161048e565b820191906000526020600020905b81548152906001019060200180831161047157829003601f168201915b505050505081525050905080600001518160200151826040015183606001519450945094509450509193509193565b60006040518060800160405280868152602001858152602001848152602001838152509050806000876040516104f39190610bdd565b9081526020016040518091039020600082015181600001908051906020019061051d92919061056d565b50602082015181600101908051906020019061053a92919061056d565b506040820151816002015560608201518160030190805190602001906105619291906105f3565b50905050505050505050565b82805461057990610b70565b90600052602060002090601f01602090048101928261059b57600085556105e2565b82601f106105b457805160ff19168380011785556105e2565b828001600101855582156105e2579182015b828111156105e15782518255916020019190600101906105c6565b5b5090506105ef9190610679565b5090565b8280546105ff90610b70565b90600052602060002090601f0160209004810192826106215760008555610668565b82601f1061063a57805160ff1916838001178555610668565b82800160010185558215610668579182015b8281111561066757825182559160200191906001019061064c565b5b5090506106759190610679565b5090565b5b8082111561069257600081600090555060010161067a565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106fd826106b4565b810181811067ffffffffffffffff8211171561071c5761071b6106c5565b5b80604052505050565b600061072f610696565b905061073b82826106f4565b919050565b600067ffffffffffffffff82111561075b5761075a6106c5565b5b610764826106b4565b9050602081019050919050565b82818337600083830152505050565b600061079361078e84610740565b610725565b9050828152602081018484840111156107af576107ae6106af565b5b6107ba848285610771565b509392505050565b600082601f8301126107d7576107d66106aa565b5b81356107e7848260208601610780565b91505092915050565b600060208284031215610806576108056106a0565b5b600082013567ffffffffffffffff811115610824576108236106a5565b5b610830848285016107c2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610873578082015181840152602081019050610858565b83811115610882576000848401525b50505050565b600061089382610839565b61089d8185610844565b93506108ad818560208601610855565b6108b6816106b4565b840191505092915050565b6000819050919050565b6108d4816108c1565b82525050565b600081519050919050565b600082825260208201905092915050565b6000610901826108da565b61090b81856108e5565b935061091b818560208601610855565b610924816106b4565b840191505092915050565b600060808201905081810360008301526109498187610888565b9050818103602083015261095d8186610888565b905061096c60408301856108cb565b818103606083015261097e81846108f6565b905095945050505050565b610992816108c1565b811461099d57600080fd5b50565b6000813590506109af81610989565b92915050565b600067ffffffffffffffff8211156109d0576109cf6106c5565b5b6109d9826106b4565b9050602081019050919050565b60006109f96109f4846109b5565b610725565b905082815260208101848484011115610a1557610a146106af565b5b610a20848285610771565b509392505050565b600082601f830112610a3d57610a3c6106aa565b5b8135610a4d8482602086016109e6565b91505092915050565b600080600080600060a08688031215610a7257610a716106a0565b5b600086013567ffffffffffffffff811115610a9057610a8f6106a5565b5b610a9c888289016107c2565b955050602086013567ffffffffffffffff811115610abd57610abc6106a5565b5b610ac9888289016107c2565b945050604086013567ffffffffffffffff811115610aea57610ae96106a5565b5b610af6888289016107c2565b9350506060610b07888289016109a0565b925050608086013567ffffffffffffffff811115610b2857610b276106a5565b5b610b3488828901610a28565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b8857607f821691505b602082108103610b9b57610b9a610b41565b5b50919050565b600081905092915050565b6000610bb782610839565b610bc18185610ba1565b9350610bd1818560208601610855565b80840191505092915050565b6000610be98284610bac565b91508190509291505056fea26469706673582212205a96355c47da8f0368bf09fa8a4681ae1d9536f6847dd5d52e6eb4fd8d79a8ca64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80636a50044114610046578063ae55c88814610079578063ce2d4107146100ac575b600080fd5b610060600480360381019061005b91906107f0565b6100c8565b604051610070949392919061092f565b60405180910390f35b610093600480360381019061008e91906107f0565b6102a6565b6040516100a3949392919061092f565b60405180910390f35b6100c660048036038101906100c19190610a56565b6104bd565b005b60008180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461010190610b70565b80601f016020809104026020016040519081016040528092919081815260200182805461012d90610b70565b801561017a5780601f1061014f5761010080835404028352916020019161017a565b820191906000526020600020905b81548152906001019060200180831161015d57829003601f168201915b50505050509080600101805461018f90610b70565b80601f01602080910402602001604051908101604052809291908181526020018280546101bb90610b70565b80156102085780601f106101dd57610100808354040283529160200191610208565b820191906000526020600020905b8154815290600101906020018083116101eb57829003601f168201915b50505050509080600201549080600301805461022390610b70565b80601f016020809104026020016040519081016040528092919081815260200182805461024f90610b70565b801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b5050505050905084565b60608060006060600080866040516102be9190610bdd565b90815260200160405180910390206040518060800160405290816000820180546102e790610b70565b80601f016020809104026020016040519081016040528092919081815260200182805461031390610b70565b80156103605780601f1061033557610100808354040283529160200191610360565b820191906000526020600020905b81548152906001019060200180831161034357829003601f168201915b5050505050815260200160018201805461037990610b70565b80601f01602080910402602001604051908101604052809291908181526020018280546103a590610b70565b80156103f25780601f106103c7576101008083540402835291602001916103f2565b820191906000526020600020905b8154815290600101906020018083116103d557829003601f168201915b505050505081526020016002820154815260200160038201805461041590610b70565b80601f016020809104026020016040519081016040528092919081815260200182805461044190610b70565b801561048e5780601f106104635761010080835404028352916020019161048e565b820191906000526020600020905b81548152906001019060200180831161047157829003601f168201915b505050505081525050905080600001518160200151826040015183606001519450945094509450509193509193565b60006040518060800160405280868152602001858152602001848152602001838152509050806000876040516104f39190610bdd565b9081526020016040518091039020600082015181600001908051906020019061051d92919061056d565b50602082015181600101908051906020019061053a92919061056d565b506040820151816002015560608201518160030190805190602001906105619291906105f3565b50905050505050505050565b82805461057990610b70565b90600052602060002090601f01602090048101928261059b57600085556105e2565b82601f106105b457805160ff19168380011785556105e2565b828001600101855582156105e2579182015b828111156105e15782518255916020019190600101906105c6565b5b5090506105ef9190610679565b5090565b8280546105ff90610b70565b90600052602060002090601f0160209004810192826106215760008555610668565b82601f1061063a57805160ff1916838001178555610668565b82800160010185558215610668579182015b8281111561066757825182559160200191906001019061064c565b5b5090506106759190610679565b5090565b5b8082111561069257600081600090555060010161067a565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106fd826106b4565b810181811067ffffffffffffffff8211171561071c5761071b6106c5565b5b80604052505050565b600061072f610696565b905061073b82826106f4565b919050565b600067ffffffffffffffff82111561075b5761075a6106c5565b5b610764826106b4565b9050602081019050919050565b82818337600083830152505050565b600061079361078e84610740565b610725565b9050828152602081018484840111156107af576107ae6106af565b5b6107ba848285610771565b509392505050565b600082601f8301126107d7576107d66106aa565b5b81356107e7848260208601610780565b91505092915050565b600060208284031215610806576108056106a0565b5b600082013567ffffffffffffffff811115610824576108236106a5565b5b610830848285016107c2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610873578082015181840152602081019050610858565b83811115610882576000848401525b50505050565b600061089382610839565b61089d8185610844565b93506108ad818560208601610855565b6108b6816106b4565b840191505092915050565b6000819050919050565b6108d4816108c1565b82525050565b600081519050919050565b600082825260208201905092915050565b6000610901826108da565b61090b81856108e5565b935061091b818560208601610855565b610924816106b4565b840191505092915050565b600060808201905081810360008301526109498187610888565b9050818103602083015261095d8186610888565b905061096c60408301856108cb565b818103606083015261097e81846108f6565b905095945050505050565b610992816108c1565b811461099d57600080fd5b50565b6000813590506109af81610989565b92915050565b600067ffffffffffffffff8211156109d0576109cf6106c5565b5b6109d9826106b4565b9050602081019050919050565b60006109f96109f4846109b5565b610725565b905082815260208101848484011115610a1557610a146106af565b5b610a20848285610771565b509392505050565b600082601f830112610a3d57610a3c6106aa565b5b8135610a4d8482602086016109e6565b91505092915050565b600080600080600060a08688031215610a7257610a716106a0565b5b600086013567ffffffffffffffff811115610a9057610a8f6106a5565b5b610a9c888289016107c2565b955050602086013567ffffffffffffffff811115610abd57610abc6106a5565b5b610ac9888289016107c2565b945050604086013567ffffffffffffffff811115610aea57610ae96106a5565b5b610af6888289016107c2565b9350506060610b07888289016109a0565b925050608086013567ffffffffffffffff811115610b2857610b276106a5565b5b610b3488828901610a28565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b8857607f821691505b602082108103610b9b57610b9a610b41565b5b50919050565b600081905092915050565b6000610bb782610839565b610bc18185610ba1565b9350610bd1818560208601610855565b80840191505092915050565b6000610be98284610bac565b91508190509291505056fea26469706673582212205a96355c47da8f0368bf09fa8a4681ae1d9536f6847dd5d52e6eb4fd8d79a8ca64736f6c634300080d0033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [{
    "ast": {
      "nodeType": "YulBlock",
      "src": "0:10026:1",
      "statements": [{
        "body": {
          "nodeType": "YulBlock",
          "src": "47:35:1",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "57:19:1",
            "value": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "73:2:1",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "mload",
                "nodeType": "YulIdentifier",
                "src": "67:5:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "67:9:1"
            },
            "variableNames": [{
              "name": "memPtr",
              "nodeType": "YulIdentifier",
              "src": "57:6:1"
            }]
          }]
        },
        "name": "allocate_unbounded",
        "nodeType": "YulFunctionDefinition",
        "returnVariables": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "40:6:1",
          "type": ""
        }],
        "src": "7:75:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "177:28:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "194:1:1",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "197:1:1",
                "type": "",
                "value": "0"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "187:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "187:12:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "187:12:1"
          }]
        },
        "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
        "nodeType": "YulFunctionDefinition",
        "src": "88:117:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "300:28:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "317:1:1",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "320:1:1",
                "type": "",
                "value": "0"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "310:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "310:12:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "310:12:1"
          }]
        },
        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
        "nodeType": "YulFunctionDefinition",
        "src": "211:117:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "423:28:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "440:1:1",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "443:1:1",
                "type": "",
                "value": "0"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "433:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "433:12:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "433:12:1"
          }]
        },
        "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
        "nodeType": "YulFunctionDefinition",
        "src": "334:117:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "546:28:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "563:1:1",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "566:1:1",
                "type": "",
                "value": "0"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "556:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "556:12:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "556:12:1"
          }]
        },
        "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
        "nodeType": "YulFunctionDefinition",
        "src": "457:117:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "628:54:1",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "638:38:1",
            "value": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "656:5:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "663:2:1",
                  "type": "",
                  "value": "31"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "652:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "652:14:1"
              }, {
                "arguments": [{
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "672:2:1",
                  "type": "",
                  "value": "31"
                }],
                "functionName": {
                  "name": "not",
                  "nodeType": "YulIdentifier",
                  "src": "668:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "668:7:1"
              }],
              "functionName": {
                "name": "and",
                "nodeType": "YulIdentifier",
                "src": "648:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "648:28:1"
            },
            "variableNames": [{
              "name": "result",
              "nodeType": "YulIdentifier",
              "src": "638:6:1"
            }]
          }]
        },
        "name": "round_up_to_mul_of_32",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "611:5:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "result",
          "nodeType": "YulTypedName",
          "src": "621:6:1",
          "type": ""
        }],
        "src": "580:102:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "716:152:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "733:1:1",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "736:77:1",
                "type": "",
                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "726:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "726:88:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "726:88:1"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "830:1:1",
                "type": "",
                "value": "4"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "833:4:1",
                "type": "",
                "value": "0x41"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "823:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "823:15:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "823:15:1"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "854:1:1",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "857:4:1",
                "type": "",
                "value": "0x24"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "847:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "847:15:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "847:15:1"
          }]
        },
        "name": "panic_error_0x41",
        "nodeType": "YulFunctionDefinition",
        "src": "688:180:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "917:238:1",
          "statements": [{
            "nodeType": "YulVariableDeclaration",
            "src": "927:58:1",
            "value": {
              "arguments": [{
                "name": "memPtr",
                "nodeType": "YulIdentifier",
                "src": "949:6:1"
              }, {
                "arguments": [{
                  "name": "size",
                  "nodeType": "YulIdentifier",
                  "src": "979:4:1"
                }],
                "functionName": {
                  "name": "round_up_to_mul_of_32",
                  "nodeType": "YulIdentifier",
                  "src": "957:21:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "957:27:1"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "945:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "945:40:1"
            },
            "variables": [{
              "name": "newFreePtr",
              "nodeType": "YulTypedName",
              "src": "931:10:1",
              "type": ""
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "1096:22:1",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x41",
                    "nodeType": "YulIdentifier",
                    "src": "1098:16:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "1098:18:1"
                },
                "nodeType": "YulExpressionStatement",
                "src": "1098:18:1"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "newFreePtr",
                  "nodeType": "YulIdentifier",
                  "src": "1039:10:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "1051:18:1",
                  "type": "",
                  "value": "0xffffffffffffffff"
                }],
                "functionName": {
                  "name": "gt",
                  "nodeType": "YulIdentifier",
                  "src": "1036:2:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "1036:34:1"
              }, {
                "arguments": [{
                  "name": "newFreePtr",
                  "nodeType": "YulIdentifier",
                  "src": "1075:10:1"
                }, {
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "1087:6:1"
                }],
                "functionName": {
                  "name": "lt",
                  "nodeType": "YulIdentifier",
                  "src": "1072:2:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "1072:22:1"
              }],
              "functionName": {
                "name": "or",
                "nodeType": "YulIdentifier",
                "src": "1033:2:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "1033:62:1"
            },
            "nodeType": "YulIf",
            "src": "1030:88:1"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "1134:2:1",
                "type": "",
                "value": "64"
              }, {
                "name": "newFreePtr",
                "nodeType": "YulIdentifier",
                "src": "1138:10:1"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "1127:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "1127:22:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "1127:22:1"
          }]
        },
        "name": "finalize_allocation",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "903:6:1",
          "type": ""
        }, {
          "name": "size",
          "nodeType": "YulTypedName",
          "src": "911:4:1",
          "type": ""
        }],
        "src": "874:281:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "1202:88:1",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "1212:30:1",
            "value": {
              "arguments": [],
              "functionName": {
                "name": "allocate_unbounded",
                "nodeType": "YulIdentifier",
                "src": "1222:18:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "1222:20:1"
            },
            "variableNames": [{
              "name": "memPtr",
              "nodeType": "YulIdentifier",
              "src": "1212:6:1"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "memPtr",
                "nodeType": "YulIdentifier",
                "src": "1271:6:1"
              }, {
                "name": "size",
                "nodeType": "YulIdentifier",
                "src": "1279:4:1"
              }],
              "functionName": {
                "name": "finalize_allocation",
                "nodeType": "YulIdentifier",
                "src": "1251:19:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "1251:33:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "1251:33:1"
          }]
        },
        "name": "allocate_memory",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "size",
          "nodeType": "YulTypedName",
          "src": "1186:4:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "1195:6:1",
          "type": ""
        }],
        "src": "1161:129:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "1363:241:1",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "1468:22:1",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x41",
                    "nodeType": "YulIdentifier",
                    "src": "1470:16:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "1470:18:1"
                },
                "nodeType": "YulExpressionStatement",
                "src": "1470:18:1"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "1440:6:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "1448:18:1",
                "type": "",
                "value": "0xffffffffffffffff"
              }],
              "functionName": {
                "name": "gt",
                "nodeType": "YulIdentifier",
                "src": "1437:2:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "1437:30:1"
            },
            "nodeType": "YulIf",
            "src": "1434:56:1"
          }, {
            "nodeType": "YulAssignment",
            "src": "1500:37:1",
            "value": {
              "arguments": [{
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "1530:6:1"
              }],
              "functionName": {
                "name": "round_up_to_mul_of_32",
                "nodeType": "YulIdentifier",
                "src": "1508:21:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "1508:29:1"
            },
            "variableNames": [{
              "name": "size",
              "nodeType": "YulIdentifier",
              "src": "1500:4:1"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "1574:23:1",
            "value": {
              "arguments": [{
                "name": "size",
                "nodeType": "YulIdentifier",
                "src": "1586:4:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "1592:4:1",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "1582:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "1582:15:1"
            },
            "variableNames": [{
              "name": "size",
              "nodeType": "YulIdentifier",
              "src": "1574:4:1"
            }]
          }]
        },
        "name": "array_allocation_size_t_string_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "1347:6:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "size",
          "nodeType": "YulTypedName",
          "src": "1358:4:1",
          "type": ""
        }],
        "src": "1296:308:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "1661:103:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "dst",
                "nodeType": "YulIdentifier",
                "src": "1684:3:1"
              }, {
                "name": "src",
                "nodeType": "YulIdentifier",
                "src": "1689:3:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "1694:6:1"
              }],
              "functionName": {
                "name": "calldatacopy",
                "nodeType": "YulIdentifier",
                "src": "1671:12:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "1671:30:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "1671:30:1"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "dst",
                  "nodeType": "YulIdentifier",
                  "src": "1742:3:1"
                }, {
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "1747:6:1"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "1738:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "1738:16:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "1756:1:1",
                "type": "",
                "value": "0"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "1731:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "1731:27:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "1731:27:1"
          }]
        },
        "name": "copy_calldata_to_memory",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "src",
          "nodeType": "YulTypedName",
          "src": "1643:3:1",
          "type": ""
        }, {
          "name": "dst",
          "nodeType": "YulTypedName",
          "src": "1648:3:1",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "1653:6:1",
          "type": ""
        }],
        "src": "1610:154:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "1854:328:1",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "1864:75:1",
            "value": {
              "arguments": [{
                "arguments": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "1931:6:1"
                }],
                "functionName": {
                  "name": "array_allocation_size_t_string_memory_ptr",
                  "nodeType": "YulIdentifier",
                  "src": "1889:41:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "1889:49:1"
              }],
              "functionName": {
                "name": "allocate_memory",
                "nodeType": "YulIdentifier",
                "src": "1873:15:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "1873:66:1"
            },
            "variableNames": [{
              "name": "array",
              "nodeType": "YulIdentifier",
              "src": "1864:5:1"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "array",
                "nodeType": "YulIdentifier",
                "src": "1955:5:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "1962:6:1"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "1948:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "1948:21:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "1948:21:1"
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "1978:27:1",
            "value": {
              "arguments": [{
                "name": "array",
                "nodeType": "YulIdentifier",
                "src": "1993:5:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "2000:4:1",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "1989:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "1989:16:1"
            },
            "variables": [{
              "name": "dst",
              "nodeType": "YulTypedName",
              "src": "1982:3:1",
              "type": ""
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "2043:83:1",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                    "nodeType": "YulIdentifier",
                    "src": "2045:77:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "2045:79:1"
                },
                "nodeType": "YulExpressionStatement",
                "src": "2045:79:1"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "src",
                  "nodeType": "YulIdentifier",
                  "src": "2024:3:1"
                }, {
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "2029:6:1"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "2020:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "2020:16:1"
              }, {
                "name": "end",
                "nodeType": "YulIdentifier",
                "src": "2038:3:1"
              }],
              "functionName": {
                "name": "gt",
                "nodeType": "YulIdentifier",
                "src": "2017:2:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "2017:25:1"
            },
            "nodeType": "YulIf",
            "src": "2014:112:1"
          }, {
            "expression": {
              "arguments": [{
                "name": "src",
                "nodeType": "YulIdentifier",
                "src": "2159:3:1"
              }, {
                "name": "dst",
                "nodeType": "YulIdentifier",
                "src": "2164:3:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "2169:6:1"
              }],
              "functionName": {
                "name": "copy_calldata_to_memory",
                "nodeType": "YulIdentifier",
                "src": "2135:23:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "2135:41:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "2135:41:1"
          }]
        },
        "name": "abi_decode_available_length_t_string_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "src",
          "nodeType": "YulTypedName",
          "src": "1827:3:1",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "1832:6:1",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "1840:3:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "array",
          "nodeType": "YulTypedName",
          "src": "1848:5:1",
          "type": ""
        }],
        "src": "1770:412:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "2264:278:1",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "2313:83:1",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                    "nodeType": "YulIdentifier",
                    "src": "2315:77:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "2315:79:1"
                },
                "nodeType": "YulExpressionStatement",
                "src": "2315:79:1"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "arguments": [{
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "2292:6:1"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "2300:4:1",
                    "type": "",
                    "value": "0x1f"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "2288:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "2288:17:1"
                }, {
                  "name": "end",
                  "nodeType": "YulIdentifier",
                  "src": "2307:3:1"
                }],
                "functionName": {
                  "name": "slt",
                  "nodeType": "YulIdentifier",
                  "src": "2284:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "2284:27:1"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "2277:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "2277:35:1"
            },
            "nodeType": "YulIf",
            "src": "2274:122:1"
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "2405:34:1",
            "value": {
              "arguments": [{
                "name": "offset",
                "nodeType": "YulIdentifier",
                "src": "2432:6:1"
              }],
              "functionName": {
                "name": "calldataload",
                "nodeType": "YulIdentifier",
                "src": "2419:12:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "2419:20:1"
            },
            "variables": [{
              "name": "length",
              "nodeType": "YulTypedName",
              "src": "2409:6:1",
              "type": ""
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "2448:88:1",
            "value": {
              "arguments": [{
                "arguments": [{
                  "name": "offset",
                  "nodeType": "YulIdentifier",
                  "src": "2509:6:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "2517:4:1",
                  "type": "",
                  "value": "0x20"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "2505:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "2505:17:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "2524:6:1"
              }, {
                "name": "end",
                "nodeType": "YulIdentifier",
                "src": "2532:3:1"
              }],
              "functionName": {
                "name": "abi_decode_available_length_t_string_memory_ptr",
                "nodeType": "YulIdentifier",
                "src": "2457:47:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "2457:79:1"
            },
            "variableNames": [{
              "name": "array",
              "nodeType": "YulIdentifier",
              "src": "2448:5:1"
            }]
          }]
        },
        "name": "abi_decode_t_string_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "offset",
          "nodeType": "YulTypedName",
          "src": "2242:6:1",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "2250:3:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "array",
          "nodeType": "YulTypedName",
          "src": "2258:5:1",
          "type": ""
        }],
        "src": "2202:340:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "2624:433:1",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "2670:83:1",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulIdentifier",
                    "src": "2672:77:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "2672:79:1"
                },
                "nodeType": "YulExpressionStatement",
                "src": "2672:79:1"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "2645:7:1"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "2654:9:1"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "2641:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "2641:23:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "2666:2:1",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "slt",
                "nodeType": "YulIdentifier",
                "src": "2637:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "2637:32:1"
            },
            "nodeType": "YulIf",
            "src": "2634:119:1"
          }, {
            "nodeType": "YulBlock",
            "src": "2763:287:1",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "2778:45:1",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "2809:9:1"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "2820:1:1",
                    "type": "",
                    "value": "0"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "2805:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "2805:17:1"
                }],
                "functionName": {
                  "name": "calldataload",
                  "nodeType": "YulIdentifier",
                  "src": "2792:12:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "2792:31:1"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "2782:6:1",
                "type": ""
              }]
            }, {
              "body": {
                "nodeType": "YulBlock",
                "src": "2870:83:1",
                "statements": [{
                  "expression": {
                    "arguments": [],
                    "functionName": {
                      "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      "nodeType": "YulIdentifier",
                      "src": "2872:77:1"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2872:79:1"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2872:79:1"
                }]
              },
              "condition": {
                "arguments": [{
                  "name": "offset",
                  "nodeType": "YulIdentifier",
                  "src": "2842:6:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "2850:18:1",
                  "type": "",
                  "value": "0xffffffffffffffff"
                }],
                "functionName": {
                  "name": "gt",
                  "nodeType": "YulIdentifier",
                  "src": "2839:2:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "2839:30:1"
              },
              "nodeType": "YulIf",
              "src": "2836:117:1"
            }, {
              "nodeType": "YulAssignment",
              "src": "2967:73:1",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "3012:9:1"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "3023:6:1"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "3008:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "3008:22:1"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "3032:7:1"
                }],
                "functionName": {
                  "name": "abi_decode_t_string_memory_ptr",
                  "nodeType": "YulIdentifier",
                  "src": "2977:30:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "2977:63:1"
              },
              "variableNames": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "2967:6:1"
              }]
            }]
          }]
        },
        "name": "abi_decode_tuple_t_string_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "2594:9:1",
          "type": ""
        }, {
          "name": "dataEnd",
          "nodeType": "YulTypedName",
          "src": "2605:7:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "2617:6:1",
          "type": ""
        }],
        "src": "2548:509:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "3122:40:1",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "3133:22:1",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "3149:5:1"
              }],
              "functionName": {
                "name": "mload",
                "nodeType": "YulIdentifier",
                "src": "3143:5:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "3143:12:1"
            },
            "variableNames": [{
              "name": "length",
              "nodeType": "YulIdentifier",
              "src": "3133:6:1"
            }]
          }]
        },
        "name": "array_length_t_string_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "3105:5:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "3115:6:1",
          "type": ""
        }],
        "src": "3063:99:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "3264:73:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "3281:3:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "3286:6:1"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "3274:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "3274:19:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "3274:19:1"
          }, {
            "nodeType": "YulAssignment",
            "src": "3302:29:1",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "3321:3:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "3326:4:1",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "3317:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "3317:14:1"
            },
            "variableNames": [{
              "name": "updated_pos",
              "nodeType": "YulIdentifier",
              "src": "3302:11:1"
            }]
          }]
        },
        "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "3236:3:1",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "3241:6:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "updated_pos",
          "nodeType": "YulTypedName",
          "src": "3252:11:1",
          "type": ""
        }],
        "src": "3168:169:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "3392:258:1",
          "statements": [{
            "nodeType": "YulVariableDeclaration",
            "src": "3402:10:1",
            "value": {
              "kind": "number",
              "nodeType": "YulLiteral",
              "src": "3411:1:1",
              "type": "",
              "value": "0"
            },
            "variables": [{
              "name": "i",
              "nodeType": "YulTypedName",
              "src": "3406:1:1",
              "type": ""
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "3471:63:1",
              "statements": [{
                "expression": {
                  "arguments": [{
                    "arguments": [{
                      "name": "dst",
                      "nodeType": "YulIdentifier",
                      "src": "3496:3:1"
                    }, {
                      "name": "i",
                      "nodeType": "YulIdentifier",
                      "src": "3501:1:1"
                    }],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "3492:3:1"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3492:11:1"
                  }, {
                    "arguments": [{
                      "arguments": [{
                        "name": "src",
                        "nodeType": "YulIdentifier",
                        "src": "3515:3:1"
                      }, {
                        "name": "i",
                        "nodeType": "YulIdentifier",
                        "src": "3520:1:1"
                      }],
                      "functionName": {
                        "name": "add",
                        "nodeType": "YulIdentifier",
                        "src": "3511:3:1"
                      },
                      "nodeType": "YulFunctionCall",
                      "src": "3511:11:1"
                    }],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "3505:5:1"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3505:18:1"
                  }],
                  "functionName": {
                    "name": "mstore",
                    "nodeType": "YulIdentifier",
                    "src": "3485:6:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "3485:39:1"
                },
                "nodeType": "YulExpressionStatement",
                "src": "3485:39:1"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "i",
                "nodeType": "YulIdentifier",
                "src": "3432:1:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "3435:6:1"
              }],
              "functionName": {
                "name": "lt",
                "nodeType": "YulIdentifier",
                "src": "3429:2:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "3429:13:1"
            },
            "nodeType": "YulForLoop",
            "post": {
              "nodeType": "YulBlock",
              "src": "3443:19:1",
              "statements": [{
                "nodeType": "YulAssignment",
                "src": "3445:15:1",
                "value": {
                  "arguments": [{
                    "name": "i",
                    "nodeType": "YulIdentifier",
                    "src": "3454:1:1"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "3457:2:1",
                    "type": "",
                    "value": "32"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "3450:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "3450:10:1"
                },
                "variableNames": [{
                  "name": "i",
                  "nodeType": "YulIdentifier",
                  "src": "3445:1:1"
                }]
              }]
            },
            "pre": {
              "nodeType": "YulBlock",
              "src": "3425:3:1",
              "statements": []
            },
            "src": "3421:113:1"
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "3568:76:1",
              "statements": [{
                "expression": {
                  "arguments": [{
                    "arguments": [{
                      "name": "dst",
                      "nodeType": "YulIdentifier",
                      "src": "3618:3:1"
                    }, {
                      "name": "length",
                      "nodeType": "YulIdentifier",
                      "src": "3623:6:1"
                    }],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "3614:3:1"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3614:16:1"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "3632:1:1",
                    "type": "",
                    "value": "0"
                  }],
                  "functionName": {
                    "name": "mstore",
                    "nodeType": "YulIdentifier",
                    "src": "3607:6:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "3607:27:1"
                },
                "nodeType": "YulExpressionStatement",
                "src": "3607:27:1"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "i",
                "nodeType": "YulIdentifier",
                "src": "3549:1:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "3552:6:1"
              }],
              "functionName": {
                "name": "gt",
                "nodeType": "YulIdentifier",
                "src": "3546:2:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "3546:13:1"
            },
            "nodeType": "YulIf",
            "src": "3543:101:1"
          }]
        },
        "name": "copy_memory_to_memory",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "src",
          "nodeType": "YulTypedName",
          "src": "3374:3:1",
          "type": ""
        }, {
          "name": "dst",
          "nodeType": "YulTypedName",
          "src": "3379:3:1",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "3384:6:1",
          "type": ""
        }],
        "src": "3343:307:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "3748:272:1",
          "statements": [{
            "nodeType": "YulVariableDeclaration",
            "src": "3758:53:1",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "3805:5:1"
              }],
              "functionName": {
                "name": "array_length_t_string_memory_ptr",
                "nodeType": "YulIdentifier",
                "src": "3772:32:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "3772:39:1"
            },
            "variables": [{
              "name": "length",
              "nodeType": "YulTypedName",
              "src": "3762:6:1",
              "type": ""
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "3820:78:1",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "3886:3:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "3891:6:1"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "3827:58:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "3827:71:1"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "3820:3:1"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "3933:5:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "3940:4:1",
                  "type": "",
                  "value": "0x20"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "3929:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "3929:16:1"
              }, {
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "3947:3:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "3952:6:1"
              }],
              "functionName": {
                "name": "copy_memory_to_memory",
                "nodeType": "YulIdentifier",
                "src": "3907:21:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "3907:52:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "3907:52:1"
          }, {
            "nodeType": "YulAssignment",
            "src": "3968:46:1",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "3979:3:1"
              }, {
                "arguments": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "4006:6:1"
                }],
                "functionName": {
                  "name": "round_up_to_mul_of_32",
                  "nodeType": "YulIdentifier",
                  "src": "3984:21:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "3984:29:1"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "3975:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "3975:39:1"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "3968:3:1"
            }]
          }]
        },
        "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "3729:5:1",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "3736:3:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "3744:3:1",
          "type": ""
        }],
        "src": "3656:364:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "4071:32:1",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "4081:16:1",
            "value": {
              "name": "value",
              "nodeType": "YulIdentifier",
              "src": "4092:5:1"
            },
            "variableNames": [{
              "name": "cleaned",
              "nodeType": "YulIdentifier",
              "src": "4081:7:1"
            }]
          }]
        },
        "name": "cleanup_t_bytes32",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "4053:5:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "cleaned",
          "nodeType": "YulTypedName",
          "src": "4063:7:1",
          "type": ""
        }],
        "src": "4026:77:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "4174:53:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "4191:3:1"
              }, {
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "4214:5:1"
                }],
                "functionName": {
                  "name": "cleanup_t_bytes32",
                  "nodeType": "YulIdentifier",
                  "src": "4196:17:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "4196:24:1"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "4184:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "4184:37:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "4184:37:1"
          }]
        },
        "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "4162:5:1",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "4169:3:1",
          "type": ""
        }],
        "src": "4109:118:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "4291:40:1",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "4302:22:1",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "4318:5:1"
              }],
              "functionName": {
                "name": "mload",
                "nodeType": "YulIdentifier",
                "src": "4312:5:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "4312:12:1"
            },
            "variableNames": [{
              "name": "length",
              "nodeType": "YulIdentifier",
              "src": "4302:6:1"
            }]
          }]
        },
        "name": "array_length_t_bytes_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "4274:5:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "4284:6:1",
          "type": ""
        }],
        "src": "4233:98:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "4432:73:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "4449:3:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "4454:6:1"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "4442:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "4442:19:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "4442:19:1"
          }, {
            "nodeType": "YulAssignment",
            "src": "4470:29:1",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "4489:3:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "4494:4:1",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "4485:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "4485:14:1"
            },
            "variableNames": [{
              "name": "updated_pos",
              "nodeType": "YulIdentifier",
              "src": "4470:11:1"
            }]
          }]
        },
        "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "4404:3:1",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "4409:6:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "updated_pos",
          "nodeType": "YulTypedName",
          "src": "4420:11:1",
          "type": ""
        }],
        "src": "4337:168:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "4601:270:1",
          "statements": [{
            "nodeType": "YulVariableDeclaration",
            "src": "4611:52:1",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "4657:5:1"
              }],
              "functionName": {
                "name": "array_length_t_bytes_memory_ptr",
                "nodeType": "YulIdentifier",
                "src": "4625:31:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "4625:38:1"
            },
            "variables": [{
              "name": "length",
              "nodeType": "YulTypedName",
              "src": "4615:6:1",
              "type": ""
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "4672:77:1",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "4737:3:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "4742:6:1"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "4679:57:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "4679:70:1"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "4672:3:1"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "4784:5:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "4791:4:1",
                  "type": "",
                  "value": "0x20"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "4780:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "4780:16:1"
              }, {
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "4798:3:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "4803:6:1"
              }],
              "functionName": {
                "name": "copy_memory_to_memory",
                "nodeType": "YulIdentifier",
                "src": "4758:21:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "4758:52:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "4758:52:1"
          }, {
            "nodeType": "YulAssignment",
            "src": "4819:46:1",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "4830:3:1"
              }, {
                "arguments": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "4857:6:1"
                }],
                "functionName": {
                  "name": "round_up_to_mul_of_32",
                  "nodeType": "YulIdentifier",
                  "src": "4835:21:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "4835:29:1"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "4826:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "4826:39:1"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "4819:3:1"
            }]
          }]
        },
        "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "4582:5:1",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "4589:3:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "4597:3:1",
          "type": ""
        }],
        "src": "4511:360:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "5117:582:1",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "5127:27:1",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "5139:9:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "5150:3:1",
                "type": "",
                "value": "128"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "5135:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "5135:19:1"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "5127:4:1"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "5175:9:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "5186:1:1",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "5171:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "5171:17:1"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "5194:4:1"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "5200:9:1"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "5190:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "5190:20:1"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "5164:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "5164:47:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "5164:47:1"
          }, {
            "nodeType": "YulAssignment",
            "src": "5220:86:1",
            "value": {
              "arguments": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "5292:6:1"
              }, {
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "5301:4:1"
              }],
              "functionName": {
                "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "5228:63:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "5228:78:1"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "5220:4:1"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "5327:9:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "5338:2:1",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "5323:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "5323:18:1"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "5347:4:1"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "5353:9:1"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "5343:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "5343:20:1"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "5316:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "5316:48:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "5316:48:1"
          }, {
            "nodeType": "YulAssignment",
            "src": "5373:86:1",
            "value": {
              "arguments": [{
                "name": "value1",
                "nodeType": "YulIdentifier",
                "src": "5445:6:1"
              }, {
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "5454:4:1"
              }],
              "functionName": {
                "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "5381:63:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "5381:78:1"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "5373:4:1"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "value2",
                "nodeType": "YulIdentifier",
                "src": "5513:6:1"
              }, {
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "5526:9:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "5537:2:1",
                  "type": "",
                  "value": "64"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "5522:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "5522:18:1"
              }],
              "functionName": {
                "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                "nodeType": "YulIdentifier",
                "src": "5469:43:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "5469:72:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "5469:72:1"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "5562:9:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "5573:2:1",
                  "type": "",
                  "value": "96"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "5558:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "5558:18:1"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "5582:4:1"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "5588:9:1"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "5578:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "5578:20:1"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "5551:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "5551:48:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "5551:48:1"
          }, {
            "nodeType": "YulAssignment",
            "src": "5608:84:1",
            "value": {
              "arguments": [{
                "name": "value3",
                "nodeType": "YulIdentifier",
                "src": "5678:6:1"
              }, {
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "5687:4:1"
              }],
              "functionName": {
                "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "5616:61:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "5616:76:1"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "5608:4:1"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_bytes32_t_bytes_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_bytes32_t_bytes_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "5065:9:1",
          "type": ""
        }, {
          "name": "value3",
          "nodeType": "YulTypedName",
          "src": "5077:6:1",
          "type": ""
        }, {
          "name": "value2",
          "nodeType": "YulTypedName",
          "src": "5085:6:1",
          "type": ""
        }, {
          "name": "value1",
          "nodeType": "YulTypedName",
          "src": "5093:6:1",
          "type": ""
        }, {
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "5101:6:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "5112:4:1",
          "type": ""
        }],
        "src": "4877:822:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "5748:79:1",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "5805:16:1",
              "statements": [{
                "expression": {
                  "arguments": [{
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "5814:1:1",
                    "type": "",
                    "value": "0"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "5817:1:1",
                    "type": "",
                    "value": "0"
                  }],
                  "functionName": {
                    "name": "revert",
                    "nodeType": "YulIdentifier",
                    "src": "5807:6:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "5807:12:1"
                },
                "nodeType": "YulExpressionStatement",
                "src": "5807:12:1"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "5771:5:1"
                }, {
                  "arguments": [{
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "5796:5:1"
                  }],
                  "functionName": {
                    "name": "cleanup_t_bytes32",
                    "nodeType": "YulIdentifier",
                    "src": "5778:17:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "5778:24:1"
                }],
                "functionName": {
                  "name": "eq",
                  "nodeType": "YulIdentifier",
                  "src": "5768:2:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "5768:35:1"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "5761:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "5761:43:1"
            },
            "nodeType": "YulIf",
            "src": "5758:63:1"
          }]
        },
        "name": "validator_revert_t_bytes32",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "5741:5:1",
          "type": ""
        }],
        "src": "5705:122:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "5885:87:1",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "5895:29:1",
            "value": {
              "arguments": [{
                "name": "offset",
                "nodeType": "YulIdentifier",
                "src": "5917:6:1"
              }],
              "functionName": {
                "name": "calldataload",
                "nodeType": "YulIdentifier",
                "src": "5904:12:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "5904:20:1"
            },
            "variableNames": [{
              "name": "value",
              "nodeType": "YulIdentifier",
              "src": "5895:5:1"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "5960:5:1"
              }],
              "functionName": {
                "name": "validator_revert_t_bytes32",
                "nodeType": "YulIdentifier",
                "src": "5933:26:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "5933:33:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "5933:33:1"
          }]
        },
        "name": "abi_decode_t_bytes32",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "offset",
          "nodeType": "YulTypedName",
          "src": "5863:6:1",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "5871:3:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "5879:5:1",
          "type": ""
        }],
        "src": "5833:139:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "6044:241:1",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "6149:22:1",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x41",
                    "nodeType": "YulIdentifier",
                    "src": "6151:16:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "6151:18:1"
                },
                "nodeType": "YulExpressionStatement",
                "src": "6151:18:1"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "6121:6:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "6129:18:1",
                "type": "",
                "value": "0xffffffffffffffff"
              }],
              "functionName": {
                "name": "gt",
                "nodeType": "YulIdentifier",
                "src": "6118:2:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "6118:30:1"
            },
            "nodeType": "YulIf",
            "src": "6115:56:1"
          }, {
            "nodeType": "YulAssignment",
            "src": "6181:37:1",
            "value": {
              "arguments": [{
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "6211:6:1"
              }],
              "functionName": {
                "name": "round_up_to_mul_of_32",
                "nodeType": "YulIdentifier",
                "src": "6189:21:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "6189:29:1"
            },
            "variableNames": [{
              "name": "size",
              "nodeType": "YulIdentifier",
              "src": "6181:4:1"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "6255:23:1",
            "value": {
              "arguments": [{
                "name": "size",
                "nodeType": "YulIdentifier",
                "src": "6267:4:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "6273:4:1",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "6263:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "6263:15:1"
            },
            "variableNames": [{
              "name": "size",
              "nodeType": "YulIdentifier",
              "src": "6255:4:1"
            }]
          }]
        },
        "name": "array_allocation_size_t_bytes_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "6028:6:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "size",
          "nodeType": "YulTypedName",
          "src": "6039:4:1",
          "type": ""
        }],
        "src": "5978:307:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "6374:327:1",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "6384:74:1",
            "value": {
              "arguments": [{
                "arguments": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "6450:6:1"
                }],
                "functionName": {
                  "name": "array_allocation_size_t_bytes_memory_ptr",
                  "nodeType": "YulIdentifier",
                  "src": "6409:40:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "6409:48:1"
              }],
              "functionName": {
                "name": "allocate_memory",
                "nodeType": "YulIdentifier",
                "src": "6393:15:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "6393:65:1"
            },
            "variableNames": [{
              "name": "array",
              "nodeType": "YulIdentifier",
              "src": "6384:5:1"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "array",
                "nodeType": "YulIdentifier",
                "src": "6474:5:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "6481:6:1"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "6467:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "6467:21:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "6467:21:1"
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "6497:27:1",
            "value": {
              "arguments": [{
                "name": "array",
                "nodeType": "YulIdentifier",
                "src": "6512:5:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "6519:4:1",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "6508:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "6508:16:1"
            },
            "variables": [{
              "name": "dst",
              "nodeType": "YulTypedName",
              "src": "6501:3:1",
              "type": ""
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "6562:83:1",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                    "nodeType": "YulIdentifier",
                    "src": "6564:77:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "6564:79:1"
                },
                "nodeType": "YulExpressionStatement",
                "src": "6564:79:1"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "src",
                  "nodeType": "YulIdentifier",
                  "src": "6543:3:1"
                }, {
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "6548:6:1"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "6539:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "6539:16:1"
              }, {
                "name": "end",
                "nodeType": "YulIdentifier",
                "src": "6557:3:1"
              }],
              "functionName": {
                "name": "gt",
                "nodeType": "YulIdentifier",
                "src": "6536:2:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "6536:25:1"
            },
            "nodeType": "YulIf",
            "src": "6533:112:1"
          }, {
            "expression": {
              "arguments": [{
                "name": "src",
                "nodeType": "YulIdentifier",
                "src": "6678:3:1"
              }, {
                "name": "dst",
                "nodeType": "YulIdentifier",
                "src": "6683:3:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "6688:6:1"
              }],
              "functionName": {
                "name": "copy_calldata_to_memory",
                "nodeType": "YulIdentifier",
                "src": "6654:23:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "6654:41:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "6654:41:1"
          }]
        },
        "name": "abi_decode_available_length_t_bytes_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "src",
          "nodeType": "YulTypedName",
          "src": "6347:3:1",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "6352:6:1",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "6360:3:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "array",
          "nodeType": "YulTypedName",
          "src": "6368:5:1",
          "type": ""
        }],
        "src": "6291:410:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "6781:277:1",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "6830:83:1",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                    "nodeType": "YulIdentifier",
                    "src": "6832:77:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "6832:79:1"
                },
                "nodeType": "YulExpressionStatement",
                "src": "6832:79:1"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "arguments": [{
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "6809:6:1"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "6817:4:1",
                    "type": "",
                    "value": "0x1f"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "6805:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "6805:17:1"
                }, {
                  "name": "end",
                  "nodeType": "YulIdentifier",
                  "src": "6824:3:1"
                }],
                "functionName": {
                  "name": "slt",
                  "nodeType": "YulIdentifier",
                  "src": "6801:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "6801:27:1"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "6794:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "6794:35:1"
            },
            "nodeType": "YulIf",
            "src": "6791:122:1"
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "6922:34:1",
            "value": {
              "arguments": [{
                "name": "offset",
                "nodeType": "YulIdentifier",
                "src": "6949:6:1"
              }],
              "functionName": {
                "name": "calldataload",
                "nodeType": "YulIdentifier",
                "src": "6936:12:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "6936:20:1"
            },
            "variables": [{
              "name": "length",
              "nodeType": "YulTypedName",
              "src": "6926:6:1",
              "type": ""
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "6965:87:1",
            "value": {
              "arguments": [{
                "arguments": [{
                  "name": "offset",
                  "nodeType": "YulIdentifier",
                  "src": "7025:6:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "7033:4:1",
                  "type": "",
                  "value": "0x20"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "7021:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "7021:17:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "7040:6:1"
              }, {
                "name": "end",
                "nodeType": "YulIdentifier",
                "src": "7048:3:1"
              }],
              "functionName": {
                "name": "abi_decode_available_length_t_bytes_memory_ptr",
                "nodeType": "YulIdentifier",
                "src": "6974:46:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "6974:78:1"
            },
            "variableNames": [{
              "name": "array",
              "nodeType": "YulIdentifier",
              "src": "6965:5:1"
            }]
          }]
        },
        "name": "abi_decode_t_bytes_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "offset",
          "nodeType": "YulTypedName",
          "src": "6759:6:1",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "6767:3:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "array",
          "nodeType": "YulTypedName",
          "src": "6775:5:1",
          "type": ""
        }],
        "src": "6720:338:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "7237:1456:1",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "7284:83:1",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulIdentifier",
                    "src": "7286:77:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "7286:79:1"
                },
                "nodeType": "YulExpressionStatement",
                "src": "7286:79:1"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "7258:7:1"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "7267:9:1"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "7254:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "7254:23:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "7279:3:1",
                "type": "",
                "value": "160"
              }],
              "functionName": {
                "name": "slt",
                "nodeType": "YulIdentifier",
                "src": "7250:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "7250:33:1"
            },
            "nodeType": "YulIf",
            "src": "7247:120:1"
          }, {
            "nodeType": "YulBlock",
            "src": "7377:287:1",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "7392:45:1",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "7423:9:1"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "7434:1:1",
                    "type": "",
                    "value": "0"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "7419:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "7419:17:1"
                }],
                "functionName": {
                  "name": "calldataload",
                  "nodeType": "YulIdentifier",
                  "src": "7406:12:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "7406:31:1"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "7396:6:1",
                "type": ""
              }]
            }, {
              "body": {
                "nodeType": "YulBlock",
                "src": "7484:83:1",
                "statements": [{
                  "expression": {
                    "arguments": [],
                    "functionName": {
                      "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      "nodeType": "YulIdentifier",
                      "src": "7486:77:1"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7486:79:1"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "7486:79:1"
                }]
              },
              "condition": {
                "arguments": [{
                  "name": "offset",
                  "nodeType": "YulIdentifier",
                  "src": "7456:6:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "7464:18:1",
                  "type": "",
                  "value": "0xffffffffffffffff"
                }],
                "functionName": {
                  "name": "gt",
                  "nodeType": "YulIdentifier",
                  "src": "7453:2:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "7453:30:1"
              },
              "nodeType": "YulIf",
              "src": "7450:117:1"
            }, {
              "nodeType": "YulAssignment",
              "src": "7581:73:1",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "7626:9:1"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "7637:6:1"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "7622:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "7622:22:1"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "7646:7:1"
                }],
                "functionName": {
                  "name": "abi_decode_t_string_memory_ptr",
                  "nodeType": "YulIdentifier",
                  "src": "7591:30:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "7591:63:1"
              },
              "variableNames": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "7581:6:1"
              }]
            }]
          }, {
            "nodeType": "YulBlock",
            "src": "7674:288:1",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "7689:46:1",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "7720:9:1"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "7731:2:1",
                    "type": "",
                    "value": "32"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "7716:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "7716:18:1"
                }],
                "functionName": {
                  "name": "calldataload",
                  "nodeType": "YulIdentifier",
                  "src": "7703:12:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "7703:32:1"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "7693:6:1",
                "type": ""
              }]
            }, {
              "body": {
                "nodeType": "YulBlock",
                "src": "7782:83:1",
                "statements": [{
                  "expression": {
                    "arguments": [],
                    "functionName": {
                      "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      "nodeType": "YulIdentifier",
                      "src": "7784:77:1"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "7784:79:1"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "7784:79:1"
                }]
              },
              "condition": {
                "arguments": [{
                  "name": "offset",
                  "nodeType": "YulIdentifier",
                  "src": "7754:6:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "7762:18:1",
                  "type": "",
                  "value": "0xffffffffffffffff"
                }],
                "functionName": {
                  "name": "gt",
                  "nodeType": "YulIdentifier",
                  "src": "7751:2:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "7751:30:1"
              },
              "nodeType": "YulIf",
              "src": "7748:117:1"
            }, {
              "nodeType": "YulAssignment",
              "src": "7879:73:1",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "7924:9:1"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "7935:6:1"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "7920:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "7920:22:1"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "7944:7:1"
                }],
                "functionName": {
                  "name": "abi_decode_t_string_memory_ptr",
                  "nodeType": "YulIdentifier",
                  "src": "7889:30:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "7889:63:1"
              },
              "variableNames": [{
                "name": "value1",
                "nodeType": "YulIdentifier",
                "src": "7879:6:1"
              }]
            }]
          }, {
            "nodeType": "YulBlock",
            "src": "7972:288:1",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "7987:46:1",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "8018:9:1"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "8029:2:1",
                    "type": "",
                    "value": "64"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "8014:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "8014:18:1"
                }],
                "functionName": {
                  "name": "calldataload",
                  "nodeType": "YulIdentifier",
                  "src": "8001:12:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "8001:32:1"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "7991:6:1",
                "type": ""
              }]
            }, {
              "body": {
                "nodeType": "YulBlock",
                "src": "8080:83:1",
                "statements": [{
                  "expression": {
                    "arguments": [],
                    "functionName": {
                      "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      "nodeType": "YulIdentifier",
                      "src": "8082:77:1"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8082:79:1"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8082:79:1"
                }]
              },
              "condition": {
                "arguments": [{
                  "name": "offset",
                  "nodeType": "YulIdentifier",
                  "src": "8052:6:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "8060:18:1",
                  "type": "",
                  "value": "0xffffffffffffffff"
                }],
                "functionName": {
                  "name": "gt",
                  "nodeType": "YulIdentifier",
                  "src": "8049:2:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "8049:30:1"
              },
              "nodeType": "YulIf",
              "src": "8046:117:1"
            }, {
              "nodeType": "YulAssignment",
              "src": "8177:73:1",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "8222:9:1"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "8233:6:1"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "8218:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "8218:22:1"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "8242:7:1"
                }],
                "functionName": {
                  "name": "abi_decode_t_string_memory_ptr",
                  "nodeType": "YulIdentifier",
                  "src": "8187:30:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "8187:63:1"
              },
              "variableNames": [{
                "name": "value2",
                "nodeType": "YulIdentifier",
                "src": "8177:6:1"
              }]
            }]
          }, {
            "nodeType": "YulBlock",
            "src": "8270:118:1",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "8285:16:1",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "8299:2:1",
                "type": "",
                "value": "96"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "8289:6:1",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "8315:63:1",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "8350:9:1"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "8361:6:1"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "8346:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "8346:22:1"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "8370:7:1"
                }],
                "functionName": {
                  "name": "abi_decode_t_bytes32",
                  "nodeType": "YulIdentifier",
                  "src": "8325:20:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "8325:53:1"
              },
              "variableNames": [{
                "name": "value3",
                "nodeType": "YulIdentifier",
                "src": "8315:6:1"
              }]
            }]
          }, {
            "nodeType": "YulBlock",
            "src": "8398:288:1",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "8413:47:1",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "8444:9:1"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "8455:3:1",
                    "type": "",
                    "value": "128"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "8440:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "8440:19:1"
                }],
                "functionName": {
                  "name": "calldataload",
                  "nodeType": "YulIdentifier",
                  "src": "8427:12:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "8427:33:1"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "8417:6:1",
                "type": ""
              }]
            }, {
              "body": {
                "nodeType": "YulBlock",
                "src": "8507:83:1",
                "statements": [{
                  "expression": {
                    "arguments": [],
                    "functionName": {
                      "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      "nodeType": "YulIdentifier",
                      "src": "8509:77:1"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "8509:79:1"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "8509:79:1"
                }]
              },
              "condition": {
                "arguments": [{
                  "name": "offset",
                  "nodeType": "YulIdentifier",
                  "src": "8479:6:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "8487:18:1",
                  "type": "",
                  "value": "0xffffffffffffffff"
                }],
                "functionName": {
                  "name": "gt",
                  "nodeType": "YulIdentifier",
                  "src": "8476:2:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "8476:30:1"
              },
              "nodeType": "YulIf",
              "src": "8473:117:1"
            }, {
              "nodeType": "YulAssignment",
              "src": "8604:72:1",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "8648:9:1"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "8659:6:1"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "8644:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "8644:22:1"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "8668:7:1"
                }],
                "functionName": {
                  "name": "abi_decode_t_bytes_memory_ptr",
                  "nodeType": "YulIdentifier",
                  "src": "8614:29:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "8614:62:1"
              },
              "variableNames": [{
                "name": "value4",
                "nodeType": "YulIdentifier",
                "src": "8604:6:1"
              }]
            }]
          }]
        },
        "name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_bytes32t_bytes_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "7175:9:1",
          "type": ""
        }, {
          "name": "dataEnd",
          "nodeType": "YulTypedName",
          "src": "7186:7:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "7198:6:1",
          "type": ""
        }, {
          "name": "value1",
          "nodeType": "YulTypedName",
          "src": "7206:6:1",
          "type": ""
        }, {
          "name": "value2",
          "nodeType": "YulTypedName",
          "src": "7214:6:1",
          "type": ""
        }, {
          "name": "value3",
          "nodeType": "YulTypedName",
          "src": "7222:6:1",
          "type": ""
        }, {
          "name": "value4",
          "nodeType": "YulTypedName",
          "src": "7230:6:1",
          "type": ""
        }],
        "src": "7064:1629:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "8727:152:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "8744:1:1",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "8747:77:1",
                "type": "",
                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "8737:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "8737:88:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "8737:88:1"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "8841:1:1",
                "type": "",
                "value": "4"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "8844:4:1",
                "type": "",
                "value": "0x22"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "8834:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "8834:15:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "8834:15:1"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "8865:1:1",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "8868:4:1",
                "type": "",
                "value": "0x24"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "8858:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "8858:15:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "8858:15:1"
          }]
        },
        "name": "panic_error_0x22",
        "nodeType": "YulFunctionDefinition",
        "src": "8699:180:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "8936:269:1",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "8946:22:1",
            "value": {
              "arguments": [{
                "name": "data",
                "nodeType": "YulIdentifier",
                "src": "8960:4:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "8966:1:1",
                "type": "",
                "value": "2"
              }],
              "functionName": {
                "name": "div",
                "nodeType": "YulIdentifier",
                "src": "8956:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "8956:12:1"
            },
            "variableNames": [{
              "name": "length",
              "nodeType": "YulIdentifier",
              "src": "8946:6:1"
            }]
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "8977:38:1",
            "value": {
              "arguments": [{
                "name": "data",
                "nodeType": "YulIdentifier",
                "src": "9007:4:1"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "9013:1:1",
                "type": "",
                "value": "1"
              }],
              "functionName": {
                "name": "and",
                "nodeType": "YulIdentifier",
                "src": "9003:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "9003:12:1"
            },
            "variables": [{
              "name": "outOfPlaceEncoding",
              "nodeType": "YulTypedName",
              "src": "8981:18:1",
              "type": ""
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "9054:51:1",
              "statements": [{
                "nodeType": "YulAssignment",
                "src": "9068:27:1",
                "value": {
                  "arguments": [{
                    "name": "length",
                    "nodeType": "YulIdentifier",
                    "src": "9082:6:1"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "9090:4:1",
                    "type": "",
                    "value": "0x7f"
                  }],
                  "functionName": {
                    "name": "and",
                    "nodeType": "YulIdentifier",
                    "src": "9078:3:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "9078:17:1"
                },
                "variableNames": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "9068:6:1"
                }]
              }]
            },
            "condition": {
              "arguments": [{
                "name": "outOfPlaceEncoding",
                "nodeType": "YulIdentifier",
                "src": "9034:18:1"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "9027:6:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "9027:26:1"
            },
            "nodeType": "YulIf",
            "src": "9024:81:1"
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "9157:42:1",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x22",
                    "nodeType": "YulIdentifier",
                    "src": "9171:16:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "9171:18:1"
                },
                "nodeType": "YulExpressionStatement",
                "src": "9171:18:1"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "outOfPlaceEncoding",
                "nodeType": "YulIdentifier",
                "src": "9121:18:1"
              }, {
                "arguments": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "9144:6:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "9152:2:1",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "lt",
                  "nodeType": "YulIdentifier",
                  "src": "9141:2:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "9141:14:1"
              }],
              "functionName": {
                "name": "eq",
                "nodeType": "YulIdentifier",
                "src": "9118:2:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "9118:38:1"
            },
            "nodeType": "YulIf",
            "src": "9115:84:1"
          }]
        },
        "name": "extract_byte_array_length",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "data",
          "nodeType": "YulTypedName",
          "src": "8920:4:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "8929:6:1",
          "type": ""
        }],
        "src": "8885:320:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "9325:34:1",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "9335:18:1",
            "value": {
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "9350:3:1"
            },
            "variableNames": [{
              "name": "updated_pos",
              "nodeType": "YulIdentifier",
              "src": "9335:11:1"
            }]
          }]
        },
        "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "9297:3:1",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "9302:6:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "updated_pos",
          "nodeType": "YulTypedName",
          "src": "9313:11:1",
          "type": ""
        }],
        "src": "9211:148:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "9475:267:1",
          "statements": [{
            "nodeType": "YulVariableDeclaration",
            "src": "9485:53:1",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "9532:5:1"
              }],
              "functionName": {
                "name": "array_length_t_string_memory_ptr",
                "nodeType": "YulIdentifier",
                "src": "9499:32:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "9499:39:1"
            },
            "variables": [{
              "name": "length",
              "nodeType": "YulTypedName",
              "src": "9489:6:1",
              "type": ""
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "9547:96:1",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "9631:3:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "9636:6:1"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                "nodeType": "YulIdentifier",
                "src": "9554:76:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "9554:89:1"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "9547:3:1"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "9678:5:1"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "9685:4:1",
                  "type": "",
                  "value": "0x20"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "9674:3:1"
                },
                "nodeType": "YulFunctionCall",
                "src": "9674:16:1"
              }, {
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "9692:3:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "9697:6:1"
              }],
              "functionName": {
                "name": "copy_memory_to_memory",
                "nodeType": "YulIdentifier",
                "src": "9652:21:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "9652:52:1"
            },
            "nodeType": "YulExpressionStatement",
            "src": "9652:52:1"
          }, {
            "nodeType": "YulAssignment",
            "src": "9713:23:1",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "9724:3:1"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "9729:6:1"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "9720:3:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "9720:16:1"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "9713:3:1"
            }]
          }]
        },
        "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "9456:5:1",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "9463:3:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "9471:3:1",
          "type": ""
        }],
        "src": "9365:377:1"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "9884:139:1",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "9895:102:1",
            "value": {
              "arguments": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "9984:6:1"
              }, {
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "9993:3:1"
              }],
              "functionName": {
                "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                "nodeType": "YulIdentifier",
                "src": "9902:81:1"
              },
              "nodeType": "YulFunctionCall",
              "src": "9902:95:1"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "9895:3:1"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "10007:10:1",
            "value": {
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "10014:3:1"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "10007:3:1"
            }]
          }]
        },
        "name": "abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "9863:3:1",
          "type": ""
        }, {
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "9869:6:1",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "9880:3:1",
          "type": ""
        }],
        "src": "9748:275:1"
      }]
    },
    "contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_bytes32_t_bytes_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_bytes32_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n}\n",
    "id": 1,
    "language": "Yul",
    "name": "#utility.yul"
  }],
  "sourceMap": "57:863:0:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "57:863:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;214:40;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;676:242;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;261:409;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;214:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;676:242::-;734:13;749;764:7;773:12;797:16;816:9;826:4;816:15;;;;;;:::i;:::-;;;;;;;;;;;;;797:34;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;849:4;:12;;;863:4;:12;;;877:4;:13;;;892:4;:18;;;841:70;;;;;;;;;676:242;;;;;:::o;261:409::-;455:19;477:150;;;;;;;;505:7;477:150;;;;535:7;477:150;;;;566:8;477:150;;;;603:13;477:150;;;455:172;;656:7;638:9;648:4;638:15;;;;;;:::i;:::-;;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;445:225;261:409;;;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:1:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:154::-;1694:6;1689:3;1684;1671:30;1756:1;1747:6;1742:3;1738:16;1731:27;1610:154;;;:::o;1770:412::-;1848:5;1873:66;1889:49;1931:6;1889:49;:::i;:::-;1873:66;:::i;:::-;1864:75;;1962:6;1955:5;1948:21;2000:4;1993:5;1989:16;2038:3;2029:6;2024:3;2020:16;2017:25;2014:112;;;2045:79;;:::i;:::-;2014:112;2135:41;2169:6;2164:3;2159;2135:41;:::i;:::-;1854:328;1770:412;;;;;:::o;2202:340::-;2258:5;2307:3;2300:4;2292:6;2288:17;2284:27;2274:122;;2315:79;;:::i;:::-;2274:122;2432:6;2419:20;2457:79;2532:3;2524:6;2517:4;2509:6;2505:17;2457:79;:::i;:::-;2448:88;;2264:278;2202:340;;;;:::o;2548:509::-;2617:6;2666:2;2654:9;2645:7;2641:23;2637:32;2634:119;;;2672:79;;:::i;:::-;2634:119;2820:1;2809:9;2805:17;2792:31;2850:18;2842:6;2839:30;2836:117;;;2872:79;;:::i;:::-;2836:117;2977:63;3032:7;3023:6;3012:9;3008:22;2977:63;:::i;:::-;2967:73;;2763:287;2548:509;;;;:::o;3063:99::-;3115:6;3149:5;3143:12;3133:22;;3063:99;;;:::o;3168:169::-;3252:11;3286:6;3281:3;3274:19;3326:4;3321:3;3317:14;3302:29;;3168:169;;;;:::o;3343:307::-;3411:1;3421:113;3435:6;3432:1;3429:13;3421:113;;;3520:1;3515:3;3511:11;3505:18;3501:1;3496:3;3492:11;3485:39;3457:2;3454:1;3450:10;3445:15;;3421:113;;;3552:6;3549:1;3546:13;3543:101;;;3632:1;3623:6;3618:3;3614:16;3607:27;3543:101;3392:258;3343:307;;;:::o;3656:364::-;3744:3;3772:39;3805:5;3772:39;:::i;:::-;3827:71;3891:6;3886:3;3827:71;:::i;:::-;3820:78;;3907:52;3952:6;3947:3;3940:4;3933:5;3929:16;3907:52;:::i;:::-;3984:29;4006:6;3984:29;:::i;:::-;3979:3;3975:39;3968:46;;3748:272;3656:364;;;;:::o;4026:77::-;4063:7;4092:5;4081:16;;4026:77;;;:::o;4109:118::-;4196:24;4214:5;4196:24;:::i;:::-;4191:3;4184:37;4109:118;;:::o;4233:98::-;4284:6;4318:5;4312:12;4302:22;;4233:98;;;:::o;4337:168::-;4420:11;4454:6;4449:3;4442:19;4494:4;4489:3;4485:14;4470:29;;4337:168;;;;:::o;4511:360::-;4597:3;4625:38;4657:5;4625:38;:::i;:::-;4679:70;4742:6;4737:3;4679:70;:::i;:::-;4672:77;;4758:52;4803:6;4798:3;4791:4;4784:5;4780:16;4758:52;:::i;:::-;4835:29;4857:6;4835:29;:::i;:::-;4830:3;4826:39;4819:46;;4601:270;4511:360;;;;:::o;4877:822::-;5112:4;5150:3;5139:9;5135:19;5127:27;;5200:9;5194:4;5190:20;5186:1;5175:9;5171:17;5164:47;5228:78;5301:4;5292:6;5228:78;:::i;:::-;5220:86;;5353:9;5347:4;5343:20;5338:2;5327:9;5323:18;5316:48;5381:78;5454:4;5445:6;5381:78;:::i;:::-;5373:86;;5469:72;5537:2;5526:9;5522:18;5513:6;5469:72;:::i;:::-;5588:9;5582:4;5578:20;5573:2;5562:9;5558:18;5551:48;5616:76;5687:4;5678:6;5616:76;:::i;:::-;5608:84;;4877:822;;;;;;;:::o;5705:122::-;5778:24;5796:5;5778:24;:::i;:::-;5771:5;5768:35;5758:63;;5817:1;5814;5807:12;5758:63;5705:122;:::o;5833:139::-;5879:5;5917:6;5904:20;5895:29;;5933:33;5960:5;5933:33;:::i;:::-;5833:139;;;;:::o;5978:307::-;6039:4;6129:18;6121:6;6118:30;6115:56;;;6151:18;;:::i;:::-;6115:56;6189:29;6211:6;6189:29;:::i;:::-;6181:37;;6273:4;6267;6263:15;6255:23;;5978:307;;;:::o;6291:410::-;6368:5;6393:65;6409:48;6450:6;6409:48;:::i;:::-;6393:65;:::i;:::-;6384:74;;6481:6;6474:5;6467:21;6519:4;6512:5;6508:16;6557:3;6548:6;6543:3;6539:16;6536:25;6533:112;;;6564:79;;:::i;:::-;6533:112;6654:41;6688:6;6683:3;6678;6654:41;:::i;:::-;6374:327;6291:410;;;;;:::o;6720:338::-;6775:5;6824:3;6817:4;6809:6;6805:17;6801:27;6791:122;;6832:79;;:::i;:::-;6791:122;6949:6;6936:20;6974:78;7048:3;7040:6;7033:4;7025:6;7021:17;6974:78;:::i;:::-;6965:87;;6781:277;6720:338;;;;:::o;7064:1629::-;7198:6;7206;7214;7222;7230;7279:3;7267:9;7258:7;7254:23;7250:33;7247:120;;;7286:79;;:::i;:::-;7247:120;7434:1;7423:9;7419:17;7406:31;7464:18;7456:6;7453:30;7450:117;;;7486:79;;:::i;:::-;7450:117;7591:63;7646:7;7637:6;7626:9;7622:22;7591:63;:::i;:::-;7581:73;;7377:287;7731:2;7720:9;7716:18;7703:32;7762:18;7754:6;7751:30;7748:117;;;7784:79;;:::i;:::-;7748:117;7889:63;7944:7;7935:6;7924:9;7920:22;7889:63;:::i;:::-;7879:73;;7674:288;8029:2;8018:9;8014:18;8001:32;8060:18;8052:6;8049:30;8046:117;;;8082:79;;:::i;:::-;8046:117;8187:63;8242:7;8233:6;8222:9;8218:22;8187:63;:::i;:::-;8177:73;;7972:288;8299:2;8325:53;8370:7;8361:6;8350:9;8346:22;8325:53;:::i;:::-;8315:63;;8270:118;8455:3;8444:9;8440:19;8427:33;8487:18;8479:6;8476:30;8473:117;;;8509:79;;:::i;:::-;8473:117;8614:62;8668:7;8659:6;8648:9;8644:22;8614:62;:::i;:::-;8604:72;;8398:288;7064:1629;;;;;;;;:::o;8699:180::-;8747:77;8744:1;8737:88;8844:4;8841:1;8834:15;8868:4;8865:1;8858:15;8885:320;8929:6;8966:1;8960:4;8956:12;8946:22;;9013:1;9007:4;9003:12;9034:18;9024:81;;9090:4;9082:6;9078:17;9068:27;;9024:81;9152:2;9144:6;9141:14;9121:18;9118:38;9115:84;;9171:18;;:::i;:::-;9115:84;8936:269;8885:320;;;:::o;9211:148::-;9313:11;9350:3;9335:18;;9211:148;;;;:::o;9365:377::-;9471:3;9499:39;9532:5;9499:39;:::i;:::-;9554:89;9636:6;9631:3;9554:89;:::i;:::-;9547:96;;9652:52;9697:6;9692:3;9685:4;9678:5;9674:16;9652:52;:::i;:::-;9729:6;9724:3;9720:16;9713:23;;9475:267;9365:377;;;;:::o;9748:275::-;9880:3;9902:95;9993:3;9984:6;9902:95;:::i;:::-;9895:102;;10014:3;10007:10;;9748:275;;;;:::o",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract OmoideStorage {\n    struct Data {\n        string message;\n        string facePic;\n        bytes32 dataHash;\n        bytes dataSignature;\n    }\n\n    mapping(string => Data) public dataStore;\n\n    function storeData(\n        string memory uuid,\n        string memory message,\n        string memory facePic,\n        bytes32 dataHash,\n        bytes memory dataSignature\n    ) public {\n        Data memory newData = Data({\n            message: message,\n            facePic: facePic,\n            dataHash: dataHash,\n            dataSignature: dataSignature\n        });\n\n        dataStore[uuid] = newData;\n    }\n\n    function getData(string memory uuid) public view returns (string memory, string memory, bytes32, bytes memory) {\n        Data memory data = dataStore[uuid];\n        return (data.message, data.facePic, data.dataHash, data.dataSignature);\n    }\n}\n",
  "sourcePath": "/home/araki/omoide/truffle/contracts/omoide.sol",
  "ast": {
    "absolutePath": "project:/contracts/omoide.sol",
    "exportedSymbols": {
      "OmoideStorage": [77]
    },
    "id": 78,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [{
      "id": 1,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "32:23:0"
    }, {
      "abstract": false,
      "baseContracts": [],
      "canonicalName": "OmoideStorage",
      "contractDependencies": [],
      "contractKind": "contract",
      "fullyImplemented": true,
      "id": 77,
      "linearizedBaseContracts": [77],
      "name": "OmoideStorage",
      "nameLocation": "66:13:0",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "canonicalName": "OmoideStorage.Data",
        "id": 10,
        "members": [{
          "constant": false,
          "id": 3,
          "mutability": "mutable",
          "name": "message",
          "nameLocation": "115:7:0",
          "nodeType": "VariableDeclaration",
          "scope": 10,
          "src": "108:14:0",
          "stateVariable": false,
          "storageLocation": "default",
          "typeDescriptions": {
            "typeIdentifier": "t_string_storage_ptr",
            "typeString": "string"
          },
          "typeName": {
            "id": 2,
            "name": "string",
            "nodeType": "ElementaryTypeName",
            "src": "108:6:0",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage_ptr",
              "typeString": "string"
            }
          },
          "visibility": "internal"
        }, {
          "constant": false,
          "id": 5,
          "mutability": "mutable",
          "name": "facePic",
          "nameLocation": "139:7:0",
          "nodeType": "VariableDeclaration",
          "scope": 10,
          "src": "132:14:0",
          "stateVariable": false,
          "storageLocation": "default",
          "typeDescriptions": {
            "typeIdentifier": "t_string_storage_ptr",
            "typeString": "string"
          },
          "typeName": {
            "id": 4,
            "name": "string",
            "nodeType": "ElementaryTypeName",
            "src": "132:6:0",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage_ptr",
              "typeString": "string"
            }
          },
          "visibility": "internal"
        }, {
          "constant": false,
          "id": 7,
          "mutability": "mutable",
          "name": "dataHash",
          "nameLocation": "164:8:0",
          "nodeType": "VariableDeclaration",
          "scope": 10,
          "src": "156:16:0",
          "stateVariable": false,
          "storageLocation": "default",
          "typeDescriptions": {
            "typeIdentifier": "t_bytes32",
            "typeString": "bytes32"
          },
          "typeName": {
            "id": 6,
            "name": "bytes32",
            "nodeType": "ElementaryTypeName",
            "src": "156:7:0",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            }
          },
          "visibility": "internal"
        }, {
          "constant": false,
          "id": 9,
          "mutability": "mutable",
          "name": "dataSignature",
          "nameLocation": "188:13:0",
          "nodeType": "VariableDeclaration",
          "scope": 10,
          "src": "182:19:0",
          "stateVariable": false,
          "storageLocation": "default",
          "typeDescriptions": {
            "typeIdentifier": "t_bytes_storage_ptr",
            "typeString": "bytes"
          },
          "typeName": {
            "id": 8,
            "name": "bytes",
            "nodeType": "ElementaryTypeName",
            "src": "182:5:0",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_storage_ptr",
              "typeString": "bytes"
            }
          },
          "visibility": "internal"
        }],
        "name": "Data",
        "nameLocation": "93:4:0",
        "nodeType": "StructDefinition",
        "scope": 77,
        "src": "86:122:0",
        "visibility": "public"
      }, {
        "constant": false,
        "functionSelector": "6a500441",
        "id": 15,
        "mutability": "mutable",
        "name": "dataStore",
        "nameLocation": "245:9:0",
        "nodeType": "VariableDeclaration",
        "scope": 77,
        "src": "214:40:0",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Data_$10_storage_$",
          "typeString": "mapping(string => struct OmoideStorage.Data)"
        },
        "typeName": {
          "id": 14,
          "keyType": {
            "id": 11,
            "name": "string",
            "nodeType": "ElementaryTypeName",
            "src": "222:6:0",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage_ptr",
              "typeString": "string"
            }
          },
          "nodeType": "Mapping",
          "src": "214:23:0",
          "typeDescriptions": {
            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Data_$10_storage_$",
            "typeString": "mapping(string => struct OmoideStorage.Data)"
          },
          "valueType": {
            "id": 13,
            "nodeType": "UserDefinedTypeName",
            "pathNode": {
              "id": 12,
              "name": "Data",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 10,
              "src": "232:4:0"
            },
            "referencedDeclaration": 10,
            "src": "232:4:0",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_Data_$10_storage_ptr",
              "typeString": "struct OmoideStorage.Data"
            }
          }
        },
        "visibility": "public"
      }, {
        "body": {
          "id": 44,
          "nodeType": "Block",
          "src": "445:225:0",
          "statements": [{
            "assignments": [30],
            "declarations": [{
              "constant": false,
              "id": 30,
              "mutability": "mutable",
              "name": "newData",
              "nameLocation": "467:7:0",
              "nodeType": "VariableDeclaration",
              "scope": 44,
              "src": "455:19:0",
              "stateVariable": false,
              "storageLocation": "memory",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Data_$10_memory_ptr",
                "typeString": "struct OmoideStorage.Data"
              },
              "typeName": {
                "id": 29,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 28,
                  "name": "Data",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10,
                  "src": "455:4:0"
                },
                "referencedDeclaration": 10,
                "src": "455:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Data_$10_storage_ptr",
                  "typeString": "struct OmoideStorage.Data"
                }
              },
              "visibility": "internal"
            }],
            "id": 37,
            "initialValue": {
              "arguments": [{
                "id": 32,
                "name": "message",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 19,
                "src": "505:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              }, {
                "id": 33,
                "name": "facePic",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 21,
                "src": "535:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              }, {
                "id": 34,
                "name": "dataHash",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 23,
                "src": "566:8:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }, {
                "id": 35,
                "name": "dataSignature",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 25,
                "src": "603:13:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }, {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }, {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }, {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }],
                "id": 31,
                "name": "Data",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 10,
                "src": "477:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_struct$_Data_$10_storage_ptr_$",
                  "typeString": "type(struct OmoideStorage.Data storage pointer)"
                }
              },
              "id": 36,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "structConstructorCall",
              "lValueRequested": false,
              "names": ["message", "facePic", "dataHash", "dataSignature"],
              "nodeType": "FunctionCall",
              "src": "477:150:0",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Data_$10_memory_ptr",
                "typeString": "struct OmoideStorage.Data memory"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "455:172:0"
          }, {
            "expression": {
              "id": 42,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 38,
                  "name": "dataStore",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 15,
                  "src": "638:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Data_$10_storage_$",
                    "typeString": "mapping(string memory => struct OmoideStorage.Data storage ref)"
                  }
                },
                "id": 40,
                "indexExpression": {
                  "id": 39,
                  "name": "uuid",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 17,
                  "src": "648:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string memory"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "638:15:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Data_$10_storage",
                  "typeString": "struct OmoideStorage.Data storage ref"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 41,
                "name": "newData",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 30,
                "src": "656:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Data_$10_memory_ptr",
                  "typeString": "struct OmoideStorage.Data memory"
                }
              },
              "src": "638:25:0",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Data_$10_storage",
                "typeString": "struct OmoideStorage.Data storage ref"
              }
            },
            "id": 43,
            "nodeType": "ExpressionStatement",
            "src": "638:25:0"
          }]
        },
        "functionSelector": "ce2d4107",
        "id": 45,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "storeData",
        "nameLocation": "270:9:0",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 26,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 17,
            "mutability": "mutable",
            "name": "uuid",
            "nameLocation": "303:4:0",
            "nodeType": "VariableDeclaration",
            "scope": 45,
            "src": "289:18:0",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 16,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "289:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 19,
            "mutability": "mutable",
            "name": "message",
            "nameLocation": "331:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 45,
            "src": "317:21:0",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 18,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "317:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 21,
            "mutability": "mutable",
            "name": "facePic",
            "nameLocation": "362:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 45,
            "src": "348:21:0",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 20,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "348:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 23,
            "mutability": "mutable",
            "name": "dataHash",
            "nameLocation": "387:8:0",
            "nodeType": "VariableDeclaration",
            "scope": 45,
            "src": "379:16:0",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 22,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "379:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 25,
            "mutability": "mutable",
            "name": "dataSignature",
            "nameLocation": "418:13:0",
            "nodeType": "VariableDeclaration",
            "scope": 45,
            "src": "405:26:0",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 24,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "405:5:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "279:158:0"
        },
        "returnParameters": {
          "id": 27,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "445:0:0"
        },
        "scope": 77,
        "src": "261:409:0",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "public"
      }, {
        "body": {
          "id": 75,
          "nodeType": "Block",
          "src": "787:131:0",
          "statements": [{
            "assignments": [60],
            "declarations": [{
              "constant": false,
              "id": 60,
              "mutability": "mutable",
              "name": "data",
              "nameLocation": "809:4:0",
              "nodeType": "VariableDeclaration",
              "scope": 75,
              "src": "797:16:0",
              "stateVariable": false,
              "storageLocation": "memory",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Data_$10_memory_ptr",
                "typeString": "struct OmoideStorage.Data"
              },
              "typeName": {
                "id": 59,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 58,
                  "name": "Data",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10,
                  "src": "797:4:0"
                },
                "referencedDeclaration": 10,
                "src": "797:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Data_$10_storage_ptr",
                  "typeString": "struct OmoideStorage.Data"
                }
              },
              "visibility": "internal"
            }],
            "id": 64,
            "initialValue": {
              "baseExpression": {
                "id": 61,
                "name": "dataStore",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 15,
                "src": "816:9:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_Data_$10_storage_$",
                  "typeString": "mapping(string memory => struct OmoideStorage.Data storage ref)"
                }
              },
              "id": 63,
              "indexExpression": {
                "id": 62,
                "name": "uuid",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 47,
                "src": "826:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              },
              "isConstant": false,
              "isLValue": true,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "IndexAccess",
              "src": "816:15:0",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Data_$10_storage",
                "typeString": "struct OmoideStorage.Data storage ref"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "797:34:0"
          }, {
            "expression": {
              "components": [{
                "expression": {
                  "id": 65,
                  "name": "data",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 60,
                  "src": "849:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Data_$10_memory_ptr",
                    "typeString": "struct OmoideStorage.Data memory"
                  }
                },
                "id": 66,
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "message",
                "nodeType": "MemberAccess",
                "referencedDeclaration": 3,
                "src": "849:12:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              }, {
                "expression": {
                  "id": 67,
                  "name": "data",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 60,
                  "src": "863:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Data_$10_memory_ptr",
                    "typeString": "struct OmoideStorage.Data memory"
                  }
                },
                "id": 68,
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "facePic",
                "nodeType": "MemberAccess",
                "referencedDeclaration": 5,
                "src": "863:12:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              }, {
                "expression": {
                  "id": 69,
                  "name": "data",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 60,
                  "src": "877:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Data_$10_memory_ptr",
                    "typeString": "struct OmoideStorage.Data memory"
                  }
                },
                "id": 70,
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "dataHash",
                "nodeType": "MemberAccess",
                "referencedDeclaration": 7,
                "src": "877:13:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }, {
                "expression": {
                  "id": 71,
                  "name": "data",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 60,
                  "src": "892:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Data_$10_memory_ptr",
                    "typeString": "struct OmoideStorage.Data memory"
                  }
                },
                "id": 72,
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "dataSignature",
                "nodeType": "MemberAccess",
                "referencedDeclaration": 9,
                "src": "892:18:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }],
              "id": 73,
              "isConstant": false,
              "isInlineArray": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "TupleExpression",
              "src": "848:63:0",
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_bytes32_$_t_bytes_memory_ptr_$",
                "typeString": "tuple(string memory,string memory,bytes32,bytes memory)"
              }
            },
            "functionReturnParameters": 57,
            "id": 74,
            "nodeType": "Return",
            "src": "841:70:0"
          }]
        },
        "functionSelector": "ae55c888",
        "id": 76,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "getData",
        "nameLocation": "685:7:0",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 48,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 47,
            "mutability": "mutable",
            "name": "uuid",
            "nameLocation": "707:4:0",
            "nodeType": "VariableDeclaration",
            "scope": 76,
            "src": "693:18:0",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 46,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "693:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "692:20:0"
        },
        "returnParameters": {
          "id": 57,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 50,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 76,
            "src": "734:13:0",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 49,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "734:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 52,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 76,
            "src": "749:13:0",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 51,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "749:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 54,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 76,
            "src": "764:7:0",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 53,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "764:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 56,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 76,
            "src": "773:12:0",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 55,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "773:5:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "733:53:0"
        },
        "scope": 77,
        "src": "676:242:0",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "public"
      }],
      "scope": 78,
      "src": "57:863:0",
      "usedErrors": []
    }],
    "src": "32:889:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.13+commit.abaa5c0e.Emscripten.clang"
  },
  "networks": {
    "5": {
      "events": {},
      "links": {},
      "address": "0x42747984FD172a03550Ea58bEC0f91c690f794a9",
      "transactionHash": "0x67413c27b9c86422c3e2dd1ed8bd464db33a8b2737c1da8c0ba2f2c9586844b6"
    },
    "1337": {
      "events": {},
      "links": {},
      "address": "0x381dD4DB5e3c21F6Fd80CAaD868b3912fffe5e50",
      "transactionHash": "0x61f045bc1ec667c93371c03c285a15d3059706a7618e111b43274c6d4e8b01aa"
    },
    "80001": {
      "events": {},
      "links": {},
      "address": "0x33014731E74F0610aefA9318b3E6600d51fD905e",
      "transactionHash": "0x81b079df7bca79cb7a21d632b389a475ae78eb4d105a8d654ea10fac23594638"
    },
    "534353": {
      "events": {},
      "links": {},
      "address": "0x5E4eB054C5A4a1f4c2D17E5B9D301e9eE06596f7",
      "transactionHash": "0x271aaee6e968f2c417ab8de4726a9ee44ca7e1d671cd80c837a44f07ea3b04cf"
    }
  },
  "schemaVersion": "3.4.13",
  "updatedAt": "2023-05-12T20:18:56.977Z",
  "networkType": "ethereum",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
};
},{}],"node_modules/web3/dist/web3.min.js":[function(require,module,exports) {
var define;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
/*! For license information please see web3.min.js.LICENSE.txt */
!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.Web3 = t() : e.Web3 = t();
}(self, function () {
  return function () {
    var e = {
        1645: function _(e, t, r) {
          "use strict";

          var n = function n(e) {
              var t = "function" == typeof Symbol && Symbol.iterator,
                r = t && e[t],
                n = 0;
              if (r) return r.call(e);
              if (e && "number" == typeof e.length) return {
                next: function next() {
                  return e && n >= e.length && (e = void 0), {
                    value: e && e[n++],
                    done: !e
                  };
                }
              };
              throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
            },
            i = function i(e) {
              return e && e.__esModule ? e : {
                default: e
              };
            };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.chains = t._getInitializedChains = void 0;
          var o = i(r(7295)),
            a = i(r(1227)),
            s = i(r(439)),
            u = i(r(7098)),
            c = i(r(7687));
          function f(e) {
            var t,
              r,
              i = {
                1: "mainnet",
                3: "ropsten",
                4: "rinkeby",
                42: "kovan",
                5: "goerli"
              },
              f = {
                mainnet: o.default,
                ropsten: a.default,
                rinkeby: s.default,
                kovan: u.default,
                goerli: c.default
              };
            if (e) try {
              for (var d = n(e), l = d.next(); !l.done; l = d.next()) {
                var h = l.value,
                  p = h.name;
                i[h.chainId.toString()] = p, f[p] = h;
              }
            } catch (e) {
              t = {
                error: e
              };
            } finally {
              try {
                l && !l.done && (r = d.return) && r.call(d);
              } finally {
                if (t) throw t.error;
              }
            }
            return f.names = i, f;
          }
          t._getInitializedChains = f, t.chains = f();
        },
        425: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.EIPs = void 0, t.EIPs = {
            1559: r(7523),
            2315: r(3339),
            2537: r(6769),
            2565: r(7897),
            2718: r(2170),
            2929: r(8436),
            2930: r(6213),
            3198: r(5491),
            3529: r(7852),
            3541: r(1871),
            3554: r(7225),
            3675: r(8571)
          };
        },
        7002: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.hardforks = void 0, t.hardforks = [["chainstart", r(114)], ["homestead", r(2800)], ["dao", r(7197)], ["tangerineWhistle", r(2302)], ["spuriousDragon", r(716)], ["byzantium", r(6985)], ["constantinople", r(5993)], ["petersburg", r(4064)], ["istanbul", r(3166)], ["muirGlacier", r(2946)], ["berlin", r(15)], ["london", r(1250)], ["shanghai", r(5553)], ["merge", r(8648)]];
        },
        3863: function _(e, t, r) {
          "use strict";

          var _n,
            i = r(9033).Buffer,
            o = r(8847)(r(3355)),
            a = (_n = function n(e, t) {
              return _n = Object.setPrototypeOf || {
                __proto__: []
              } instanceof Array && function (e, t) {
                e.__proto__ = t;
              } || function (e, t) {
                for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
              }, _n(e, t);
            }, function (e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Class extends value " + String(t) + " is not a constructor or null");
              function r() {
                this.constructor = e;
              }
              _n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());
            }),
            _s = function s() {
              return _s = Object.assign || function (e) {
                for (var t, r = 1, n = arguments.length; r < n; r++) for (var i in t = arguments[r]) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e;
              }, _s.apply(this, arguments);
            },
            u = function u(e) {
              var t = "function" == typeof Symbol && Symbol.iterator,
                r = t && e[t],
                n = 0;
              if (r) return r.call(e);
              if (e && "number" == typeof e.length) return {
                next: function next() {
                  return e && n >= e.length && (e = void 0), {
                    value: e && e[n++],
                    done: !e
                  };
                }
              };
              throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
            };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.ConsensusAlgorithm = t.ConsensusType = t.Hardfork = t.Chain = t.CustomChain = void 0;
          var c,
            f,
            d,
            l,
            h,
            p = r(8291),
            b = r(4628),
            y = r(3062),
            m = r(1645),
            v = r(7002),
            g = r(425);
          !function (e) {
            e.PolygonMainnet = "polygon-mainnet", e.PolygonMumbai = "polygon-mumbai", e.ArbitrumRinkebyTestnet = "arbitrum-rinkeby-testnet", e.xDaiChain = "x-dai-chain";
          }(c = t.CustomChain || (t.CustomChain = {})), (h = t.Chain || (t.Chain = {}))[h.Mainnet = 1] = "Mainnet", h[h.Ropsten = 3] = "Ropsten", h[h.Rinkeby = 4] = "Rinkeby", h[h.Kovan = 42] = "Kovan", h[h.Goerli = 5] = "Goerli", function (e) {
            e.Chainstart = "chainstart", e.Homestead = "homestead", e.Dao = "dao", e.TangerineWhistle = "tangerineWhistle", e.SpuriousDragon = "spuriousDragon", e.Byzantium = "byzantium", e.Constantinople = "constantinople", e.Petersburg = "petersburg", e.Istanbul = "istanbul", e.MuirGlacier = "muirGlacier", e.Berlin = "berlin", e.London = "london", e.Shanghai = "shanghai", e.Merge = "merge";
          }(f = t.Hardfork || (t.Hardfork = {})), (l = t.ConsensusType || (t.ConsensusType = {})).ProofOfStake = "pos", l.ProofOfWork = "pow", l.ProofOfAuthority = "poa", (d = t.ConsensusAlgorithm || (t.ConsensusAlgorithm = {})).Ethash = "ethash", d.Clique = "clique", d.Casper = "casper";
          var w = function (e) {
            function t(t) {
              var r,
                n,
                i,
                o,
                a = e.call(this) || this;
              a._supportedHardforks = [], a._eips = [], a._customChains = null !== (i = t.customChains) && void 0 !== i ? i : [], a._chainParams = a.setChain(t.chain), a.DEFAULT_HARDFORK = null !== (o = a._chainParams.defaultHardfork) && void 0 !== o ? o : f.Istanbul;
              try {
                for (var s = u(a._chainParams.hardforks), c = s.next(); !c.done; c = s.next()) {
                  var d = c.value;
                  d.forkHash || (d.forkHash = a._calcForkHash(d.name));
                }
              } catch (e) {
                r = {
                  error: e
                };
              } finally {
                try {
                  c && !c.done && (n = s.return) && n.call(s);
                } finally {
                  if (r) throw r.error;
                }
              }
              return a._hardfork = a.DEFAULT_HARDFORK, t.supportedHardforks && (a._supportedHardforks = t.supportedHardforks), t.hardfork && a.setHardfork(t.hardfork), t.eips && a.setEIPs(t.eips), a;
            }
            return a(t, e), t.custom = function (e, r) {
              var n;
              void 0 === r && (r = {});
              var i = null !== (n = r.baseChain) && void 0 !== n ? n : "mainnet",
                o = _s({}, t._getChainParams(i));
              if (o.name = "custom-chain", "string" != typeof e) return new t(_s({
                chain: _s(_s({}, o), e)
              }, r));
              if (e === c.PolygonMainnet) return t.custom({
                name: c.PolygonMainnet,
                chainId: 137,
                networkId: 137
              });
              if (e === c.PolygonMumbai) return t.custom({
                name: c.PolygonMumbai,
                chainId: 80001,
                networkId: 80001
              });
              if (e === c.ArbitrumRinkebyTestnet) return t.custom({
                name: c.ArbitrumRinkebyTestnet,
                chainId: 421611,
                networkId: 421611
              });
              if (e === c.xDaiChain) return t.custom({
                name: c.xDaiChain,
                chainId: 100,
                networkId: 100
              });
              throw new Error("Custom chain " + e + " not supported");
            }, t.forCustomChain = function (e, r, n, i) {
              var o = t._getChainParams(e);
              return new t({
                chain: _s(_s({}, o), r),
                hardfork: n,
                supportedHardforks: i
              });
            }, t.isSupportedChainId = function (e) {
              var t = (0, m._getInitializedChains)();
              return Boolean(t.names[e.toString()]);
            }, t._getChainParams = function (e, t) {
              var r = (0, m._getInitializedChains)(t);
              if ("number" == typeof e || y.BN.isBN(e)) {
                if (e = e.toString(), r.names[e]) return r[r.names[e]];
                throw new Error("Chain with ID " + e + " not supported");
              }
              if (r[e]) return r[e];
              throw new Error("Chain with name " + e + " not supported");
            }, t.prototype.setChain = function (e) {
              var r, n;
              if ("number" == typeof e || "string" == typeof e || y.BN.isBN(e)) {
                var i;
                i = this._customChains && this._customChains.length > 0 && Array.isArray(this._customChains[0]) ? this._customChains.map(function (e) {
                  return e[0];
                }) : this._customChains, this._chainParams = t._getChainParams(e, i);
              } else {
                if ("object" !== (0, o.default)(e)) throw new Error("Wrong input format");
                if (this._customChains.length > 0) throw new Error("Chain must be a string, number, or BN when initialized with customChains passed in");
                try {
                  for (var a = u(["networkId", "genesis", "hardforks", "bootstrapNodes"]), s = a.next(); !s.done; s = a.next()) {
                    var c = s.value;
                    if (void 0 === e[c]) throw new Error("Missing required chain parameter: " + c);
                  }
                } catch (e) {
                  r = {
                    error: e
                  };
                } finally {
                  try {
                    s && !s.done && (n = a.return) && n.call(a);
                  } finally {
                    if (r) throw r.error;
                  }
                }
                this._chainParams = e;
              }
              return this._chainParams;
            }, t.prototype.setHardfork = function (e) {
              var t, r;
              if (!this._isSupportedHardfork(e)) throw new Error("Hardfork " + e + " not set as supported in supportedHardforks");
              var n = !1;
              try {
                for (var i = u(v.hardforks), o = i.next(); !o.done; o = i.next()) o.value[0] === e && (this._hardfork !== e && (this._hardfork = e, this.emit("hardforkChanged", e)), n = !0);
              } catch (e) {
                t = {
                  error: e
                };
              } finally {
                try {
                  o && !o.done && (r = i.return) && r.call(i);
                } finally {
                  if (t) throw t.error;
                }
              }
              if (!n) throw new Error("Hardfork with name " + e + " not supported");
            }, t.prototype.getHardforkByBlockNumber = function (e, t) {
              var r, n;
              e = (0, y.toType)(e, y.TypeOutput.BN), t = t ? (0, y.toType)(t, y.TypeOutput.BN) : void 0;
              var i,
                o,
                a,
                s = f.Chainstart;
              try {
                for (var c = u(this.hardforks()), d = c.next(); !d.done; d = c.next()) {
                  var l = d.value;
                  if (null !== l.block) e.gte(new y.BN(l.block)) && (s = l.name), t && l.td && (t.gten(l.td) ? i = l.name : o = a), a = l.name;else if (t && l.td && t.gten(l.td)) return l.name;
                }
              } catch (e) {
                r = {
                  error: e
                };
              } finally {
                try {
                  d && !d.done && (n = c.return) && n.call(c);
                } finally {
                  if (r) throw r.error;
                }
              }
              if (t) {
                var h = "block number: " + e + " (-> " + s + "), ";
                if (i && !this.hardforkGteHardfork(s, i)) {
                  var p = "HF determined by block number is lower than the minimum total difficulty HF";
                  throw h += "total difficulty: " + t + " (-> " + i + ")", new Error(p + ": " + h);
                }
                if (o && !this.hardforkGteHardfork(o, s)) throw p = "Maximum HF determined by total difficulty is lower than the block number HF", h += "total difficulty: " + t + " (-> " + o + ")", new Error(p + ": " + h);
              }
              return s;
            }, t.prototype.setHardforkByBlockNumber = function (e, t) {
              var r = this.getHardforkByBlockNumber(e, t);
              return this.setHardfork(r), r;
            }, t.prototype._chooseHardfork = function (e, t) {
              if (void 0 === t && (t = !0), e) {
                if (t && !this._isSupportedHardfork(e)) throw new Error("Hardfork " + e + " not set as supported in supportedHardforks");
              } else e = this._hardfork;
              return e;
            }, t.prototype._getHardfork = function (e) {
              var t,
                r,
                n = this.hardforks();
              try {
                for (var i = u(n), o = i.next(); !o.done; o = i.next()) {
                  var a = o.value;
                  if (a.name === e) return a;
                }
              } catch (e) {
                t = {
                  error: e
                };
              } finally {
                try {
                  o && !o.done && (r = i.return) && r.call(i);
                } finally {
                  if (t) throw t.error;
                }
              }
              throw new Error("Hardfork " + e + " not defined for chain " + this.chainName());
            }, t.prototype._isSupportedHardfork = function (e) {
              var t, r;
              if (!(this._supportedHardforks.length > 0)) return !0;
              try {
                for (var n = u(this._supportedHardforks), i = n.next(); !i.done; i = n.next()) if (e === i.value) return !0;
              } catch (e) {
                t = {
                  error: e
                };
              } finally {
                try {
                  i && !i.done && (r = n.return) && r.call(n);
                } finally {
                  if (t) throw t.error;
                }
              }
              return !1;
            }, t.prototype.setEIPs = function (e) {
              var t,
                r,
                n = this;
              void 0 === e && (e = []);
              var i = function i(t) {
                  if (!(t in g.EIPs)) throw new Error(t + " not supported");
                  var r = o.gteHardfork(g.EIPs[t].minimumHardfork);
                  if (!r) throw new Error(t + " cannot be activated on hardfork " + o.hardfork() + ", minimumHardfork: " + r);
                  g.EIPs[t].requiredEIPs && g.EIPs[t].requiredEIPs.forEach(function (r) {
                    if (!e.includes(r) && !n.isActivatedEIP(r)) throw new Error(t + " requires EIP " + r + ", but is not included in the EIP list");
                  });
                },
                o = this;
              try {
                for (var a = u(e), s = a.next(); !s.done; s = a.next()) i(s.value);
              } catch (e) {
                t = {
                  error: e
                };
              } finally {
                try {
                  s && !s.done && (r = a.return) && r.call(a);
                } finally {
                  if (t) throw t.error;
                }
              }
              this._eips = e;
            }, t.prototype.param = function (e, t) {
              var r,
                n,
                i = null;
              try {
                for (var o = u(this._eips), a = o.next(); !a.done; a = o.next()) {
                  var s = a.value;
                  if (null !== (i = this.paramByEIP(e, t, s))) return i;
                }
              } catch (e) {
                r = {
                  error: e
                };
              } finally {
                try {
                  a && !a.done && (n = o.return) && n.call(o);
                } finally {
                  if (r) throw r.error;
                }
              }
              return this.paramByHardfork(e, t, this._hardfork);
            }, t.prototype.paramByHardfork = function (e, t, r) {
              var n, i, o, a;
              r = this._chooseHardfork(r);
              var s = null;
              try {
                for (var c = u(v.hardforks), f = c.next(); !f.done; f = c.next()) {
                  var d = f.value;
                  if ("eips" in d[1]) {
                    var l = d[1].eips;
                    try {
                      for (var h = (o = void 0, u(l)), p = h.next(); !p.done; p = h.next()) {
                        var b = p.value,
                          y = this.paramByEIP(e, t, b);
                        s = null !== y ? y : s;
                      }
                    } catch (e) {
                      o = {
                        error: e
                      };
                    } finally {
                      try {
                        p && !p.done && (a = h.return) && a.call(h);
                      } finally {
                        if (o) throw o.error;
                      }
                    }
                  } else {
                    if (!d[1][e]) throw new Error("Topic " + e + " not defined");
                    void 0 !== d[1][e][t] && (s = d[1][e][t].v);
                  }
                  if (d[0] === r) break;
                }
              } catch (e) {
                n = {
                  error: e
                };
              } finally {
                try {
                  f && !f.done && (i = c.return) && i.call(c);
                } finally {
                  if (n) throw n.error;
                }
              }
              return s;
            }, t.prototype.paramByEIP = function (e, t, r) {
              if (!(r in g.EIPs)) throw new Error(r + " not supported");
              var n = g.EIPs[r];
              if (!(e in n)) throw new Error("Topic " + e + " not defined");
              return void 0 === n[e][t] ? null : n[e][t].v;
            }, t.prototype.paramByBlock = function (e, t, r) {
              var n = this.activeHardforks(r),
                i = n[n.length - 1].name;
              return this.paramByHardfork(e, t, i);
            }, t.prototype.isActivatedEIP = function (e) {
              var t, r;
              if (this.eips().includes(e)) return !0;
              try {
                for (var n = u(v.hardforks), i = n.next(); !i.done; i = n.next()) {
                  var o = i.value[1];
                  if (this.gteHardfork(o.name) && "eips" in o && o.eips.includes(e)) return !0;
                }
              } catch (e) {
                t = {
                  error: e
                };
              } finally {
                try {
                  i && !i.done && (r = n.return) && r.call(n);
                } finally {
                  if (t) throw t.error;
                }
              }
              return !1;
            }, t.prototype.hardforkIsActiveOnBlock = function (e, t, r) {
              var n;
              void 0 === r && (r = {}), t = (0, y.toType)(t, y.TypeOutput.BN);
              var i = null !== (n = r.onlySupported) && void 0 !== n && n;
              e = this._chooseHardfork(e, i);
              var o = this.hardforkBlockBN(e);
              return !(!o || !t.gte(o));
            }, t.prototype.activeOnBlock = function (e, t) {
              return this.hardforkIsActiveOnBlock(null, e, t);
            }, t.prototype.hardforkGteHardfork = function (e, t, r) {
              var n, i;
              void 0 === r && (r = {});
              var o,
                a = void 0 !== r.onlyActive && r.onlyActive;
              e = this._chooseHardfork(e, r.onlySupported), o = a ? this.activeHardforks(null, r) : this.hardforks();
              var s = -1,
                c = -1,
                f = 0;
              try {
                for (var d = u(o), l = d.next(); !l.done; l = d.next()) {
                  var h = l.value;
                  h.name === e && (s = f), h.name === t && (c = f), f += 1;
                }
              } catch (e) {
                n = {
                  error: e
                };
              } finally {
                try {
                  l && !l.done && (i = d.return) && i.call(d);
                } finally {
                  if (n) throw n.error;
                }
              }
              return s >= c && -1 !== c;
            }, t.prototype.gteHardfork = function (e, t) {
              return this.hardforkGteHardfork(null, e, t);
            }, t.prototype.hardforkIsActiveOnChain = function (e, t) {
              var r, n, i;
              void 0 === t && (t = {});
              var o = null !== (i = t.onlySupported) && void 0 !== i && i;
              e = this._chooseHardfork(e, o);
              try {
                for (var a = u(this.hardforks()), s = a.next(); !s.done; s = a.next()) {
                  var c = s.value;
                  if (c.name === e && null !== c.block) return !0;
                }
              } catch (e) {
                r = {
                  error: e
                };
              } finally {
                try {
                  s && !s.done && (n = a.return) && n.call(a);
                } finally {
                  if (r) throw r.error;
                }
              }
              return !1;
            }, t.prototype.activeHardforks = function (e, t) {
              var r, n;
              void 0 === t && (t = {});
              var i = [],
                o = this.hardforks();
              try {
                for (var a = u(o), s = a.next(); !s.done; s = a.next()) {
                  var c = s.value;
                  if (null !== c.block) {
                    if (null != e && e < c.block) break;
                    t.onlySupported && !this._isSupportedHardfork(c.name) || i.push(c);
                  }
                }
              } catch (e) {
                r = {
                  error: e
                };
              } finally {
                try {
                  s && !s.done && (n = a.return) && n.call(a);
                } finally {
                  if (r) throw r.error;
                }
              }
              return i;
            }, t.prototype.activeHardfork = function (e, t) {
              void 0 === t && (t = {});
              var r = this.activeHardforks(e, t);
              if (r.length > 0) return r[r.length - 1].name;
              throw new Error("No (supported) active hardfork found");
            }, t.prototype.hardforkBlock = function (e) {
              var t = this.hardforkBlockBN(e);
              return t ? (0, y.toType)(t, y.TypeOutput.Number) : null;
            }, t.prototype.hardforkBlockBN = function (e) {
              e = this._chooseHardfork(e, !1);
              var t = this._getHardfork(e).block;
              return null == t ? null : new y.BN(t);
            }, t.prototype.hardforkTD = function (e) {
              e = this._chooseHardfork(e, !1);
              var t = this._getHardfork(e).td;
              return null == t ? null : new y.BN(t);
            }, t.prototype.isHardforkBlock = function (e, t) {
              e = (0, y.toType)(e, y.TypeOutput.BN), t = this._chooseHardfork(t, !1);
              var r = this.hardforkBlockBN(t);
              return !!r && r.eq(e);
            }, t.prototype.nextHardforkBlock = function (e) {
              var t = this.nextHardforkBlockBN(e);
              return null === t ? null : (0, y.toType)(t, y.TypeOutput.Number);
            }, t.prototype.nextHardforkBlockBN = function (e) {
              e = this._chooseHardfork(e, !1);
              var t = this.hardforkBlockBN(e);
              return null === t ? null : this.hardforks().reduce(function (e, r) {
                var n = new y.BN(r.block);
                return n.gt(t) && null === e ? n : e;
              }, null);
            }, t.prototype.isNextHardforkBlock = function (e, t) {
              e = (0, y.toType)(e, y.TypeOutput.BN), t = this._chooseHardfork(t, !1);
              var r = this.nextHardforkBlockBN(t);
              return null !== r && r.eq(e);
            }, t.prototype._calcForkHash = function (e) {
              var t,
                r,
                n = i.from(this.genesis().hash.substr(2), "hex"),
                o = i.alloc(0),
                a = 0;
              try {
                for (var s = u(this.hardforks()), c = s.next(); !c.done; c = s.next()) {
                  var f = c.value,
                    d = f.block;
                  if (0 !== d && null !== d && d !== a) {
                    var l = i.from(d.toString(16).padStart(16, "0"), "hex");
                    o = i.concat([o, l]);
                  }
                  if (f.name === e) break;
                  null !== d && (a = d);
                }
              } catch (e) {
                t = {
                  error: e
                };
              } finally {
                try {
                  c && !c.done && (r = s.return) && r.call(s);
                } finally {
                  if (t) throw t.error;
                }
              }
              var h = i.concat([n, o]);
              return "0x" + (0, y.intToBuffer)((0, b.buf)(h) >>> 0).toString("hex");
            }, t.prototype.forkHash = function (e) {
              e = this._chooseHardfork(e, !1);
              var t = this._getHardfork(e);
              if (null === t.block) throw new Error("No fork hash calculation possible for non-applied or future hardfork");
              return void 0 !== t.forkHash ? t.forkHash : this._calcForkHash(e);
            }, t.prototype.hardforkForForkHash = function (e) {
              var t = this.hardforks().filter(function (t) {
                return t.forkHash === e;
              });
              return t.length >= 1 ? t[t.length - 1] : null;
            }, t.prototype.genesis = function () {
              return this._chainParams.genesis;
            }, t.prototype.genesisState = function () {
              var e, t;
              switch (this.chainName()) {
                case "mainnet":
                  return r(Object(function () {
                    var e = new Error("Cannot find module './genesisStates/mainnet.json'");
                    throw e.code = "MODULE_NOT_FOUND", e;
                  }()));
                case "ropsten":
                  return r(Object(function () {
                    var e = new Error("Cannot find module './genesisStates/ropsten.json'");
                    throw e.code = "MODULE_NOT_FOUND", e;
                  }()));
                case "rinkeby":
                  return r(Object(function () {
                    var e = new Error("Cannot find module './genesisStates/rinkeby.json'");
                    throw e.code = "MODULE_NOT_FOUND", e;
                  }()));
                case "kovan":
                  return r(Object(function () {
                    var e = new Error("Cannot find module './genesisStates/kovan.json'");
                    throw e.code = "MODULE_NOT_FOUND", e;
                  }()));
                case "goerli":
                  return r(Object(function () {
                    var e = new Error("Cannot find module './genesisStates/goerli.json'");
                    throw e.code = "MODULE_NOT_FOUND", e;
                  }()));
              }
              if (this._customChains && this._customChains.length > 0 && Array.isArray(this._customChains[0])) try {
                for (var n = u(this._customChains), i = n.next(); !i.done; i = n.next()) {
                  var o = i.value;
                  if (o[0].name === this.chainName()) return o[1];
                }
              } catch (t) {
                e = {
                  error: t
                };
              } finally {
                try {
                  i && !i.done && (t = n.return) && t.call(n);
                } finally {
                  if (e) throw e.error;
                }
              }
              return {};
            }, t.prototype.hardforks = function () {
              return this._chainParams.hardforks;
            }, t.prototype.bootstrapNodes = function () {
              return this._chainParams.bootstrapNodes;
            }, t.prototype.dnsNetworks = function () {
              return this._chainParams.dnsNetworks;
            }, t.prototype.hardfork = function () {
              return this._hardfork;
            }, t.prototype.chainId = function () {
              return (0, y.toType)(this.chainIdBN(), y.TypeOutput.Number);
            }, t.prototype.chainIdBN = function () {
              return new y.BN(this._chainParams.chainId);
            }, t.prototype.chainName = function () {
              return this._chainParams.name;
            }, t.prototype.networkId = function () {
              return (0, y.toType)(this.networkIdBN(), y.TypeOutput.Number);
            }, t.prototype.networkIdBN = function () {
              return new y.BN(this._chainParams.networkId);
            }, t.prototype.eips = function () {
              return this._eips;
            }, t.prototype.consensusType = function () {
              var e,
                t,
                r,
                n = this.hardfork();
              try {
                for (var i = u(v.hardforks), o = i.next(); !o.done; o = i.next()) {
                  var a = o.value;
                  if ("consensus" in a[1] && (r = a[1].consensus.type), a[0] === n) break;
                }
              } catch (t) {
                e = {
                  error: t
                };
              } finally {
                try {
                  o && !o.done && (t = i.return) && t.call(i);
                } finally {
                  if (e) throw e.error;
                }
              }
              return r || this._chainParams.consensus.type;
            }, t.prototype.consensusAlgorithm = function () {
              var e,
                t,
                r,
                n = this.hardfork();
              try {
                for (var i = u(v.hardforks), o = i.next(); !o.done; o = i.next()) {
                  var a = o.value;
                  if ("consensus" in a[1] && (r = a[1].consensus.algorithm), a[0] === n) break;
                }
              } catch (t) {
                e = {
                  error: t
                };
              } finally {
                try {
                  o && !o.done && (t = i.return) && t.call(i);
                } finally {
                  if (e) throw e.error;
                }
              }
              return r || this._chainParams.consensus.algorithm;
            }, t.prototype.consensusConfig = function () {
              var e,
                t,
                r,
                n = this.hardfork();
              try {
                for (var i = u(v.hardforks), o = i.next(); !o.done; o = i.next()) {
                  var a = o.value;
                  if ("consensus" in a[1] && (r = a[1].consensus[a[1].consensus.algorithm]), a[0] === n) break;
                }
              } catch (t) {
                e = {
                  error: t
                };
              } finally {
                try {
                  o && !o.done && (t = i.return) && t.call(i);
                } finally {
                  if (e) throw e.error;
                }
              }
              if (r) return r;
              var s = this.consensusAlgorithm();
              return this._chainParams.consensus[s];
            }, t.prototype.copy = function () {
              return Object.assign(Object.create(Object.getPrototypeOf(this)), this);
            }, t;
          }(p.EventEmitter);
          t.default = w;
        },
        4383: function _(e, t, r) {
          "use strict";

          var n = Object.create ? function (e, t, r, n) {
              void 0 === n && (n = r), Object.defineProperty(e, n, {
                enumerable: !0,
                get: function get() {
                  return t[r];
                }
              });
            } : function (e, t, r, n) {
              void 0 === n && (n = r), e[n] = t[r];
            },
            i = Object.create ? function (e, t) {
              Object.defineProperty(e, "default", {
                enumerable: !0,
                value: t
              });
            } : function (e, t) {
              e.default = t;
            },
            o = function o(e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                i,
                o = r.call(e),
                a = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = o.next()).done;) a.push(n.value);
              } catch (e) {
                i = {
                  error: e
                };
              } finally {
                try {
                  n && !n.done && (r = o.return) && r.call(o);
                } finally {
                  if (i) throw i.error;
                }
              }
              return a;
            };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.BaseTransaction = void 0;
          var a = function (e) {
              if (e && e.__esModule) return e;
              var t = {};
              if (null != e) for (var r in e) "default" !== r && Object.prototype.hasOwnProperty.call(e, r) && n(t, e, r);
              return i(t, e), t;
            }(r(3863)),
            s = r(3062),
            u = r(7325),
            c = function () {
              function e(e) {
                this.cache = {
                  hash: void 0
                }, this.activeCapabilities = [], this.DEFAULT_CHAIN = a.Chain.Mainnet, this.DEFAULT_HARDFORK = a.Hardfork.Istanbul;
                var t = e.nonce,
                  r = e.gasLimit,
                  n = e.to,
                  i = e.value,
                  o = e.data,
                  u = e.v,
                  c = e.r,
                  f = e.s,
                  d = e.type;
                this._type = new s.BN((0, s.toBuffer)(d)).toNumber();
                var l = (0, s.toBuffer)("" === n ? "0x" : n),
                  h = (0, s.toBuffer)("" === u ? "0x" : u),
                  p = (0, s.toBuffer)("" === c ? "0x" : c),
                  b = (0, s.toBuffer)("" === f ? "0x" : f);
                this.nonce = new s.BN((0, s.toBuffer)("" === t ? "0x" : t)), this.gasLimit = new s.BN((0, s.toBuffer)("" === r ? "0x" : r)), this.to = l.length > 0 ? new s.Address(l) : void 0, this.value = new s.BN((0, s.toBuffer)("" === i ? "0x" : i)), this.data = (0, s.toBuffer)("" === o ? "0x" : o), this.v = h.length > 0 ? new s.BN(h) : void 0, this.r = p.length > 0 ? new s.BN(p) : void 0, this.s = b.length > 0 ? new s.BN(b) : void 0, this._validateCannotExceedMaxInteger({
                  nonce: this.nonce,
                  gasLimit: this.gasLimit,
                  value: this.value,
                  r: this.r,
                  s: this.s
                });
              }
              return Object.defineProperty(e.prototype, "transactionType", {
                get: function get() {
                  return this.type;
                },
                enumerable: !1,
                configurable: !0
              }), Object.defineProperty(e.prototype, "type", {
                get: function get() {
                  return this._type;
                },
                enumerable: !1,
                configurable: !0
              }), e.prototype.supports = function (e) {
                return this.activeCapabilities.includes(e);
              }, e.prototype.validate = function (e) {
                void 0 === e && (e = !1);
                var t = [];
                return this.getBaseFee().gt(this.gasLimit) && t.push("gasLimit is too low. given " + this.gasLimit + ", need at least " + this.getBaseFee()), this.isSigned() && !this.verifySignature() && t.push("Invalid Signature"), e ? t : 0 === t.length;
              }, e.prototype.getBaseFee = function () {
                var e = this.getDataFee().addn(this.common.param("gasPrices", "tx"));
                return this.common.gteHardfork("homestead") && this.toCreationAddress() && e.iaddn(this.common.param("gasPrices", "txCreation")), e;
              }, e.prototype.getDataFee = function () {
                for (var e = this.common.param("gasPrices", "txDataZero"), t = this.common.param("gasPrices", "txDataNonZero"), r = 0, n = 0; n < this.data.length; n++) 0 === this.data[n] ? r += e : r += t;
                return new s.BN(r);
              }, e.prototype.toCreationAddress = function () {
                return void 0 === this.to || 0 === this.to.buf.length;
              }, e.prototype.isSigned = function () {
                var e = this,
                  t = e.v,
                  r = e.r,
                  n = e.s;
                return 0 === this.type ? !!(t && r && n) : !(void 0 === t || !r || !n);
              }, e.prototype.verifySignature = function () {
                try {
                  var e = this.getSenderPublicKey();
                  return 0 !== (0, s.unpadBuffer)(e).length;
                } catch (e) {
                  return !1;
                }
              }, e.prototype.getSenderAddress = function () {
                return new s.Address((0, s.publicToAddress)(this.getSenderPublicKey()));
              }, e.prototype.sign = function (e) {
                if (32 !== e.length) throw new Error("Private key must be 32 bytes in length.");
                var t = !1;
                0 === this.type && this.common.gteHardfork("spuriousDragon") && !this.supports(u.Capability.EIP155ReplayProtection) && (this.activeCapabilities.push(u.Capability.EIP155ReplayProtection), t = !0);
                var r = this.getMessageToSign(!0),
                  n = (0, s.ecsign)(r, e),
                  i = n.v,
                  o = n.r,
                  a = n.s,
                  c = this._processSignature(i, o, a);
                if (t) {
                  var f = this.activeCapabilities.indexOf(u.Capability.EIP155ReplayProtection);
                  f > -1 && this.activeCapabilities.splice(f, 1);
                }
                return c;
              }, e.prototype._getCommon = function (e, t) {
                var r;
                if (t) {
                  var n = new s.BN((0, s.toBuffer)(t));
                  if (e) {
                    if (!e.chainIdBN().eq(n)) throw new Error("The chain ID does not match the chain ID of Common");
                    return e.copy();
                  }
                  return a.default.isSupportedChainId(n) ? new a.default({
                    chain: n,
                    hardfork: this.DEFAULT_HARDFORK
                  }) : a.default.forCustomChain(this.DEFAULT_CHAIN, {
                    name: "custom-chain",
                    networkId: n,
                    chainId: n
                  }, this.DEFAULT_HARDFORK);
                }
                return null !== (r = null == e ? void 0 : e.copy()) && void 0 !== r ? r : new a.default({
                  chain: this.DEFAULT_CHAIN,
                  hardfork: this.DEFAULT_HARDFORK
                });
              }, e.prototype._validateCannotExceedMaxInteger = function (e, t) {
                var r, n;
                void 0 === t && (t = 53);
                try {
                  for (var i = function (e) {
                      var t = "function" == typeof Symbol && Symbol.iterator,
                        r = t && e[t],
                        n = 0;
                      if (r) return r.call(e);
                      if (e && "number" == typeof e.length) return {
                        next: function next() {
                          return e && n >= e.length && (e = void 0), {
                            value: e && e[n++],
                            done: !e
                          };
                        }
                      };
                      throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
                    }(Object.entries(e)), a = i.next(); !a.done; a = i.next()) {
                    var u = o(a.value, 2),
                      c = u[0],
                      f = u[1];
                    if (53 === t) {
                      if (null == f ? void 0 : f.gt(s.MAX_INTEGER)) throw new Error(c + " cannot exceed MAX_INTEGER, given " + f);
                    } else {
                      if (256 !== t) throw new Error("unimplemented bits value");
                      if (null == f ? void 0 : f.gte(s.TWO_POW256)) throw new Error(c + " must be less than 2^256, given " + f);
                    }
                  }
                } catch (e) {
                  r = {
                    error: e
                  };
                } finally {
                  try {
                    a && !a.done && (n = i.return) && n.call(i);
                  } finally {
                    if (r) throw r.error;
                  }
                }
              }, e;
            }();
          t.BaseTransaction = c;
        },
        660: function _(e, t, r) {
          "use strict";

          var _n2,
            i = r(9033).Buffer,
            o = (_n2 = function n(e, t) {
              return _n2 = Object.setPrototypeOf || {
                __proto__: []
              } instanceof Array && function (e, t) {
                e.__proto__ = t;
              } || function (e, t) {
                for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
              }, _n2(e, t);
            }, function (e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Class extends value " + String(t) + " is not a constructor or null");
              function r() {
                this.constructor = e;
              }
              _n2(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());
            }),
            _a = function a() {
              return _a = Object.assign || function (e) {
                for (var t, r = 1, n = arguments.length; r < n; r++) for (var i in t = arguments[r]) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e;
              }, _a.apply(this, arguments);
            };
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var s = r(3062),
            u = r(4383),
            c = r(7325),
            f = r(3789),
            d = i.from(2..toString(16).padStart(2, "0"), "hex"),
            l = function (e) {
              function t(t, r) {
                var n, i;
                void 0 === r && (r = {});
                var o = e.call(this, _a(_a({}, t), {
                  type: 2
                })) || this;
                o.DEFAULT_HARDFORK = "london";
                var u = t.chainId,
                  d = t.accessList,
                  l = t.maxFeePerGas,
                  h = t.maxPriorityFeePerGas;
                if (o.common = o._getCommon(r.common, u), o.chainId = o.common.chainIdBN(), !o.common.isActivatedEIP(1559)) throw new Error("EIP-1559 not enabled on Common");
                o.activeCapabilities = o.activeCapabilities.concat([1559, 2718, 2930]);
                var p = f.AccessLists.getAccessListData(null != d ? d : []);
                if (o.accessList = p.accessList, o.AccessListJSON = p.AccessListJSON, f.AccessLists.verifyAccessList(o.accessList), o.maxFeePerGas = new s.BN((0, s.toBuffer)("" === l ? "0x" : l)), o.maxPriorityFeePerGas = new s.BN((0, s.toBuffer)("" === h ? "0x" : h)), o._validateCannotExceedMaxInteger({
                  maxFeePerGas: o.maxFeePerGas,
                  maxPriorityFeePerGas: o.maxPriorityFeePerGas
                }, 256), o.maxFeePerGas.lt(o.maxPriorityFeePerGas)) throw new Error("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)");
                if (o.v && !o.v.eqn(0) && !o.v.eqn(1)) throw new Error("The y-parity of the transaction should either be 0 or 1");
                if (o.common.gteHardfork("homestead") && (null === (n = o.s) || void 0 === n ? void 0 : n.gt(c.N_DIV_2))) throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
                return (null === (i = null == r ? void 0 : r.freeze) || void 0 === i || i) && Object.freeze(o), o;
              }
              return o(t, e), Object.defineProperty(t.prototype, "senderR", {
                get: function get() {
                  return this.r;
                },
                enumerable: !1,
                configurable: !0
              }), Object.defineProperty(t.prototype, "senderS", {
                get: function get() {
                  return this.s;
                },
                enumerable: !1,
                configurable: !0
              }), Object.defineProperty(t.prototype, "yParity", {
                get: function get() {
                  return this.v;
                },
                enumerable: !1,
                configurable: !0
              }), t.fromTxData = function (e, r) {
                return void 0 === r && (r = {}), new t(e, r);
              }, t.fromSerializedTx = function (e, r) {
                if (void 0 === r && (r = {}), !e.slice(0, 1).equals(d)) throw new Error("Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: 2, received: " + e.slice(0, 1).toString("hex"));
                var n = s.rlp.decode(e.slice(1));
                if (!Array.isArray(n)) throw new Error("Invalid serialized tx input: must be array");
                return t.fromValuesArray(n, r);
              }, t.fromRlpSerializedTx = function (e, r) {
                return void 0 === r && (r = {}), t.fromSerializedTx(e, r);
              }, t.fromValuesArray = function (e, r) {
                if (void 0 === r && (r = {}), 9 !== e.length && 12 !== e.length) throw new Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");
                var n = function (e, t) {
                    var r = "function" == typeof Symbol && e[Symbol.iterator];
                    if (!r) return e;
                    var n,
                      i,
                      o = r.call(e),
                      a = [];
                    try {
                      for (; (void 0 === t || t-- > 0) && !(n = o.next()).done;) a.push(n.value);
                    } catch (e) {
                      i = {
                        error: e
                      };
                    } finally {
                      try {
                        n && !n.done && (r = o.return) && r.call(o);
                      } finally {
                        if (i) throw i.error;
                      }
                    }
                    return a;
                  }(e, 12),
                  i = n[0],
                  o = n[1],
                  a = n[2],
                  u = n[3],
                  c = n[4],
                  f = n[5],
                  d = n[6],
                  l = n[7],
                  h = n[8],
                  p = n[9],
                  b = n[10],
                  y = n[11];
                return new t({
                  chainId: new s.BN(i),
                  nonce: o,
                  maxPriorityFeePerGas: a,
                  maxFeePerGas: u,
                  gasLimit: c,
                  to: f,
                  value: d,
                  data: l,
                  accessList: null != h ? h : [],
                  v: void 0 !== p ? new s.BN(p) : void 0,
                  r: b,
                  s: y
                }, r);
              }, t.prototype.getDataFee = function () {
                var t = e.prototype.getDataFee.call(this);
                return t.iaddn(f.AccessLists.getDataFeeEIP2930(this.accessList, this.common)), t;
              }, t.prototype.getUpfrontCost = function (e) {
                void 0 === e && (e = new s.BN(0));
                var t = s.BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(e)).add(e);
                return this.gasLimit.mul(t).add(this.value);
              }, t.prototype.raw = function () {
                return [(0, s.bnToUnpaddedBuffer)(this.chainId), (0, s.bnToUnpaddedBuffer)(this.nonce), (0, s.bnToUnpaddedBuffer)(this.maxPriorityFeePerGas), (0, s.bnToUnpaddedBuffer)(this.maxFeePerGas), (0, s.bnToUnpaddedBuffer)(this.gasLimit), void 0 !== this.to ? this.to.buf : i.from([]), (0, s.bnToUnpaddedBuffer)(this.value), this.data, this.accessList, void 0 !== this.v ? (0, s.bnToUnpaddedBuffer)(this.v) : i.from([]), void 0 !== this.r ? (0, s.bnToUnpaddedBuffer)(this.r) : i.from([]), void 0 !== this.s ? (0, s.bnToUnpaddedBuffer)(this.s) : i.from([])];
              }, t.prototype.serialize = function () {
                var e = this.raw();
                return i.concat([d, s.rlp.encode(e)]);
              }, t.prototype.getMessageToSign = function (e) {
                void 0 === e && (e = !0);
                var t = this.raw().slice(0, 9),
                  r = i.concat([d, s.rlp.encode(t)]);
                return e ? (0, s.keccak256)(r) : r;
              }, t.prototype.hash = function () {
                if (!this.isSigned()) throw new Error("Cannot call hash method if transaction is not signed");
                return Object.isFrozen(this) ? (this.cache.hash || (this.cache.hash = (0, s.keccak256)(this.serialize())), this.cache.hash) : (0, s.keccak256)(this.serialize());
              }, t.prototype.getMessageToVerifySignature = function () {
                return this.getMessageToSign();
              }, t.prototype.getSenderPublicKey = function () {
                var e;
                if (!this.isSigned()) throw new Error("Cannot call this method if transaction is not signed");
                var t = this.getMessageToVerifySignature();
                if (this.common.gteHardfork("homestead") && (null === (e = this.s) || void 0 === e ? void 0 : e.gt(c.N_DIV_2))) throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
                var r = this,
                  n = r.v,
                  i = r.r,
                  o = r.s;
                try {
                  return (0, s.ecrecover)(t, n.addn(27), (0, s.bnToUnpaddedBuffer)(i), (0, s.bnToUnpaddedBuffer)(o));
                } catch (e) {
                  throw new Error("Invalid Signature");
                }
              }, t.prototype._processSignature = function (e, r, n) {
                var i = {
                  common: this.common
                };
                return t.fromTxData({
                  chainId: this.chainId,
                  nonce: this.nonce,
                  maxPriorityFeePerGas: this.maxPriorityFeePerGas,
                  maxFeePerGas: this.maxFeePerGas,
                  gasLimit: this.gasLimit,
                  to: this.to,
                  value: this.value,
                  data: this.data,
                  accessList: this.accessList,
                  v: new s.BN(e - 27),
                  r: new s.BN(r),
                  s: new s.BN(n)
                }, i);
              }, t.prototype.toJSON = function () {
                var e = f.AccessLists.getAccessListJSON(this.accessList);
                return {
                  chainId: (0, s.bnToHex)(this.chainId),
                  nonce: (0, s.bnToHex)(this.nonce),
                  maxPriorityFeePerGas: (0, s.bnToHex)(this.maxPriorityFeePerGas),
                  maxFeePerGas: (0, s.bnToHex)(this.maxFeePerGas),
                  gasLimit: (0, s.bnToHex)(this.gasLimit),
                  to: void 0 !== this.to ? this.to.toString() : void 0,
                  value: (0, s.bnToHex)(this.value),
                  data: "0x" + this.data.toString("hex"),
                  accessList: e,
                  v: void 0 !== this.v ? (0, s.bnToHex)(this.v) : void 0,
                  r: void 0 !== this.r ? (0, s.bnToHex)(this.r) : void 0,
                  s: void 0 !== this.s ? (0, s.bnToHex)(this.s) : void 0
                };
              }, t;
            }(u.BaseTransaction);
          t.default = l;
        },
        7613: function _(e, t, r) {
          "use strict";

          var _n3,
            i = r(9033).Buffer,
            o = (_n3 = function n(e, t) {
              return _n3 = Object.setPrototypeOf || {
                __proto__: []
              } instanceof Array && function (e, t) {
                e.__proto__ = t;
              } || function (e, t) {
                for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
              }, _n3(e, t);
            }, function (e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Class extends value " + String(t) + " is not a constructor or null");
              function r() {
                this.constructor = e;
              }
              _n3(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());
            }),
            _a2 = function a() {
              return _a2 = Object.assign || function (e) {
                for (var t, r = 1, n = arguments.length; r < n; r++) for (var i in t = arguments[r]) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e;
              }, _a2.apply(this, arguments);
            };
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var s = r(3062),
            u = r(4383),
            c = r(7325),
            f = r(3789),
            d = i.from(1..toString(16).padStart(2, "0"), "hex"),
            l = function (e) {
              function t(t, r) {
                var n, i;
                void 0 === r && (r = {});
                var o = e.call(this, _a2(_a2({}, t), {
                  type: 1
                })) || this;
                o.DEFAULT_HARDFORK = "berlin";
                var u = t.chainId,
                  d = t.accessList,
                  l = t.gasPrice;
                if (o.common = o._getCommon(r.common, u), o.chainId = o.common.chainIdBN(), !o.common.isActivatedEIP(2930)) throw new Error("EIP-2930 not enabled on Common");
                o.activeCapabilities = o.activeCapabilities.concat([2718, 2930]);
                var h = f.AccessLists.getAccessListData(null != d ? d : []);
                if (o.accessList = h.accessList, o.AccessListJSON = h.AccessListJSON, f.AccessLists.verifyAccessList(o.accessList), o.gasPrice = new s.BN((0, s.toBuffer)("" === l ? "0x" : l)), o._validateCannotExceedMaxInteger({
                  gasPrice: o.gasPrice
                }), o.v && !o.v.eqn(0) && !o.v.eqn(1)) throw new Error("The y-parity of the transaction should either be 0 or 1");
                if (o.common.gteHardfork("homestead") && (null === (n = o.s) || void 0 === n ? void 0 : n.gt(c.N_DIV_2))) throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
                return (null === (i = null == r ? void 0 : r.freeze) || void 0 === i || i) && Object.freeze(o), o;
              }
              return o(t, e), Object.defineProperty(t.prototype, "senderR", {
                get: function get() {
                  return this.r;
                },
                enumerable: !1,
                configurable: !0
              }), Object.defineProperty(t.prototype, "senderS", {
                get: function get() {
                  return this.s;
                },
                enumerable: !1,
                configurable: !0
              }), Object.defineProperty(t.prototype, "yParity", {
                get: function get() {
                  return this.v;
                },
                enumerable: !1,
                configurable: !0
              }), t.fromTxData = function (e, r) {
                return void 0 === r && (r = {}), new t(e, r);
              }, t.fromSerializedTx = function (e, r) {
                if (void 0 === r && (r = {}), !e.slice(0, 1).equals(d)) throw new Error("Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: 1, received: " + e.slice(0, 1).toString("hex"));
                var n = s.rlp.decode(e.slice(1));
                if (!Array.isArray(n)) throw new Error("Invalid serialized tx input: must be array");
                return t.fromValuesArray(n, r);
              }, t.fromRlpSerializedTx = function (e, r) {
                return void 0 === r && (r = {}), t.fromSerializedTx(e, r);
              }, t.fromValuesArray = function (e, r) {
                if (void 0 === r && (r = {}), 8 !== e.length && 11 !== e.length) throw new Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");
                var n = function (e, t) {
                    var r = "function" == typeof Symbol && e[Symbol.iterator];
                    if (!r) return e;
                    var n,
                      i,
                      o = r.call(e),
                      a = [];
                    try {
                      for (; (void 0 === t || t-- > 0) && !(n = o.next()).done;) a.push(n.value);
                    } catch (e) {
                      i = {
                        error: e
                      };
                    } finally {
                      try {
                        n && !n.done && (r = o.return) && r.call(o);
                      } finally {
                        if (i) throw i.error;
                      }
                    }
                    return a;
                  }(e, 11),
                  i = n[0],
                  o = n[1],
                  a = n[2],
                  u = n[3],
                  c = n[4],
                  f = n[5],
                  d = n[6],
                  l = n[7],
                  h = n[8],
                  p = n[9],
                  b = n[10];
                return new t({
                  chainId: new s.BN(i),
                  nonce: o,
                  gasPrice: a,
                  gasLimit: u,
                  to: c,
                  value: f,
                  data: d,
                  accessList: null != l ? l : [],
                  v: void 0 !== h ? new s.BN(h) : void 0,
                  r: p,
                  s: b
                }, r);
              }, t.prototype.getDataFee = function () {
                var t = e.prototype.getDataFee.call(this);
                return t.iaddn(f.AccessLists.getDataFeeEIP2930(this.accessList, this.common)), t;
              }, t.prototype.getUpfrontCost = function () {
                return this.gasLimit.mul(this.gasPrice).add(this.value);
              }, t.prototype.raw = function () {
                return [(0, s.bnToUnpaddedBuffer)(this.chainId), (0, s.bnToUnpaddedBuffer)(this.nonce), (0, s.bnToUnpaddedBuffer)(this.gasPrice), (0, s.bnToUnpaddedBuffer)(this.gasLimit), void 0 !== this.to ? this.to.buf : i.from([]), (0, s.bnToUnpaddedBuffer)(this.value), this.data, this.accessList, void 0 !== this.v ? (0, s.bnToUnpaddedBuffer)(this.v) : i.from([]), void 0 !== this.r ? (0, s.bnToUnpaddedBuffer)(this.r) : i.from([]), void 0 !== this.s ? (0, s.bnToUnpaddedBuffer)(this.s) : i.from([])];
              }, t.prototype.serialize = function () {
                var e = this.raw();
                return i.concat([d, s.rlp.encode(e)]);
              }, t.prototype.getMessageToSign = function (e) {
                void 0 === e && (e = !0);
                var t = this.raw().slice(0, 8),
                  r = i.concat([d, s.rlp.encode(t)]);
                return e ? (0, s.keccak256)(r) : r;
              }, t.prototype.hash = function () {
                if (!this.isSigned()) throw new Error("Cannot call hash method if transaction is not signed");
                return Object.isFrozen(this) ? (this.cache.hash || (this.cache.hash = (0, s.keccak256)(this.serialize())), this.cache.hash) : (0, s.keccak256)(this.serialize());
              }, t.prototype.getMessageToVerifySignature = function () {
                return this.getMessageToSign();
              }, t.prototype.getSenderPublicKey = function () {
                var e;
                if (!this.isSigned()) throw new Error("Cannot call this method if transaction is not signed");
                var t = this.getMessageToVerifySignature();
                if (this.common.gteHardfork("homestead") && (null === (e = this.s) || void 0 === e ? void 0 : e.gt(c.N_DIV_2))) throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
                var r = this,
                  n = r.yParity,
                  i = r.r,
                  o = r.s;
                try {
                  return (0, s.ecrecover)(t, n.addn(27), (0, s.bnToUnpaddedBuffer)(i), (0, s.bnToUnpaddedBuffer)(o));
                } catch (e) {
                  throw new Error("Invalid Signature");
                }
              }, t.prototype._processSignature = function (e, r, n) {
                var i = {
                  common: this.common
                };
                return t.fromTxData({
                  chainId: this.chainId,
                  nonce: this.nonce,
                  gasPrice: this.gasPrice,
                  gasLimit: this.gasLimit,
                  to: this.to,
                  value: this.value,
                  data: this.data,
                  accessList: this.accessList,
                  v: new s.BN(e - 27),
                  r: new s.BN(r),
                  s: new s.BN(n)
                }, i);
              }, t.prototype.toJSON = function () {
                var e = f.AccessLists.getAccessListJSON(this.accessList);
                return {
                  chainId: (0, s.bnToHex)(this.chainId),
                  nonce: (0, s.bnToHex)(this.nonce),
                  gasPrice: (0, s.bnToHex)(this.gasPrice),
                  gasLimit: (0, s.bnToHex)(this.gasLimit),
                  to: void 0 !== this.to ? this.to.toString() : void 0,
                  value: (0, s.bnToHex)(this.value),
                  data: "0x" + this.data.toString("hex"),
                  accessList: e,
                  v: void 0 !== this.v ? (0, s.bnToHex)(this.v) : void 0,
                  r: void 0 !== this.r ? (0, s.bnToHex)(this.r) : void 0,
                  s: void 0 !== this.s ? (0, s.bnToHex)(this.s) : void 0
                };
              }, t;
            }(u.BaseTransaction);
          t.default = l;
        },
        2339: function _(e, t, r) {
          "use strict";

          var n = Object.create ? function (e, t, r, n) {
              void 0 === n && (n = r), Object.defineProperty(e, n, {
                enumerable: !0,
                get: function get() {
                  return t[r];
                }
              });
            } : function (e, t, r, n) {
              void 0 === n && (n = r), e[n] = t[r];
            },
            i = function i(e) {
              return e && e.__esModule ? e : {
                default: e
              };
            };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.FeeMarketEIP1559Transaction = t.TransactionFactory = t.AccessListEIP2930Transaction = t.Transaction = void 0;
          var o = r(3088);
          Object.defineProperty(t, "Transaction", {
            enumerable: !0,
            get: function get() {
              return i(o).default;
            }
          });
          var a = r(7613);
          Object.defineProperty(t, "AccessListEIP2930Transaction", {
            enumerable: !0,
            get: function get() {
              return i(a).default;
            }
          });
          var s = r(9562);
          Object.defineProperty(t, "TransactionFactory", {
            enumerable: !0,
            get: function get() {
              return i(s).default;
            }
          });
          var u = r(660);
          Object.defineProperty(t, "FeeMarketEIP1559Transaction", {
            enumerable: !0,
            get: function get() {
              return i(u).default;
            }
          }), function (e, t) {
            for (var r in e) "default" === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
          }(r(7325), t);
        },
        3088: function _(e, t, r) {
          "use strict";

          var _n4,
            i = r(9033).Buffer,
            o = (_n4 = function n(e, t) {
              return _n4 = Object.setPrototypeOf || {
                __proto__: []
              } instanceof Array && function (e, t) {
                e.__proto__ = t;
              } || function (e, t) {
                for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
              }, _n4(e, t);
            }, function (e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Class extends value " + String(t) + " is not a constructor or null");
              function r() {
                this.constructor = e;
              }
              _n4(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());
            }),
            _a3 = function a() {
              return _a3 = Object.assign || function (e) {
                for (var t, r = 1, n = arguments.length; r < n; r++) for (var i in t = arguments[r]) Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e;
              }, _a3.apply(this, arguments);
            };
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var s = r(3062),
            u = r(7325),
            c = function (e) {
              function t(t, r) {
                var n;
                void 0 === r && (r = {});
                var i = e.call(this, _a3(_a3({}, t), {
                  type: 0
                })) || this;
                if (i.common = i._validateTxV(i.v, r.common), i.gasPrice = new s.BN((0, s.toBuffer)("" === t.gasPrice ? "0x" : t.gasPrice)), i._validateCannotExceedMaxInteger({
                  gasPrice: i.gasPrice
                }), i.common.gteHardfork("spuriousDragon")) if (i.isSigned()) {
                  var o = i.v,
                    c = i.common.chainIdBN().muln(2);
                  (o.eq(c.addn(35)) || o.eq(c.addn(36))) && i.activeCapabilities.push(u.Capability.EIP155ReplayProtection);
                } else i.activeCapabilities.push(u.Capability.EIP155ReplayProtection);
                return (null === (n = null == r ? void 0 : r.freeze) || void 0 === n || n) && Object.freeze(i), i;
              }
              return o(t, e), t.fromTxData = function (e, r) {
                return void 0 === r && (r = {}), new t(e, r);
              }, t.fromSerializedTx = function (e, t) {
                void 0 === t && (t = {});
                var r = s.rlp.decode(e);
                if (!Array.isArray(r)) throw new Error("Invalid serialized tx input. Must be array");
                return this.fromValuesArray(r, t);
              }, t.fromRlpSerializedTx = function (e, r) {
                return void 0 === r && (r = {}), t.fromSerializedTx(e, r);
              }, t.fromValuesArray = function (e, r) {
                if (void 0 === r && (r = {}), 6 !== e.length && 9 !== e.length) throw new Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");
                var n = function (e, t) {
                  var r = "function" == typeof Symbol && e[Symbol.iterator];
                  if (!r) return e;
                  var n,
                    i,
                    o = r.call(e),
                    a = [];
                  try {
                    for (; (void 0 === t || t-- > 0) && !(n = o.next()).done;) a.push(n.value);
                  } catch (e) {
                    i = {
                      error: e
                    };
                  } finally {
                    try {
                      n && !n.done && (r = o.return) && r.call(o);
                    } finally {
                      if (i) throw i.error;
                    }
                  }
                  return a;
                }(e, 9);
                return new t({
                  nonce: n[0],
                  gasPrice: n[1],
                  gasLimit: n[2],
                  to: n[3],
                  value: n[4],
                  data: n[5],
                  v: n[6],
                  r: n[7],
                  s: n[8]
                }, r);
              }, t.prototype.raw = function () {
                return [(0, s.bnToUnpaddedBuffer)(this.nonce), (0, s.bnToUnpaddedBuffer)(this.gasPrice), (0, s.bnToUnpaddedBuffer)(this.gasLimit), void 0 !== this.to ? this.to.buf : i.from([]), (0, s.bnToUnpaddedBuffer)(this.value), this.data, void 0 !== this.v ? (0, s.bnToUnpaddedBuffer)(this.v) : i.from([]), void 0 !== this.r ? (0, s.bnToUnpaddedBuffer)(this.r) : i.from([]), void 0 !== this.s ? (0, s.bnToUnpaddedBuffer)(this.s) : i.from([])];
              }, t.prototype.serialize = function () {
                return s.rlp.encode(this.raw());
              }, t.prototype._getMessageToSign = function () {
                var e = [(0, s.bnToUnpaddedBuffer)(this.nonce), (0, s.bnToUnpaddedBuffer)(this.gasPrice), (0, s.bnToUnpaddedBuffer)(this.gasLimit), void 0 !== this.to ? this.to.buf : i.from([]), (0, s.bnToUnpaddedBuffer)(this.value), this.data];
                return this.supports(u.Capability.EIP155ReplayProtection) && (e.push((0, s.toBuffer)(this.common.chainIdBN())), e.push((0, s.unpadBuffer)((0, s.toBuffer)(0))), e.push((0, s.unpadBuffer)((0, s.toBuffer)(0)))), e;
              }, t.prototype.getMessageToSign = function (e) {
                void 0 === e && (e = !0);
                var t = this._getMessageToSign();
                return e ? (0, s.rlphash)(t) : t;
              }, t.prototype.getUpfrontCost = function () {
                return this.gasLimit.mul(this.gasPrice).add(this.value);
              }, t.prototype.hash = function () {
                return Object.isFrozen(this) ? (this.cache.hash || (this.cache.hash = (0, s.rlphash)(this.raw())), this.cache.hash) : (0, s.rlphash)(this.raw());
              }, t.prototype.getMessageToVerifySignature = function () {
                if (!this.isSigned()) throw Error("This transaction is not signed");
                var e = this._getMessageToSign();
                return (0, s.rlphash)(e);
              }, t.prototype.getSenderPublicKey = function () {
                var e,
                  t = this.getMessageToVerifySignature();
                if (this.common.gteHardfork("homestead") && (null === (e = this.s) || void 0 === e ? void 0 : e.gt(u.N_DIV_2))) throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
                var r = this,
                  n = r.v,
                  i = r.r,
                  o = r.s;
                try {
                  return (0, s.ecrecover)(t, n, (0, s.bnToUnpaddedBuffer)(i), (0, s.bnToUnpaddedBuffer)(o), this.supports(u.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : void 0);
                } catch (e) {
                  throw new Error("Invalid Signature");
                }
              }, t.prototype._processSignature = function (e, r, n) {
                var i = new s.BN(e);
                this.supports(u.Capability.EIP155ReplayProtection) && i.iadd(this.common.chainIdBN().muln(2).addn(8));
                var o = {
                  common: this.common
                };
                return t.fromTxData({
                  nonce: this.nonce,
                  gasPrice: this.gasPrice,
                  gasLimit: this.gasLimit,
                  to: this.to,
                  value: this.value,
                  data: this.data,
                  v: i,
                  r: new s.BN(r),
                  s: new s.BN(n)
                }, o);
              }, t.prototype.toJSON = function () {
                return {
                  nonce: (0, s.bnToHex)(this.nonce),
                  gasPrice: (0, s.bnToHex)(this.gasPrice),
                  gasLimit: (0, s.bnToHex)(this.gasLimit),
                  to: void 0 !== this.to ? this.to.toString() : void 0,
                  value: (0, s.bnToHex)(this.value),
                  data: "0x" + this.data.toString("hex"),
                  v: void 0 !== this.v ? (0, s.bnToHex)(this.v) : void 0,
                  r: void 0 !== this.r ? (0, s.bnToHex)(this.r) : void 0,
                  s: void 0 !== this.s ? (0, s.bnToHex)(this.s) : void 0
                };
              }, t.prototype._validateTxV = function (e, t) {
                var r;
                if (void 0 !== e && !e.eqn(0) && (!t || t.gteHardfork("spuriousDragon")) && !e.eqn(27) && !e.eqn(28)) if (t) {
                  var n = t.chainIdBN().muln(2);
                  if (!e.eq(n.addn(35)) && !e.eq(n.addn(36))) throw new Error("Incompatible EIP155-based V " + e.toString() + " and chain id " + t.chainIdBN().toString() + ". See the Common parameter of the Transaction constructor to set the chain id.");
                } else {
                  var i;
                  i = e.subn(35).isEven() ? 35 : 36, r = e.subn(i).divn(2);
                }
                return this._getCommon(t, r);
              }, t.prototype._unsignedTxImplementsEIP155 = function () {
                return this.common.gteHardfork("spuriousDragon");
              }, t.prototype._signedTxImplementsEIP155 = function () {
                if (!this.isSigned()) throw Error("This transaction is not signed");
                var e = this.common.gteHardfork("spuriousDragon"),
                  t = this.v,
                  r = this.common.chainIdBN().muln(2);
                return (t.eq(r.addn(35)) || t.eq(r.addn(36))) && e;
              }, t;
            }(r(4383).BaseTransaction);
          t.default = c;
        },
        9562: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var i = r(3062),
            o = r(2339),
            a = function () {
              function e() {}
              return e.fromTxData = function (e, t) {
                if (void 0 === t && (t = {}), "type" in e && void 0 !== e.type) {
                  var r = new i.BN((0, i.toBuffer)(e.type)).toNumber();
                  if (0 === r) return o.Transaction.fromTxData(e, t);
                  if (1 === r) return o.AccessListEIP2930Transaction.fromTxData(e, t);
                  if (2 === r) return o.FeeMarketEIP1559Transaction.fromTxData(e, t);
                  throw new Error("Tx instantiation with type " + r + " not supported");
                }
                return o.Transaction.fromTxData(e, t);
              }, e.fromSerializedData = function (e, t) {
                if (void 0 === t && (t = {}), e[0] <= 127) {
                  var r = void 0;
                  switch (e[0]) {
                    case 1:
                      r = 2930;
                      break;
                    case 2:
                      r = 1559;
                      break;
                    default:
                      throw new Error("TypedTransaction with ID " + e[0] + " unknown");
                  }
                  return 1559 === r ? o.FeeMarketEIP1559Transaction.fromSerializedTx(e, t) : o.AccessListEIP2930Transaction.fromSerializedTx(e, t);
                }
                return o.Transaction.fromSerializedTx(e, t);
              }, e.fromBlockBodyData = function (e, t) {
                if (void 0 === t && (t = {}), n.isBuffer(e)) return this.fromSerializedData(e, t);
                if (Array.isArray(e)) return o.Transaction.fromValuesArray(e, t);
                throw new Error("Cannot decode transaction: unknown type input");
              }, e.getTransactionClass = function (e, t) {
                if (void 0 === e && (e = 0), 0 == e || e >= 128 && e <= 255) return o.Transaction;
                switch (e) {
                  case 1:
                    return o.AccessListEIP2930Transaction;
                  case 2:
                    return o.FeeMarketEIP1559Transaction;
                  default:
                    throw new Error("TypedTransaction with ID " + e + " unknown");
                }
              }, e;
            }();
          t.default = a;
        },
        7325: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.N_DIV_2 = t.isAccessList = t.isAccessListBuffer = t.Capability = void 0;
          var n,
            i = r(3062);
          function o(e) {
            if (0 === e.length) return !0;
            var t = e[0];
            return !!Array.isArray(t);
          }
          (n = t.Capability || (t.Capability = {}))[n.EIP155ReplayProtection = 155] = "EIP155ReplayProtection", n[n.EIP1559FeeMarket = 1559] = "EIP1559FeeMarket", n[n.EIP2718TypedTransaction = 2718] = "EIP2718TypedTransaction", n[n.EIP2930AccessLists = 2930] = "EIP2930AccessLists", t.isAccessListBuffer = o, t.isAccessList = function (e) {
            return !o(e);
          }, t.N_DIV_2 = new i.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
        },
        3789: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.AccessLists = void 0;
          var n = r(3062),
            i = r(7325),
            o = function () {
              function e() {}
              return e.getAccessListData = function (e) {
                var t, r;
                if (e && (0, i.isAccessList)(e)) {
                  t = e;
                  for (var o = [], a = 0; a < e.length; a++) {
                    for (var s = e[a], u = (0, n.toBuffer)(s.address), c = [], f = 0; f < s.storageKeys.length; f++) c.push((0, n.toBuffer)(s.storageKeys[f]));
                    o.push([u, c]);
                  }
                  r = o;
                } else {
                  r = null != e ? e : [];
                  var d = [];
                  for (a = 0; a < r.length; a++) {
                    var l = r[a],
                      h = (0, n.bufferToHex)(l[0]),
                      p = [];
                    for (s = 0; s < l[1].length; s++) p.push((0, n.bufferToHex)(l[1][s]));
                    var b = {
                      address: h,
                      storageKeys: p
                    };
                    d.push(b);
                  }
                  t = d;
                }
                return {
                  AccessListJSON: t,
                  accessList: r
                };
              }, e.verifyAccessList = function (e) {
                for (var t = 0; t < e.length; t++) {
                  var r = e[t],
                    n = r[0],
                    i = r[1];
                  if (void 0 !== r[2]) throw new Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");
                  if (20 != n.length) throw new Error("Invalid EIP-2930 transaction: address length should be 20 bytes");
                  for (var o = 0; o < i.length; o++) if (32 != i[o].length) throw new Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes");
                }
              }, e.getAccessListJSON = function (e) {
                for (var t = [], r = 0; r < e.length; r++) {
                  for (var i = e[r], o = {
                      address: "0x" + (0, n.setLengthLeft)(i[0], 20).toString("hex"),
                      storageKeys: []
                    }, a = i[1], s = 0; s < a.length; s++) {
                    var u = a[s];
                    o.storageKeys.push("0x" + (0, n.setLengthLeft)(u, 32).toString("hex"));
                  }
                  t.push(o);
                }
                return t;
              }, e.getDataFeeEIP2930 = function (e, t) {
                for (var r = t.param("gasPrices", "accessListStorageKeyCost"), n = t.param("gasPrices", "accessListAddressCost"), i = 0, o = 0; o < e.length; o++) i += e[o][1].length;
                return e.length * n + i * r;
              }, e;
            }();
          t.AccessLists = o;
        },
        8067: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.version = void 0, t.version = "abi/5.7.0";
        },
        4937: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.defaultAbiCoder = t.AbiCoder = void 0;
          var i = n(r(9721)),
            o = n(r(8985)),
            a = r(908),
            s = r(3694),
            u = r(4327),
            c = r(8067),
            f = r(7316),
            d = r(9146),
            l = r(4341),
            h = r(24),
            p = r(3861),
            b = r(28),
            y = r(4522),
            m = r(8287),
            v = r(8040),
            g = r(2010),
            w = r(800),
            A = new u.Logger(c.version),
            k = new RegExp(/^bytes([0-9]*)$/),
            _ = new RegExp(/^(u?int)([0-9]*)$/),
            S = function () {
              function e(t) {
                (0, i.default)(this, e), (0, s.defineReadOnly)(this, "coerceFunc", t || null);
              }
              return (0, o.default)(e, [{
                key: "_getCoder",
                value: function value(e) {
                  var t = this;
                  switch (e.baseType) {
                    case "address":
                      return new d.AddressCoder(e.name);
                    case "bool":
                      return new h.BooleanCoder(e.name);
                    case "string":
                      return new v.StringCoder(e.name);
                    case "bytes":
                      return new p.BytesCoder(e.name);
                    case "array":
                      return new l.ArrayCoder(this._getCoder(e.arrayChildren), e.arrayLength, e.name);
                    case "tuple":
                      return new g.TupleCoder((e.components || []).map(function (e) {
                        return t._getCoder(e);
                      }), e.name);
                    case "":
                      return new y.NullCoder(e.name);
                  }
                  var r = e.type.match(_);
                  if (r) {
                    var n = parseInt(r[2] || "256");
                    return (0 === n || n > 256 || n % 8 != 0) && A.throwArgumentError("invalid " + r[1] + " bit length", "param", e), new m.NumberCoder(n / 8, "int" === r[1], e.name);
                  }
                  if (r = e.type.match(k)) {
                    var i = parseInt(r[1]);
                    return (0 === i || i > 32) && A.throwArgumentError("invalid bytes length", "param", e), new b.FixedBytesCoder(i, e.name);
                  }
                  return A.throwArgumentError("invalid type", "type", e.type);
                }
              }, {
                key: "_getWordSize",
                value: function value() {
                  return 32;
                }
              }, {
                key: "_getReader",
                value: function value(e, t) {
                  return new f.Reader(e, this._getWordSize(), this.coerceFunc, t);
                }
              }, {
                key: "_getWriter",
                value: function value() {
                  return new f.Writer(this._getWordSize());
                }
              }, {
                key: "getDefaultValue",
                value: function value(e) {
                  var t = this,
                    r = e.map(function (e) {
                      return t._getCoder(w.ParamType.from(e));
                    });
                  return new g.TupleCoder(r, "_").defaultValue();
                }
              }, {
                key: "encode",
                value: function value(e, t) {
                  var r = this;
                  e.length !== t.length && A.throwError("types/values length mismatch", u.Logger.errors.INVALID_ARGUMENT, {
                    count: {
                      types: e.length,
                      values: t.length
                    },
                    value: {
                      types: e,
                      values: t
                    }
                  });
                  var n = e.map(function (e) {
                      return r._getCoder(w.ParamType.from(e));
                    }),
                    i = new g.TupleCoder(n, "_"),
                    o = this._getWriter();
                  return i.encode(o, t), o.data;
                }
              }, {
                key: "decode",
                value: function value(e, t, r) {
                  var n = this,
                    i = e.map(function (e) {
                      return n._getCoder(w.ParamType.from(e));
                    });
                  return new g.TupleCoder(i, "_").decode(this._getReader((0, a.arrayify)(t), r));
                }
              }]), e;
            }();
          t.AbiCoder = S;
          var E = new S();
          t.defaultAbiCoder = E;
        },
        7316: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.Writer = t.Reader = t.Coder = void 0, t.checkResultErrors = function (e) {
            var t = [];
            return function e(r, n) {
              if (Array.isArray(n)) for (var i in n) {
                var o = r.slice();
                o.push(i);
                try {
                  e(o, n[i]);
                } catch (e) {
                  t.push({
                    path: o,
                    error: e
                  });
                }
              }
            }([], e), t;
          };
          var i = n(r(9721)),
            o = n(r(8985)),
            a = r(908),
            s = r(4952),
            u = r(3694),
            c = r(4327),
            f = r(8067),
            d = new c.Logger(f.version),
            l = function () {
              function e(t, r, n, o) {
                (0, i.default)(this, e), this.name = t, this.type = r, this.localName = n, this.dynamic = o;
              }
              return (0, o.default)(e, [{
                key: "_throwError",
                value: function value(e, t) {
                  d.throwArgumentError(e, this.localName, t);
                }
              }]), e;
            }();
          t.Coder = l;
          var h = function () {
            function e(t) {
              (0, i.default)(this, e), (0, u.defineReadOnly)(this, "wordSize", t || 32), this._data = [], this._dataLength = 0, this._padding = new Uint8Array(t);
            }
            return (0, o.default)(e, [{
              key: "data",
              get: function get() {
                return (0, a.hexConcat)(this._data);
              }
            }, {
              key: "length",
              get: function get() {
                return this._dataLength;
              }
            }, {
              key: "_writeData",
              value: function value(e) {
                return this._data.push(e), this._dataLength += e.length, e.length;
              }
            }, {
              key: "appendWriter",
              value: function value(e) {
                return this._writeData((0, a.concat)(e._data));
              }
            }, {
              key: "writeBytes",
              value: function value(e) {
                var t = (0, a.arrayify)(e),
                  r = t.length % this.wordSize;
                return r && (t = (0, a.concat)([t, this._padding.slice(r)])), this._writeData(t);
              }
            }, {
              key: "_getValue",
              value: function value(e) {
                var t = (0, a.arrayify)(s.BigNumber.from(e));
                return t.length > this.wordSize && d.throwError("value out-of-bounds", c.Logger.errors.BUFFER_OVERRUN, {
                  length: this.wordSize,
                  offset: t.length
                }), t.length % this.wordSize && (t = (0, a.concat)([this._padding.slice(t.length % this.wordSize), t])), t;
              }
            }, {
              key: "writeValue",
              value: function value(e) {
                return this._writeData(this._getValue(e));
              }
            }, {
              key: "writeUpdatableValue",
              value: function value() {
                var e = this,
                  t = this._data.length;
                return this._data.push(this._padding), this._dataLength += this.wordSize, function (r) {
                  e._data[t] = e._getValue(r);
                };
              }
            }]), e;
          }();
          t.Writer = h;
          var p = function () {
            function e(t, r, n, o) {
              (0, i.default)(this, e), (0, u.defineReadOnly)(this, "_data", (0, a.arrayify)(t)), (0, u.defineReadOnly)(this, "wordSize", r || 32), (0, u.defineReadOnly)(this, "_coerceFunc", n), (0, u.defineReadOnly)(this, "allowLoose", o), this._offset = 0;
            }
            return (0, o.default)(e, [{
              key: "data",
              get: function get() {
                return (0, a.hexlify)(this._data);
              }
            }, {
              key: "consumed",
              get: function get() {
                return this._offset;
              }
            }, {
              key: "coerce",
              value: function value(t, r) {
                return this._coerceFunc ? this._coerceFunc(t, r) : e.coerce(t, r);
              }
            }, {
              key: "_peekBytes",
              value: function value(e, t, r) {
                var n = Math.ceil(t / this.wordSize) * this.wordSize;
                return this._offset + n > this._data.length && (this.allowLoose && r && this._offset + t <= this._data.length ? n = t : d.throwError("data out-of-bounds", c.Logger.errors.BUFFER_OVERRUN, {
                  length: this._data.length,
                  offset: this._offset + n
                })), this._data.slice(this._offset, this._offset + n);
              }
            }, {
              key: "subReader",
              value: function value(t) {
                return new e(this._data.slice(this._offset + t), this.wordSize, this._coerceFunc, this.allowLoose);
              }
            }, {
              key: "readBytes",
              value: function value(e, t) {
                var r = this._peekBytes(0, e, !!t);
                return this._offset += r.length, r.slice(0, e);
              }
            }, {
              key: "readValue",
              value: function value() {
                return s.BigNumber.from(this.readBytes(this.wordSize));
              }
            }], [{
              key: "coerce",
              value: function value(e, t) {
                var r = e.match("^u?int([0-9]+)$");
                return r && parseInt(r[1]) <= 48 && (t = t.toNumber()), t;
              }
            }]), e;
          }();
          t.Reader = p;
        },
        9146: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.AddressCoder = void 0;
          var i = n(r(9721)),
            o = n(r(8985)),
            a = n(r(5163)),
            s = n(r(4650)),
            u = n(r(1949)),
            c = r(7921),
            f = r(908);
          var d = function (e) {
            (0, a.default)(d, e);
            var t,
              r,
              n = (t = d, r = function () {
                if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                if (Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                  return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                } catch (e) {
                  return !1;
                }
              }(), function () {
                var e,
                  n = (0, u.default)(t);
                if (r) {
                  var i = (0, u.default)(this).constructor;
                  e = Reflect.construct(n, arguments, i);
                } else e = n.apply(this, arguments);
                return (0, s.default)(this, e);
              });
            function d(e) {
              return (0, i.default)(this, d), n.call(this, "address", "address", e, !1);
            }
            return (0, o.default)(d, [{
              key: "defaultValue",
              value: function value() {
                return "0x0000000000000000000000000000000000000000";
              }
            }, {
              key: "encode",
              value: function value(e, t) {
                try {
                  t = (0, c.getAddress)(t);
                } catch (e) {
                  this._throwError(e.message, t);
                }
                return e.writeValue(t);
              }
            }, {
              key: "decode",
              value: function value(e) {
                return (0, c.getAddress)((0, f.hexZeroPad)(e.readValue().toHexString(), 20));
              }
            }]), d;
          }(r(7316).Coder);
          t.AddressCoder = d;
        },
        8090: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.AnonymousCoder = void 0;
          var i = n(r(9721)),
            o = n(r(8985)),
            a = n(r(5163)),
            s = n(r(4650)),
            u = n(r(1949));
          var c = function (e) {
            (0, a.default)(c, e);
            var t,
              r,
              n = (t = c, r = function () {
                if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                if (Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                  return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                } catch (e) {
                  return !1;
                }
              }(), function () {
                var e,
                  n = (0, u.default)(t);
                if (r) {
                  var i = (0, u.default)(this).constructor;
                  e = Reflect.construct(n, arguments, i);
                } else e = n.apply(this, arguments);
                return (0, s.default)(this, e);
              });
            function c(e) {
              var t;
              return (0, i.default)(this, c), (t = n.call(this, e.name, e.type, void 0, e.dynamic)).coder = e, t;
            }
            return (0, o.default)(c, [{
              key: "defaultValue",
              value: function value() {
                return this.coder.defaultValue();
              }
            }, {
              key: "encode",
              value: function value(e, t) {
                return this.coder.encode(e, t);
              }
            }, {
              key: "decode",
              value: function value(e) {
                return this.coder.decode(e);
              }
            }]), c;
          }(r(7316).Coder);
          t.AnonymousCoder = c;
        },
        4341: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.ArrayCoder = void 0, t.pack = b, t.unpack = y;
          var i = n(r(9721)),
            o = n(r(8985)),
            a = n(r(5163)),
            s = n(r(4650)),
            u = n(r(1949)),
            c = n(r(3355)),
            f = r(4327),
            d = r(8067),
            l = r(7316),
            h = r(8090);
          var p = new f.Logger(d.version);
          function b(e, t, r) {
            var n = null;
            if (Array.isArray(r)) n = r;else if (r && "object" === (0, c.default)(r)) {
              var i = {};
              n = t.map(function (e) {
                var t = e.localName;
                return t || p.throwError("cannot encode object for signature with missing names", f.Logger.errors.INVALID_ARGUMENT, {
                  argument: "values",
                  coder: e,
                  value: r
                }), i[t] && p.throwError("cannot encode object for signature with duplicate names", f.Logger.errors.INVALID_ARGUMENT, {
                  argument: "values",
                  coder: e,
                  value: r
                }), i[t] = !0, r[t];
              });
            } else p.throwArgumentError("invalid tuple value", "tuple", r);
            t.length !== n.length && p.throwArgumentError("types/value length mismatch", "tuple", r);
            var o = new l.Writer(e.wordSize),
              a = new l.Writer(e.wordSize),
              s = [];
            return t.forEach(function (e, t) {
              var r = n[t];
              if (e.dynamic) {
                var i = a.length;
                e.encode(a, r);
                var u = o.writeUpdatableValue();
                s.push(function (e) {
                  u(e + i);
                });
              } else e.encode(o, r);
            }), s.forEach(function (e) {
              e(o.length);
            }), e.appendWriter(o) + e.appendWriter(a);
          }
          function y(e, t) {
            var r = [],
              n = e.subReader(0);
            t.forEach(function (t) {
              var i = null;
              if (t.dynamic) {
                var o = e.readValue(),
                  a = n.subReader(o.toNumber());
                try {
                  i = t.decode(a);
                } catch (e) {
                  if (e.code === f.Logger.errors.BUFFER_OVERRUN) throw e;
                  (i = e).baseType = t.name, i.name = t.localName, i.type = t.type;
                }
              } else try {
                i = t.decode(e);
              } catch (e) {
                if (e.code === f.Logger.errors.BUFFER_OVERRUN) throw e;
                (i = e).baseType = t.name, i.name = t.localName, i.type = t.type;
              }
              null != i && r.push(i);
            });
            var i = t.reduce(function (e, t) {
              var r = t.localName;
              return r && (e[r] || (e[r] = 0), e[r]++), e;
            }, {});
            t.forEach(function (e, t) {
              var n = e.localName;
              if (n && 1 === i[n] && ("length" === n && (n = "_length"), null == r[n])) {
                var o = r[t];
                o instanceof Error ? Object.defineProperty(r, n, {
                  enumerable: !0,
                  get: function get() {
                    throw o;
                  }
                }) : r[n] = o;
              }
            });
            for (var o = function o(e) {
                var t = r[e];
                t instanceof Error && Object.defineProperty(r, e, {
                  enumerable: !0,
                  get: function get() {
                    throw t;
                  }
                });
              }, a = 0; a < r.length; a++) o(a);
            return Object.freeze(r);
          }
          var m = function (e) {
            (0, a.default)(c, e);
            var t,
              r,
              n = (t = c, r = function () {
                if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                if (Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                  return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                } catch (e) {
                  return !1;
                }
              }(), function () {
                var e,
                  n = (0, u.default)(t);
                if (r) {
                  var i = (0, u.default)(this).constructor;
                  e = Reflect.construct(n, arguments, i);
                } else e = n.apply(this, arguments);
                return (0, s.default)(this, e);
              });
            function c(e, t, r) {
              var o;
              (0, i.default)(this, c);
              var a = e.type + "[" + (t >= 0 ? t : "") + "]",
                s = -1 === t || e.dynamic;
              return (o = n.call(this, "array", a, r, s)).coder = e, o.length = t, o;
            }
            return (0, o.default)(c, [{
              key: "defaultValue",
              value: function value() {
                for (var e = this.coder.defaultValue(), t = [], r = 0; r < this.length; r++) t.push(e);
                return t;
              }
            }, {
              key: "encode",
              value: function value(e, t) {
                Array.isArray(t) || this._throwError("expected array value", t);
                var r = this.length;
                -1 === r && (r = t.length, e.writeValue(t.length)), p.checkArgumentCount(t.length, r, "coder array" + (this.localName ? " " + this.localName : ""));
                for (var n = [], i = 0; i < t.length; i++) n.push(this.coder);
                return b(e, n, t);
              }
            }, {
              key: "decode",
              value: function value(e) {
                var t = this.length;
                -1 === t && 32 * (t = e.readValue().toNumber()) > e._data.length && p.throwError("insufficient data length", f.Logger.errors.BUFFER_OVERRUN, {
                  length: e._data.length,
                  count: t
                });
                for (var r = [], n = 0; n < t; n++) r.push(new h.AnonymousCoder(this.coder));
                return e.coerce(this.name, y(e, r));
              }
            }]), c;
          }(l.Coder);
          t.ArrayCoder = m;
        },
        24: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.BooleanCoder = void 0;
          var i = n(r(9721)),
            o = n(r(8985)),
            a = n(r(5163)),
            s = n(r(4650)),
            u = n(r(1949));
          var c = function (e) {
            (0, a.default)(c, e);
            var t,
              r,
              n = (t = c, r = function () {
                if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                if (Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                  return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                } catch (e) {
                  return !1;
                }
              }(), function () {
                var e,
                  n = (0, u.default)(t);
                if (r) {
                  var i = (0, u.default)(this).constructor;
                  e = Reflect.construct(n, arguments, i);
                } else e = n.apply(this, arguments);
                return (0, s.default)(this, e);
              });
            function c(e) {
              return (0, i.default)(this, c), n.call(this, "bool", "bool", e, !1);
            }
            return (0, o.default)(c, [{
              key: "defaultValue",
              value: function value() {
                return !1;
              }
            }, {
              key: "encode",
              value: function value(e, t) {
                return e.writeValue(t ? 1 : 0);
              }
            }, {
              key: "decode",
              value: function value(e) {
                return e.coerce(this.type, !e.readValue().isZero());
              }
            }]), c;
          }(r(7316).Coder);
          t.BooleanCoder = c;
        },
        3861: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.DynamicBytesCoder = t.BytesCoder = void 0;
          var i = n(r(119)),
            o = n(r(9721)),
            a = n(r(8985)),
            s = n(r(5163)),
            u = n(r(4650)),
            c = n(r(1949)),
            f = r(908);
          function d(e) {
            var t = function () {
              if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
              if (Reflect.construct.sham) return !1;
              if ("function" == typeof Proxy) return !0;
              try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
              } catch (e) {
                return !1;
              }
            }();
            return function () {
              var r,
                n = (0, c.default)(e);
              if (t) {
                var i = (0, c.default)(this).constructor;
                r = Reflect.construct(n, arguments, i);
              } else r = n.apply(this, arguments);
              return (0, u.default)(this, r);
            };
          }
          var l = function (e) {
            (0, s.default)(r, e);
            var t = d(r);
            function r(e, n) {
              return (0, o.default)(this, r), t.call(this, e, e, n, !0);
            }
            return (0, a.default)(r, [{
              key: "defaultValue",
              value: function value() {
                return "0x";
              }
            }, {
              key: "encode",
              value: function value(e, t) {
                return t = (0, f.arrayify)(t), e.writeValue(t.length) + e.writeBytes(t);
              }
            }, {
              key: "decode",
              value: function value(e) {
                return e.readBytes(e.readValue().toNumber(), !0);
              }
            }]), r;
          }(r(7316).Coder);
          t.DynamicBytesCoder = l;
          var h = function (e) {
            (0, s.default)(r, e);
            var t = d(r);
            function r(e) {
              return (0, o.default)(this, r), t.call(this, "bytes", e);
            }
            return (0, a.default)(r, [{
              key: "decode",
              value: function value(e) {
                return e.coerce(this.name, (0, f.hexlify)((0, i.default)((0, c.default)(r.prototype), "decode", this).call(this, e)));
              }
            }]), r;
          }(l);
          t.BytesCoder = h;
        },
        28: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.FixedBytesCoder = void 0;
          var i = n(r(9721)),
            o = n(r(8985)),
            a = n(r(5163)),
            s = n(r(4650)),
            u = n(r(1949)),
            c = r(908);
          var f = function (e) {
            (0, a.default)(f, e);
            var t,
              r,
              n = (t = f, r = function () {
                if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                if (Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                  return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                } catch (e) {
                  return !1;
                }
              }(), function () {
                var e,
                  n = (0, u.default)(t);
                if (r) {
                  var i = (0, u.default)(this).constructor;
                  e = Reflect.construct(n, arguments, i);
                } else e = n.apply(this, arguments);
                return (0, s.default)(this, e);
              });
            function f(e, t) {
              var r;
              (0, i.default)(this, f);
              var o = "bytes" + String(e);
              return (r = n.call(this, o, o, t, !1)).size = e, r;
            }
            return (0, o.default)(f, [{
              key: "defaultValue",
              value: function value() {
                return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + 2 * this.size);
              }
            }, {
              key: "encode",
              value: function value(e, t) {
                var r = (0, c.arrayify)(t);
                return r.length !== this.size && this._throwError("incorrect data length", t), e.writeBytes(r);
              }
            }, {
              key: "decode",
              value: function value(e) {
                return e.coerce(this.name, (0, c.hexlify)(e.readBytes(this.size)));
              }
            }]), f;
          }(r(7316).Coder);
          t.FixedBytesCoder = f;
        },
        4522: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.NullCoder = void 0;
          var i = n(r(9721)),
            o = n(r(8985)),
            a = n(r(5163)),
            s = n(r(4650)),
            u = n(r(1949));
          var c = function (e) {
            (0, a.default)(c, e);
            var t,
              r,
              n = (t = c, r = function () {
                if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                if (Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                  return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                } catch (e) {
                  return !1;
                }
              }(), function () {
                var e,
                  n = (0, u.default)(t);
                if (r) {
                  var i = (0, u.default)(this).constructor;
                  e = Reflect.construct(n, arguments, i);
                } else e = n.apply(this, arguments);
                return (0, s.default)(this, e);
              });
            function c(e) {
              return (0, i.default)(this, c), n.call(this, "null", "", e, !1);
            }
            return (0, o.default)(c, [{
              key: "defaultValue",
              value: function value() {
                return null;
              }
            }, {
              key: "encode",
              value: function value(e, t) {
                return null != t && this._throwError("not null", t), e.writeBytes([]);
              }
            }, {
              key: "decode",
              value: function value(e) {
                return e.readBytes(0), e.coerce(this.name, null);
              }
            }]), c;
          }(r(7316).Coder);
          t.NullCoder = c;
        },
        8287: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.NumberCoder = void 0;
          var i = n(r(9721)),
            o = n(r(8985)),
            a = n(r(5163)),
            s = n(r(4650)),
            u = n(r(1949)),
            c = r(4952),
            f = r(5465);
          var d = function (e) {
            (0, a.default)(d, e);
            var t,
              r,
              n = (t = d, r = function () {
                if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                if (Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                  return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                } catch (e) {
                  return !1;
                }
              }(), function () {
                var e,
                  n = (0, u.default)(t);
                if (r) {
                  var i = (0, u.default)(this).constructor;
                  e = Reflect.construct(n, arguments, i);
                } else e = n.apply(this, arguments);
                return (0, s.default)(this, e);
              });
            function d(e, t, r) {
              var o;
              (0, i.default)(this, d);
              var a = (t ? "int" : "uint") + 8 * e;
              return (o = n.call(this, a, a, r, !1)).size = e, o.signed = t, o;
            }
            return (0, o.default)(d, [{
              key: "defaultValue",
              value: function value() {
                return 0;
              }
            }, {
              key: "encode",
              value: function value(e, t) {
                var r = c.BigNumber.from(t),
                  n = f.MaxUint256.mask(8 * e.wordSize);
                if (this.signed) {
                  var i = n.mask(8 * this.size - 1);
                  (r.gt(i) || r.lt(i.add(f.One).mul(f.NegativeOne))) && this._throwError("value out-of-bounds", t);
                } else (r.lt(f.Zero) || r.gt(n.mask(8 * this.size))) && this._throwError("value out-of-bounds", t);
                return r = r.toTwos(8 * this.size).mask(8 * this.size), this.signed && (r = r.fromTwos(8 * this.size).toTwos(8 * e.wordSize)), e.writeValue(r);
              }
            }, {
              key: "decode",
              value: function value(e) {
                var t = e.readValue().mask(8 * this.size);
                return this.signed && (t = t.fromTwos(8 * this.size)), e.coerce(this.name, t);
              }
            }]), d;
          }(r(7316).Coder);
          t.NumberCoder = d;
        },
        8040: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.StringCoder = void 0;
          var i = n(r(9721)),
            o = n(r(8985)),
            a = n(r(119)),
            s = n(r(5163)),
            u = n(r(4650)),
            c = n(r(1949)),
            f = r(8627);
          var d = function (e) {
            (0, s.default)(d, e);
            var t,
              r,
              n = (t = d, r = function () {
                if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                if (Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                  return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                } catch (e) {
                  return !1;
                }
              }(), function () {
                var e,
                  n = (0, c.default)(t);
                if (r) {
                  var i = (0, c.default)(this).constructor;
                  e = Reflect.construct(n, arguments, i);
                } else e = n.apply(this, arguments);
                return (0, u.default)(this, e);
              });
            function d(e) {
              return (0, i.default)(this, d), n.call(this, "string", e);
            }
            return (0, o.default)(d, [{
              key: "defaultValue",
              value: function value() {
                return "";
              }
            }, {
              key: "encode",
              value: function value(e, t) {
                return (0, a.default)((0, c.default)(d.prototype), "encode", this).call(this, e, (0, f.toUtf8Bytes)(t));
              }
            }, {
              key: "decode",
              value: function value(e) {
                return (0, f.toUtf8String)((0, a.default)((0, c.default)(d.prototype), "decode", this).call(this, e));
              }
            }]), d;
          }(r(3861).DynamicBytesCoder);
          t.StringCoder = d;
        },
        2010: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.TupleCoder = void 0;
          var i = n(r(9721)),
            o = n(r(8985)),
            a = n(r(5163)),
            s = n(r(4650)),
            u = n(r(1949)),
            c = r(7316),
            f = r(4341);
          var d = function (e) {
            (0, a.default)(c, e);
            var t,
              r,
              n = (t = c, r = function () {
                if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                if (Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                  return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                } catch (e) {
                  return !1;
                }
              }(), function () {
                var e,
                  n = (0, u.default)(t);
                if (r) {
                  var i = (0, u.default)(this).constructor;
                  e = Reflect.construct(n, arguments, i);
                } else e = n.apply(this, arguments);
                return (0, s.default)(this, e);
              });
            function c(e, t) {
              var r;
              (0, i.default)(this, c);
              var o = !1,
                a = [];
              e.forEach(function (e) {
                e.dynamic && (o = !0), a.push(e.type);
              });
              var s = "tuple(" + a.join(",") + ")";
              return (r = n.call(this, "tuple", s, t, o)).coders = e, r;
            }
            return (0, o.default)(c, [{
              key: "defaultValue",
              value: function value() {
                var e = [];
                this.coders.forEach(function (t) {
                  e.push(t.defaultValue());
                });
                var t = this.coders.reduce(function (e, t) {
                  var r = t.localName;
                  return r && (e[r] || (e[r] = 0), e[r]++), e;
                }, {});
                return this.coders.forEach(function (r, n) {
                  var i = r.localName;
                  i && 1 === t[i] && ("length" === i && (i = "_length"), null == e[i] && (e[i] = e[n]));
                }), Object.freeze(e);
              }
            }, {
              key: "encode",
              value: function value(e, t) {
                return (0, f.pack)(e, this.coders, t);
              }
            }, {
              key: "decode",
              value: function value(e) {
                return e.coerce(this.name, (0, f.unpack)(e, this.coders));
              }
            }]), c;
          }(c.Coder);
          t.TupleCoder = d;
        },
        800: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.ParamType = t.FunctionFragment = t.Fragment = t.FormatTypes = t.EventFragment = t.ErrorFragment = t.ConstructorFragment = void 0;
          var i = n(r(5163)),
            o = n(r(4650)),
            a = n(r(1949)),
            s = n(r(9721)),
            u = n(r(8985)),
            c = r(4952),
            f = r(3694),
            d = r(4327),
            l = r(8067);
          function h(e) {
            var t = function () {
              if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
              if (Reflect.construct.sham) return !1;
              if ("function" == typeof Proxy) return !0;
              try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
              } catch (e) {
                return !1;
              }
            }();
            return function () {
              var r,
                n = (0, a.default)(e);
              if (t) {
                var i = (0, a.default)(this).constructor;
                r = Reflect.construct(n, arguments, i);
              } else r = n.apply(this, arguments);
              return (0, o.default)(this, r);
            };
          }
          var p = new d.Logger(l.version),
            b = {},
            y = {
              calldata: !0,
              memory: !0,
              storage: !0
            },
            m = {
              calldata: !0,
              memory: !0
            };
          function v(e, t) {
            if ("bytes" === e || "string" === e) {
              if (y[t]) return !0;
            } else if ("address" === e) {
              if ("payable" === t) return !0;
            } else if ((e.indexOf("[") >= 0 || "tuple" === e) && m[t]) return !0;
            return (y[t] || "payable" === t) && p.throwArgumentError("invalid modifier", "name", t), !1;
          }
          function g(e, t) {
            for (var r in t) (0, f.defineReadOnly)(e, r, t[r]);
          }
          var w = Object.freeze({
            sighash: "sighash",
            minimal: "minimal",
            full: "full",
            json: "json"
          });
          t.FormatTypes = w;
          var A = new RegExp(/^(.*)\[([0-9]*)\]$/),
            k = function () {
              function e(t, r) {
                (0, s.default)(this, e), t !== b && p.throwError("use fromString", d.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "new ParamType()"
                }), g(this, r);
                var n = this.type.match(A);
                g(this, n ? {
                  arrayLength: parseInt(n[2] || "-1"),
                  arrayChildren: e.fromObject({
                    type: n[1],
                    components: this.components
                  }),
                  baseType: "array"
                } : {
                  arrayLength: null,
                  arrayChildren: null,
                  baseType: null != this.components ? "tuple" : this.type
                }), this._isParamType = !0, Object.freeze(this);
              }
              return (0, u.default)(e, [{
                key: "format",
                value: function value(e) {
                  if (e || (e = w.sighash), w[e] || p.throwArgumentError("invalid format type", "format", e), e === w.json) {
                    var t = {
                      type: "tuple" === this.baseType ? "tuple" : this.type,
                      name: this.name || void 0
                    };
                    return "boolean" == typeof this.indexed && (t.indexed = this.indexed), this.components && (t.components = this.components.map(function (t) {
                      return JSON.parse(t.format(e));
                    })), JSON.stringify(t);
                  }
                  var r = "";
                  return "array" === this.baseType ? (r += this.arrayChildren.format(e), r += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]") : "tuple" === this.baseType ? (e !== w.sighash && (r += this.type), r += "(" + this.components.map(function (t) {
                    return t.format(e);
                  }).join(e === w.full ? ", " : ",") + ")") : r += this.type, e !== w.sighash && (!0 === this.indexed && (r += " indexed"), e === w.full && this.name && (r += " " + this.name)), r;
                }
              }], [{
                key: "from",
                value: function value(t, r) {
                  return "string" == typeof t ? e.fromString(t, r) : e.fromObject(t);
                }
              }, {
                key: "fromObject",
                value: function value(t) {
                  return e.isParamType(t) ? t : new e(b, {
                    name: t.name || null,
                    type: M(t.type),
                    indexed: null == t.indexed ? null : !!t.indexed,
                    components: t.components ? t.components.map(e.fromObject) : null
                  });
                }
              }, {
                key: "fromString",
                value: function value(t, r) {
                  return n = function (e, t) {
                    var r = e;
                    function n(t) {
                      p.throwArgumentError("unexpected character at position ".concat(t), "param", e);
                    }
                    function i(e) {
                      var r = {
                        type: "",
                        name: "",
                        parent: e,
                        state: {
                          allowType: !0
                        }
                      };
                      return t && (r.indexed = !1), r;
                    }
                    e = e.replace(/\s/g, " ");
                    for (var o = {
                        type: "",
                        name: "",
                        state: {
                          allowType: !0
                        }
                      }, a = o, s = 0; s < e.length; s++) {
                      var u = e[s];
                      switch (u) {
                        case "(":
                          a.state.allowType && "" === a.type ? a.type = "tuple" : a.state.allowParams || n(s), a.state.allowType = !1, a.type = M(a.type), a.components = [i(a)], a = a.components[0];
                          break;
                        case ")":
                          delete a.state, "indexed" === a.name && (t || n(s), a.indexed = !0, a.name = ""), v(a.type, a.name) && (a.name = ""), a.type = M(a.type);
                          var c = a;
                          (a = a.parent) || n(s), delete c.parent, a.state.allowParams = !1, a.state.allowName = !0, a.state.allowArray = !0;
                          break;
                        case ",":
                          delete a.state, "indexed" === a.name && (t || n(s), a.indexed = !0, a.name = ""), v(a.type, a.name) && (a.name = ""), a.type = M(a.type);
                          var f = i(a.parent);
                          a.parent.components.push(f), delete a.parent, a = f;
                          break;
                        case " ":
                          a.state.allowType && "" !== a.type && (a.type = M(a.type), delete a.state.allowType, a.state.allowName = !0, a.state.allowParams = !0), a.state.allowName && "" !== a.name && ("indexed" === a.name ? (t || n(s), a.indexed && n(s), a.indexed = !0, a.name = "") : v(a.type, a.name) ? a.name = "" : a.state.allowName = !1);
                          break;
                        case "[":
                          a.state.allowArray || n(s), a.type += u, a.state.allowArray = !1, a.state.allowName = !1, a.state.readArray = !0;
                          break;
                        case "]":
                          a.state.readArray || n(s), a.type += u, a.state.readArray = !1, a.state.allowArray = !0, a.state.allowName = !0;
                          break;
                        default:
                          a.state.allowType ? (a.type += u, a.state.allowParams = !0, a.state.allowArray = !0) : a.state.allowName ? (a.name += u, delete a.state.allowArray) : a.state.readArray ? a.type += u : n(s);
                      }
                    }
                    return a.parent && p.throwArgumentError("unexpected eof", "param", e), delete o.state, "indexed" === a.name ? (t || n(r.length - 7), a.indexed && n(r.length - 7), a.indexed = !0, a.name = "") : v(a.type, a.name) && (a.name = ""), o.type = M(o.type), o;
                  }(t, !!r), e.fromObject({
                    name: n.name,
                    type: n.type,
                    indexed: n.indexed,
                    components: n.components
                  });
                  var n;
                }
              }, {
                key: "isParamType",
                value: function value(e) {
                  return !(null == e || !e._isParamType);
                }
              }]), e;
            }();
          function _(e, t) {
            return function (e) {
              e = e.trim();
              for (var t = [], r = "", n = 0, i = 0; i < e.length; i++) {
                var o = e[i];
                "," === o && 0 === n ? (t.push(r), r = "") : (r += o, "(" === o ? n++ : ")" === o && -1 == --n && p.throwArgumentError("unbalanced parenthesis", "value", e));
              }
              return r && t.push(r), t;
            }(e).map(function (e) {
              return k.fromString(e, t);
            });
          }
          t.ParamType = k;
          var S = function () {
            function e(t, r) {
              (0, s.default)(this, e), t !== b && p.throwError("use a static from method", d.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new Fragment()"
              }), g(this, r), this._isFragment = !0, Object.freeze(this);
            }
            return (0, u.default)(e, null, [{
              key: "from",
              value: function value(t) {
                return e.isFragment(t) ? t : "string" == typeof t ? e.fromString(t) : e.fromObject(t);
              }
            }, {
              key: "fromObject",
              value: function value(t) {
                if (e.isFragment(t)) return t;
                switch (t.type) {
                  case "function":
                    return T.fromObject(t);
                  case "event":
                    return E.fromObject(t);
                  case "constructor":
                    return B.fromObject(t);
                  case "error":
                    return I.fromObject(t);
                  case "fallback":
                  case "receive":
                    return null;
                }
                return p.throwArgumentError("invalid fragment object", "value", t);
              }
            }, {
              key: "fromString",
              value: function value(e) {
                return "event" === (e = (e = (e = e.replace(/\s/g, " ")).replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ")).trim()).split(" ")[0] ? E.fromString(e.substring(5).trim()) : "function" === e.split(" ")[0] ? T.fromString(e.substring(8).trim()) : "constructor" === e.split("(")[0].trim() ? B.fromString(e.trim()) : "error" === e.split(" ")[0] ? I.fromString(e.substring(5).trim()) : p.throwArgumentError("unsupported fragment", "value", e);
              }
            }, {
              key: "isFragment",
              value: function value(e) {
                return !(!e || !e._isFragment);
              }
            }]), e;
          }();
          t.Fragment = S;
          var E = function (e) {
            (0, i.default)(r, e);
            var t = h(r);
            function r() {
              return (0, s.default)(this, r), t.apply(this, arguments);
            }
            return (0, u.default)(r, [{
              key: "format",
              value: function value(e) {
                if (e || (e = w.sighash), w[e] || p.throwArgumentError("invalid format type", "format", e), e === w.json) return JSON.stringify({
                  type: "event",
                  anonymous: this.anonymous,
                  name: this.name,
                  inputs: this.inputs.map(function (t) {
                    return JSON.parse(t.format(e));
                  })
                });
                var t = "";
                return e !== w.sighash && (t += "event "), t += this.name + "(" + this.inputs.map(function (t) {
                  return t.format(e);
                }).join(e === w.full ? ", " : ",") + ") ", e !== w.sighash && this.anonymous && (t += "anonymous "), t.trim();
              }
            }], [{
              key: "from",
              value: function value(e) {
                return "string" == typeof e ? r.fromString(e) : r.fromObject(e);
              }
            }, {
              key: "fromObject",
              value: function value(e) {
                if (r.isEventFragment(e)) return e;
                "event" !== e.type && p.throwArgumentError("invalid event object", "value", e);
                var t = {
                  name: R(e.name),
                  anonymous: e.anonymous,
                  inputs: e.inputs ? e.inputs.map(k.fromObject) : [],
                  type: "event"
                };
                return new r(b, t);
              }
            }, {
              key: "fromString",
              value: function value(e) {
                var t = e.match(j);
                t || p.throwArgumentError("invalid event string", "value", e);
                var n = !1;
                return t[3].split(" ").forEach(function (e) {
                  switch (e.trim()) {
                    case "anonymous":
                      n = !0;
                      break;
                    case "":
                      break;
                    default:
                      p.warn("unknown modifier: " + e);
                  }
                }), r.fromObject({
                  name: t[1].trim(),
                  anonymous: n,
                  inputs: _(t[2], !0),
                  type: "event"
                });
              }
            }, {
              key: "isEventFragment",
              value: function value(e) {
                return e && e._isFragment && "event" === e.type;
              }
            }]), r;
          }(S);
          function x(e, t) {
            t.gas = null;
            var r = e.split("@");
            return 1 !== r.length ? (r.length > 2 && p.throwArgumentError("invalid human-readable ABI signature", "value", e), r[1].match(/^[0-9]+$/) || p.throwArgumentError("invalid human-readable ABI signature gas", "value", e), t.gas = c.BigNumber.from(r[1]), r[0]) : e;
          }
          function P(e, t) {
            t.constant = !1, t.payable = !1, t.stateMutability = "nonpayable", e.split(" ").forEach(function (e) {
              switch (e.trim()) {
                case "constant":
                  t.constant = !0;
                  break;
                case "payable":
                  t.payable = !0, t.stateMutability = "payable";
                  break;
                case "nonpayable":
                  t.payable = !1, t.stateMutability = "nonpayable";
                  break;
                case "pure":
                  t.constant = !0, t.stateMutability = "pure";
                  break;
                case "view":
                  t.constant = !0, t.stateMutability = "view";
                  break;
                case "external":
                case "public":
                case "":
                  break;
                default:
                  console.log("unknown modifier: " + e);
              }
            });
          }
          function O(e) {
            var t = {
              constant: !1,
              payable: !0,
              stateMutability: "payable"
            };
            return null != e.stateMutability ? (t.stateMutability = e.stateMutability, t.constant = "view" === t.stateMutability || "pure" === t.stateMutability, null != e.constant && !!e.constant !== t.constant && p.throwArgumentError("cannot have constant function with mutability " + t.stateMutability, "value", e), t.payable = "payable" === t.stateMutability, null != e.payable && !!e.payable !== t.payable && p.throwArgumentError("cannot have payable function with mutability " + t.stateMutability, "value", e)) : null != e.payable ? (t.payable = !!e.payable, null != e.constant || t.payable || "constructor" === e.type || p.throwArgumentError("unable to determine stateMutability", "value", e), t.constant = !!e.constant, t.constant ? t.stateMutability = "view" : t.stateMutability = t.payable ? "payable" : "nonpayable", t.payable && t.constant && p.throwArgumentError("cannot have constant payable function", "value", e)) : null != e.constant ? (t.constant = !!e.constant, t.payable = !t.constant, t.stateMutability = t.constant ? "view" : "payable") : "constructor" !== e.type && p.throwArgumentError("unable to determine stateMutability", "value", e), t;
          }
          t.EventFragment = E;
          var B = function (e) {
            (0, i.default)(r, e);
            var t = h(r);
            function r() {
              return (0, s.default)(this, r), t.apply(this, arguments);
            }
            return (0, u.default)(r, [{
              key: "format",
              value: function value(e) {
                if (e || (e = w.sighash), w[e] || p.throwArgumentError("invalid format type", "format", e), e === w.json) return JSON.stringify({
                  type: "constructor",
                  stateMutability: "nonpayable" !== this.stateMutability ? this.stateMutability : void 0,
                  payable: this.payable,
                  gas: this.gas ? this.gas.toNumber() : void 0,
                  inputs: this.inputs.map(function (t) {
                    return JSON.parse(t.format(e));
                  })
                });
                e === w.sighash && p.throwError("cannot format a constructor for sighash", d.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "format(sighash)"
                });
                var t = "constructor(" + this.inputs.map(function (t) {
                  return t.format(e);
                }).join(e === w.full ? ", " : ",") + ") ";
                return this.stateMutability && "nonpayable" !== this.stateMutability && (t += this.stateMutability + " "), t.trim();
              }
            }], [{
              key: "from",
              value: function value(e) {
                return "string" == typeof e ? r.fromString(e) : r.fromObject(e);
              }
            }, {
              key: "fromObject",
              value: function value(e) {
                if (r.isConstructorFragment(e)) return e;
                "constructor" !== e.type && p.throwArgumentError("invalid constructor object", "value", e);
                var t = O(e);
                t.constant && p.throwArgumentError("constructor cannot be constant", "value", e);
                var n = {
                  name: null,
                  type: e.type,
                  inputs: e.inputs ? e.inputs.map(k.fromObject) : [],
                  payable: t.payable,
                  stateMutability: t.stateMutability,
                  gas: e.gas ? c.BigNumber.from(e.gas) : null
                };
                return new r(b, n);
              }
            }, {
              key: "fromString",
              value: function value(e) {
                var t = {
                    type: "constructor"
                  },
                  n = (e = x(e, t)).match(j);
                return n && "constructor" === n[1].trim() || p.throwArgumentError("invalid constructor string", "value", e), t.inputs = _(n[2].trim(), !1), P(n[3].trim(), t), r.fromObject(t);
              }
            }, {
              key: "isConstructorFragment",
              value: function value(e) {
                return e && e._isFragment && "constructor" === e.type;
              }
            }]), r;
          }(S);
          t.ConstructorFragment = B;
          var T = function (e) {
            (0, i.default)(r, e);
            var t = h(r);
            function r() {
              return (0, s.default)(this, r), t.apply(this, arguments);
            }
            return (0, u.default)(r, [{
              key: "format",
              value: function value(e) {
                if (e || (e = w.sighash), w[e] || p.throwArgumentError("invalid format type", "format", e), e === w.json) return JSON.stringify({
                  type: "function",
                  name: this.name,
                  constant: this.constant,
                  stateMutability: "nonpayable" !== this.stateMutability ? this.stateMutability : void 0,
                  payable: this.payable,
                  gas: this.gas ? this.gas.toNumber() : void 0,
                  inputs: this.inputs.map(function (t) {
                    return JSON.parse(t.format(e));
                  }),
                  outputs: this.outputs.map(function (t) {
                    return JSON.parse(t.format(e));
                  })
                });
                var t = "";
                return e !== w.sighash && (t += "function "), t += this.name + "(" + this.inputs.map(function (t) {
                  return t.format(e);
                }).join(e === w.full ? ", " : ",") + ") ", e !== w.sighash && (this.stateMutability ? "nonpayable" !== this.stateMutability && (t += this.stateMutability + " ") : this.constant && (t += "view "), this.outputs && this.outputs.length && (t += "returns (" + this.outputs.map(function (t) {
                  return t.format(e);
                }).join(", ") + ") "), null != this.gas && (t += "@" + this.gas.toString() + " ")), t.trim();
              }
            }], [{
              key: "from",
              value: function value(e) {
                return "string" == typeof e ? r.fromString(e) : r.fromObject(e);
              }
            }, {
              key: "fromObject",
              value: function value(e) {
                if (r.isFunctionFragment(e)) return e;
                "function" !== e.type && p.throwArgumentError("invalid function object", "value", e);
                var t = O(e),
                  n = {
                    type: e.type,
                    name: R(e.name),
                    constant: t.constant,
                    inputs: e.inputs ? e.inputs.map(k.fromObject) : [],
                    outputs: e.outputs ? e.outputs.map(k.fromObject) : [],
                    payable: t.payable,
                    stateMutability: t.stateMutability,
                    gas: e.gas ? c.BigNumber.from(e.gas) : null
                  };
                return new r(b, n);
              }
            }, {
              key: "fromString",
              value: function value(e) {
                var t = {
                    type: "function"
                  },
                  n = (e = x(e, t)).split(" returns ");
                n.length > 2 && p.throwArgumentError("invalid function string", "value", e);
                var i = n[0].match(j);
                if (i || p.throwArgumentError("invalid function signature", "value", e), t.name = i[1].trim(), t.name && R(t.name), t.inputs = _(i[2], !1), P(i[3].trim(), t), n.length > 1) {
                  var o = n[1].match(j);
                  "" == o[1].trim() && "" == o[3].trim() || p.throwArgumentError("unexpected tokens", "value", e), t.outputs = _(o[2], !1);
                } else t.outputs = [];
                return r.fromObject(t);
              }
            }, {
              key: "isFunctionFragment",
              value: function value(e) {
                return e && e._isFragment && "function" === e.type;
              }
            }]), r;
          }(B);
          function C(e) {
            var t = e.format();
            return "Error(string)" !== t && "Panic(uint256)" !== t || p.throwArgumentError("cannot specify user defined ".concat(t, " error"), "fragment", e), e;
          }
          t.FunctionFragment = T;
          var I = function (e) {
            (0, i.default)(r, e);
            var t = h(r);
            function r() {
              return (0, s.default)(this, r), t.apply(this, arguments);
            }
            return (0, u.default)(r, [{
              key: "format",
              value: function value(e) {
                if (e || (e = w.sighash), w[e] || p.throwArgumentError("invalid format type", "format", e), e === w.json) return JSON.stringify({
                  type: "error",
                  name: this.name,
                  inputs: this.inputs.map(function (t) {
                    return JSON.parse(t.format(e));
                  })
                });
                var t = "";
                return e !== w.sighash && (t += "error "), (t += this.name + "(" + this.inputs.map(function (t) {
                  return t.format(e);
                }).join(e === w.full ? ", " : ",") + ") ").trim();
              }
            }], [{
              key: "from",
              value: function value(e) {
                return "string" == typeof e ? r.fromString(e) : r.fromObject(e);
              }
            }, {
              key: "fromObject",
              value: function value(e) {
                if (r.isErrorFragment(e)) return e;
                "error" !== e.type && p.throwArgumentError("invalid error object", "value", e);
                var t = {
                  type: e.type,
                  name: R(e.name),
                  inputs: e.inputs ? e.inputs.map(k.fromObject) : []
                };
                return C(new r(b, t));
              }
            }, {
              key: "fromString",
              value: function value(e) {
                var t = {
                    type: "error"
                  },
                  n = e.match(j);
                return n || p.throwArgumentError("invalid error signature", "value", e), t.name = n[1].trim(), t.name && R(t.name), t.inputs = _(n[2], !1), C(r.fromObject(t));
              }
            }, {
              key: "isErrorFragment",
              value: function value(e) {
                return e && e._isFragment && "error" === e.type;
              }
            }]), r;
          }(S);
          function M(e) {
            return e.match(/^uint($|[^1-9])/) ? e = "uint256" + e.substring(4) : e.match(/^int($|[^1-9])/) && (e = "int256" + e.substring(3)), e;
          }
          t.ErrorFragment = I;
          var U = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
          function R(e) {
            return e && e.match(U) || p.throwArgumentError('invalid identifier "'.concat(e, '"'), "value", e), e;
          }
          var j = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
        },
        2914: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "RQ", {
            enumerable: !0,
            get: function get() {
              return i.AbiCoder;
            }
          }), Object.defineProperty(t, "_R", {
            enumerable: !0,
            get: function get() {
              return n.ParamType;
            }
          });
          var n = r(800),
            i = r(4937);
          r(9044);
        },
        9044: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.TransactionDescription = t.LogDescription = t.Interface = t.Indexed = t.ErrorDescription = void 0, Object.defineProperty(t, "checkResultErrors", {
            enumerable: !0,
            get: function get() {
              return y.checkResultErrors;
            }
          });
          var i = n(r(8985)),
            o = n(r(9721)),
            a = n(r(5163)),
            s = n(r(4650)),
            u = n(r(1949)),
            c = r(7921),
            f = r(4952),
            d = r(908),
            l = r(7515),
            h = r(4642),
            p = r(3694),
            b = r(4937),
            y = r(7316),
            m = r(800),
            v = r(4327),
            g = r(8067);
          function w(e) {
            var t = function () {
              if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
              if (Reflect.construct.sham) return !1;
              if ("function" == typeof Proxy) return !0;
              try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
              } catch (e) {
                return !1;
              }
            }();
            return function () {
              var r,
                n = (0, u.default)(e);
              if (t) {
                var i = (0, u.default)(this).constructor;
                r = Reflect.construct(n, arguments, i);
              } else r = n.apply(this, arguments);
              return (0, s.default)(this, r);
            };
          }
          var A = new v.Logger(g.version),
            k = function (e) {
              (0, a.default)(r, e);
              var t = w(r);
              function r() {
                return (0, o.default)(this, r), t.apply(this, arguments);
              }
              return (0, i.default)(r);
            }(p.Description);
          t.LogDescription = k;
          var _ = function (e) {
            (0, a.default)(r, e);
            var t = w(r);
            function r() {
              return (0, o.default)(this, r), t.apply(this, arguments);
            }
            return (0, i.default)(r);
          }(p.Description);
          t.TransactionDescription = _;
          var S = function (e) {
            (0, a.default)(r, e);
            var t = w(r);
            function r() {
              return (0, o.default)(this, r), t.apply(this, arguments);
            }
            return (0, i.default)(r);
          }(p.Description);
          t.ErrorDescription = S;
          var E = function (e) {
            (0, a.default)(r, e);
            var t = w(r);
            function r() {
              return (0, o.default)(this, r), t.apply(this, arguments);
            }
            return (0, i.default)(r, null, [{
              key: "isIndexed",
              value: function value(e) {
                return !(!e || !e._isIndexed);
              }
            }]), r;
          }(p.Description);
          t.Indexed = E;
          var x = {
            "0x08c379a0": {
              signature: "Error(string)",
              name: "Error",
              inputs: ["string"],
              reason: !0
            },
            "0x4e487b71": {
              signature: "Panic(uint256)",
              name: "Panic",
              inputs: ["uint256"]
            }
          };
          function P(e, t) {
            var r = new Error("deferred error during ABI decoding triggered accessing ".concat(e));
            return r.error = t, r;
          }
          var O = function () {
            function e(t) {
              var r = this;
              (0, o.default)(this, e);
              var n = [];
              n = "string" == typeof t ? JSON.parse(t) : t, (0, p.defineReadOnly)(this, "fragments", n.map(function (e) {
                return m.Fragment.from(e);
              }).filter(function (e) {
                return null != e;
              })), (0, p.defineReadOnly)(this, "_abiCoder", (0, p.getStatic)(this instanceof e ? this.constructor : void 0, "getAbiCoder")()), (0, p.defineReadOnly)(this, "functions", {}), (0, p.defineReadOnly)(this, "errors", {}), (0, p.defineReadOnly)(this, "events", {}), (0, p.defineReadOnly)(this, "structs", {}), this.fragments.forEach(function (e) {
                var t = null;
                switch (e.type) {
                  case "constructor":
                    return r.deploy ? void A.warn("duplicate definition - constructor") : void (0, p.defineReadOnly)(r, "deploy", e);
                  case "function":
                    t = r.functions;
                    break;
                  case "event":
                    t = r.events;
                    break;
                  case "error":
                    t = r.errors;
                    break;
                  default:
                    return;
                }
                var n = e.format();
                t[n] ? A.warn("duplicate definition - " + n) : t[n] = e;
              }), this.deploy || (0, p.defineReadOnly)(this, "deploy", m.ConstructorFragment.from({
                payable: !1,
                type: "constructor"
              })), (0, p.defineReadOnly)(this, "_isInterface", !0);
            }
            return (0, i.default)(e, [{
              key: "format",
              value: function value(e) {
                e || (e = m.FormatTypes.full), e === m.FormatTypes.sighash && A.throwArgumentError("interface does not support formatting sighash", "format", e);
                var t = this.fragments.map(function (t) {
                  return t.format(e);
                });
                return e === m.FormatTypes.json ? JSON.stringify(t.map(function (e) {
                  return JSON.parse(e);
                })) : t;
              }
            }, {
              key: "getFunction",
              value: function value(e) {
                if ((0, d.isHexString)(e)) {
                  for (var t in this.functions) if (e === this.getSighash(t)) return this.functions[t];
                  A.throwArgumentError("no matching function", "sighash", e);
                }
                if (-1 === e.indexOf("(")) {
                  var r = e.trim(),
                    n = Object.keys(this.functions).filter(function (e) {
                      return e.split("(")[0] === r;
                    });
                  return 0 === n.length ? A.throwArgumentError("no matching function", "name", r) : n.length > 1 && A.throwArgumentError("multiple matching functions", "name", r), this.functions[n[0]];
                }
                var i = this.functions[m.FunctionFragment.fromString(e).format()];
                return i || A.throwArgumentError("no matching function", "signature", e), i;
              }
            }, {
              key: "getEvent",
              value: function value(e) {
                if ((0, d.isHexString)(e)) {
                  var t = e.toLowerCase();
                  for (var r in this.events) if (t === this.getEventTopic(r)) return this.events[r];
                  A.throwArgumentError("no matching event", "topichash", t);
                }
                if (-1 === e.indexOf("(")) {
                  var n = e.trim(),
                    i = Object.keys(this.events).filter(function (e) {
                      return e.split("(")[0] === n;
                    });
                  return 0 === i.length ? A.throwArgumentError("no matching event", "name", n) : i.length > 1 && A.throwArgumentError("multiple matching events", "name", n), this.events[i[0]];
                }
                var o = this.events[m.EventFragment.fromString(e).format()];
                return o || A.throwArgumentError("no matching event", "signature", e), o;
              }
            }, {
              key: "getError",
              value: function value(e) {
                if ((0, d.isHexString)(e)) {
                  var t = (0, p.getStatic)(this.constructor, "getSighash");
                  for (var r in this.errors) if (e === t(this.errors[r])) return this.errors[r];
                  A.throwArgumentError("no matching error", "sighash", e);
                }
                if (-1 === e.indexOf("(")) {
                  var n = e.trim(),
                    i = Object.keys(this.errors).filter(function (e) {
                      return e.split("(")[0] === n;
                    });
                  return 0 === i.length ? A.throwArgumentError("no matching error", "name", n) : i.length > 1 && A.throwArgumentError("multiple matching errors", "name", n), this.errors[i[0]];
                }
                var o = this.errors[m.FunctionFragment.fromString(e).format()];
                return o || A.throwArgumentError("no matching error", "signature", e), o;
              }
            }, {
              key: "getSighash",
              value: function value(e) {
                if ("string" == typeof e) try {
                  e = this.getFunction(e);
                } catch (t) {
                  try {
                    e = this.getError(e);
                  } catch (e) {
                    throw t;
                  }
                }
                return (0, p.getStatic)(this.constructor, "getSighash")(e);
              }
            }, {
              key: "getEventTopic",
              value: function value(e) {
                return "string" == typeof e && (e = this.getEvent(e)), (0, p.getStatic)(this.constructor, "getEventTopic")(e);
              }
            }, {
              key: "_decodeParams",
              value: function value(e, t) {
                return this._abiCoder.decode(e, t);
              }
            }, {
              key: "_encodeParams",
              value: function value(e, t) {
                return this._abiCoder.encode(e, t);
              }
            }, {
              key: "encodeDeploy",
              value: function value(e) {
                return this._encodeParams(this.deploy.inputs, e || []);
              }
            }, {
              key: "decodeErrorResult",
              value: function value(e, t) {
                "string" == typeof e && (e = this.getError(e));
                var r = (0, d.arrayify)(t);
                return (0, d.hexlify)(r.slice(0, 4)) !== this.getSighash(e) && A.throwArgumentError("data signature does not match error ".concat(e.name, "."), "data", (0, d.hexlify)(r)), this._decodeParams(e.inputs, r.slice(4));
              }
            }, {
              key: "encodeErrorResult",
              value: function value(e, t) {
                return "string" == typeof e && (e = this.getError(e)), (0, d.hexlify)((0, d.concat)([this.getSighash(e), this._encodeParams(e.inputs, t || [])]));
              }
            }, {
              key: "decodeFunctionData",
              value: function value(e, t) {
                "string" == typeof e && (e = this.getFunction(e));
                var r = (0, d.arrayify)(t);
                return (0, d.hexlify)(r.slice(0, 4)) !== this.getSighash(e) && A.throwArgumentError("data signature does not match function ".concat(e.name, "."), "data", (0, d.hexlify)(r)), this._decodeParams(e.inputs, r.slice(4));
              }
            }, {
              key: "encodeFunctionData",
              value: function value(e, t) {
                return "string" == typeof e && (e = this.getFunction(e)), (0, d.hexlify)((0, d.concat)([this.getSighash(e), this._encodeParams(e.inputs, t || [])]));
              }
            }, {
              key: "decodeFunctionResult",
              value: function value(e, t) {
                "string" == typeof e && (e = this.getFunction(e));
                var r = (0, d.arrayify)(t),
                  n = null,
                  i = "",
                  o = null,
                  a = null,
                  s = null;
                switch (r.length % this._abiCoder._getWordSize()) {
                  case 0:
                    try {
                      return this._abiCoder.decode(e.outputs, r);
                    } catch (f) {}
                    break;
                  case 4:
                    var u = (0, d.hexlify)(r.slice(0, 4)),
                      c = x[u];
                    if (c) o = this._abiCoder.decode(c.inputs, r.slice(4)), a = c.name, s = c.signature, c.reason && (n = o[0]), "Error" === a ? i = "; VM Exception while processing transaction: reverted with reason string ".concat(JSON.stringify(o[0])) : "Panic" === a && (i = "; VM Exception while processing transaction: reverted with panic code ".concat(o[0]));else try {
                      var f = this.getError(u);
                      o = this._abiCoder.decode(f.inputs, r.slice(4)), a = f.name, s = f.format();
                    } catch (f) {}
                }
                return A.throwError("call revert exception" + i, v.Logger.errors.CALL_EXCEPTION, {
                  method: e.format(),
                  data: (0, d.hexlify)(t),
                  errorArgs: o,
                  errorName: a,
                  errorSignature: s,
                  reason: n
                });
              }
            }, {
              key: "encodeFunctionResult",
              value: function value(e, t) {
                return "string" == typeof e && (e = this.getFunction(e)), (0, d.hexlify)(this._abiCoder.encode(e.outputs, t || []));
              }
            }, {
              key: "encodeFilterTopics",
              value: function value(e, t) {
                var r = this;
                "string" == typeof e && (e = this.getEvent(e)), t.length > e.inputs.length && A.throwError("too many arguments for " + e.format(), v.Logger.errors.UNEXPECTED_ARGUMENT, {
                  argument: "values",
                  value: t
                });
                var n = [];
                e.anonymous || n.push(this.getEventTopic(e));
                var i = function i(e, t) {
                  return "string" === e.type ? (0, l.id)(t) : "bytes" === e.type ? (0, h.keccak256)((0, d.hexlify)(t)) : ("bool" === e.type && "boolean" == typeof t && (t = t ? "0x01" : "0x00"), e.type.match(/^u?int/) && (t = f.BigNumber.from(t).toHexString()), "address" === e.type && r._abiCoder.encode(["address"], [t]), (0, d.hexZeroPad)((0, d.hexlify)(t), 32));
                };
                for (t.forEach(function (t, r) {
                  var o = e.inputs[r];
                  o.indexed ? null == t ? n.push(null) : "array" === o.baseType || "tuple" === o.baseType ? A.throwArgumentError("filtering with tuples or arrays not supported", "contract." + o.name, t) : Array.isArray(t) ? n.push(t.map(function (e) {
                    return i(o, e);
                  })) : n.push(i(o, t)) : null != t && A.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + o.name, t);
                }); n.length && null === n[n.length - 1];) n.pop();
                return n;
              }
            }, {
              key: "encodeEventLog",
              value: function value(e, t) {
                var r = this;
                "string" == typeof e && (e = this.getEvent(e));
                var n = [],
                  i = [],
                  o = [];
                return e.anonymous || n.push(this.getEventTopic(e)), t.length !== e.inputs.length && A.throwArgumentError("event arguments/values mismatch", "values", t), e.inputs.forEach(function (e, a) {
                  var s = t[a];
                  if (e.indexed) {
                    if ("string" === e.type) n.push((0, l.id)(s));else if ("bytes" === e.type) n.push((0, h.keccak256)(s));else {
                      if ("tuple" === e.baseType || "array" === e.baseType) throw new Error("not implemented");
                      n.push(r._abiCoder.encode([e.type], [s]));
                    }
                  } else i.push(e), o.push(s);
                }), {
                  data: this._abiCoder.encode(i, o),
                  topics: n
                };
              }
            }, {
              key: "decodeEventLog",
              value: function value(e, t, r) {
                if ("string" == typeof e && (e = this.getEvent(e)), null != r && !e.anonymous) {
                  var n = this.getEventTopic(e);
                  (0, d.isHexString)(r[0], 32) && r[0].toLowerCase() === n || A.throwError("fragment/topic mismatch", v.Logger.errors.INVALID_ARGUMENT, {
                    argument: "topics[0]",
                    expected: n,
                    value: r[0]
                  }), r = r.slice(1);
                }
                var i = [],
                  o = [],
                  a = [];
                e.inputs.forEach(function (e, t) {
                  e.indexed ? "string" === e.type || "bytes" === e.type || "tuple" === e.baseType || "array" === e.baseType ? (i.push(m.ParamType.fromObject({
                    type: "bytes32",
                    name: e.name
                  })), a.push(!0)) : (i.push(e), a.push(!1)) : (o.push(e), a.push(!1));
                });
                var s = null != r ? this._abiCoder.decode(i, (0, d.concat)(r)) : null,
                  u = this._abiCoder.decode(o, t, !0),
                  c = [],
                  f = 0,
                  l = 0;
                e.inputs.forEach(function (e, t) {
                  if (e.indexed) {
                    if (null == s) c[t] = new E({
                      _isIndexed: !0,
                      hash: null
                    });else if (a[t]) c[t] = new E({
                      _isIndexed: !0,
                      hash: s[l++]
                    });else try {
                      c[t] = s[l++];
                    } catch (e) {
                      c[t] = e;
                    }
                  } else try {
                    c[t] = u[f++];
                  } catch (e) {
                    c[t] = e;
                  }
                  if (e.name && null == c[e.name]) {
                    var r = c[t];
                    r instanceof Error ? Object.defineProperty(c, e.name, {
                      enumerable: !0,
                      get: function get() {
                        throw P("property ".concat(JSON.stringify(e.name)), r);
                      }
                    }) : c[e.name] = r;
                  }
                });
                for (var h = function h(e) {
                    var t = c[e];
                    t instanceof Error && Object.defineProperty(c, e, {
                      enumerable: !0,
                      get: function get() {
                        throw P("index ".concat(e), t);
                      }
                    });
                  }, p = 0; p < c.length; p++) h(p);
                return Object.freeze(c);
              }
            }, {
              key: "parseTransaction",
              value: function value(e) {
                var t = this.getFunction(e.data.substring(0, 10).toLowerCase());
                return t ? new _({
                  args: this._abiCoder.decode(t.inputs, "0x" + e.data.substring(10)),
                  functionFragment: t,
                  name: t.name,
                  signature: t.format(),
                  sighash: this.getSighash(t),
                  value: f.BigNumber.from(e.value || "0")
                }) : null;
              }
            }, {
              key: "parseLog",
              value: function value(e) {
                var t = this.getEvent(e.topics[0]);
                return !t || t.anonymous ? null : new k({
                  eventFragment: t,
                  name: t.name,
                  signature: t.format(),
                  topic: this.getEventTopic(t),
                  args: this.decodeEventLog(t, e.data, e.topics)
                });
              }
            }, {
              key: "parseError",
              value: function value(e) {
                var t = (0, d.hexlify)(e),
                  r = this.getError(t.substring(0, 10).toLowerCase());
                return r ? new S({
                  args: this._abiCoder.decode(r.inputs, "0x" + t.substring(10)),
                  errorFragment: r,
                  name: r.name,
                  signature: r.format(),
                  sighash: this.getSighash(r)
                }) : null;
              }
            }], [{
              key: "getAbiCoder",
              value: function value() {
                return b.defaultAbiCoder;
              }
            }, {
              key: "getAddress",
              value: function value(e) {
                return (0, c.getAddress)(e);
              }
            }, {
              key: "getSighash",
              value: function value(e) {
                return (0, d.hexDataSlice)((0, l.id)(e.format()), 0, 4);
              }
            }, {
              key: "getEventTopic",
              value: function value(e) {
                return (0, l.id)(e.format());
              }
            }, {
              key: "isInterface",
              value: function value(e) {
                return !(!e || !e._isInterface);
              }
            }]), e;
          }();
          t.Interface = O;
        },
        8222: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.version = void 0, t.version = "address/5.7.0";
        },
        7921: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.getAddress = m, t.getContractAddress = function (e) {
            var t = null;
            try {
              t = m(e.from);
            } catch (t) {
              c.throwArgumentError("missing from address", "transaction", e);
            }
            var r = (0, n.stripZeros)((0, n.arrayify)(i.BigNumber.from(e.nonce).toHexString()));
            return m((0, n.hexDataSlice)((0, o.keccak256)((0, a.encode)([t, r])), 12));
          }, t.getCreate2Address = function (e, t, r) {
            return 32 !== (0, n.hexDataLength)(t) && c.throwArgumentError("salt must be 32 bytes", "salt", t), 32 !== (0, n.hexDataLength)(r) && c.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", r), m((0, n.hexDataSlice)((0, o.keccak256)((0, n.concat)(["0xff", m(e), t, r])), 12));
          }, t.getIcapAddress = function (e) {
            for (var t = (0, i._base16To36)(m(e).substring(2)).toUpperCase(); t.length < 30;) t = "0" + t;
            return "XE" + y("XE00" + t) + t;
          }, t.isAddress = function (e) {
            try {
              return m(e), !0;
            } catch (e) {}
            return !1;
          };
          var n = r(908),
            i = r(4952),
            o = r(4642),
            a = r(5265),
            s = r(4327),
            u = r(8222),
            c = new s.Logger(u.version);
          function f(e) {
            (0, n.isHexString)(e, 20) || c.throwArgumentError("invalid address", "address", e);
            for (var t = (e = e.toLowerCase()).substring(2).split(""), r = new Uint8Array(40), i = 0; i < 40; i++) r[i] = t[i].charCodeAt(0);
            for (var a = (0, n.arrayify)((0, o.keccak256)(r)), s = 0; s < 40; s += 2) a[s >> 1] >> 4 >= 8 && (t[s] = t[s].toUpperCase()), (15 & a[s >> 1]) >= 8 && (t[s + 1] = t[s + 1].toUpperCase());
            return "0x" + t.join("");
          }
          for (var d = {}, l = 0; l < 10; l++) d[String(l)] = String(l);
          for (var h = 0; h < 26; h++) d[String.fromCharCode(65 + h)] = String(10 + h);
          var p,
            b = Math.floor((p = 9007199254740991, Math.log10 ? Math.log10(p) : Math.log(p) / Math.LN10));
          function y(e) {
            for (var t = (e = (e = e.toUpperCase()).substring(4) + e.substring(0, 2) + "00").split("").map(function (e) {
              return d[e];
            }).join(""); t.length >= b;) {
              var r = t.substring(0, b);
              t = parseInt(r, 10) % 97 + t.substring(r.length);
            }
            for (var n = String(98 - parseInt(t, 10) % 97); n.length < 2;) n = "0" + n;
            return n;
          }
          function m(e) {
            var t = null;
            if ("string" != typeof e && c.throwArgumentError("invalid address", "address", e), e.match(/^(0x)?[0-9a-fA-F]{40}$/)) "0x" !== e.substring(0, 2) && (e = "0x" + e), t = f(e), e.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t !== e && c.throwArgumentError("bad address checksum", "address", e);else if (e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
              for (e.substring(2, 4) !== y(e) && c.throwArgumentError("bad icap checksum", "address", e), t = (0, i._base36To16)(e.substring(4)); t.length < 40;) t = "0" + t;
              t = f("0x" + t);
            } else c.throwArgumentError("invalid address", "address", e);
            return t;
          }
        },
        5798: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.decode = function (e) {
            e = atob(e);
            for (var t = [], r = 0; r < e.length; r++) t.push(e.charCodeAt(r));
            return (0, n.arrayify)(t);
          }, t.encode = function (e) {
            e = (0, n.arrayify)(e);
            for (var t = "", r = 0; r < e.length; r++) t += String.fromCharCode(e[r]);
            return btoa(t);
          };
          var n = r(908);
        },
        997: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), Object.defineProperty(t, "decode", {
            enumerable: !0,
            get: function get() {
              return n.decode;
            }
          }), Object.defineProperty(t, "encode", {
            enumerable: !0,
            get: function get() {
              return n.encode;
            }
          });
          var n = r(5798);
        },
        3042: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.version = void 0, t.version = "bignumber/5.7.0";
        },
        1872: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.BigNumber = void 0, t._base16To36 = function (e) {
            return new f(e, 16).toString(36);
          }, t._base36To16 = function (e) {
            return new f(e, 36).toString(16);
          }, t.isBigNumberish = function (e) {
            return null != e && (b.isBigNumber(e) || "number" == typeof e && e % 1 == 0 || "string" == typeof e && !!e.match(/^-?[0-9]+$/) || (0, s.isHexString)(e) || "bigint" == typeof e || (0, s.isBytes)(e));
          };
          var i = n(r(9721)),
            o = n(r(8985)),
            a = n(r(1734)),
            s = r(908),
            u = r(4327),
            c = r(3042),
            f = a.default.BN,
            d = new u.Logger(c.version),
            l = {},
            h = 9007199254740991,
            p = !1,
            b = function () {
              function e(t, r) {
                (0, i.default)(this, e), t !== l && d.throwError("cannot call constructor directly; use BigNumber.from", u.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "new (BigNumber)"
                }), this._hex = r, this._isBigNumber = !0, Object.freeze(this);
              }
              return (0, o.default)(e, [{
                key: "fromTwos",
                value: function value(e) {
                  return m(v(this).fromTwos(e));
                }
              }, {
                key: "toTwos",
                value: function value(e) {
                  return m(v(this).toTwos(e));
                }
              }, {
                key: "abs",
                value: function value() {
                  return "-" === this._hex[0] ? e.from(this._hex.substring(1)) : this;
                }
              }, {
                key: "add",
                value: function value(e) {
                  return m(v(this).add(v(e)));
                }
              }, {
                key: "sub",
                value: function value(e) {
                  return m(v(this).sub(v(e)));
                }
              }, {
                key: "div",
                value: function value(t) {
                  return e.from(t).isZero() && g("division-by-zero", "div"), m(v(this).div(v(t)));
                }
              }, {
                key: "mul",
                value: function value(e) {
                  return m(v(this).mul(v(e)));
                }
              }, {
                key: "mod",
                value: function value(e) {
                  var t = v(e);
                  return t.isNeg() && g("division-by-zero", "mod"), m(v(this).umod(t));
                }
              }, {
                key: "pow",
                value: function value(e) {
                  var t = v(e);
                  return t.isNeg() && g("negative-power", "pow"), m(v(this).pow(t));
                }
              }, {
                key: "and",
                value: function value(e) {
                  var t = v(e);
                  return (this.isNegative() || t.isNeg()) && g("unbound-bitwise-result", "and"), m(v(this).and(t));
                }
              }, {
                key: "or",
                value: function value(e) {
                  var t = v(e);
                  return (this.isNegative() || t.isNeg()) && g("unbound-bitwise-result", "or"), m(v(this).or(t));
                }
              }, {
                key: "xor",
                value: function value(e) {
                  var t = v(e);
                  return (this.isNegative() || t.isNeg()) && g("unbound-bitwise-result", "xor"), m(v(this).xor(t));
                }
              }, {
                key: "mask",
                value: function value(e) {
                  return (this.isNegative() || e < 0) && g("negative-width", "mask"), m(v(this).maskn(e));
                }
              }, {
                key: "shl",
                value: function value(e) {
                  return (this.isNegative() || e < 0) && g("negative-width", "shl"), m(v(this).shln(e));
                }
              }, {
                key: "shr",
                value: function value(e) {
                  return (this.isNegative() || e < 0) && g("negative-width", "shr"), m(v(this).shrn(e));
                }
              }, {
                key: "eq",
                value: function value(e) {
                  return v(this).eq(v(e));
                }
              }, {
                key: "lt",
                value: function value(e) {
                  return v(this).lt(v(e));
                }
              }, {
                key: "lte",
                value: function value(e) {
                  return v(this).lte(v(e));
                }
              }, {
                key: "gt",
                value: function value(e) {
                  return v(this).gt(v(e));
                }
              }, {
                key: "gte",
                value: function value(e) {
                  return v(this).gte(v(e));
                }
              }, {
                key: "isNegative",
                value: function value() {
                  return "-" === this._hex[0];
                }
              }, {
                key: "isZero",
                value: function value() {
                  return v(this).isZero();
                }
              }, {
                key: "toNumber",
                value: function value() {
                  try {
                    return v(this).toNumber();
                  } catch (e) {
                    g("overflow", "toNumber", this.toString());
                  }
                  return null;
                }
              }, {
                key: "toBigInt",
                value: function value() {
                  try {
                    return BigInt(this.toString());
                  } catch (e) {}
                  return d.throwError("this platform does not support BigInt", u.Logger.errors.UNSUPPORTED_OPERATION, {
                    value: this.toString()
                  });
                }
              }, {
                key: "toString",
                value: function value() {
                  return arguments.length > 0 && (10 === arguments[0] ? p || (p = !0, d.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")) : 16 === arguments[0] ? d.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", u.Logger.errors.UNEXPECTED_ARGUMENT, {}) : d.throwError("BigNumber.toString does not accept parameters", u.Logger.errors.UNEXPECTED_ARGUMENT, {})), v(this).toString(10);
                }
              }, {
                key: "toHexString",
                value: function value() {
                  return this._hex;
                }
              }, {
                key: "toJSON",
                value: function value(e) {
                  return {
                    type: "BigNumber",
                    hex: this.toHexString()
                  };
                }
              }], [{
                key: "from",
                value: function value(t) {
                  if (t instanceof e) return t;
                  if ("string" == typeof t) return t.match(/^-?0x[0-9a-f]+$/i) ? new e(l, y(t)) : t.match(/^-?[0-9]+$/) ? new e(l, y(new f(t))) : d.throwArgumentError("invalid BigNumber string", "value", t);
                  if ("number" == typeof t) return t % 1 && g("underflow", "BigNumber.from", t), (t >= h || t <= -h) && g("overflow", "BigNumber.from", t), e.from(String(t));
                  var r = t;
                  if ("bigint" == typeof r) return e.from(r.toString());
                  if ((0, s.isBytes)(r)) return e.from((0, s.hexlify)(r));
                  if (r) if (r.toHexString) {
                    var n = r.toHexString();
                    if ("string" == typeof n) return e.from(n);
                  } else {
                    var i = r._hex;
                    if (null == i && "BigNumber" === r.type && (i = r.hex), "string" == typeof i && ((0, s.isHexString)(i) || "-" === i[0] && (0, s.isHexString)(i.substring(1)))) return e.from(i);
                  }
                  return d.throwArgumentError("invalid BigNumber value", "value", t);
                }
              }, {
                key: "isBigNumber",
                value: function value(e) {
                  return !(!e || !e._isBigNumber);
                }
              }]), e;
            }();
          function y(e) {
            if ("string" != typeof e) return y(e.toString(16));
            if ("-" === e[0]) return "-" === (e = e.substring(1))[0] && d.throwArgumentError("invalid hex", "value", e), "0x00" === (e = y(e)) ? e : "-" + e;
            if ("0x" !== e.substring(0, 2) && (e = "0x" + e), "0x" === e) return "0x00";
            for (e.length % 2 && (e = "0x0" + e.substring(2)); e.length > 4 && "0x00" === e.substring(0, 4);) e = "0x" + e.substring(4);
            return e;
          }
          function m(e) {
            return b.from(y(e));
          }
          function v(e) {
            var t = b.from(e).toHexString();
            return "-" === t[0] ? new f("-" + t.substring(3), 16) : new f(t.substring(2), 16);
          }
          function g(e, t, r) {
            var n = {
              fault: e,
              operation: t
            };
            return null != r && (n.value = r), d.throwError(e, u.Logger.errors.NUMERIC_FAULT, n);
          }
          t.BigNumber = b;
        },
        8390: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.FixedNumber = t.FixedFormat = void 0, t.formatFixed = v, t.parseFixed = g;
          var i = n(r(3355)),
            o = n(r(9721)),
            a = n(r(8985)),
            s = r(908),
            u = r(4327),
            c = r(3042),
            f = r(1872),
            d = new u.Logger(c.version),
            l = {},
            h = f.BigNumber.from(0),
            p = f.BigNumber.from(-1);
          function b(e, t, r, n) {
            var i = {
              fault: t,
              operation: r
            };
            return void 0 !== n && (i.value = n), d.throwError(e, u.Logger.errors.NUMERIC_FAULT, i);
          }
          for (var y = "0"; y.length < 256;) y += y;
          function m(e) {
            if ("number" != typeof e) try {
              e = f.BigNumber.from(e).toNumber();
            } catch (e) {}
            return "number" == typeof e && e >= 0 && e <= 256 && !(e % 1) ? "1" + y.substring(0, e) : d.throwArgumentError("invalid decimal size", "decimals", e);
          }
          function v(e, t) {
            null == t && (t = 0);
            var r = m(t),
              n = (e = f.BigNumber.from(e)).lt(h);
            n && (e = e.mul(p));
            for (var i = e.mod(r).toString(); i.length < r.length - 1;) i = "0" + i;
            i = i.match(/^([0-9]*[1-9]|0)(0*)/)[1];
            var o = e.div(r).toString();
            return e = 1 === r.length ? o : o + "." + i, n && (e = "-" + e), e;
          }
          function g(e, t) {
            null == t && (t = 0);
            var r = m(t);
            "string" == typeof e && e.match(/^-?[0-9.]+$/) || d.throwArgumentError("invalid decimal value", "value", e);
            var n = "-" === e.substring(0, 1);
            n && (e = e.substring(1)), "." === e && d.throwArgumentError("missing value", "value", e);
            var i = e.split(".");
            i.length > 2 && d.throwArgumentError("too many decimal points", "value", e);
            var o = i[0],
              a = i[1];
            for (o || (o = "0"), a || (a = "0"); "0" === a[a.length - 1];) a = a.substring(0, a.length - 1);
            for (a.length > r.length - 1 && b("fractional component exceeds decimals", "underflow", "parseFixed"), "" === a && (a = "0"); a.length < r.length - 1;) a += "0";
            var s = f.BigNumber.from(o),
              u = f.BigNumber.from(a),
              c = s.mul(r).add(u);
            return n && (c = c.mul(p)), c;
          }
          var w = function () {
            function e(t, r, n, i) {
              (0, o.default)(this, e), t !== l && d.throwError("cannot use FixedFormat constructor; use FixedFormat.from", u.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new FixedFormat"
              }), this.signed = r, this.width = n, this.decimals = i, this.name = (r ? "" : "u") + "fixed" + String(n) + "x" + String(i), this._multiplier = m(i), Object.freeze(this);
            }
            return (0, a.default)(e, null, [{
              key: "from",
              value: function value(t) {
                if (t instanceof e) return t;
                "number" == typeof t && (t = "fixed128x".concat(t));
                var r = !0,
                  n = 128,
                  o = 18;
                if ("string" == typeof t) {
                  if ("fixed" === t) ;else if ("ufixed" === t) r = !1;else {
                    var a = t.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                    a || d.throwArgumentError("invalid fixed format", "format", t), r = "u" !== a[1], n = parseInt(a[2]), o = parseInt(a[3]);
                  }
                } else if (t) {
                  var s = function s(e, r, n) {
                    return null == t[e] ? n : ((0, i.default)(t[e]) !== r && d.throwArgumentError("invalid fixed format (" + e + " not " + r + ")", "format." + e, t[e]), t[e]);
                  };
                  r = s("signed", "boolean", r), n = s("width", "number", n), o = s("decimals", "number", o);
                }
                return n % 8 && d.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", n), o > 80 && d.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", o), new e(l, r, n, o);
              }
            }]), e;
          }();
          t.FixedFormat = w;
          var A = function () {
            function e(t, r, n, i) {
              (0, o.default)(this, e), t !== l && d.throwError("cannot use FixedNumber constructor; use FixedNumber.from", u.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new FixedFormat"
              }), this.format = i, this._hex = r, this._value = n, this._isFixedNumber = !0, Object.freeze(this);
            }
            return (0, a.default)(e, [{
              key: "_checkFormat",
              value: function value(e) {
                this.format.name !== e.format.name && d.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", e);
              }
            }, {
              key: "addUnsafe",
              value: function value(t) {
                this._checkFormat(t);
                var r = g(this._value, this.format.decimals),
                  n = g(t._value, t.format.decimals);
                return e.fromValue(r.add(n), this.format.decimals, this.format);
              }
            }, {
              key: "subUnsafe",
              value: function value(t) {
                this._checkFormat(t);
                var r = g(this._value, this.format.decimals),
                  n = g(t._value, t.format.decimals);
                return e.fromValue(r.sub(n), this.format.decimals, this.format);
              }
            }, {
              key: "mulUnsafe",
              value: function value(t) {
                this._checkFormat(t);
                var r = g(this._value, this.format.decimals),
                  n = g(t._value, t.format.decimals);
                return e.fromValue(r.mul(n).div(this.format._multiplier), this.format.decimals, this.format);
              }
            }, {
              key: "divUnsafe",
              value: function value(t) {
                this._checkFormat(t);
                var r = g(this._value, this.format.decimals),
                  n = g(t._value, t.format.decimals);
                return e.fromValue(r.mul(this.format._multiplier).div(n), this.format.decimals, this.format);
              }
            }, {
              key: "floor",
              value: function value() {
                var t = this.toString().split(".");
                1 === t.length && t.push("0");
                var r = e.from(t[0], this.format),
                  n = !t[1].match(/^(0*)$/);
                return this.isNegative() && n && (r = r.subUnsafe(k.toFormat(r.format))), r;
              }
            }, {
              key: "ceiling",
              value: function value() {
                var t = this.toString().split(".");
                1 === t.length && t.push("0");
                var r = e.from(t[0], this.format),
                  n = !t[1].match(/^(0*)$/);
                return !this.isNegative() && n && (r = r.addUnsafe(k.toFormat(r.format))), r;
              }
            }, {
              key: "round",
              value: function value(t) {
                null == t && (t = 0);
                var r = this.toString().split(".");
                if (1 === r.length && r.push("0"), (t < 0 || t > 80 || t % 1) && d.throwArgumentError("invalid decimal count", "decimals", t), r[1].length <= t) return this;
                var n = e.from("1" + y.substring(0, t), this.format),
                  i = _.toFormat(this.format);
                return this.mulUnsafe(n).addUnsafe(i).floor().divUnsafe(n);
              }
            }, {
              key: "isZero",
              value: function value() {
                return "0.0" === this._value || "0" === this._value;
              }
            }, {
              key: "isNegative",
              value: function value() {
                return "-" === this._value[0];
              }
            }, {
              key: "toString",
              value: function value() {
                return this._value;
              }
            }, {
              key: "toHexString",
              value: function value(e) {
                if (null == e) return this._hex;
                e % 8 && d.throwArgumentError("invalid byte width", "width", e);
                var t = f.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(e).toHexString();
                return (0, s.hexZeroPad)(t, e / 8);
              }
            }, {
              key: "toUnsafeFloat",
              value: function value() {
                return parseFloat(this.toString());
              }
            }, {
              key: "toFormat",
              value: function value(t) {
                return e.fromString(this._value, t);
              }
            }], [{
              key: "fromValue",
              value: function value(t, r, n) {
                return null != n || null == r || (0, f.isBigNumberish)(r) || (n = r, r = null), null == r && (r = 0), null == n && (n = "fixed"), e.fromString(v(t, r), w.from(n));
              }
            }, {
              key: "fromString",
              value: function value(t, r) {
                null == r && (r = "fixed");
                var n = w.from(r),
                  i = g(t, n.decimals);
                !n.signed && i.lt(h) && b("unsigned value cannot be negative", "overflow", "value", t);
                var o = null;
                n.signed ? o = i.toTwos(n.width).toHexString() : (o = i.toHexString(), o = (0, s.hexZeroPad)(o, n.width / 8));
                var a = v(i, n.decimals);
                return new e(l, o, a, n);
              }
            }, {
              key: "fromBytes",
              value: function value(t, r) {
                null == r && (r = "fixed");
                var n = w.from(r);
                if ((0, s.arrayify)(t).length > n.width / 8) throw new Error("overflow");
                var i = f.BigNumber.from(t);
                n.signed && (i = i.fromTwos(n.width));
                var o = i.toTwos((n.signed ? 0 : 1) + n.width).toHexString(),
                  a = v(i, n.decimals);
                return new e(l, o, a, n);
              }
            }, {
              key: "from",
              value: function value(t, r) {
                if ("string" == typeof t) return e.fromString(t, r);
                if ((0, s.isBytes)(t)) return e.fromBytes(t, r);
                try {
                  return e.fromValue(t, 0, r);
                } catch (e) {
                  if (e.code !== u.Logger.errors.INVALID_ARGUMENT) throw e;
                }
                return d.throwArgumentError("invalid FixedNumber value", "value", t);
              }
            }, {
              key: "isFixedNumber",
              value: function value(e) {
                return !(!e || !e._isFixedNumber);
              }
            }]), e;
          }();
          t.FixedNumber = A;
          var k = A.from(1),
            _ = A.from("0.5");
        },
        4952: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), Object.defineProperty(t, "BigNumber", {
            enumerable: !0,
            get: function get() {
              return n.BigNumber;
            }
          }), Object.defineProperty(t, "FixedFormat", {
            enumerable: !0,
            get: function get() {
              return i.FixedFormat;
            }
          }), Object.defineProperty(t, "FixedNumber", {
            enumerable: !0,
            get: function get() {
              return i.FixedNumber;
            }
          }), Object.defineProperty(t, "_base16To36", {
            enumerable: !0,
            get: function get() {
              return n._base16To36;
            }
          }), Object.defineProperty(t, "_base36To16", {
            enumerable: !0,
            get: function get() {
              return n._base36To16;
            }
          }), Object.defineProperty(t, "formatFixed", {
            enumerable: !0,
            get: function get() {
              return i.formatFixed;
            }
          }), Object.defineProperty(t, "parseFixed", {
            enumerable: !0,
            get: function get() {
              return i.parseFixed;
            }
          });
          var n = r(1872),
            i = r(8390);
        },
        8729: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.version = void 0, t.version = "bytes/5.7.0";
        },
        908: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.arrayify = d, t.concat = l, t.hexConcat = function (e) {
            var t = "0x";
            return e.forEach(function (e) {
              t += y(e).substring(2);
            }), t;
          }, t.hexDataLength = function (e) {
            if ("string" != typeof e) e = y(e);else if (!p(e) || e.length % 2) return null;
            return (e.length - 2) / 2;
          }, t.hexDataSlice = function (e, t, r) {
            return "string" != typeof e ? e = y(e) : (!p(e) || e.length % 2) && o.throwArgumentError("invalid hexData", "value", e), t = 2 + 2 * t, null != r ? "0x" + e.substring(t, 2 + 2 * r) : "0x" + e.substring(t);
          }, t.hexStripZeros = m, t.hexValue = function (e) {
            var t = m(y(e, {
              hexPad: "left"
            }));
            return "0x" === t ? "0x0" : t;
          }, t.hexZeroPad = v, t.hexlify = y, t.isBytes = f, t.isBytesLike = u, t.isHexString = p, t.joinSignature = function (e) {
            return y(l([(e = g(e)).r, e.s, e.recoveryParam ? "0x1c" : "0x1b"]));
          }, t.splitSignature = g, t.stripZeros = function (e) {
            var t = d(e);
            if (0 === t.length) return t;
            for (var r = 0; r < t.length && 0 === t[r];) r++;
            return r && (t = t.slice(r)), t;
          }, t.zeroPad = h;
          var n = r(4327),
            i = r(8729),
            o = new n.Logger(i.version);
          function a(e) {
            return !!e.toHexString;
          }
          function s(e) {
            return e.slice || (e.slice = function () {
              var t = Array.prototype.slice.call(arguments);
              return s(new Uint8Array(Array.prototype.slice.apply(e, t)));
            }), e;
          }
          function u(e) {
            return p(e) && !(e.length % 2) || f(e);
          }
          function c(e) {
            return "number" == typeof e && e == e && e % 1 == 0;
          }
          function f(e) {
            if (null == e) return !1;
            if (e.constructor === Uint8Array) return !0;
            if ("string" == typeof e) return !1;
            if (!c(e.length) || e.length < 0) return !1;
            for (var t = 0; t < e.length; t++) {
              var r = e[t];
              if (!c(r) || r < 0 || r >= 256) return !1;
            }
            return !0;
          }
          function d(e, t) {
            if (t || (t = {}), "number" == typeof e) {
              o.checkSafeUint53(e, "invalid arrayify value");
              for (var r = []; e;) r.unshift(255 & e), e = parseInt(String(e / 256));
              return 0 === r.length && r.push(0), s(new Uint8Array(r));
            }
            if (t.allowMissingPrefix && "string" == typeof e && "0x" !== e.substring(0, 2) && (e = "0x" + e), a(e) && (e = e.toHexString()), p(e)) {
              var n = e.substring(2);
              n.length % 2 && ("left" === t.hexPad ? n = "0" + n : "right" === t.hexPad ? n += "0" : o.throwArgumentError("hex data is odd-length", "value", e));
              for (var i = [], u = 0; u < n.length; u += 2) i.push(parseInt(n.substring(u, u + 2), 16));
              return s(new Uint8Array(i));
            }
            return f(e) ? s(new Uint8Array(e)) : o.throwArgumentError("invalid arrayify value", "value", e);
          }
          function l(e) {
            var t = e.map(function (e) {
                return d(e);
              }),
              r = t.reduce(function (e, t) {
                return e + t.length;
              }, 0),
              n = new Uint8Array(r);
            return t.reduce(function (e, t) {
              return n.set(t, e), e + t.length;
            }, 0), s(n);
          }
          function h(e, t) {
            (e = d(e)).length > t && o.throwArgumentError("value out of range", "value", arguments[0]);
            var r = new Uint8Array(t);
            return r.set(e, t - e.length), s(r);
          }
          function p(e, t) {
            return !("string" != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/) || t && e.length !== 2 + 2 * t);
          }
          var b = "0123456789abcdef";
          function y(e, t) {
            if (t || (t = {}), "number" == typeof e) {
              o.checkSafeUint53(e, "invalid hexlify value");
              for (var r = ""; e;) r = b[15 & e] + r, e = Math.floor(e / 16);
              return r.length ? (r.length % 2 && (r = "0" + r), "0x" + r) : "0x00";
            }
            if ("bigint" == typeof e) return (e = e.toString(16)).length % 2 ? "0x0" + e : "0x" + e;
            if (t.allowMissingPrefix && "string" == typeof e && "0x" !== e.substring(0, 2) && (e = "0x" + e), a(e)) return e.toHexString();
            if (p(e)) return e.length % 2 && ("left" === t.hexPad ? e = "0x0" + e.substring(2) : "right" === t.hexPad ? e += "0" : o.throwArgumentError("hex data is odd-length", "value", e)), e.toLowerCase();
            if (f(e)) {
              for (var n = "0x", i = 0; i < e.length; i++) {
                var s = e[i];
                n += b[(240 & s) >> 4] + b[15 & s];
              }
              return n;
            }
            return o.throwArgumentError("invalid hexlify value", "value", e);
          }
          function m(e) {
            "string" != typeof e && (e = y(e)), p(e) || o.throwArgumentError("invalid hex string", "value", e), e = e.substring(2);
            for (var t = 0; t < e.length && "0" === e[t];) t++;
            return "0x" + e.substring(t);
          }
          function v(e, t) {
            for ("string" != typeof e ? e = y(e) : p(e) || o.throwArgumentError("invalid hex string", "value", e), e.length > 2 * t + 2 && o.throwArgumentError("value out of range", "value", arguments[1]); e.length < 2 * t + 2;) e = "0x0" + e.substring(2);
            return e;
          }
          function g(e) {
            var t = {
              r: "0x",
              s: "0x",
              _vs: "0x",
              recoveryParam: 0,
              v: 0,
              yParityAndS: "0x",
              compact: "0x"
            };
            if (u(e)) {
              var r = d(e);
              64 === r.length ? (t.v = 27 + (r[32] >> 7), r[32] &= 127, t.r = y(r.slice(0, 32)), t.s = y(r.slice(32, 64))) : 65 === r.length ? (t.r = y(r.slice(0, 32)), t.s = y(r.slice(32, 64)), t.v = r[64]) : o.throwArgumentError("invalid signature string", "signature", e), t.v < 27 && (0 === t.v || 1 === t.v ? t.v += 27 : o.throwArgumentError("signature invalid v byte", "signature", e)), t.recoveryParam = 1 - t.v % 2, t.recoveryParam && (r[32] |= 128), t._vs = y(r.slice(32, 64));
            } else {
              if (t.r = e.r, t.s = e.s, t.v = e.v, t.recoveryParam = e.recoveryParam, t._vs = e._vs, null != t._vs) {
                var n = h(d(t._vs), 32);
                t._vs = y(n);
                var i = n[0] >= 128 ? 1 : 0;
                null == t.recoveryParam ? t.recoveryParam = i : t.recoveryParam !== i && o.throwArgumentError("signature recoveryParam mismatch _vs", "signature", e), n[0] &= 127;
                var a = y(n);
                null == t.s ? t.s = a : t.s !== a && o.throwArgumentError("signature v mismatch _vs", "signature", e);
              }
              if (null == t.recoveryParam) null == t.v ? o.throwArgumentError("signature missing v and recoveryParam", "signature", e) : 0 === t.v || 1 === t.v ? t.recoveryParam = t.v : t.recoveryParam = 1 - t.v % 2;else if (null == t.v) t.v = 27 + t.recoveryParam;else {
                var s = 0 === t.v || 1 === t.v ? t.v : 1 - t.v % 2;
                t.recoveryParam !== s && o.throwArgumentError("signature recoveryParam mismatch v", "signature", e);
              }
              null != t.r && p(t.r) ? t.r = v(t.r, 32) : o.throwArgumentError("signature missing or invalid r", "signature", e), null != t.s && p(t.s) ? t.s = v(t.s, 32) : o.throwArgumentError("signature missing or invalid s", "signature", e);
              var c = d(t.s);
              c[0] >= 128 && o.throwArgumentError("signature s out of range", "signature", e), t.recoveryParam && (c[0] |= 128);
              var f = y(c);
              t._vs && (p(t._vs) || o.throwArgumentError("signature invalid _vs", "signature", e), t._vs = v(t._vs, 32)), null == t._vs ? t._vs = f : t._vs !== f && o.throwArgumentError("signature _vs mismatch v and s", "signature", e);
            }
            return t.yParityAndS = t._vs, t.compact = t.r + t.yParityAndS.substring(2), t;
          }
        },
        8721: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.AddressZero = void 0, t.AddressZero = "0x0000000000000000000000000000000000000000";
        },
        2997: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.Zero = t.WeiPerEther = t.Two = t.One = t.NegativeOne = t.MinInt256 = t.MaxUint256 = t.MaxInt256 = void 0;
          var n = r(4952),
            i = n.BigNumber.from(-1);
          t.NegativeOne = i;
          var o = n.BigNumber.from(0);
          t.Zero = o;
          var a = n.BigNumber.from(1);
          t.One = a;
          var s = n.BigNumber.from(2);
          t.Two = s;
          var u = n.BigNumber.from("1000000000000000000");
          t.WeiPerEther = u;
          var c = n.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
          t.MaxUint256 = c;
          var f = n.BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
          t.MinInt256 = f;
          var d = n.BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
          t.MaxInt256 = d;
        },
        396: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.HashZero = void 0, t.HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
        },
        5465: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), Object.defineProperty(t, "AddressZero", {
            enumerable: !0,
            get: function get() {
              return n.AddressZero;
            }
          }), Object.defineProperty(t, "EtherSymbol", {
            enumerable: !0,
            get: function get() {
              return a.EtherSymbol;
            }
          }), Object.defineProperty(t, "HashZero", {
            enumerable: !0,
            get: function get() {
              return o.HashZero;
            }
          }), Object.defineProperty(t, "MaxInt256", {
            enumerable: !0,
            get: function get() {
              return i.MaxInt256;
            }
          }), Object.defineProperty(t, "MaxUint256", {
            enumerable: !0,
            get: function get() {
              return i.MaxUint256;
            }
          }), Object.defineProperty(t, "MinInt256", {
            enumerable: !0,
            get: function get() {
              return i.MinInt256;
            }
          }), Object.defineProperty(t, "NegativeOne", {
            enumerable: !0,
            get: function get() {
              return i.NegativeOne;
            }
          }), Object.defineProperty(t, "One", {
            enumerable: !0,
            get: function get() {
              return i.One;
            }
          }), Object.defineProperty(t, "Two", {
            enumerable: !0,
            get: function get() {
              return i.Two;
            }
          }), Object.defineProperty(t, "WeiPerEther", {
            enumerable: !0,
            get: function get() {
              return i.WeiPerEther;
            }
          }), Object.defineProperty(t, "Zero", {
            enumerable: !0,
            get: function get() {
              return i.Zero;
            }
          });
          var n = r(8721),
            i = r(2997),
            o = r(396),
            a = r(8347);
        },
        8347: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.EtherSymbol = void 0, t.EtherSymbol = "Ξ";
        },
        3989: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.version = void 0, t.version = "hash/5.7.0";
        },
        3731: function _(e, t) {
          "use strict";

          function r(e, t) {
            null == t && (t = 1);
            var r = [],
              n = r.forEach;
            return function e(t, i) {
              n.call(t, function (t) {
                i > 0 && Array.isArray(t) ? e(t, i - 1) : r.push(t);
              });
            }(e, t), r;
          }
          function n(e) {
            var t = 0;
            function r() {
              return e[t++] << 8 | e[t++];
            }
            for (var n = r(), i = 1, o = [0, 1], a = 1; a < n; a++) o.push(i += r());
            var s = r(),
              u = t;
            t += s;
            var c = 0,
              f = 0;
            function d() {
              return 0 == c && (f = f << 8 | e[t++], c = 8), f >> --c & 1;
            }
            for (var l = Math.pow(2, 31), h = l >>> 1, p = h >> 1, b = l - 1, y = 0, m = 0; m < 31; m++) y = y << 1 | d();
            for (var v = [], g = 0, w = l;;) {
              for (var A = Math.floor(((y - g + 1) * i - 1) / w), k = 0, _ = n; _ - k > 1;) {
                var S = k + _ >>> 1;
                A < o[S] ? _ = S : k = S;
              }
              if (0 == k) break;
              v.push(k);
              for (var E = g + Math.floor(w * o[k] / i), x = g + Math.floor(w * o[k + 1] / i) - 1; 0 == ((E ^ x) & h);) y = y << 1 & b | d(), E = E << 1 & b, x = x << 1 & b | 1;
              for (; E & ~x & p;) y = y & h | y << 1 & b >>> 1 | d(), E = E << 1 ^ h, x = (x ^ h) << 1 | h | 1;
              g = E, w = 1 + x - E;
            }
            var P = n - 4;
            return v.map(function (t) {
              switch (t - P) {
                case 3:
                  return P + 65792 + (e[u++] << 16 | e[u++] << 8 | e[u++]);
                case 2:
                  return P + 256 + (e[u++] << 8 | e[u++]);
                case 1:
                  return P + e[u++];
                default:
                  return t - 1;
              }
            });
          }
          function i(e) {
            var t = 0;
            return function () {
              return e[t++];
            };
          }
          function o(e) {
            return 1 & e ? ~e >> 1 : e >> 1;
          }
          function a(e, t) {
            for (var r = Array(e), n = 0, i = -1; n < e; n++) r[n] = i += 1 + t();
            return r;
          }
          function s(e, t) {
            for (var r = Array(e), n = 0, i = 0; n < e; n++) r[n] = i += o(t());
            return r;
          }
          function u(e, t) {
            for (var r = a(e(), e), n = e(), i = a(n, e), o = function (e, t) {
                for (var r = Array(e), n = 0; n < e; n++) r[n] = 1 + t();
                return r;
              }(n, e), s = 0; s < n; s++) for (var u = 0; u < o[s]; u++) r.push(i[s] + u);
            return t ? r.map(function (e) {
              return t[e];
            }) : r;
          }
          function c(e) {
            for (var t = [];;) {
              var r = e();
              if (0 == r) break;
              t.push(r);
            }
            return t;
          }
          function f(e, t, r) {
            for (var n = Array(e).fill(void 0).map(function () {
                return [];
              }), i = 0; i < t; i++) s(e, r).forEach(function (e, t) {
              return n[t].push(e);
            });
            return n;
          }
          function d(e, t) {
            var n = 1 + t(),
              i = t(),
              o = c(t);
            return r(f(o.length, 1 + e, t).map(function (e, t) {
              var r = e[0],
                a = e.slice(1);
              return Array(o[t]).fill(void 0).map(function (e, t) {
                var o = t * i;
                return [r + t * n, a.map(function (e) {
                  return e + o;
                })];
              });
            }));
          }
          function l(e, t) {
            return f(1 + t(), 1 + e, t).map(function (e) {
              return [e[0], e.slice(1)];
            });
          }
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.decode_arithmetic = n, t.read_compressed_payload = function (e) {
            return i(n(e));
          }, t.read_emoji_trie = function (e) {
            var t = u(e).sort(function (e, t) {
              return e - t;
            });
            return function r() {
              for (var n = [];;) {
                var i = u(e, t);
                if (0 == i.length) break;
                n.push({
                  set: new Set(i),
                  node: r()
                });
              }
              n.sort(function (e, t) {
                return t.set.size - e.set.size;
              });
              var o = e();
              return {
                branches: n,
                valid: o % 3,
                fe0f: !!(1 & (o = o / 3 | 0)),
                save: 1 == (o >>= 1),
                check: 2 == o
              };
            }();
          }, t.read_mapped_map = function (e) {
            for (var t = [];;) {
              var n = e();
              if (0 == n) break;
              t.push(d(n, e));
            }
            for (;;) {
              var i = e() - 1;
              if (i < 0) break;
              t.push(l(i, e));
            }
            return function (e) {
              for (var t = {}, r = 0; r < e.length; r++) {
                var n = e[r];
                t[n[0]] = n[1];
              }
              return t;
            }(r(t));
          }, t.read_member_array = u, t.read_payload = i, t.read_zero_terminated_array = c, t.signed = o;
        },
        3961: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.getData = function () {
            return (0, i.read_compressed_payload)((0, n.decode)(""));
          };
          var n = r(997),
            i = r(3731);
        },
        7032: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.ens_normalize = function (e) {
            return v(function (e, t) {
              for (var r = y(e).reverse(), n = []; r.length;) {
                var o = g(r);
                if (o) n.push.apply(n, (0, i.default)(t(o)));else {
                  var a = r.pop();
                  if (f.has(a)) n.push(a);else if (!d.has(a)) {
                    var s = l[a];
                    if (!s) throw new Error("Disallowed codepoint: 0x".concat(a.toString(16).toUpperCase()));
                    n.push.apply(n, (0, i.default)(s));
                  }
                }
              }
              return v(String.fromCodePoint.apply(String, n).normalize("NFC"));
            }(e, m));
          }, t.ens_normalize_post_check = v;
          var i = n(r(3106)),
            o = r(8627),
            a = r(3961),
            s = r(3731);
          function u(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          var c = (0, a.getData)(),
            f = new Set((0, s.read_member_array)(c)),
            d = new Set((0, s.read_member_array)(c)),
            l = (0, s.read_mapped_map)(c),
            h = (0, s.read_emoji_trie)(c),
            p = 45,
            b = 95;
          function y(e) {
            return (0, o.toUtf8CodePoints)(e);
          }
          function m(e) {
            return e.filter(function (e) {
              return 65039 != e;
            });
          }
          function v(e) {
            var t,
              r = function (e, t) {
                var r = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                if (!r) {
                  if (Array.isArray(e) || (r = function (e, t) {
                    if (e) {
                      if ("string" == typeof e) return u(e, t);
                      var r = Object.prototype.toString.call(e).slice(8, -1);
                      return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? u(e, t) : void 0;
                    }
                  }(e)) || t && e && "number" == typeof e.length) {
                    r && (e = r);
                    var _n5 = 0,
                      i = function i() {};
                    return {
                      s: i,
                      n: function n() {
                        return _n5 >= e.length ? {
                          done: !0
                        } : {
                          done: !1,
                          value: e[_n5++]
                        };
                      },
                      e: function e(_e2) {
                        throw _e2;
                      },
                      f: i
                    };
                  }
                  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var o,
                  a = !0,
                  s = !1;
                return {
                  s: function s() {
                    r = r.call(e);
                  },
                  n: function n() {
                    var e = r.next();
                    return a = e.done, e;
                  },
                  e: function e(_e3) {
                    s = !0, o = _e3;
                  },
                  f: function f() {
                    try {
                      a || null == r.return || r.return();
                    } finally {
                      if (s) throw o;
                    }
                  }
                };
              }(e.split("."));
            try {
              for (r.s(); !(t = r.n()).done;) {
                var n = t.value,
                  i = y(n);
                try {
                  for (var o = i.lastIndexOf(b) - 1; o >= 0; o--) if (i[o] !== b) throw new Error("underscore only allowed at start");
                  if (i.length >= 4 && i.every(function (e) {
                    return e < 128;
                  }) && i[2] === p && i[3] === p) throw new Error("invalid label extension");
                } catch (e) {
                  throw new Error('Invalid label "'.concat(n, '": ').concat(e.message));
                }
              }
            } catch (e) {
              r.e(e);
            } finally {
              r.f();
            }
            return e;
          }
          function g(e, t) {
            var r,
              n,
              o,
              a = h,
              s = [],
              u = e.length;
            t && (t.length = 0);
            for (var c = function c() {
              var c = e[--u];
              if (!(a = null === (r = a.branches.find(function (e) {
                return e.set.has(c);
              })) || void 0 === r ? void 0 : r.node)) return "break";
              if (a.save) o = c;else if (a.check && c === o) return "break";
              s.push(c), a.fe0f && (s.push(65039), u > 0 && 65039 == e[u - 1] && u--), a.valid && (n = s.slice(), 2 == a.valid && n.splice(1, 1), t && t.push.apply(t, (0, i.default)(e.slice(u).reverse())), e.length = u);
            }; u && "break" !== c(););
            return n;
          }
        },
        7901: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.id = function (e) {
            return (0, n.keccak256)((0, i.toUtf8Bytes)(e));
          };
          var n = r(4642),
            i = r(8627);
        },
        7515: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), Object.defineProperty(t, "_TypedDataEncoder", {
            enumerable: !0,
            get: function get() {
              return a.TypedDataEncoder;
            }
          }), Object.defineProperty(t, "dnsEncode", {
            enumerable: !0,
            get: function get() {
              return i.dnsEncode;
            }
          }), Object.defineProperty(t, "ensNormalize", {
            enumerable: !0,
            get: function get() {
              return i.ensNormalize;
            }
          }), Object.defineProperty(t, "hashMessage", {
            enumerable: !0,
            get: function get() {
              return o.hashMessage;
            }
          }), Object.defineProperty(t, "id", {
            enumerable: !0,
            get: function get() {
              return n.id;
            }
          }), Object.defineProperty(t, "isValidName", {
            enumerable: !0,
            get: function get() {
              return i.isValidName;
            }
          }), Object.defineProperty(t, "messagePrefix", {
            enumerable: !0,
            get: function get() {
              return o.messagePrefix;
            }
          }), Object.defineProperty(t, "namehash", {
            enumerable: !0,
            get: function get() {
              return i.namehash;
            }
          });
          var n = r(7901),
            i = r(4898),
            o = r(4443),
            a = r(2171);
        },
        4443: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.hashMessage = function (e) {
            return "string" == typeof e && (e = (0, o.toUtf8Bytes)(e)), (0, i.keccak256)((0, n.concat)([(0, o.toUtf8Bytes)(a), (0, o.toUtf8Bytes)(String(e.length)), e]));
          }, t.messagePrefix = void 0;
          var n = r(908),
            i = r(4642),
            o = r(8627),
            a = "Ethereum Signed Message:\n";
          t.messagePrefix = a;
        },
        4898: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.dnsEncode = function (e) {
            return (0, n.hexlify)((0, n.concat)(l(e).map(function (e) {
              if (e.length > 63) throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
              var t = new Uint8Array(e.length + 1);
              return t.set(e, 1), t[0] = t.length - 1, t;
            }))) + "00";
          }, t.ensNormalize = function (e) {
            return l(e).map(function (e) {
              return (0, i.toUtf8String)(e);
            }).join(".");
          }, t.isValidName = function (e) {
            try {
              return 0 !== l(e).length;
            } catch (e) {}
            return !1;
          }, t.namehash = function (e) {
            "string" != typeof e && c.throwArgumentError("invalid ENS name; not a string", "name", e);
            for (var t = f, r = l(e); r.length;) t = (0, o.keccak256)((0, n.concat)([t, (0, o.keccak256)(r.pop())]));
            return (0, n.hexlify)(t);
          };
          var n = r(908),
            i = r(8627),
            o = r(4642),
            a = r(4327),
            s = r(3989),
            u = r(7032),
            c = new a.Logger(s.version),
            f = new Uint8Array(32);
          function d(e) {
            if (0 === e.length) throw new Error("invalid ENS name; empty component");
            return e;
          }
          function l(e) {
            var t = (0, i.toUtf8Bytes)((0, u.ens_normalize)(e)),
              r = [];
            if (0 === e.length) return r;
            for (var n = 0, o = 0; o < t.length; o++) 46 === t[o] && (r.push(d(t.slice(n, o))), n = o + 1);
            if (n >= t.length) throw new Error("invalid ENS name; empty component");
            return r.push(d(t.slice(n))), r;
          }
          f.fill(0);
        },
        2171: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.TypedDataEncoder = void 0;
          var i = n(r(2247)),
            o = n(r(9721)),
            a = n(r(8985)),
            s = r(7921),
            u = r(4952),
            c = r(908),
            f = r(4642),
            d = r(3694),
            l = r(4327),
            h = r(3989),
            p = r(7901),
            b = new l.Logger(h.version),
            y = new Uint8Array(32);
          y.fill(0);
          var m = u.BigNumber.from(-1),
            v = u.BigNumber.from(0),
            g = u.BigNumber.from(1),
            w = u.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),
            A = (0, c.hexZeroPad)(g.toHexString(), 32),
            k = (0, c.hexZeroPad)(v.toHexString(), 32),
            _ = {
              name: "string",
              version: "string",
              chainId: "uint256",
              verifyingContract: "address",
              salt: "bytes32"
            },
            S = ["name", "version", "chainId", "verifyingContract", "salt"];
          function E(e) {
            return function (t) {
              return "string" != typeof t && b.throwArgumentError("invalid domain value for ".concat(JSON.stringify(e)), "domain.".concat(e), t), t;
            };
          }
          var x = {
            name: E("name"),
            version: E("version"),
            chainId: function chainId(e) {
              try {
                return u.BigNumber.from(e).toString();
              } catch (e) {}
              return b.throwArgumentError('invalid domain value for "chainId"', "domain.chainId", e);
            },
            verifyingContract: function verifyingContract(e) {
              try {
                return (0, s.getAddress)(e).toLowerCase();
              } catch (e) {}
              return b.throwArgumentError('invalid domain value "verifyingContract"', "domain.verifyingContract", e);
            },
            salt: function salt(e) {
              try {
                var t = (0, c.arrayify)(e);
                if (32 !== t.length) throw new Error("bad length");
                return (0, c.hexlify)(t);
              } catch (e) {}
              return b.throwArgumentError('invalid domain value "salt"', "domain.salt", e);
            }
          };
          function P(e) {
            var t = e.match(/^(u?)int(\d*)$/);
            if (t) {
              var r = "" === t[1],
                n = parseInt(t[2] || "256");
              (n % 8 != 0 || n > 256 || t[2] && t[2] !== String(n)) && b.throwArgumentError("invalid numeric width", "type", e);
              var i = w.mask(r ? n - 1 : n),
                o = r ? i.add(g).mul(m) : v;
              return function (t) {
                var r = u.BigNumber.from(t);
                return (r.lt(o) || r.gt(i)) && b.throwArgumentError("value out-of-bounds for ".concat(e), "value", t), (0, c.hexZeroPad)(r.toTwos(256).toHexString(), 32);
              };
            }
            var a = e.match(/^bytes(\d+)$/);
            if (a) {
              var d = parseInt(a[1]);
              return (0 === d || d > 32 || a[1] !== String(d)) && b.throwArgumentError("invalid bytes width", "type", e), function (t) {
                return (0, c.arrayify)(t).length !== d && b.throwArgumentError("invalid length for ".concat(e), "value", t), function (e) {
                  var t = (0, c.arrayify)(e),
                    r = t.length % 32;
                  return r ? (0, c.hexConcat)([t, y.slice(r)]) : (0, c.hexlify)(t);
                }(t);
              };
            }
            switch (e) {
              case "address":
                return function (e) {
                  return (0, c.hexZeroPad)((0, s.getAddress)(e), 32);
                };
              case "bool":
                return function (e) {
                  return e ? A : k;
                };
              case "bytes":
                return function (e) {
                  return (0, f.keccak256)(e);
                };
              case "string":
                return function (e) {
                  return (0, p.id)(e);
                };
            }
            return null;
          }
          function O(e, t) {
            return "".concat(e, "(").concat(t.map(function (e) {
              var t = e.name;
              return e.type + " " + t;
            }).join(","), ")");
          }
          var B = function () {
            function e(t) {
              (0, o.default)(this, e), (0, d.defineReadOnly)(this, "types", Object.freeze((0, d.deepCopy)(t))), (0, d.defineReadOnly)(this, "_encoderCache", {}), (0, d.defineReadOnly)(this, "_types", {});
              var r = {},
                n = {},
                i = {};
              Object.keys(t).forEach(function (e) {
                r[e] = {}, n[e] = [], i[e] = {};
              });
              var a = function a(e) {
                var i = {};
                t[e].forEach(function (o) {
                  i[o.name] && b.throwArgumentError("duplicate variable name ".concat(JSON.stringify(o.name), " in ").concat(JSON.stringify(e)), "types", t), i[o.name] = !0;
                  var a = o.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                  a === e && b.throwArgumentError("circular type reference to ".concat(JSON.stringify(a)), "types", t), P(a) || (n[a] || b.throwArgumentError("unknown type ".concat(JSON.stringify(a)), "types", t), n[a].push(e), r[e][a] = !0);
                });
              };
              for (var s in t) a(s);
              var u = Object.keys(n).filter(function (e) {
                return 0 === n[e].length;
              });
              for (var c in 0 === u.length ? b.throwArgumentError("missing primary type", "types", t) : u.length > 1 && b.throwArgumentError("ambiguous primary types or unused types: ".concat(u.map(function (e) {
                return JSON.stringify(e);
              }).join(", ")), "types", t), (0, d.defineReadOnly)(this, "primaryType", u[0]), function e(o, a) {
                a[o] && b.throwArgumentError("circular type reference to ".concat(JSON.stringify(o)), "types", t), a[o] = !0, Object.keys(r[o]).forEach(function (t) {
                  n[t] && (e(t, a), Object.keys(a).forEach(function (e) {
                    i[e][t] = !0;
                  }));
                }), delete a[o];
              }(this.primaryType, {}), i) {
                var f = Object.keys(i[c]);
                f.sort(), this._types[c] = O(c, t[c]) + f.map(function (e) {
                  return O(e, t[e]);
                }).join("");
              }
            }
            return (0, a.default)(e, [{
              key: "getEncoder",
              value: function value(e) {
                var t = this._encoderCache[e];
                return t || (t = this._encoderCache[e] = this._getEncoder(e)), t;
              }
            }, {
              key: "_getEncoder",
              value: function value(e) {
                var t = this,
                  r = P(e);
                if (r) return r;
                var n = e.match(/^(.*)(\x5b(\d*)\x5d)$/);
                if (n) {
                  var i = n[1],
                    o = this.getEncoder(i),
                    a = parseInt(n[3]);
                  return function (e) {
                    a >= 0 && e.length !== a && b.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", e);
                    var r = e.map(o);
                    return t._types[i] && (r = r.map(f.keccak256)), (0, f.keccak256)((0, c.hexConcat)(r));
                  };
                }
                var s = this.types[e];
                if (s) {
                  var u = (0, p.id)(this._types[e]);
                  return function (e) {
                    var r = s.map(function (r) {
                      var n = r.name,
                        i = r.type,
                        o = t.getEncoder(i)(e[n]);
                      return t._types[i] ? (0, f.keccak256)(o) : o;
                    });
                    return r.unshift(u), (0, c.hexConcat)(r);
                  };
                }
                return b.throwArgumentError("unknown type: ".concat(e), "type", e);
              }
            }, {
              key: "encodeType",
              value: function value(e) {
                var t = this._types[e];
                return t || b.throwArgumentError("unknown type: ".concat(JSON.stringify(e)), "name", e), t;
              }
            }, {
              key: "encodeData",
              value: function value(e, t) {
                return this.getEncoder(e)(t);
              }
            }, {
              key: "hashStruct",
              value: function value(e, t) {
                return (0, f.keccak256)(this.encodeData(e, t));
              }
            }, {
              key: "encode",
              value: function value(e) {
                return this.encodeData(this.primaryType, e);
              }
            }, {
              key: "hash",
              value: function value(e) {
                return this.hashStruct(this.primaryType, e);
              }
            }, {
              key: "_visit",
              value: function value(e, t, r) {
                var n = this;
                if (P(e)) return r(e, t);
                var i = e.match(/^(.*)(\x5b(\d*)\x5d)$/);
                if (i) {
                  var o = i[1],
                    a = parseInt(i[3]);
                  return a >= 0 && t.length !== a && b.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", t), t.map(function (e) {
                    return n._visit(o, e, r);
                  });
                }
                var s = this.types[e];
                return s ? s.reduce(function (e, i) {
                  var o = i.name,
                    a = i.type;
                  return e[o] = n._visit(a, t[o], r), e;
                }, {}) : b.throwArgumentError("unknown type: ".concat(e), "type", e);
              }
            }, {
              key: "visit",
              value: function value(e, t) {
                return this._visit(this.primaryType, e, t);
              }
            }], [{
              key: "from",
              value: function value(t) {
                return new e(t);
              }
            }, {
              key: "getPrimaryType",
              value: function value(t) {
                return e.from(t).primaryType;
              }
            }, {
              key: "hashStruct",
              value: function value(t, r, n) {
                return e.from(r).hashStruct(t, n);
              }
            }, {
              key: "hashDomain",
              value: function value(t) {
                var r = [];
                for (var n in t) {
                  var i = _[n];
                  i || b.throwArgumentError("invalid typed-data domain key: ".concat(JSON.stringify(n)), "domain", t), r.push({
                    name: n,
                    type: i
                  });
                }
                return r.sort(function (e, t) {
                  return S.indexOf(e.name) - S.indexOf(t.name);
                }), e.hashStruct("EIP712Domain", {
                  EIP712Domain: r
                }, t);
              }
            }, {
              key: "encode",
              value: function value(t, r, n) {
                return (0, c.hexConcat)(["0x1901", e.hashDomain(t), e.from(r).hash(n)]);
              }
            }, {
              key: "hash",
              value: function value(t, r, n) {
                return (0, f.keccak256)(e.encode(t, r, n));
              }
            }, {
              key: "resolveNames",
              value: function value(t, r, n, o) {
                return a = this, s = void 0, u = void 0, f = i.default.mark(function a() {
                  var s, u, f;
                  return i.default.wrap(function (a) {
                    for (;;) switch (a.prev = a.next) {
                      case 0:
                        t = (0, d.shallowCopy)(t), s = {}, t.verifyingContract && !(0, c.isHexString)(t.verifyingContract, 20) && (s[t.verifyingContract] = "0x"), (u = e.from(r)).visit(n, function (e, t) {
                          return "address" !== e || (0, c.isHexString)(t, 20) || (s[t] = "0x"), t;
                        }), a.t0 = i.default.keys(s);
                      case 6:
                        if ((a.t1 = a.t0()).done) {
                          a.next = 13;
                          break;
                        }
                        return f = a.t1.value, a.next = 10, o(f);
                      case 10:
                        s[f] = a.sent, a.next = 6;
                        break;
                      case 13:
                        return t.verifyingContract && s[t.verifyingContract] && (t.verifyingContract = s[t.verifyingContract]), n = u.visit(n, function (e, t) {
                          return "address" === e && s[t] ? s[t] : t;
                        }), a.abrupt("return", {
                          domain: t,
                          value: n
                        });
                      case 16:
                      case "end":
                        return a.stop();
                    }
                  }, a);
                }), new (u || (u = Promise))(function (e, t) {
                  function r(e) {
                    try {
                      i(f.next(e));
                    } catch (e) {
                      t(e);
                    }
                  }
                  function n(e) {
                    try {
                      i(f.throw(e));
                    } catch (e) {
                      t(e);
                    }
                  }
                  function i(t) {
                    var i;
                    t.done ? e(t.value) : (i = t.value, i instanceof u ? i : new u(function (e) {
                      e(i);
                    })).then(r, n);
                  }
                  i((f = f.apply(a, s || [])).next());
                });
                var a, s, u, f;
              }
            }, {
              key: "getPayload",
              value: function value(t, r, n) {
                e.hashDomain(t);
                var i = {},
                  o = [];
                S.forEach(function (e) {
                  var r = t[e];
                  null != r && (i[e] = x[e](r), o.push({
                    name: e,
                    type: _[e]
                  }));
                });
                var a = e.from(r),
                  s = (0, d.shallowCopy)(r);
                return s.EIP712Domain ? b.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", r) : s.EIP712Domain = o, a.encode(n), {
                  types: s,
                  domain: i,
                  primaryType: a.primaryType,
                  message: a.visit(n, function (e, t) {
                    if (e.match(/^bytes(\d*)/)) return (0, c.hexlify)((0, c.arrayify)(t));
                    if (e.match(/^u?int/)) return u.BigNumber.from(t).toString();
                    switch (e) {
                      case "address":
                        return t.toLowerCase();
                      case "bool":
                        return !!t;
                      case "string":
                        return "string" != typeof t && b.throwArgumentError("invalid string", "value", t), t;
                    }
                    return b.throwArgumentError("unsupported type", "type", e);
                  })
                };
              }
            }]), e;
          }();
          t.TypedDataEncoder = B;
        },
        4642: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.keccak256 = function (e) {
            return "0x" + i.default.keccak_256((0, o.arrayify)(e));
          };
          var i = n(r(5975)),
            o = r(908);
        },
        5975: function _(e, t, r) {
          "use strict";

          e = r.nmd(e);
          var n,
            i = r(9142),
            o = r(8847)(r(3355));
          !function () {
            var a = "input is invalid type",
              s = "object" === ("undefined" == typeof window ? "undefined" : (0, o.default)(window)),
              u = s ? window : {};
            u.JS_SHA3_NO_WINDOW && (s = !1);
            var c = !s && "object" === ("undefined" == typeof self ? "undefined" : (0, o.default)(self));
            !u.JS_SHA3_NO_NODE_JS && "object" === (void 0 === i ? "undefined" : (0, o.default)(i)) && i.versions && i.versions.node ? u = r.g : c && (u = self);
            var f = !u.JS_SHA3_NO_COMMON_JS && "object" === (0, o.default)(e) && e.exports,
              d = r.amdO,
              l = !u.JS_SHA3_NO_ARRAY_BUFFER && "undefined" != typeof ArrayBuffer,
              h = "0123456789abcdef".split(""),
              p = [4, 1024, 262144, 67108864],
              b = [0, 8, 16, 24],
              y = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648],
              m = [224, 256, 384, 512],
              v = [128, 256],
              g = ["hex", "buffer", "arrayBuffer", "array", "digest"],
              w = {
                128: 168,
                256: 136
              };
            !u.JS_SHA3_NO_NODE_JS && Array.isArray || (Array.isArray = function (e) {
              return "[object Array]" === Object.prototype.toString.call(e);
            }), !l || !u.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW && ArrayBuffer.isView || (ArrayBuffer.isView = function (e) {
              return "object" === (0, o.default)(e) && e.buffer && e.buffer.constructor === ArrayBuffer;
            });
            for (var A = function A(e, t, r) {
                return function (n) {
                  return new j(e, t, e).update(n)[r]();
                };
              }, k = function k(e, t, r) {
                return function (n, i) {
                  return new j(e, t, i).update(n)[r]();
                };
              }, _ = function _(e, t, r) {
                return function (t, n, i, o) {
                  return O["cshake" + e].update(t, n, i, o)[r]();
                };
              }, S = function S(e, t, r) {
                return function (t, n, i, o) {
                  return O["kmac" + e].update(t, n, i, o)[r]();
                };
              }, E = function E(e, t, r, n) {
                for (var i = 0; i < g.length; ++i) {
                  var o = g[i];
                  e[o] = t(r, n, o);
                }
                return e;
              }, x = function x(e, t) {
                var r = A(e, t, "hex");
                return r.create = function () {
                  return new j(e, t, e);
                }, r.update = function (e) {
                  return r.create().update(e);
                }, E(r, A, e, t);
              }, P = [{
                name: "keccak",
                padding: [1, 256, 65536, 16777216],
                bits: m,
                createMethod: x
              }, {
                name: "sha3",
                padding: [6, 1536, 393216, 100663296],
                bits: m,
                createMethod: x
              }, {
                name: "shake",
                padding: [31, 7936, 2031616, 520093696],
                bits: v,
                createMethod: function createMethod(e, t) {
                  var r = k(e, t, "hex");
                  return r.create = function (r) {
                    return new j(e, t, r);
                  }, r.update = function (e, t) {
                    return r.create(t).update(e);
                  }, E(r, k, e, t);
                }
              }, {
                name: "cshake",
                padding: p,
                bits: v,
                createMethod: function createMethod(e, t) {
                  var r = w[e],
                    n = _(e, 0, "hex");
                  return n.create = function (n, i, o) {
                    return i || o ? new j(e, t, n).bytepad([i, o], r) : O["shake" + e].create(n);
                  }, n.update = function (e, t, r, i) {
                    return n.create(t, r, i).update(e);
                  }, E(n, _, e, t);
                }
              }, {
                name: "kmac",
                padding: p,
                bits: v,
                createMethod: function createMethod(e, t) {
                  var r = w[e],
                    n = S(e, 0, "hex");
                  return n.create = function (n, i, o) {
                    return new N(e, t, i).bytepad(["KMAC", o], r).bytepad([n], r);
                  }, n.update = function (e, t, r, i) {
                    return n.create(e, r, i).update(t);
                  }, E(n, S, e, t);
                }
              }], O = {}, B = [], T = 0; T < P.length; ++T) for (var C = P[T], I = C.bits, M = 0; M < I.length; ++M) {
              var U = C.name + "_" + I[M];
              if (B.push(U), O[U] = C.createMethod(I[M], C.padding), "sha3" !== C.name) {
                var R = C.name + I[M];
                B.push(R), O[R] = O[U];
              }
            }
            function j(e, t, r) {
              this.blocks = [], this.s = [], this.padding = t, this.outputBits = r, this.reset = !0, this.finalized = !1, this.block = 0, this.start = 0, this.blockCount = 1600 - (e << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r >> 5, this.extraBytes = (31 & r) >> 3;
              for (var n = 0; n < 50; ++n) this.s[n] = 0;
            }
            function N(e, t, r) {
              j.call(this, e, t, r);
            }
            j.prototype.update = function (e) {
              if (this.finalized) throw new Error("finalize already called");
              var t,
                r = (0, o.default)(e);
              if ("string" !== r) {
                if ("object" !== r) throw new Error(a);
                if (null === e) throw new Error(a);
                if (l && e.constructor === ArrayBuffer) e = new Uint8Array(e);else if (!(Array.isArray(e) || l && ArrayBuffer.isView(e))) throw new Error(a);
                t = !0;
              }
              for (var n, i, s = this.blocks, u = this.byteCount, c = e.length, f = this.blockCount, d = 0, h = this.s; d < c;) {
                if (this.reset) for (this.reset = !1, s[0] = this.block, n = 1; n < f + 1; ++n) s[n] = 0;
                if (t) for (n = this.start; d < c && n < u; ++d) s[n >> 2] |= e[d] << b[3 & n++];else for (n = this.start; d < c && n < u; ++d) (i = e.charCodeAt(d)) < 128 ? s[n >> 2] |= i << b[3 & n++] : i < 2048 ? (s[n >> 2] |= (192 | i >> 6) << b[3 & n++], s[n >> 2] |= (128 | 63 & i) << b[3 & n++]) : i < 55296 || i >= 57344 ? (s[n >> 2] |= (224 | i >> 12) << b[3 & n++], s[n >> 2] |= (128 | i >> 6 & 63) << b[3 & n++], s[n >> 2] |= (128 | 63 & i) << b[3 & n++]) : (i = 65536 + ((1023 & i) << 10 | 1023 & e.charCodeAt(++d)), s[n >> 2] |= (240 | i >> 18) << b[3 & n++], s[n >> 2] |= (128 | i >> 12 & 63) << b[3 & n++], s[n >> 2] |= (128 | i >> 6 & 63) << b[3 & n++], s[n >> 2] |= (128 | 63 & i) << b[3 & n++]);
                if (this.lastByteIndex = n, n >= u) {
                  for (this.start = n - u, this.block = s[f], n = 0; n < f; ++n) h[n] ^= s[n];
                  F(h), this.reset = !0;
                } else this.start = n;
              }
              return this;
            }, j.prototype.encode = function (e, t) {
              var r = 255 & e,
                n = 1,
                i = [r];
              for (r = 255 & (e >>= 8); r > 0;) i.unshift(r), r = 255 & (e >>= 8), ++n;
              return t ? i.push(n) : i.unshift(n), this.update(i), i.length;
            }, j.prototype.encodeString = function (e) {
              var t,
                r = (0, o.default)(e);
              if ("string" !== r) {
                if ("object" !== r) throw new Error(a);
                if (null === e) throw new Error(a);
                if (l && e.constructor === ArrayBuffer) e = new Uint8Array(e);else if (!(Array.isArray(e) || l && ArrayBuffer.isView(e))) throw new Error(a);
                t = !0;
              }
              var n = 0,
                i = e.length;
              if (t) n = i;else for (var s = 0; s < e.length; ++s) {
                var u = e.charCodeAt(s);
                u < 128 ? n += 1 : u < 2048 ? n += 2 : u < 55296 || u >= 57344 ? n += 3 : (u = 65536 + ((1023 & u) << 10 | 1023 & e.charCodeAt(++s)), n += 4);
              }
              return n += this.encode(8 * n), this.update(e), n;
            }, j.prototype.bytepad = function (e, t) {
              for (var r = this.encode(t), n = 0; n < e.length; ++n) r += this.encodeString(e[n]);
              var i = t - r % t,
                o = [];
              return o.length = i, this.update(o), this;
            }, j.prototype.finalize = function () {
              if (!this.finalized) {
                this.finalized = !0;
                var e = this.blocks,
                  t = this.lastByteIndex,
                  r = this.blockCount,
                  n = this.s;
                if (e[t >> 2] |= this.padding[3 & t], this.lastByteIndex === this.byteCount) for (e[0] = e[r], t = 1; t < r + 1; ++t) e[t] = 0;
                for (e[r - 1] |= 2147483648, t = 0; t < r; ++t) n[t] ^= e[t];
                F(n);
              }
            }, j.prototype.toString = j.prototype.hex = function () {
              this.finalize();
              for (var e, t = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, a = 0, s = ""; a < n;) {
                for (o = 0; o < t && a < n; ++o, ++a) e = r[o], s += h[e >> 4 & 15] + h[15 & e] + h[e >> 12 & 15] + h[e >> 8 & 15] + h[e >> 20 & 15] + h[e >> 16 & 15] + h[e >> 28 & 15] + h[e >> 24 & 15];
                a % t == 0 && (F(r), o = 0);
              }
              return i && (e = r[o], s += h[e >> 4 & 15] + h[15 & e], i > 1 && (s += h[e >> 12 & 15] + h[e >> 8 & 15]), i > 2 && (s += h[e >> 20 & 15] + h[e >> 16 & 15])), s;
            }, j.prototype.arrayBuffer = function () {
              this.finalize();
              var e,
                t = this.blockCount,
                r = this.s,
                n = this.outputBlocks,
                i = this.extraBytes,
                o = 0,
                a = 0,
                s = this.outputBits >> 3;
              e = i ? new ArrayBuffer(n + 1 << 2) : new ArrayBuffer(s);
              for (var u = new Uint32Array(e); a < n;) {
                for (o = 0; o < t && a < n; ++o, ++a) u[a] = r[o];
                a % t == 0 && F(r);
              }
              return i && (u[o] = r[o], e = e.slice(0, s)), e;
            }, j.prototype.buffer = j.prototype.arrayBuffer, j.prototype.digest = j.prototype.array = function () {
              this.finalize();
              for (var e, t, r = this.blockCount, n = this.s, i = this.outputBlocks, o = this.extraBytes, a = 0, s = 0, u = []; s < i;) {
                for (a = 0; a < r && s < i; ++a, ++s) e = s << 2, t = n[a], u[e] = 255 & t, u[e + 1] = t >> 8 & 255, u[e + 2] = t >> 16 & 255, u[e + 3] = t >> 24 & 255;
                s % r == 0 && F(n);
              }
              return o && (e = s << 2, t = n[a], u[e] = 255 & t, o > 1 && (u[e + 1] = t >> 8 & 255), o > 2 && (u[e + 2] = t >> 16 & 255)), u;
            }, N.prototype = new j(), N.prototype.finalize = function () {
              return this.encode(this.outputBits, !0), j.prototype.finalize.call(this);
            };
            var F = function F(e) {
              var t, r, n, i, o, a, s, u, c, f, d, l, h, p, b, m, v, g, w, A, k, _, S, E, x, P, O, B, T, C, I, M, U, R, j, N, F, L, D, H, q, z, G, K, V, J, W, Y, X, Q, Z, $, ee, te, re, ne, ie, oe, ae, se, ue, ce, fe;
              for (n = 0; n < 48; n += 2) i = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], o = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], a = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], s = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], u = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], c = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], f = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], d = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], t = (l = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48]) ^ (a << 1 | s >>> 31), r = (h = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (s << 1 | a >>> 31), e[0] ^= t, e[1] ^= r, e[10] ^= t, e[11] ^= r, e[20] ^= t, e[21] ^= r, e[30] ^= t, e[31] ^= r, e[40] ^= t, e[41] ^= r, t = i ^ (u << 1 | c >>> 31), r = o ^ (c << 1 | u >>> 31), e[2] ^= t, e[3] ^= r, e[12] ^= t, e[13] ^= r, e[22] ^= t, e[23] ^= r, e[32] ^= t, e[33] ^= r, e[42] ^= t, e[43] ^= r, t = a ^ (f << 1 | d >>> 31), r = s ^ (d << 1 | f >>> 31), e[4] ^= t, e[5] ^= r, e[14] ^= t, e[15] ^= r, e[24] ^= t, e[25] ^= r, e[34] ^= t, e[35] ^= r, e[44] ^= t, e[45] ^= r, t = u ^ (l << 1 | h >>> 31), r = c ^ (h << 1 | l >>> 31), e[6] ^= t, e[7] ^= r, e[16] ^= t, e[17] ^= r, e[26] ^= t, e[27] ^= r, e[36] ^= t, e[37] ^= r, e[46] ^= t, e[47] ^= r, t = f ^ (i << 1 | o >>> 31), r = d ^ (o << 1 | i >>> 31), e[8] ^= t, e[9] ^= r, e[18] ^= t, e[19] ^= r, e[28] ^= t, e[29] ^= r, e[38] ^= t, e[39] ^= r, e[48] ^= t, e[49] ^= r, p = e[0], b = e[1], J = e[11] << 4 | e[10] >>> 28, W = e[10] << 4 | e[11] >>> 28, B = e[20] << 3 | e[21] >>> 29, T = e[21] << 3 | e[20] >>> 29, se = e[31] << 9 | e[30] >>> 23, ue = e[30] << 9 | e[31] >>> 23, z = e[40] << 18 | e[41] >>> 14, G = e[41] << 18 | e[40] >>> 14, R = e[2] << 1 | e[3] >>> 31, j = e[3] << 1 | e[2] >>> 31, m = e[13] << 12 | e[12] >>> 20, v = e[12] << 12 | e[13] >>> 20, Y = e[22] << 10 | e[23] >>> 22, X = e[23] << 10 | e[22] >>> 22, C = e[33] << 13 | e[32] >>> 19, I = e[32] << 13 | e[33] >>> 19, ce = e[42] << 2 | e[43] >>> 30, fe = e[43] << 2 | e[42] >>> 30, te = e[5] << 30 | e[4] >>> 2, re = e[4] << 30 | e[5] >>> 2, N = e[14] << 6 | e[15] >>> 26, F = e[15] << 6 | e[14] >>> 26, g = e[25] << 11 | e[24] >>> 21, w = e[24] << 11 | e[25] >>> 21, Q = e[34] << 15 | e[35] >>> 17, Z = e[35] << 15 | e[34] >>> 17, M = e[45] << 29 | e[44] >>> 3, U = e[44] << 29 | e[45] >>> 3, E = e[6] << 28 | e[7] >>> 4, x = e[7] << 28 | e[6] >>> 4, ne = e[17] << 23 | e[16] >>> 9, ie = e[16] << 23 | e[17] >>> 9, L = e[26] << 25 | e[27] >>> 7, D = e[27] << 25 | e[26] >>> 7, A = e[36] << 21 | e[37] >>> 11, k = e[37] << 21 | e[36] >>> 11, $ = e[47] << 24 | e[46] >>> 8, ee = e[46] << 24 | e[47] >>> 8, K = e[8] << 27 | e[9] >>> 5, V = e[9] << 27 | e[8] >>> 5, P = e[18] << 20 | e[19] >>> 12, O = e[19] << 20 | e[18] >>> 12, oe = e[29] << 7 | e[28] >>> 25, ae = e[28] << 7 | e[29] >>> 25, H = e[38] << 8 | e[39] >>> 24, q = e[39] << 8 | e[38] >>> 24, _ = e[48] << 14 | e[49] >>> 18, S = e[49] << 14 | e[48] >>> 18, e[0] = p ^ ~m & g, e[1] = b ^ ~v & w, e[10] = E ^ ~P & B, e[11] = x ^ ~O & T, e[20] = R ^ ~N & L, e[21] = j ^ ~F & D, e[30] = K ^ ~J & Y, e[31] = V ^ ~W & X, e[40] = te ^ ~ne & oe, e[41] = re ^ ~ie & ae, e[2] = m ^ ~g & A, e[3] = v ^ ~w & k, e[12] = P ^ ~B & C, e[13] = O ^ ~T & I, e[22] = N ^ ~L & H, e[23] = F ^ ~D & q, e[32] = J ^ ~Y & Q, e[33] = W ^ ~X & Z, e[42] = ne ^ ~oe & se, e[43] = ie ^ ~ae & ue, e[4] = g ^ ~A & _, e[5] = w ^ ~k & S, e[14] = B ^ ~C & M, e[15] = T ^ ~I & U, e[24] = L ^ ~H & z, e[25] = D ^ ~q & G, e[34] = Y ^ ~Q & $, e[35] = X ^ ~Z & ee, e[44] = oe ^ ~se & ce, e[45] = ae ^ ~ue & fe, e[6] = A ^ ~_ & p, e[7] = k ^ ~S & b, e[16] = C ^ ~M & E, e[17] = I ^ ~U & x, e[26] = H ^ ~z & R, e[27] = q ^ ~G & j, e[36] = Q ^ ~$ & K, e[37] = Z ^ ~ee & V, e[46] = se ^ ~ce & te, e[47] = ue ^ ~fe & re, e[8] = _ ^ ~p & m, e[9] = S ^ ~b & v, e[18] = M ^ ~E & P, e[19] = U ^ ~x & O, e[28] = z ^ ~R & N, e[29] = G ^ ~j & F, e[38] = $ ^ ~K & J, e[39] = ee ^ ~V & W, e[48] = ce ^ ~te & ne, e[49] = fe ^ ~re & ie, e[0] ^= y[n], e[1] ^= y[n + 1];
            };
            if (f) e.exports = O;else {
              for (T = 0; T < B.length; ++T) u[B[T]] = O[B[T]];
              d && (void 0 === (n = function () {
                return O;
              }.call(t, r, t, e)) || (e.exports = n));
            }
          }();
        },
        7252: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.version = void 0, t.version = "logger/5.7.0";
        },
        4327: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.Logger = t.LogLevel = t.ErrorCode = void 0;
          var i,
            o,
            a = n(r(9721)),
            s = n(r(8985)),
            u = r(7252),
            c = !1,
            f = !1,
            d = {
              debug: 1,
              default: 2,
              info: 2,
              warning: 3,
              error: 4,
              off: 5
            },
            l = d.default,
            h = null,
            p = function () {
              try {
                var e = [];
                if (["NFD", "NFC", "NFKD", "NFKC"].forEach(function (t) {
                  try {
                    if ("test" !== "test".normalize(t)) throw new Error("bad normalize");
                  } catch (r) {
                    e.push(t);
                  }
                }), e.length) throw new Error("missing " + e.join(", "));
                if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) throw new Error("broken implementation");
              } catch (e) {
                return e.message;
              }
              return null;
            }();
          t.LogLevel = i, function (e) {
            e.DEBUG = "DEBUG", e.INFO = "INFO", e.WARNING = "WARNING", e.ERROR = "ERROR", e.OFF = "OFF";
          }(i || (t.LogLevel = i = {})), t.ErrorCode = o, function (e) {
            e.UNKNOWN_ERROR = "UNKNOWN_ERROR", e.NOT_IMPLEMENTED = "NOT_IMPLEMENTED", e.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION", e.NETWORK_ERROR = "NETWORK_ERROR", e.SERVER_ERROR = "SERVER_ERROR", e.TIMEOUT = "TIMEOUT", e.BUFFER_OVERRUN = "BUFFER_OVERRUN", e.NUMERIC_FAULT = "NUMERIC_FAULT", e.MISSING_NEW = "MISSING_NEW", e.INVALID_ARGUMENT = "INVALID_ARGUMENT", e.MISSING_ARGUMENT = "MISSING_ARGUMENT", e.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT", e.CALL_EXCEPTION = "CALL_EXCEPTION", e.INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS", e.NONCE_EXPIRED = "NONCE_EXPIRED", e.REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED", e.UNPREDICTABLE_GAS_LIMIT = "UNPREDICTABLE_GAS_LIMIT", e.TRANSACTION_REPLACED = "TRANSACTION_REPLACED", e.ACTION_REJECTED = "ACTION_REJECTED";
          }(o || (t.ErrorCode = o = {}));
          var b = "0123456789abcdef",
            y = function () {
              function e(t) {
                (0, a.default)(this, e), Object.defineProperty(this, "version", {
                  enumerable: !0,
                  value: t,
                  writable: !1
                });
              }
              return (0, s.default)(e, [{
                key: "_log",
                value: function value(e, t) {
                  var r = e.toLowerCase();
                  null == d[r] && this.throwArgumentError("invalid log level name", "logLevel", e), l > d[r] || console.log.apply(console, t);
                }
              }, {
                key: "debug",
                value: function value() {
                  for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                  this._log(e.levels.DEBUG, r);
                }
              }, {
                key: "info",
                value: function value() {
                  for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                  this._log(e.levels.INFO, r);
                }
              }, {
                key: "warn",
                value: function value() {
                  for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                  this._log(e.levels.WARNING, r);
                }
              }, {
                key: "makeError",
                value: function value(t, r, n) {
                  if (f) return this.makeError("censored error", r, {});
                  r || (r = e.errors.UNKNOWN_ERROR), n || (n = {});
                  var i = [];
                  Object.keys(n).forEach(function (e) {
                    var t = n[e];
                    try {
                      if (t instanceof Uint8Array) {
                        for (var r = "", o = 0; o < t.length; o++) r += b[t[o] >> 4], r += b[15 & t[o]];
                        i.push(e + "=Uint8Array(0x" + r + ")");
                      } else i.push(e + "=" + JSON.stringify(t));
                    } catch (t) {
                      i.push(e + "=" + JSON.stringify(n[e].toString()));
                    }
                  }), i.push("code=".concat(r)), i.push("version=".concat(this.version));
                  var a = t,
                    s = "";
                  switch (r) {
                    case o.NUMERIC_FAULT:
                      s = "NUMERIC_FAULT";
                      var u = t;
                      switch (u) {
                        case "overflow":
                        case "underflow":
                        case "division-by-zero":
                          s += "-" + u;
                          break;
                        case "negative-power":
                        case "negative-width":
                          s += "-unsupported";
                          break;
                        case "unbound-bitwise-result":
                          s += "-unbound-result";
                      }
                      break;
                    case o.CALL_EXCEPTION:
                    case o.INSUFFICIENT_FUNDS:
                    case o.MISSING_NEW:
                    case o.NONCE_EXPIRED:
                    case o.REPLACEMENT_UNDERPRICED:
                    case o.TRANSACTION_REPLACED:
                    case o.UNPREDICTABLE_GAS_LIMIT:
                      s = r;
                  }
                  s && (t += " [ See: https://links.ethers.org/v5-errors-" + s + " ]"), i.length && (t += " (" + i.join(", ") + ")");
                  var c = new Error(t);
                  return c.reason = a, c.code = r, Object.keys(n).forEach(function (e) {
                    c[e] = n[e];
                  }), c;
                }
              }, {
                key: "throwError",
                value: function value(e, t, r) {
                  throw this.makeError(e, t, r);
                }
              }, {
                key: "throwArgumentError",
                value: function value(t, r, n) {
                  return this.throwError(t, e.errors.INVALID_ARGUMENT, {
                    argument: r,
                    value: n
                  });
                }
              }, {
                key: "assert",
                value: function value(e, t, r, n) {
                  e || this.throwError(t, r, n);
                }
              }, {
                key: "assertArgument",
                value: function value(e, t, r, n) {
                  e || this.throwArgumentError(t, r, n);
                }
              }, {
                key: "checkNormalize",
                value: function value(t) {
                  null == t && (t = "platform missing String.prototype.normalize"), p && this.throwError("platform missing String.prototype.normalize", e.errors.UNSUPPORTED_OPERATION, {
                    operation: "String.prototype.normalize",
                    form: p
                  });
                }
              }, {
                key: "checkSafeUint53",
                value: function value(t, r) {
                  "number" == typeof t && (null == r && (r = "value not safe"), (t < 0 || t >= 9007199254740991) && this.throwError(r, e.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "out-of-safe-range",
                    value: t
                  }), t % 1 && this.throwError(r, e.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "non-integer",
                    value: t
                  }));
                }
              }, {
                key: "checkArgumentCount",
                value: function value(t, r, n) {
                  n = n ? ": " + n : "", t < r && this.throwError("missing argument" + n, e.errors.MISSING_ARGUMENT, {
                    count: t,
                    expectedCount: r
                  }), t > r && this.throwError("too many arguments" + n, e.errors.UNEXPECTED_ARGUMENT, {
                    count: t,
                    expectedCount: r
                  });
                }
              }, {
                key: "checkNew",
                value: function value(t, r) {
                  t !== Object && null != t || this.throwError("missing new", e.errors.MISSING_NEW, {
                    name: r.name
                  });
                }
              }, {
                key: "checkAbstract",
                value: function value(t, r) {
                  t === r ? this.throwError("cannot instantiate abstract class " + JSON.stringify(r.name) + " directly; use a sub-class", e.errors.UNSUPPORTED_OPERATION, {
                    name: t.name,
                    operation: "new"
                  }) : t !== Object && null != t || this.throwError("missing new", e.errors.MISSING_NEW, {
                    name: r.name
                  });
                }
              }], [{
                key: "globalLogger",
                value: function value() {
                  return h || (h = new e(u.version)), h;
                }
              }, {
                key: "setCensorship",
                value: function value(t, r) {
                  if (!t && r && this.globalLogger().throwError("cannot permanently disable censorship", e.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                  }), c) {
                    if (!t) return;
                    this.globalLogger().throwError("error censorship permanent", e.errors.UNSUPPORTED_OPERATION, {
                      operation: "setCensorship"
                    });
                  }
                  f = !!t, c = !!r;
                }
              }, {
                key: "setLogLevel",
                value: function value(t) {
                  var r = d[t.toLowerCase()];
                  null != r ? l = r : e.globalLogger().warn("invalid log level - " + t);
                }
              }, {
                key: "from",
                value: function value(t) {
                  return new e(t);
                }
              }]), e;
            }();
          t.Logger = y, y.errors = o, y.levels = i;
        },
        4071: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.version = void 0, t.version = "properties/5.7.0";
        },
        3694: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.Description = void 0, t.checkProperties = function (e, t) {
            e && "object" === (0, s.default)(e) || d.throwArgumentError("invalid object", "object", e), Object.keys(e).forEach(function (r) {
              t[r] || d.throwArgumentError("invalid object key - " + r, "transaction:" + r, e);
            });
          }, t.deepCopy = y, t.defineReadOnly = l, t.getStatic = function (e, t) {
            for (var r = 0; r < 32; r++) {
              if (e[t]) return e[t];
              if (!e.prototype || "object" !== (0, s.default)(e.prototype)) break;
              e = Object.getPrototypeOf(e.prototype).constructor;
            }
            return null;
          }, t.resolveProperties = function (e) {
            return f(this, void 0, void 0, i.default.mark(function t() {
              var r, n;
              return i.default.wrap(function (t) {
                for (;;) switch (t.prev = t.next) {
                  case 0:
                    return r = Object.keys(e).map(function (t) {
                      var r = e[t];
                      return Promise.resolve(r).then(function (e) {
                        return {
                          key: t,
                          value: e
                        };
                      });
                    }), t.next = 3, Promise.all(r);
                  case 3:
                    return n = t.sent, t.abrupt("return", n.reduce(function (e, t) {
                      return e[t.key] = t.value, e;
                    }, {}));
                  case 5:
                  case "end":
                    return t.stop();
                }
              }, t);
            }));
          }, t.shallowCopy = function (e) {
            var t = {};
            for (var r in e) t[r] = e[r];
            return t;
          };
          var i = n(r(2247)),
            o = n(r(8985)),
            a = n(r(9721)),
            s = n(r(3355)),
            u = r(4327),
            c = r(4071),
            f = function f(e, t, r, n) {
              return new (r || (r = Promise))(function (i, o) {
                function a(e) {
                  try {
                    u(n.next(e));
                  } catch (e) {
                    o(e);
                  }
                }
                function s(e) {
                  try {
                    u(n.throw(e));
                  } catch (e) {
                    o(e);
                  }
                }
                function u(e) {
                  var t;
                  e.done ? i(e.value) : (t = e.value, t instanceof r ? t : new r(function (e) {
                    e(t);
                  })).then(a, s);
                }
                u((n = n.apply(e, t || [])).next());
              });
            },
            d = new u.Logger(c.version);
          function l(e, t, r) {
            Object.defineProperty(e, t, {
              enumerable: !0,
              value: r,
              writable: !1
            });
          }
          var h = {
            bigint: !0,
            boolean: !0,
            function: !0,
            number: !0,
            string: !0
          };
          function p(e) {
            if (null == e || h[(0, s.default)(e)]) return !0;
            if (Array.isArray(e) || "object" === (0, s.default)(e)) {
              if (!Object.isFrozen(e)) return !1;
              for (var t = Object.keys(e), r = 0; r < t.length; r++) {
                var n = null;
                try {
                  n = e[t[r]];
                } catch (e) {
                  continue;
                }
                if (!p(n)) return !1;
              }
              return !0;
            }
            return d.throwArgumentError("Cannot deepCopy ".concat((0, s.default)(e)), "object", e);
          }
          function b(e) {
            if (p(e)) return e;
            if (Array.isArray(e)) return Object.freeze(e.map(function (e) {
              return y(e);
            }));
            if ("object" === (0, s.default)(e)) {
              var t = {};
              for (var r in e) {
                var n = e[r];
                void 0 !== n && l(t, r, y(n));
              }
              return t;
            }
            return d.throwArgumentError("Cannot deepCopy ".concat((0, s.default)(e)), "object", e);
          }
          function y(e) {
            return b(e);
          }
          var m = (0, o.default)(function e(t) {
            for (var r in (0, a.default)(this, e), t) this[r] = y(t[r]);
          });
          t.Description = m;
        },
        1466: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.version = void 0, t.version = "rlp/5.7.0";
        },
        5265: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.decode = function (e) {
            var t = (0, n.arrayify)(e),
              r = d(t, 0);
            return r.consumed !== t.length && a.throwArgumentError("invalid rlp data", "data", e), r.result;
          }, t.encode = function (e) {
            return (0, n.hexlify)(c(e));
          };
          var n = r(908),
            i = r(4327),
            o = r(1466),
            a = new i.Logger(o.version);
          function s(e) {
            for (var t = []; e;) t.unshift(255 & e), e >>= 8;
            return t;
          }
          function u(e, t, r) {
            for (var n = 0, i = 0; i < r; i++) n = 256 * n + e[t + i];
            return n;
          }
          function c(e) {
            if (Array.isArray(e)) {
              var t = [];
              if (e.forEach(function (e) {
                t = t.concat(c(e));
              }), t.length <= 55) return t.unshift(192 + t.length), t;
              var r = s(t.length);
              return r.unshift(247 + r.length), r.concat(t);
            }
            (0, n.isBytesLike)(e) || a.throwArgumentError("RLP object must be BytesLike", "object", e);
            var i = Array.prototype.slice.call((0, n.arrayify)(e));
            if (1 === i.length && i[0] <= 127) return i;
            if (i.length <= 55) return i.unshift(128 + i.length), i;
            var o = s(i.length);
            return o.unshift(183 + o.length), o.concat(i);
          }
          function f(e, t, r, n) {
            for (var o = []; r < t + 1 + n;) {
              var s = d(e, r);
              o.push(s.result), (r += s.consumed) > t + 1 + n && a.throwError("child data too short", i.Logger.errors.BUFFER_OVERRUN, {});
            }
            return {
              consumed: 1 + n,
              result: o
            };
          }
          function d(e, t) {
            if (0 === e.length && a.throwError("data too short", i.Logger.errors.BUFFER_OVERRUN, {}), e[t] >= 248) {
              var r = e[t] - 247;
              t + 1 + r > e.length && a.throwError("data short segment too short", i.Logger.errors.BUFFER_OVERRUN, {});
              var o = u(e, t + 1, r);
              return t + 1 + r + o > e.length && a.throwError("data long segment too short", i.Logger.errors.BUFFER_OVERRUN, {}), f(e, t, t + 1 + r, r + o);
            }
            if (e[t] >= 192) {
              var s = e[t] - 192;
              return t + 1 + s > e.length && a.throwError("data array too short", i.Logger.errors.BUFFER_OVERRUN, {}), f(e, t, t + 1, s);
            }
            if (e[t] >= 184) {
              var c = e[t] - 183;
              t + 1 + c > e.length && a.throwError("data array too short", i.Logger.errors.BUFFER_OVERRUN, {});
              var d = u(e, t + 1, c);
              return t + 1 + c + d > e.length && a.throwError("data array too short", i.Logger.errors.BUFFER_OVERRUN, {}), {
                consumed: 1 + c + d,
                result: (0, n.hexlify)(e.slice(t + 1 + c, t + 1 + c + d))
              };
            }
            if (e[t] >= 128) {
              var l = e[t] - 128;
              return t + 1 + l > e.length && a.throwError("data too short", i.Logger.errors.BUFFER_OVERRUN, {}), {
                consumed: 1 + l,
                result: (0, n.hexlify)(e.slice(t + 1, t + 1 + l))
              };
            }
            return {
              consumed: 1,
              result: (0, n.hexlify)(e[t])
            };
          }
        },
        8100: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.version = void 0, t.version = "signing-key/5.7.0";
        },
        6918: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.EC = void 0;
          var i = n(r(3355)),
            o = n(r(1734)),
            a = n(r(7198));
          function s(e, t, r) {
            return r = {
              path: t,
              exports: {},
              require: function require(e, t) {
                return function () {
                  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
                }(null == t && r.path);
              }
            }, e(r, r.exports), r.exports;
          }
          "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : void 0 !== r.g ? r.g : "undefined" != typeof self && self;
          var u = c;
          function c(e, t) {
            if (!e) throw new Error(t || "Assertion failed");
          }
          c.equal = function (e, t, r) {
            if (e != t) throw new Error(r || "Assertion failed: " + e + " != " + t);
          };
          var f = s(function (e, t) {
              var r = t;
              function n(e) {
                return 1 === e.length ? "0" + e : e;
              }
              function i(e) {
                for (var t = "", r = 0; r < e.length; r++) t += n(e[r].toString(16));
                return t;
              }
              r.toArray = function (e, t) {
                if (Array.isArray(e)) return e.slice();
                if (!e) return [];
                var r = [];
                if ("string" != typeof e) {
                  for (var n = 0; n < e.length; n++) r[n] = 0 | e[n];
                  return r;
                }
                if ("hex" === t) for ((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), n = 0; n < e.length; n += 2) r.push(parseInt(e[n] + e[n + 1], 16));else for (n = 0; n < e.length; n++) {
                  var i = e.charCodeAt(n),
                    o = i >> 8,
                    a = 255 & i;
                  o ? r.push(o, a) : r.push(a);
                }
                return r;
              }, r.zero2 = n, r.toHex = i, r.encode = function (e, t) {
                return "hex" === t ? i(e) : e;
              };
            }),
            d = s(function (e, t) {
              var r = t;
              r.assert = u, r.toArray = f.toArray, r.zero2 = f.zero2, r.toHex = f.toHex, r.encode = f.encode, r.getNAF = function (e, t, r) {
                var n = new Array(Math.max(e.bitLength(), r) + 1);
                n.fill(0);
                for (var i = 1 << t + 1, o = e.clone(), a = 0; a < n.length; a++) {
                  var s,
                    u = o.andln(i - 1);
                  o.isOdd() ? (s = u > (i >> 1) - 1 ? (i >> 1) - u : u, o.isubn(s)) : s = 0, n[a] = s, o.iushrn(1);
                }
                return n;
              }, r.getJSF = function (e, t) {
                var r = [[], []];
                e = e.clone(), t = t.clone();
                for (var n, i = 0, o = 0; e.cmpn(-i) > 0 || t.cmpn(-o) > 0;) {
                  var a,
                    s,
                    u = e.andln(3) + i & 3,
                    c = t.andln(3) + o & 3;
                  3 === u && (u = -1), 3 === c && (c = -1), a = 0 == (1 & u) ? 0 : 3 != (n = e.andln(7) + i & 7) && 5 !== n || 2 !== c ? u : -u, r[0].push(a), s = 0 == (1 & c) ? 0 : 3 != (n = t.andln(7) + o & 7) && 5 !== n || 2 !== u ? c : -c, r[1].push(s), 2 * i === a + 1 && (i = 1 - i), 2 * o === s + 1 && (o = 1 - o), e.iushrn(1), t.iushrn(1);
                }
                return r;
              }, r.cachedProperty = function (e, t, r) {
                var n = "_" + t;
                e.prototype[t] = function () {
                  return void 0 !== this[n] ? this[n] : this[n] = r.call(this);
                };
              }, r.parseBytes = function (e) {
                return "string" == typeof e ? r.toArray(e, "hex") : e;
              }, r.intFromLE = function (e) {
                return new o.default(e, "hex", "le");
              };
            }),
            l = d.getNAF,
            h = d.getJSF,
            p = d.assert;
          function b(e, t) {
            this.type = e, this.p = new o.default(t.p, 16), this.red = t.prime ? o.default.red(t.prime) : o.default.mont(this.p), this.zero = new o.default(0).toRed(this.red), this.one = new o.default(1).toRed(this.red), this.two = new o.default(2).toRed(this.red), this.n = t.n && new o.default(t.n, 16), this.g = t.g && this.pointFromJSON(t.g, t.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
            var r = this.n && this.p.div(this.n);
            !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
          }
          var y = b;
          function m(e, t) {
            this.curve = e, this.type = t, this.precomputed = null;
          }
          b.prototype.point = function () {
            throw new Error("Not implemented");
          }, b.prototype.validate = function () {
            throw new Error("Not implemented");
          }, b.prototype._fixedNafMul = function (e, t) {
            p(e.precomputed);
            var r = e._getDoubles(),
              n = l(t, 1, this._bitLength),
              i = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);
            i /= 3;
            var o,
              a,
              s = [];
            for (o = 0; o < n.length; o += r.step) {
              a = 0;
              for (var u = o + r.step - 1; u >= o; u--) a = (a << 1) + n[u];
              s.push(a);
            }
            for (var c = this.jpoint(null, null, null), f = this.jpoint(null, null, null), d = i; d > 0; d--) {
              for (o = 0; o < s.length; o++) (a = s[o]) === d ? f = f.mixedAdd(r.points[o]) : a === -d && (f = f.mixedAdd(r.points[o].neg()));
              c = c.add(f);
            }
            return c.toP();
          }, b.prototype._wnafMul = function (e, t) {
            var r = 4,
              n = e._getNAFPoints(r);
            r = n.wnd;
            for (var i = n.points, o = l(t, r, this._bitLength), a = this.jpoint(null, null, null), s = o.length - 1; s >= 0; s--) {
              for (var u = 0; s >= 0 && 0 === o[s]; s--) u++;
              if (s >= 0 && u++, a = a.dblp(u), s < 0) break;
              var c = o[s];
              p(0 !== c), a = "affine" === e.type ? c > 0 ? a.mixedAdd(i[c - 1 >> 1]) : a.mixedAdd(i[-c - 1 >> 1].neg()) : c > 0 ? a.add(i[c - 1 >> 1]) : a.add(i[-c - 1 >> 1].neg());
            }
            return "affine" === e.type ? a.toP() : a;
          }, b.prototype._wnafMulAdd = function (e, t, r, n, i) {
            var o,
              a,
              s,
              u = this._wnafT1,
              c = this._wnafT2,
              f = this._wnafT3,
              d = 0;
            for (o = 0; o < n; o++) {
              var p = (s = t[o])._getNAFPoints(e);
              u[o] = p.wnd, c[o] = p.points;
            }
            for (o = n - 1; o >= 1; o -= 2) {
              var b = o - 1,
                y = o;
              if (1 === u[b] && 1 === u[y]) {
                var m = [t[b], null, null, t[y]];
                0 === t[b].y.cmp(t[y].y) ? (m[1] = t[b].add(t[y]), m[2] = t[b].toJ().mixedAdd(t[y].neg())) : 0 === t[b].y.cmp(t[y].y.redNeg()) ? (m[1] = t[b].toJ().mixedAdd(t[y]), m[2] = t[b].add(t[y].neg())) : (m[1] = t[b].toJ().mixedAdd(t[y]), m[2] = t[b].toJ().mixedAdd(t[y].neg()));
                var v = [-3, -1, -5, -7, 0, 7, 5, 1, 3],
                  g = h(r[b], r[y]);
                for (d = Math.max(g[0].length, d), f[b] = new Array(d), f[y] = new Array(d), a = 0; a < d; a++) {
                  var w = 0 | g[0][a],
                    A = 0 | g[1][a];
                  f[b][a] = v[3 * (w + 1) + (A + 1)], f[y][a] = 0, c[b] = m;
                }
              } else f[b] = l(r[b], u[b], this._bitLength), f[y] = l(r[y], u[y], this._bitLength), d = Math.max(f[b].length, d), d = Math.max(f[y].length, d);
            }
            var k = this.jpoint(null, null, null),
              _ = this._wnafT4;
            for (o = d; o >= 0; o--) {
              for (var S = 0; o >= 0;) {
                var E = !0;
                for (a = 0; a < n; a++) _[a] = 0 | f[a][o], 0 !== _[a] && (E = !1);
                if (!E) break;
                S++, o--;
              }
              if (o >= 0 && S++, k = k.dblp(S), o < 0) break;
              for (a = 0; a < n; a++) {
                var x = _[a];
                0 !== x && (x > 0 ? s = c[a][x - 1 >> 1] : x < 0 && (s = c[a][-x - 1 >> 1].neg()), k = "affine" === s.type ? k.mixedAdd(s) : k.add(s));
              }
            }
            for (o = 0; o < n; o++) c[o] = null;
            return i ? k : k.toP();
          }, b.BasePoint = m, m.prototype.eq = function () {
            throw new Error("Not implemented");
          }, m.prototype.validate = function () {
            return this.curve.validate(this);
          }, b.prototype.decodePoint = function (e, t) {
            e = d.toArray(e, t);
            var r = this.p.byteLength();
            if ((4 === e[0] || 6 === e[0] || 7 === e[0]) && e.length - 1 == 2 * r) return 6 === e[0] ? p(e[e.length - 1] % 2 == 0) : 7 === e[0] && p(e[e.length - 1] % 2 == 1), this.point(e.slice(1, 1 + r), e.slice(1 + r, 1 + 2 * r));
            if ((2 === e[0] || 3 === e[0]) && e.length - 1 === r) return this.pointFromX(e.slice(1, 1 + r), 3 === e[0]);
            throw new Error("Unknown point format");
          }, m.prototype.encodeCompressed = function (e) {
            return this.encode(e, !0);
          }, m.prototype._encode = function (e) {
            var t = this.curve.p.byteLength(),
              r = this.getX().toArray("be", t);
            return e ? [this.getY().isEven() ? 2 : 3].concat(r) : [4].concat(r, this.getY().toArray("be", t));
          }, m.prototype.encode = function (e, t) {
            return d.encode(this._encode(t), e);
          }, m.prototype.precompute = function (e) {
            if (this.precomputed) return this;
            var t = {
              doubles: null,
              naf: null,
              beta: null
            };
            return t.naf = this._getNAFPoints(8), t.doubles = this._getDoubles(4, e), t.beta = this._getBeta(), this.precomputed = t, this;
          }, m.prototype._hasDoubles = function (e) {
            if (!this.precomputed) return !1;
            var t = this.precomputed.doubles;
            return !!t && t.points.length >= Math.ceil((e.bitLength() + 1) / t.step);
          }, m.prototype._getDoubles = function (e, t) {
            if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
            for (var r = [this], n = this, i = 0; i < t; i += e) {
              for (var o = 0; o < e; o++) n = n.dbl();
              r.push(n);
            }
            return {
              step: e,
              points: r
            };
          }, m.prototype._getNAFPoints = function (e) {
            if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
            for (var t = [this], r = (1 << e) - 1, n = 1 === r ? null : this.dbl(), i = 1; i < r; i++) t[i] = t[i - 1].add(n);
            return {
              wnd: e,
              points: t
            };
          }, m.prototype._getBeta = function () {
            return null;
          }, m.prototype.dblp = function (e) {
            for (var t = this, r = 0; r < e; r++) t = t.dbl();
            return t;
          };
          var v = s(function (e) {
              "function" == typeof Object.create ? e.exports = function (e, t) {
                t && (e.super_ = t, e.prototype = Object.create(t.prototype, {
                  constructor: {
                    value: e,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                  }
                }));
              } : e.exports = function (e, t) {
                if (t) {
                  e.super_ = t;
                  var r = function r() {};
                  r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e;
                }
              };
            }),
            g = d.assert;
          function w(e) {
            y.call(this, "short", e), this.a = new o.default(e.a, 16).toRed(this.red), this.b = new o.default(e.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
          }
          v(w, y);
          var A = w;
          function k(e, t, r, n) {
            y.BasePoint.call(this, e, "affine"), null === t && null === r ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new o.default(t, 16), this.y = new o.default(r, 16), n && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
          }
          function _(e, t, r, n) {
            y.BasePoint.call(this, e, "jacobian"), null === t && null === r && null === n ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new o.default(0)) : (this.x = new o.default(t, 16), this.y = new o.default(r, 16), this.z = new o.default(n, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
          }
          w.prototype._getEndomorphism = function (e) {
            if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
              var t, r;
              if (e.beta) t = new o.default(e.beta, 16).toRed(this.red);else {
                var n = this._getEndoRoots(this.p);
                t = (t = n[0].cmp(n[1]) < 0 ? n[0] : n[1]).toRed(this.red);
              }
              if (e.lambda) r = new o.default(e.lambda, 16);else {
                var i = this._getEndoRoots(this.n);
                0 === this.g.mul(i[0]).x.cmp(this.g.x.redMul(t)) ? r = i[0] : (r = i[1], g(0 === this.g.mul(r).x.cmp(this.g.x.redMul(t))));
              }
              return {
                beta: t,
                lambda: r,
                basis: e.basis ? e.basis.map(function (e) {
                  return {
                    a: new o.default(e.a, 16),
                    b: new o.default(e.b, 16)
                  };
                }) : this._getEndoBasis(r)
              };
            }
          }, w.prototype._getEndoRoots = function (e) {
            var t = e === this.p ? this.red : o.default.mont(e),
              r = new o.default(2).toRed(t).redInvm(),
              n = r.redNeg(),
              i = new o.default(3).toRed(t).redNeg().redSqrt().redMul(r);
            return [n.redAdd(i).fromRed(), n.redSub(i).fromRed()];
          }, w.prototype._getEndoBasis = function (e) {
            for (var t, r, n, i, a, s, u, c, f, d = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), l = e, h = this.n.clone(), p = new o.default(1), b = new o.default(0), y = new o.default(0), m = new o.default(1), v = 0; 0 !== l.cmpn(0);) {
              var g = h.div(l);
              c = h.sub(g.mul(l)), f = y.sub(g.mul(p));
              var w = m.sub(g.mul(b));
              if (!n && c.cmp(d) < 0) t = u.neg(), r = p, n = c.neg(), i = f;else if (n && 2 == ++v) break;
              u = c, h = l, l = c, y = p, p = f, m = b, b = w;
            }
            a = c.neg(), s = f;
            var A = n.sqr().add(i.sqr());
            return a.sqr().add(s.sqr()).cmp(A) >= 0 && (a = t, s = r), n.negative && (n = n.neg(), i = i.neg()), a.negative && (a = a.neg(), s = s.neg()), [{
              a: n,
              b: i
            }, {
              a: a,
              b: s
            }];
          }, w.prototype._endoSplit = function (e) {
            var t = this.endo.basis,
              r = t[0],
              n = t[1],
              i = n.b.mul(e).divRound(this.n),
              o = r.b.neg().mul(e).divRound(this.n),
              a = i.mul(r.a),
              s = o.mul(n.a),
              u = i.mul(r.b),
              c = o.mul(n.b);
            return {
              k1: e.sub(a).sub(s),
              k2: u.add(c).neg()
            };
          }, w.prototype.pointFromX = function (e, t) {
            (e = new o.default(e, 16)).red || (e = e.toRed(this.red));
            var r = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),
              n = r.redSqrt();
            if (0 !== n.redSqr().redSub(r).cmp(this.zero)) throw new Error("invalid point");
            var i = n.fromRed().isOdd();
            return (t && !i || !t && i) && (n = n.redNeg()), this.point(e, n);
          }, w.prototype.validate = function (e) {
            if (e.inf) return !0;
            var t = e.x,
              r = e.y,
              n = this.a.redMul(t),
              i = t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);
            return 0 === r.redSqr().redISub(i).cmpn(0);
          }, w.prototype._endoWnafMulAdd = function (e, t, r) {
            for (var n = this._endoWnafT1, i = this._endoWnafT2, o = 0; o < e.length; o++) {
              var a = this._endoSplit(t[o]),
                s = e[o],
                u = s._getBeta();
              a.k1.negative && (a.k1.ineg(), s = s.neg(!0)), a.k2.negative && (a.k2.ineg(), u = u.neg(!0)), n[2 * o] = s, n[2 * o + 1] = u, i[2 * o] = a.k1, i[2 * o + 1] = a.k2;
            }
            for (var c = this._wnafMulAdd(1, n, i, 2 * o, r), f = 0; f < 2 * o; f++) n[f] = null, i[f] = null;
            return c;
          }, v(k, y.BasePoint), w.prototype.point = function (e, t, r) {
            return new k(this, e, t, r);
          }, w.prototype.pointFromJSON = function (e, t) {
            return k.fromJSON(this, e, t);
          }, k.prototype._getBeta = function () {
            if (this.curve.endo) {
              var e = this.precomputed;
              if (e && e.beta) return e.beta;
              var t = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
              if (e) {
                var r = this.curve,
                  n = function n(e) {
                    return r.point(e.x.redMul(r.endo.beta), e.y);
                  };
                e.beta = t, t.precomputed = {
                  beta: null,
                  naf: e.naf && {
                    wnd: e.naf.wnd,
                    points: e.naf.points.map(n)
                  },
                  doubles: e.doubles && {
                    step: e.doubles.step,
                    points: e.doubles.points.map(n)
                  }
                };
              }
              return t;
            }
          }, k.prototype.toJSON = function () {
            return this.precomputed ? [this.x, this.y, this.precomputed && {
              doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
              },
              naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
              }
            }] : [this.x, this.y];
          }, k.fromJSON = function (e, t, r) {
            "string" == typeof t && (t = JSON.parse(t));
            var n = e.point(t[0], t[1], r);
            if (!t[2]) return n;
            function i(t) {
              return e.point(t[0], t[1], r);
            }
            var o = t[2];
            return n.precomputed = {
              beta: null,
              doubles: o.doubles && {
                step: o.doubles.step,
                points: [n].concat(o.doubles.points.map(i))
              },
              naf: o.naf && {
                wnd: o.naf.wnd,
                points: [n].concat(o.naf.points.map(i))
              }
            }, n;
          }, k.prototype.inspect = function () {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
          }, k.prototype.isInfinity = function () {
            return this.inf;
          }, k.prototype.add = function (e) {
            if (this.inf) return e;
            if (e.inf) return this;
            if (this.eq(e)) return this.dbl();
            if (this.neg().eq(e)) return this.curve.point(null, null);
            if (0 === this.x.cmp(e.x)) return this.curve.point(null, null);
            var t = this.y.redSub(e.y);
            0 !== t.cmpn(0) && (t = t.redMul(this.x.redSub(e.x).redInvm()));
            var r = t.redSqr().redISub(this.x).redISub(e.x),
              n = t.redMul(this.x.redSub(r)).redISub(this.y);
            return this.curve.point(r, n);
          }, k.prototype.dbl = function () {
            if (this.inf) return this;
            var e = this.y.redAdd(this.y);
            if (0 === e.cmpn(0)) return this.curve.point(null, null);
            var t = this.curve.a,
              r = this.x.redSqr(),
              n = e.redInvm(),
              i = r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n),
              o = i.redSqr().redISub(this.x.redAdd(this.x)),
              a = i.redMul(this.x.redSub(o)).redISub(this.y);
            return this.curve.point(o, a);
          }, k.prototype.getX = function () {
            return this.x.fromRed();
          }, k.prototype.getY = function () {
            return this.y.fromRed();
          }, k.prototype.mul = function (e) {
            return e = new o.default(e, 16), this.isInfinity() ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e]) : this.curve._wnafMul(this, e);
          }, k.prototype.mulAdd = function (e, t, r) {
            var n = [this, t],
              i = [e, r];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n, i) : this.curve._wnafMulAdd(1, n, i, 2);
          }, k.prototype.jmulAdd = function (e, t, r) {
            var n = [this, t],
              i = [e, r];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n, i, !0) : this.curve._wnafMulAdd(1, n, i, 2, !0);
          }, k.prototype.eq = function (e) {
            return this === e || this.inf === e.inf && (this.inf || 0 === this.x.cmp(e.x) && 0 === this.y.cmp(e.y));
          }, k.prototype.neg = function (e) {
            if (this.inf) return this;
            var t = this.curve.point(this.x, this.y.redNeg());
            if (e && this.precomputed) {
              var r = this.precomputed,
                n = function n(e) {
                  return e.neg();
                };
              t.precomputed = {
                naf: r.naf && {
                  wnd: r.naf.wnd,
                  points: r.naf.points.map(n)
                },
                doubles: r.doubles && {
                  step: r.doubles.step,
                  points: r.doubles.points.map(n)
                }
              };
            }
            return t;
          }, k.prototype.toJ = function () {
            return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
          }, v(_, y.BasePoint), w.prototype.jpoint = function (e, t, r) {
            return new _(this, e, t, r);
          }, _.prototype.toP = function () {
            if (this.isInfinity()) return this.curve.point(null, null);
            var e = this.z.redInvm(),
              t = e.redSqr(),
              r = this.x.redMul(t),
              n = this.y.redMul(t).redMul(e);
            return this.curve.point(r, n);
          }, _.prototype.neg = function () {
            return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
          }, _.prototype.add = function (e) {
            if (this.isInfinity()) return e;
            if (e.isInfinity()) return this;
            var t = e.z.redSqr(),
              r = this.z.redSqr(),
              n = this.x.redMul(t),
              i = e.x.redMul(r),
              o = this.y.redMul(t.redMul(e.z)),
              a = e.y.redMul(r.redMul(this.z)),
              s = n.redSub(i),
              u = o.redSub(a);
            if (0 === s.cmpn(0)) return 0 !== u.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var c = s.redSqr(),
              f = c.redMul(s),
              d = n.redMul(c),
              l = u.redSqr().redIAdd(f).redISub(d).redISub(d),
              h = u.redMul(d.redISub(l)).redISub(o.redMul(f)),
              p = this.z.redMul(e.z).redMul(s);
            return this.curve.jpoint(l, h, p);
          }, _.prototype.mixedAdd = function (e) {
            if (this.isInfinity()) return e.toJ();
            if (e.isInfinity()) return this;
            var t = this.z.redSqr(),
              r = this.x,
              n = e.x.redMul(t),
              i = this.y,
              o = e.y.redMul(t).redMul(this.z),
              a = r.redSub(n),
              s = i.redSub(o);
            if (0 === a.cmpn(0)) return 0 !== s.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var u = a.redSqr(),
              c = u.redMul(a),
              f = r.redMul(u),
              d = s.redSqr().redIAdd(c).redISub(f).redISub(f),
              l = s.redMul(f.redISub(d)).redISub(i.redMul(c)),
              h = this.z.redMul(a);
            return this.curve.jpoint(d, l, h);
          }, _.prototype.dblp = function (e) {
            if (0 === e) return this;
            if (this.isInfinity()) return this;
            if (!e) return this.dbl();
            var t;
            if (this.curve.zeroA || this.curve.threeA) {
              var r = this;
              for (t = 0; t < e; t++) r = r.dbl();
              return r;
            }
            var n = this.curve.a,
              i = this.curve.tinv,
              o = this.x,
              a = this.y,
              s = this.z,
              u = s.redSqr().redSqr(),
              c = a.redAdd(a);
            for (t = 0; t < e; t++) {
              var f = o.redSqr(),
                d = c.redSqr(),
                l = d.redSqr(),
                h = f.redAdd(f).redIAdd(f).redIAdd(n.redMul(u)),
                p = o.redMul(d),
                b = h.redSqr().redISub(p.redAdd(p)),
                y = p.redISub(b),
                m = h.redMul(y);
              m = m.redIAdd(m).redISub(l);
              var v = c.redMul(s);
              t + 1 < e && (u = u.redMul(l)), o = b, s = v, c = m;
            }
            return this.curve.jpoint(o, c.redMul(i), s);
          }, _.prototype.dbl = function () {
            return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
          }, _.prototype._zeroDbl = function () {
            var e, t, r;
            if (this.zOne) {
              var n = this.x.redSqr(),
                i = this.y.redSqr(),
                o = i.redSqr(),
                a = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
              a = a.redIAdd(a);
              var s = n.redAdd(n).redIAdd(n),
                u = s.redSqr().redISub(a).redISub(a),
                c = o.redIAdd(o);
              c = (c = c.redIAdd(c)).redIAdd(c), e = u, t = s.redMul(a.redISub(u)).redISub(c), r = this.y.redAdd(this.y);
            } else {
              var f = this.x.redSqr(),
                d = this.y.redSqr(),
                l = d.redSqr(),
                h = this.x.redAdd(d).redSqr().redISub(f).redISub(l);
              h = h.redIAdd(h);
              var p = f.redAdd(f).redIAdd(f),
                b = p.redSqr(),
                y = l.redIAdd(l);
              y = (y = y.redIAdd(y)).redIAdd(y), e = b.redISub(h).redISub(h), t = p.redMul(h.redISub(e)).redISub(y), r = (r = this.y.redMul(this.z)).redIAdd(r);
            }
            return this.curve.jpoint(e, t, r);
          }, _.prototype._threeDbl = function () {
            var e, t, r;
            if (this.zOne) {
              var n = this.x.redSqr(),
                i = this.y.redSqr(),
                o = i.redSqr(),
                a = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
              a = a.redIAdd(a);
              var s = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),
                u = s.redSqr().redISub(a).redISub(a);
              e = u;
              var c = o.redIAdd(o);
              c = (c = c.redIAdd(c)).redIAdd(c), t = s.redMul(a.redISub(u)).redISub(c), r = this.y.redAdd(this.y);
            } else {
              var f = this.z.redSqr(),
                d = this.y.redSqr(),
                l = this.x.redMul(d),
                h = this.x.redSub(f).redMul(this.x.redAdd(f));
              h = h.redAdd(h).redIAdd(h);
              var p = l.redIAdd(l),
                b = (p = p.redIAdd(p)).redAdd(p);
              e = h.redSqr().redISub(b), r = this.y.redAdd(this.z).redSqr().redISub(d).redISub(f);
              var y = d.redSqr();
              y = (y = (y = y.redIAdd(y)).redIAdd(y)).redIAdd(y), t = h.redMul(p.redISub(e)).redISub(y);
            }
            return this.curve.jpoint(e, t, r);
          }, _.prototype._dbl = function () {
            var e = this.curve.a,
              t = this.x,
              r = this.y,
              n = this.z,
              i = n.redSqr().redSqr(),
              o = t.redSqr(),
              a = r.redSqr(),
              s = o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)),
              u = t.redAdd(t),
              c = (u = u.redIAdd(u)).redMul(a),
              f = s.redSqr().redISub(c.redAdd(c)),
              d = c.redISub(f),
              l = a.redSqr();
            l = (l = (l = l.redIAdd(l)).redIAdd(l)).redIAdd(l);
            var h = s.redMul(d).redISub(l),
              p = r.redAdd(r).redMul(n);
            return this.curve.jpoint(f, h, p);
          }, _.prototype.trpl = function () {
            if (!this.curve.zeroA) return this.dbl().add(this);
            var e = this.x.redSqr(),
              t = this.y.redSqr(),
              r = this.z.redSqr(),
              n = t.redSqr(),
              i = e.redAdd(e).redIAdd(e),
              o = i.redSqr(),
              a = this.x.redAdd(t).redSqr().redISub(e).redISub(n),
              s = (a = (a = (a = a.redIAdd(a)).redAdd(a).redIAdd(a)).redISub(o)).redSqr(),
              u = n.redIAdd(n);
            u = (u = (u = u.redIAdd(u)).redIAdd(u)).redIAdd(u);
            var c = i.redIAdd(a).redSqr().redISub(o).redISub(s).redISub(u),
              f = t.redMul(c);
            f = (f = f.redIAdd(f)).redIAdd(f);
            var d = this.x.redMul(s).redISub(f);
            d = (d = d.redIAdd(d)).redIAdd(d);
            var l = this.y.redMul(c.redMul(u.redISub(c)).redISub(a.redMul(s)));
            l = (l = (l = l.redIAdd(l)).redIAdd(l)).redIAdd(l);
            var h = this.z.redAdd(a).redSqr().redISub(r).redISub(s);
            return this.curve.jpoint(d, l, h);
          }, _.prototype.mul = function (e, t) {
            return e = new o.default(e, t), this.curve._wnafMul(this, e);
          }, _.prototype.eq = function (e) {
            if ("affine" === e.type) return this.eq(e.toJ());
            if (this === e) return !0;
            var t = this.z.redSqr(),
              r = e.z.redSqr();
            if (0 !== this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0)) return !1;
            var n = t.redMul(this.z),
              i = r.redMul(e.z);
            return 0 === this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0);
          }, _.prototype.eqXToP = function (e) {
            var t = this.z.redSqr(),
              r = e.toRed(this.curve.red).redMul(t);
            if (0 === this.x.cmp(r)) return !0;
            for (var n = e.clone(), i = this.curve.redN.redMul(t);;) {
              if (n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0) return !1;
              if (r.redIAdd(i), 0 === this.x.cmp(r)) return !0;
            }
          }, _.prototype.inspect = function () {
            return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
          }, _.prototype.isInfinity = function () {
            return 0 === this.z.cmpn(0);
          };
          var S = s(function (e, t) {
              var r = t;
              r.base = y, r.short = A, r.mont = null, r.edwards = null;
            }),
            E = s(function (e, t) {
              var r,
                n = t,
                i = d.assert;
              function o(e) {
                "short" === e.type ? this.curve = new S.short(e) : "edwards" === e.type ? this.curve = new S.edwards(e) : this.curve = new S.mont(e), this.g = this.curve.g, this.n = this.curve.n, this.hash = e.hash, i(this.g.validate(), "Invalid curve"), i(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
              }
              function s(e, t) {
                Object.defineProperty(n, e, {
                  configurable: !0,
                  enumerable: !0,
                  get: function get() {
                    var r = new o(t);
                    return Object.defineProperty(n, e, {
                      configurable: !0,
                      enumerable: !0,
                      value: r
                    }), r;
                  }
                });
              }
              n.PresetCurve = o, s("p192", {
                type: "short",
                prime: "p192",
                p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
                a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
                b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
                n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
                hash: a.default.sha256,
                gRed: !1,
                g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]
              }), s("p224", {
                type: "short",
                prime: "p224",
                p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
                a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
                b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
                n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
                hash: a.default.sha256,
                gRed: !1,
                g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]
              }), s("p256", {
                type: "short",
                prime: null,
                p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
                a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
                b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
                n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
                hash: a.default.sha256,
                gRed: !1,
                g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]
              }), s("p384", {
                type: "short",
                prime: null,
                p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
                a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
                b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
                n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
                hash: a.default.sha384,
                gRed: !1,
                g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]
              }), s("p521", {
                type: "short",
                prime: null,
                p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
                a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
                b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
                n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
                hash: a.default.sha512,
                gRed: !1,
                g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]
              }), s("curve25519", {
                type: "mont",
                prime: "p25519",
                p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                a: "76d06",
                b: "1",
                n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                hash: a.default.sha256,
                gRed: !1,
                g: ["9"]
              }), s("ed25519", {
                type: "edwards",
                prime: "p25519",
                p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                a: "-1",
                c: "1",
                d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
                n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                hash: a.default.sha256,
                gRed: !1,
                g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"]
              });
              try {
                r = null.crash();
              } catch (e) {
                r = void 0;
              }
              s("secp256k1", {
                type: "short",
                prime: "k256",
                p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
                a: "0",
                b: "7",
                n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
                h: "1",
                hash: a.default.sha256,
                beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
                lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
                basis: [{
                  a: "3086d221a7d46bcde86c90e49284eb15",
                  b: "-e4437ed6010e88286f547fa90abfe4c3"
                }, {
                  a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                  b: "3086d221a7d46bcde86c90e49284eb15"
                }],
                gRed: !1,
                g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", r]
              });
            });
          function x(e) {
            if (!(this instanceof x)) return new x(e);
            this.hash = e.hash, this.predResist = !!e.predResist, this.outLen = this.hash.outSize, this.minEntropy = e.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
            var t = f.toArray(e.entropy, e.entropyEnc || "hex"),
              r = f.toArray(e.nonce, e.nonceEnc || "hex"),
              n = f.toArray(e.pers, e.persEnc || "hex");
            u(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t, r, n);
          }
          var P = x;
          x.prototype._init = function (e, t, r) {
            var n = e.concat(t).concat(r);
            this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
            for (var i = 0; i < this.V.length; i++) this.K[i] = 0, this.V[i] = 1;
            this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;
          }, x.prototype._hmac = function () {
            return new a.default.hmac(this.hash, this.K);
          }, x.prototype._update = function (e) {
            var t = this._hmac().update(this.V).update([0]);
            e && (t = t.update(e)), this.K = t.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([1]).update(e).digest(), this.V = this._hmac().update(this.V).digest());
          }, x.prototype.reseed = function (e, t, r, n) {
            "string" != typeof t && (n = r, r = t, t = null), e = f.toArray(e, t), r = f.toArray(r, n), u(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(e.concat(r || [])), this._reseed = 1;
          }, x.prototype.generate = function (e, t, r, n) {
            if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
            "string" != typeof t && (n = r, r = t, t = null), r && (r = f.toArray(r, n || "hex"), this._update(r));
            for (var i = []; i.length < e;) this.V = this._hmac().update(this.V).digest(), i = i.concat(this.V);
            var o = i.slice(0, e);
            return this._update(r), this._reseed++, f.encode(o, t);
          };
          var O = d.assert;
          function B(e, t) {
            this.ec = e, this.priv = null, this.pub = null, t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);
          }
          var T = B;
          B.fromPublic = function (e, t, r) {
            return t instanceof B ? t : new B(e, {
              pub: t,
              pubEnc: r
            });
          }, B.fromPrivate = function (e, t, r) {
            return t instanceof B ? t : new B(e, {
              priv: t,
              privEnc: r
            });
          }, B.prototype.validate = function () {
            var e = this.getPublic();
            return e.isInfinity() ? {
              result: !1,
              reason: "Invalid public key"
            } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? {
              result: !0,
              reason: null
            } : {
              result: !1,
              reason: "Public key * N != O"
            } : {
              result: !1,
              reason: "Public key is not a point"
            };
          }, B.prototype.getPublic = function (e, t) {
            return "string" == typeof e && (t = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), t ? this.pub.encode(t, e) : this.pub;
          }, B.prototype.getPrivate = function (e) {
            return "hex" === e ? this.priv.toString(16, 2) : this.priv;
          }, B.prototype._importPrivate = function (e, t) {
            this.priv = new o.default(e, t || 16), this.priv = this.priv.umod(this.ec.curve.n);
          }, B.prototype._importPublic = function (e, t) {
            if (e.x || e.y) return "mont" === this.ec.curve.type ? O(e.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || O(e.x && e.y, "Need both x and y coordinate"), void (this.pub = this.ec.curve.point(e.x, e.y));
            this.pub = this.ec.curve.decodePoint(e, t);
          }, B.prototype.derive = function (e) {
            return e.validate() || O(e.validate(), "public point not validated"), e.mul(this.priv).getX();
          }, B.prototype.sign = function (e, t, r) {
            return this.ec.sign(e, this, t, r);
          }, B.prototype.verify = function (e, t) {
            return this.ec.verify(e, t, this);
          }, B.prototype.inspect = function () {
            return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
          };
          var C = d.assert;
          function I(e, t) {
            if (e instanceof I) return e;
            this._importDER(e, t) || (C(e.r && e.s, "Signature without r or s"), this.r = new o.default(e.r, 16), this.s = new o.default(e.s, 16), void 0 === e.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam);
          }
          var M = I;
          function U() {
            this.place = 0;
          }
          function R(e, t) {
            var r = e[t.place++];
            if (!(128 & r)) return r;
            var n = 15 & r;
            if (0 === n || n > 4) return !1;
            for (var i = 0, o = 0, a = t.place; o < n; o++, a++) i <<= 8, i |= e[a], i >>>= 0;
            return !(i <= 127) && (t.place = a, i);
          }
          function j(e) {
            for (var t = 0, r = e.length - 1; !e[t] && !(128 & e[t + 1]) && t < r;) t++;
            return 0 === t ? e : e.slice(t);
          }
          function N(e, t) {
            if (t < 128) e.push(t);else {
              var r = 1 + (Math.log(t) / Math.LN2 >>> 3);
              for (e.push(128 | r); --r;) e.push(t >>> (r << 3) & 255);
              e.push(t);
            }
          }
          I.prototype._importDER = function (e, t) {
            e = d.toArray(e, t);
            var r = new U();
            if (48 !== e[r.place++]) return !1;
            var n = R(e, r);
            if (!1 === n) return !1;
            if (n + r.place !== e.length) return !1;
            if (2 !== e[r.place++]) return !1;
            var i = R(e, r);
            if (!1 === i) return !1;
            var a = e.slice(r.place, i + r.place);
            if (r.place += i, 2 !== e[r.place++]) return !1;
            var s = R(e, r);
            if (!1 === s) return !1;
            if (e.length !== s + r.place) return !1;
            var u = e.slice(r.place, s + r.place);
            if (0 === a[0]) {
              if (!(128 & a[1])) return !1;
              a = a.slice(1);
            }
            if (0 === u[0]) {
              if (!(128 & u[1])) return !1;
              u = u.slice(1);
            }
            return this.r = new o.default(a), this.s = new o.default(u), this.recoveryParam = null, !0;
          }, I.prototype.toDER = function (e) {
            var t = this.r.toArray(),
              r = this.s.toArray();
            for (128 & t[0] && (t = [0].concat(t)), 128 & r[0] && (r = [0].concat(r)), t = j(t), r = j(r); !(r[0] || 128 & r[1]);) r = r.slice(1);
            var n = [2];
            N(n, t.length), (n = n.concat(t)).push(2), N(n, r.length);
            var i = n.concat(r),
              o = [48];
            return N(o, i.length), o = o.concat(i), d.encode(o, e);
          };
          var F = function F() {
              throw new Error("unsupported");
            },
            L = d.assert;
          function D(e) {
            if (!(this instanceof D)) return new D(e);
            "string" == typeof e && (L(Object.prototype.hasOwnProperty.call(E, e), "Unknown curve " + e), e = E[e]), e instanceof E.PresetCurve && (e = {
              curve: e
            }), this.curve = e.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e.curve.g, this.g.precompute(e.curve.n.bitLength() + 1), this.hash = e.hash || e.curve.hash;
          }
          var H = D;
          D.prototype.keyPair = function (e) {
            return new T(this, e);
          }, D.prototype.keyFromPrivate = function (e, t) {
            return T.fromPrivate(this, e, t);
          }, D.prototype.keyFromPublic = function (e, t) {
            return T.fromPublic(this, e, t);
          }, D.prototype.genKeyPair = function (e) {
            e || (e = {});
            for (var t = new P({
                hash: this.hash,
                pers: e.pers,
                persEnc: e.persEnc || "utf8",
                entropy: e.entropy || F(this.hash.hmacStrength),
                entropyEnc: e.entropy && e.entropyEnc || "utf8",
                nonce: this.n.toArray()
              }), r = this.n.byteLength(), n = this.n.sub(new o.default(2));;) {
              var i = new o.default(t.generate(r));
              if (!(i.cmp(n) > 0)) return i.iaddn(1), this.keyFromPrivate(i);
            }
          }, D.prototype._truncateToN = function (e, t) {
            var r = 8 * e.byteLength() - this.n.bitLength();
            return r > 0 && (e = e.ushrn(r)), !t && e.cmp(this.n) >= 0 ? e.sub(this.n) : e;
          }, D.prototype.sign = function (e, t, r, n) {
            "object" === (0, i.default)(r) && (n = r, r = null), n || (n = {}), t = this.keyFromPrivate(t, r), e = this._truncateToN(new o.default(e, 16));
            for (var a = this.n.byteLength(), s = t.getPrivate().toArray("be", a), u = e.toArray("be", a), c = new P({
                hash: this.hash,
                entropy: s,
                nonce: u,
                pers: n.pers,
                persEnc: n.persEnc || "utf8"
              }), f = this.n.sub(new o.default(1)), d = 0;; d++) {
              var l = n.k ? n.k(d) : new o.default(c.generate(this.n.byteLength()));
              if (!((l = this._truncateToN(l, !0)).cmpn(1) <= 0 || l.cmp(f) >= 0)) {
                var h = this.g.mul(l);
                if (!h.isInfinity()) {
                  var p = h.getX(),
                    b = p.umod(this.n);
                  if (0 !== b.cmpn(0)) {
                    var y = l.invm(this.n).mul(b.mul(t.getPrivate()).iadd(e));
                    if (0 !== (y = y.umod(this.n)).cmpn(0)) {
                      var m = (h.getY().isOdd() ? 1 : 0) | (0 !== p.cmp(b) ? 2 : 0);
                      return n.canonical && y.cmp(this.nh) > 0 && (y = this.n.sub(y), m ^= 1), new M({
                        r: b,
                        s: y,
                        recoveryParam: m
                      });
                    }
                  }
                }
              }
            }
          }, D.prototype.verify = function (e, t, r, n) {
            e = this._truncateToN(new o.default(e, 16)), r = this.keyFromPublic(r, n);
            var i = (t = new M(t, "hex")).r,
              a = t.s;
            if (i.cmpn(1) < 0 || i.cmp(this.n) >= 0) return !1;
            if (a.cmpn(1) < 0 || a.cmp(this.n) >= 0) return !1;
            var s,
              u = a.invm(this.n),
              c = u.mul(e).umod(this.n),
              f = u.mul(i).umod(this.n);
            return this.curve._maxwellTrick ? !(s = this.g.jmulAdd(c, r.getPublic(), f)).isInfinity() && s.eqXToP(i) : !(s = this.g.mulAdd(c, r.getPublic(), f)).isInfinity() && 0 === s.getX().umod(this.n).cmp(i);
          }, D.prototype.recoverPubKey = function (e, t, r, n) {
            L((3 & r) === r, "The recovery param is more than two bits"), t = new M(t, n);
            var i = this.n,
              a = new o.default(e),
              s = t.r,
              u = t.s,
              c = 1 & r,
              f = r >> 1;
            if (s.cmp(this.curve.p.umod(this.curve.n)) >= 0 && f) throw new Error("Unable to find sencond key candinate");
            s = f ? this.curve.pointFromX(s.add(this.curve.n), c) : this.curve.pointFromX(s, c);
            var d = t.r.invm(i),
              l = i.sub(a).mul(d).umod(i),
              h = u.mul(d).umod(i);
            return this.g.mulAdd(l, s, h);
          }, D.prototype.getKeyRecoveryParam = function (e, t, r, n) {
            if (null !== (t = new M(t, n)).recoveryParam) return t.recoveryParam;
            for (var i = 0; i < 4; i++) {
              var o;
              try {
                o = this.recoverPubKey(e, t, i);
              } catch (e) {
                continue;
              }
              if (o.eq(r)) return i;
            }
            throw new Error("Unable to find valid recovery factor");
          };
          var q = s(function (e, t) {
              var r = t;
              r.version = "6.5.4", r.utils = d, r.rand = function () {
                throw new Error("unsupported");
              }, r.curve = S, r.curves = E, r.ec = H, r.eddsa = null;
            }),
            z = q.ec;
          t.EC = z;
        },
        7612: function _(e, t, r) {
          "use strict";

          var n = r(8847);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.SigningKey = void 0, t.computePublicKey = b, t.recoverPublicKey = function (e, t) {
            var r = (0, s.splitSignature)(t),
              n = {
                r: (0, s.arrayify)(r.r),
                s: (0, s.arrayify)(r.s)
              };
            return "0x" + h().recoverPubKey((0, s.arrayify)(e), n, r.recoveryParam).encode("hex", !1);
          };
          var i = n(r(9721)),
            o = n(r(8985)),
            a = r(6918),
            s = r(908),
            u = r(3694),
            c = r(4327),
            f = r(8100),
            d = new c.Logger(f.version),
            l = null;
          function h() {
            return l || (l = new a.EC("secp256k1")), l;
          }
          var p = function () {
            function e(t) {
              (0, i.default)(this, e), (0, u.defineReadOnly)(this, "curve", "secp256k1"), (0, u.defineReadOnly)(this, "privateKey", (0, s.hexlify)(t)), 32 !== (0, s.hexDataLength)(this.privateKey) && d.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
              var r = h().keyFromPrivate((0, s.arrayify)(this.privateKey));
              (0, u.defineReadOnly)(this, "publicKey", "0x" + r.getPublic(!1, "hex")), (0, u.defineReadOnly)(this, "compressedPublicKey", "0x" + r.getPublic(!0, "hex")), (0, u.defineReadOnly)(this, "_isSigningKey", !0);
            }
            return (0, o.default)(e, [{
              key: "_addPoint",
              value: function value(e) {
                var t = h().keyFromPublic((0, s.arrayify)(this.publicKey)),
                  r = h().keyFromPublic((0, s.arrayify)(e));
                return "0x" + t.pub.add(r.pub).encodeCompressed("hex");
              }
            }, {
              key: "signDigest",
              value: function value(e) {
                var t = h().keyFromPrivate((0, s.arrayify)(this.privateKey)),
                  r = (0, s.arrayify)(e);
                32 !== r.length && d.throwArgumentError("bad digest length", "digest", e);
                var n = t.sign(r, {
                  canonical: !0
                });
                return (0, s.splitSignature)({
                  recoveryParam: n.recoveryParam,
                  r: (0, s.hexZeroPad)("0x" + n.r.toString(16), 32),
                  s: (0, s.hexZeroPad)("0x" + n.s.toString(16), 32)
                });
              }
            }, {
              key: "computeSharedSecret",
              value: function value(e) {
                var t = h().keyFromPrivate((0, s.arrayify)(this.privateKey)),
                  r = h().keyFromPublic((0, s.arrayify)(b(e)));
                return (0, s.hexZeroPad)("0x" + t.derive(r.getPublic()).toString(16), 32);
              }
            }], [{
              key: "isSigningKey",
              value: function value(e) {
                return !(!e || !e._isSigningKey);
              }
            }]), e;
          }();
          function b(e, t) {
            var r = (0, s.arrayify)(e);
            if (32 === r.length) {
              var n = new p(r);
              return t ? "0x" + h().keyFromPrivate(r).getPublic(!0, "hex") : n.publicKey;
            }
            return 33 === r.length ? t ? (0, s.hexlify)(r) : "0x" + h().keyFromPublic(r).getPublic(!1, "hex") : 65 === r.length ? t ? "0x" + h().keyFromPublic(r).getPublic(!0, "hex") : (0, s.hexlify)(r) : d.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
          }
          t.SigningKey = p;
        },
        6518: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.version = void 0, t.version = "strings/5.7.0";
        },
        5856: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.formatBytes32String = function (e) {
            var t = (0, o.toUtf8Bytes)(e);
            if (t.length > 31) throw new Error("bytes32 string must be less than 32 bytes");
            return (0, i.hexlify)((0, i.concat)([t, n.HashZero]).slice(0, 32));
          }, t.parseBytes32String = function (e) {
            var t = (0, i.arrayify)(e);
            if (32 !== t.length) throw new Error("invalid bytes32 - not 32 bytes long");
            if (0 !== t[31]) throw new Error("invalid bytes32 string - no null terminator");
            for (var r = 31; 0 === t[r - 1];) r--;
            return (0, o.toUtf8String)(t.slice(0, r));
          };
          var n = r(5465),
            i = r(908),
            o = r(4997);
        },
        8645: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t._nameprepTableA1 = p, t._nameprepTableB2 = b, t._nameprepTableC = y, t.nameprep = function (e) {
            if (e.match(/^[a-z0-9-]*$/i) && e.length <= 59) return e.toLowerCase();
            var t,
              r = (0, n.toUtf8CodePoints)(e);
            t = r.map(function (e) {
              return u.indexOf(e) >= 0 || e >= 65024 && e <= 65039 ? [] : b(e) || [e];
            }), r = t.reduce(function (e, t) {
              return t.forEach(function (t) {
                e.push(t);
              }), e;
            }, []), (r = (0, n.toUtf8CodePoints)((0, n._toUtf8String)(r), n.UnicodeNormalizationForm.NFKC)).forEach(function (e) {
              if (y(e)) throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
            }), r.forEach(function (e) {
              if (p(e)) throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
            });
            var i = (0, n._toUtf8String)(r);
            if ("-" === i.substring(0, 1) || "--" === i.substring(2, 4) || "-" === i.substring(i.length - 1)) throw new Error("invalid hyphen");
            return i;
          };
          var n = r(4997);
          function i(e, t) {
            t || (t = function t(e) {
              return [parseInt(e, 16)];
            });
            var r = 0,
              n = {};
            return e.split(",").forEach(function (e) {
              var i = e.split(":");
              r += parseInt(i[0], 16), n[r] = t(i[1]);
            }), n;
          }
          function o(e) {
            var t = 0;
            return e.split(",").map(function (e) {
              var r = e.split("-");
              return 1 === r.length ? r[1] = "0" : "" === r[1] && (r[1] = "1"), {
                l: t + parseInt(r[0], 16),
                h: t = parseInt(r[1], 16)
              };
            });
          }
          function a(e, t) {
            for (var r = 0, n = 0; n < t.length; n++) {
              var i = t[n];
              if (e >= (r += i.l) && e <= r + i.h && (e - r) % (i.d || 1) == 0) {
                if (i.e && -1 !== i.e.indexOf(e - r)) continue;
                return i;
              }
            }
            return null;
          }
          var s = o("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"),
            u = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(function (e) {
              return parseInt(e, 16);
            }),
            c = [{
              h: 25,
              s: 32,
              l: 65
            }, {
              h: 30,
              s: 32,
              e: [23],
              l: 127
            }, {
              h: 54,
              s: 1,
              e: [48],
              l: 64,
              d: 2
            }, {
              h: 14,
              s: 1,
              l: 57,
              d: 2
            }, {
              h: 44,
              s: 1,
              l: 17,
              d: 2
            }, {
              h: 10,
              s: 1,
              e: [2, 6, 8],
              l: 61,
              d: 2
            }, {
              h: 16,
              s: 1,
              l: 68,
              d: 2
            }, {
              h: 84,
              s: 1,
              e: [18, 24, 66],
              l: 19,
              d: 2
            }, {
              h: 26,
              s: 32,
              e: [17],
              l: 435
            }, {
              h: 22,
              s: 1,
              l: 71,
              d: 2
            }, {
              h: 15,
              s: 80,
              l: 40
            }, {
              h: 31,
              s: 32,
              l: 16
            }, {
              h: 32,
              s: 1,
              l: 80,
              d: 2
            }, {
              h: 52,
              s: 1,
              l: 42,
              d: 2
            }, {
              h: 12,
              s: 1,
              l: 55,
              d: 2
            }, {
              h: 40,
              s: 1,
              e: [38],
              l: 15,
              d: 2
            }, {
              h: 14,
              s: 1,
              l: 48,
              d: 2
            }, {
              h: 37,
              s: 48,
              l: 49
            }, {
              h: 148,
              s: 1,
              l: 6351,
              d: 2
            }, {
              h: 88,
              s: 1,
              l: 160,
              d: 2
            }, {
              h: 15,
              s: 16,
              l: 704
            }, {
              h: 25,
              s: 26,
              l: 854
            }, {
              h: 25,
              s: 32,
              l: 55915
            }, {
              h: 37,
              s: 40,
              l: 1247
            }, {
              h: 25,
              s: -119711,
              l: 53248
            }, {
              h: 25,
              s: -119763,
              l: 52
            }, {
              h: 25,
              s: -119815,
              l: 52
            }, {
              h: 25,
              s: -119867,
              e: [1, 4, 5, 7, 8, 11, 12, 17],
              l: 52
            }, {
              h: 25,
              s: -119919,
              l: 52
            }, {
              h: 24,
              s: -119971,
              e: [2, 7, 8, 17],
              l: 52
            }, {
              h: 24,
              s: -120023,
              e: [2, 7, 13, 15, 16, 17],
              l: 52
            }, {
              h: 25,
              s: -120075,
              l: 52
            }, {
              h: 25,
              s: -120127,
              l: 52
            }, {
              h: 25,
              s: -120179,
              l: 52
            }, {
              h: 25,
              s: -120231,
              l: 52
            }, {
              h: 25,
              s: -120283,
              l: 52
            }, {
              h: 25,
              s: -120335,
              l: 52
            }, {
              h: 24,
              s: -119543,
              e: [17],
              l: 56
            }, {
              h: 24,
              s: -119601,
              e: [17],
              l: 58
            }, {
              h: 24,
              s: -119659,
              e: [17],
              l: 58
            }, {
              h: 24,
              s: -119717,
              e: [17],
              l: 58
            }, {
              h: 24,
              s: -119775,
              e: [17],
              l: 58
            }],
            f = i("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"),
            d = i("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"),
            l = i("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", function (e) {
              if (e.length % 4 != 0) throw new Error("bad data");
              for (var t = [], r = 0; r < e.length; r += 4) t.push(parseInt(e.substring(r, r + 4), 16));
              return t;
            }),
            h = o("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
          function p(e) {
            return !!a(e, s);
          }
          function b(e) {
            var t = a(e, c);
            if (t) return [e + t.s];
            var r = f[e];
            if (r) return r;
            var n = d[e];
            return n ? [e + n[0]] : l[e] || null;
          }
          function y(e) {
            return !!a(e, h);
          }
        },
        8627: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), Object.defineProperty(t, "UnicodeNormalizationForm", {
            enumerable: !0,
            get: function get() {
              return o.UnicodeNormalizationForm;
            }
          }), Object.defineProperty(t, "Utf8ErrorFuncs", {
            enumerable: !0,
            get: function get() {
              return o.Utf8ErrorFuncs;
            }
          }), Object.defineProperty(t, "Utf8ErrorReason", {
            enumerable: !0,
            get: function get() {
              return o.Utf8ErrorReason;
            }
          }), Object.defineProperty(t, "_toEscapedUtf8String", {
            enumerable: !0,
            get: function get() {
              return o._toEscapedUtf8String;
            }
          }), Object.defineProperty(t, "formatBytes32String", {
            enumerable: !0,
            get: function get() {
              return n.formatBytes32String;
            }
          }), Object.defineProperty(t, "nameprep", {
            enumerable: !0,
            get: function get() {
              return i.nameprep;
            }
          }), Object.defineProperty(t, "parseBytes32String", {
            enumerable: !0,
            get: function get() {
              return n.parseBytes32String;
            }
          }), Object.defineProperty(t, "toUtf8Bytes", {
            enumerable: !0,
            get: function get() {
              return o.toUtf8Bytes;
            }
          }), Object.defineProperty(t, "toUtf8CodePoints", {
            enumerable: !0,
            get: function get() {
              return o.toUtf8CodePoints;
            }
          }), Object.defineProperty(t, "toUtf8String", {
            enumerable: !0,
            get: function get() {
              return o.toUtf8String;
            }
          });
          var n = r(5856),
            i = r(8645),
            o = r(4997);
        },
        4997: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.Utf8ErrorReason = t.Utf8ErrorFuncs = t.UnicodeNormalizationForm = void 0, t._toEscapedUtf8String = function (e, t) {
            return '"' + d(e, t).map(function (e) {
              if (e < 256) {
                switch (e) {
                  case 8:
                    return "\\b";
                  case 9:
                    return "\\t";
                  case 10:
                    return "\\n";
                  case 13:
                    return "\\r";
                  case 34:
                    return '\\"';
                  case 92:
                    return "\\\\";
                }
                if (e >= 32 && e < 127) return String.fromCharCode(e);
              }
              return e <= 65535 ? h(e) : h(55296 + ((e -= 65536) >> 10 & 1023)) + h(56320 + (1023 & e));
            }).join("") + '"';
          }, t._toUtf8String = p, t.toUtf8Bytes = l, t.toUtf8CodePoints = function (e) {
            return d(l(e, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : n.current));
          }, t.toUtf8String = function (e, t) {
            return p(d(e, t));
          };
          var n,
            i,
            o = r(908),
            a = r(4327),
            s = r(6518),
            u = new a.Logger(s.version);
          function c(e, t, r, n, o) {
            if (e === i.BAD_PREFIX || e === i.UNEXPECTED_CONTINUE) {
              for (var a = 0, s = t + 1; s < r.length && r[s] >> 6 == 2; s++) a++;
              return a;
            }
            return e === i.OVERRUN ? r.length - t - 1 : 0;
          }
          t.UnicodeNormalizationForm = n, function (e) {
            e.current = "", e.NFC = "NFC", e.NFD = "NFD", e.NFKC = "NFKC", e.NFKD = "NFKD";
          }(n || (t.UnicodeNormalizationForm = n = {})), t.Utf8ErrorReason = i, function (e) {
            e.UNEXPECTED_CONTINUE = "unexpected continuation byte", e.BAD_PREFIX = "bad codepoint prefix", e.OVERRUN = "string overrun", e.MISSING_CONTINUE = "missing continuation byte", e.OUT_OF_RANGE = "out of UTF-8 range", e.UTF16_SURROGATE = "UTF-16 surrogate", e.OVERLONG = "overlong representation";
          }(i || (t.Utf8ErrorReason = i = {}));
          var f = Object.freeze({
            error: function error(e, t, r, n, i) {
              return u.throwArgumentError("invalid codepoint at offset ".concat(t, "; ").concat(e), "bytes", r);
            },
            ignore: c,
            replace: function replace(e, t, r, n, o) {
              return e === i.OVERLONG ? (n.push(o), 0) : (n.push(65533), c(e, t, r));
            }
          });
          function d(e, t) {
            null == t && (t = f.error), e = (0, o.arrayify)(e);
            for (var r = [], n = 0; n < e.length;) {
              var a = e[n++];
              if (a >> 7 != 0) {
                var s = null,
                  u = null;
                if (192 == (224 & a)) s = 1, u = 127;else if (224 == (240 & a)) s = 2, u = 2047;else {
                  if (240 != (248 & a)) {
                    n += t(128 == (192 & a) ? i.UNEXPECTED_CONTINUE : i.BAD_PREFIX, n - 1, e, r);
                    continue;
                  }
                  s = 3, u = 65535;
                }
                if (n - 1 + s >= e.length) n += t(i.OVERRUN, n - 1, e, r);else {
                  for (var c = a & (1 << 8 - s - 1) - 1, d = 0; d < s; d++) {
                    var l = e[n];
                    if (128 != (192 & l)) {
                      n += t(i.MISSING_CONTINUE, n, e, r), c = null;
                      break;
                    }
                    c = c << 6 | 63 & l, n++;
                  }
                  null !== c && (c > 1114111 ? n += t(i.OUT_OF_RANGE, n - 1 - s, e, r, c) : c >= 55296 && c <= 57343 ? n += t(i.UTF16_SURROGATE, n - 1 - s, e, r, c) : c <= u ? n += t(i.OVERLONG, n - 1 - s, e, r, c) : r.push(c));
                }
              } else r.push(a);
            }
            return r;
          }
          function l(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : n.current;
            t != n.current && (u.checkNormalize(), e = e.normalize(t));
            for (var r = [], i = 0; i < e.length; i++) {
              var a = e.charCodeAt(i);
              if (a < 128) r.push(a);else if (a < 2048) r.push(a >> 6 | 192), r.push(63 & a | 128);else if (55296 == (64512 & a)) {
                i++;
                var s = e.charCodeAt(i);
                if (i >= e.length || 56320 != (64512 & s)) throw new Error("invalid utf-8 string");
                var c = 65536 + ((1023 & a) << 10) + (1023 & s);
                r.push(c >> 18 | 240), r.push(c >> 12 & 63 | 128), r.push(c >> 6 & 63 | 128), r.push(63 & c | 128);
              } else r.push(a >> 12 | 224), r.push(a >> 6 & 63 | 128), r.push(63 & a | 128);
            }
            return (0, o.arrayify)(r);
          }
          function h(e) {
            var t = "0000" + e.toString(16);
            return "\\u" + t.substring(t.length - 4);
          }
          function p(e) {
            return e.map(function (e) {
              return e <= 65535 ? String.fromCharCode(e) : (e -= 65536, String.fromCharCode(55296 + (e >> 10 & 1023), 56320 + (1023 & e)));
            }).join("");
          }
          t.Utf8ErrorFuncs = f;
        },
        6783: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.version = void 0, t.version = "transactions/5.7.0";
        },
        1936: function _(e, t, r) {
          "use strict";

          var n = r(3355);
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.TransactionTypes = void 0, t.accessListify = E, t.computeAddress = A, t.parse = function (e) {
            var t = (0, a.arrayify)(e);
            if (t[0] > 127) return function (e) {
              var t = f.decode(e);
              9 !== t.length && 6 !== t.length && y.throwArgumentError("invalid raw transaction", "rawTransaction", e);
              var r = {
                nonce: v(t[0]).toNumber(),
                gasPrice: v(t[1]),
                gasLimit: v(t[2]),
                to: m(t[3]),
                value: v(t[4]),
                data: t[5],
                chainId: 0
              };
              if (6 === t.length) return r;
              try {
                r.v = o.BigNumber.from(t[6]).toNumber();
              } catch (e) {
                return r;
              }
              if (r.r = (0, a.hexZeroPad)(t[7], 32), r.s = (0, a.hexZeroPad)(t[8], 32), o.BigNumber.from(r.r).isZero() && o.BigNumber.from(r.s).isZero()) r.chainId = r.v, r.v = 0;else {
                r.chainId = Math.floor((r.v - 35) / 2), r.chainId < 0 && (r.chainId = 0);
                var n = r.v - 27,
                  i = t.slice(0, 6);
                0 !== r.chainId && (i.push((0, a.hexlify)(r.chainId)), i.push("0x"), i.push("0x"), n -= 2 * r.chainId + 8);
                var s = (0, u.keccak256)(f.encode(i));
                try {
                  r.from = k(s, {
                    r: (0, a.hexlify)(r.r),
                    s: (0, a.hexlify)(r.s),
                    recoveryParam: n
                  });
                } catch (e) {}
                r.hash = (0, u.keccak256)(e);
              }
              return r.type = null, r;
            }(t);
            switch (t[0]) {
              case 1:
                return function (e) {
                  var t = f.decode(e.slice(1));
                  8 !== t.length && 11 !== t.length && y.throwArgumentError("invalid component count for transaction type: 1", "payload", (0, a.hexlify)(e));
                  var r = {
                    type: 1,
                    chainId: v(t[0]).toNumber(),
                    nonce: v(t[1]).toNumber(),
                    gasPrice: v(t[2]),
                    gasLimit: v(t[3]),
                    to: m(t[4]),
                    value: v(t[5]),
                    data: t[6],
                    accessList: E(t[7])
                  };
                  return 8 === t.length || (r.hash = (0, u.keccak256)(e), B(r, t.slice(8), O)), r;
                }(t);
              case 2:
                return function (e) {
                  var t = f.decode(e.slice(1));
                  9 !== t.length && 12 !== t.length && y.throwArgumentError("invalid component count for transaction type: 2", "payload", (0, a.hexlify)(e));
                  var r = v(t[2]),
                    n = v(t[3]),
                    i = {
                      type: 2,
                      chainId: v(t[0]).toNumber(),
                      nonce: v(t[1]).toNumber(),
                      maxPriorityFeePerGas: r,
                      maxFeePerGas: n,
                      gasPrice: null,
                      gasLimit: v(t[4]),
                      to: m(t[5]),
                      value: v(t[6]),
                      data: t[7],
                      accessList: E(t[8])
                    };
                  return 9 === t.length || (i.hash = (0, u.keccak256)(e), B(i, t.slice(9), P)), i;
                }(t);
            }
            return y.throwError("unsupported transaction type: ".concat(t[0]), l.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "parseTransaction",
              transactionType: t[0]
            });
          }, t.recoverAddress = k, t.serialize = function (e, t) {
            if (null == e.type || 0 === e.type) return null != e.accessList && y.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", e), function (e, t) {
              (0, c.checkProperties)(e, w);
              var r = [];
              g.forEach(function (t) {
                var n = e[t.name] || [],
                  i = {};
                t.numeric && (i.hexPad = "left"), n = (0, a.arrayify)((0, a.hexlify)(n, i)), t.length && n.length !== t.length && n.length > 0 && y.throwArgumentError("invalid length for " + t.name, "transaction:" + t.name, n), t.maxLength && (n = (0, a.stripZeros)(n)).length > t.maxLength && y.throwArgumentError("invalid length for " + t.name, "transaction:" + t.name, n), r.push((0, a.hexlify)(n));
              });
              var n = 0;
              if (null != e.chainId ? "number" != typeof (n = e.chainId) && y.throwArgumentError("invalid transaction.chainId", "transaction", e) : t && !(0, a.isBytesLike)(t) && t.v > 28 && (n = Math.floor((t.v - 35) / 2)), 0 !== n && (r.push((0, a.hexlify)(n)), r.push("0x"), r.push("0x")), !t) return f.encode(r);
              var i = (0, a.splitSignature)(t),
                o = 27 + i.recoveryParam;
              return 0 !== n ? (r.pop(), r.pop(), r.pop(), o += 2 * n + 8, i.v > 28 && i.v !== o && y.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", t)) : i.v !== o && y.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", t), r.push((0, a.hexlify)(o)), r.push((0, a.stripZeros)((0, a.arrayify)(i.r))), r.push((0, a.stripZeros)((0, a.arrayify)(i.s))), f.encode(r);
            }(e, t);
            switch (e.type) {
              case 1:
                return O(e, t);
              case 2:
                return P(e, t);
            }
            return y.throwError("unsupported transaction type: ".concat(e.type), l.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "serializeTransaction",
              transactionType: e.type
            });
          };
          var i = r(7921),
            o = r(4952),
            a = r(908),
            s = r(5465),
            u = r(4642),
            c = r(3694),
            f = function (e, t) {
              if (e && e.__esModule) return e;
              if (null === e || "object" !== n(e) && "function" != typeof e) return {
                default: e
              };
              var r = p(t);
              if (r && r.has(e)) return r.get(e);
              var i = {},
                o = Object.defineProperty && Object.getOwnPropertyDescriptor;
              for (var a in e) if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
                var s = o ? Object.getOwnPropertyDescriptor(e, a) : null;
                s && (s.get || s.set) ? Object.defineProperty(i, a, s) : i[a] = e[a];
              }
              return i.default = e, r && r.set(e, i), i;
            }(r(5265)),
            d = r(7612),
            l = r(4327),
            h = r(6783);
          function p(e) {
            if ("function" != typeof WeakMap) return null;
            var t = new WeakMap(),
              r = new WeakMap();
            return (p = function p(e) {
              return e ? r : t;
            })(e);
          }
          var b,
            y = new l.Logger(h.version);
          function m(e) {
            return "0x" === e ? null : (0, i.getAddress)(e);
          }
          function v(e) {
            return "0x" === e ? s.Zero : o.BigNumber.from(e);
          }
          t.TransactionTypes = b, function (e) {
            e[e.legacy = 0] = "legacy", e[e.eip2930 = 1] = "eip2930", e[e.eip1559 = 2] = "eip1559";
          }(b || (t.TransactionTypes = b = {}));
          var g = [{
              name: "nonce",
              maxLength: 32,
              numeric: !0
            }, {
              name: "gasPrice",
              maxLength: 32,
              numeric: !0
            }, {
              name: "gasLimit",
              maxLength: 32,
              numeric: !0
            }, {
              name: "to",
              length: 20
            }, {
              name: "value",
              maxLength: 32,
              numeric: !0
            }, {
              name: "data"
            }],
            w = {
              chainId: !0,
              data: !0,
              gasLimit: !0,
              gasPrice: !0,
              nonce: !0,
              to: !0,
              type: !0,
              value: !0
            };
          function A(e) {
            var t = (0, d.computePublicKey)(e);
            return (0, i.getAddress)((0, a.hexDataSlice)((0, u.keccak256)((0, a.hexDataSlice)(t, 1)), 12));
          }
          function k(e, t) {
            return A((0, d.recoverPublicKey)((0, a.arrayify)(e), t));
          }
          function _(e, t) {
            var r = (0, a.stripZeros)(o.BigNumber.from(e).toHexString());
            return r.length > 32 && y.throwArgumentError("invalid length for " + t, "transaction:" + t, e), r;
          }
          function S(e, t) {
            return {
              address: (0, i.getAddress)(e),
              storageKeys: (t || []).map(function (t, r) {
                return 32 !== (0, a.hexDataLength)(t) && y.throwArgumentError("invalid access list storageKey", "accessList[".concat(e, ":").concat(r, "]"), t), t.toLowerCase();
              })
            };
          }
          function E(e) {
            if (Array.isArray(e)) return e.map(function (e, t) {
              return Array.isArray(e) ? (e.length > 2 && y.throwArgumentError("access list expected to be [ address, storageKeys[] ]", "value[".concat(t, "]"), e), S(e[0], e[1])) : S(e.address, e.storageKeys);
            });
            var t = Object.keys(e).map(function (t) {
              var r = e[t].reduce(function (e, t) {
                return e[t] = !0, e;
              }, {});
              return S(t, Object.keys(r).sort());
            });
            return t.sort(function (e, t) {
              return e.address.localeCompare(t.address);
            }), t;
          }
          function x(e) {
            return E(e).map(function (e) {
              return [e.address, e.storageKeys];
            });
          }
          function P(e, t) {
            if (null != e.gasPrice) {
              var r = o.BigNumber.from(e.gasPrice),
                n = o.BigNumber.from(e.maxFeePerGas || 0);
              r.eq(n) || y.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                gasPrice: r,
                maxFeePerGas: n
              });
            }
            var s = [_(e.chainId || 0, "chainId"), _(e.nonce || 0, "nonce"), _(e.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"), _(e.maxFeePerGas || 0, "maxFeePerGas"), _(e.gasLimit || 0, "gasLimit"), null != e.to ? (0, i.getAddress)(e.to) : "0x", _(e.value || 0, "value"), e.data || "0x", x(e.accessList || [])];
            if (t) {
              var u = (0, a.splitSignature)(t);
              s.push(_(u.recoveryParam, "recoveryParam")), s.push((0, a.stripZeros)(u.r)), s.push((0, a.stripZeros)(u.s));
            }
            return (0, a.hexConcat)(["0x02", f.encode(s)]);
          }
          function O(e, t) {
            var r = [_(e.chainId || 0, "chainId"), _(e.nonce || 0, "nonce"), _(e.gasPrice || 0, "gasPrice"), _(e.gasLimit || 0, "gasLimit"), null != e.to ? (0, i.getAddress)(e.to) : "0x", _(e.value || 0, "value"), e.data || "0x", x(e.accessList || [])];
            if (t) {
              var n = (0, a.splitSignature)(t);
              r.push(_(n.recoveryParam, "recoveryParam")), r.push((0, a.stripZeros)(n.r)), r.push((0, a.stripZeros)(n.s));
            }
            return (0, a.hexConcat)(["0x01", f.encode(r)]);
          }
          function B(e, t, r) {
            try {
              var n = v(t[0]).toNumber();
              if (0 !== n && 1 !== n) throw new Error("bad recid");
              e.v = n;
            } catch (e) {
              y.throwArgumentError("invalid v for transaction type: 1", "v", t[0]);
            }
            e.r = (0, a.hexZeroPad)(t[1], 32), e.s = (0, a.hexZeroPad)(t[2], 32);
            try {
              var i = (0, u.keccak256)(r(e));
              e.from = k(i, {
                r: e.r,
                s: e.s,
                recoveryParam: e.v
              });
            } catch (e) {}
          }
        },
        3368: function _(e, t, r) {
          "use strict";

          var n,
            i,
            o = r(8847)(r(3355));
          void 0 === (i = "function" == typeof (n = function n() {
            function e(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }
            function t(e, t) {
              for (var r = 0; r < t.length; r++) {
                var n = t[r];
                n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
              }
            }
            function n(e, r, n) {
              return r && t(e.prototype, r), n && t(e, n), Object.defineProperty(e, "prototype", {
                writable: !1
              }), e;
            }
            function i(e) {
              return i = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (e) {
                return e.__proto__ || Object.getPrototypeOf(e);
              }, i(e);
            }
            function a(e, t) {
              return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (e, t) {
                return e.__proto__ = t, e;
              }, a(e, t);
            }
            function s(e) {
              if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return e;
            }
            function u(e) {
              var t = function () {
                if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                if (Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                  return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                } catch (e) {
                  return !1;
                }
              }();
              return function () {
                var r,
                  n = i(e);
                if (t) {
                  var a = i(this).constructor;
                  r = Reflect.construct(n, arguments, a);
                } else r = n.apply(this, arguments);
                return function (e, t) {
                  if (t && ("object" === (0, o.default)(t) || "function" == typeof t)) return t;
                  if (void 0 !== t) throw new TypeError("Derived constructors may only return object or undefined");
                  return s(e);
                }(this, r);
              };
            }
            function c() {
              return c = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {
                var n = function (e, t) {
                  for (; !Object.prototype.hasOwnProperty.call(e, t) && null !== (e = i(e)););
                  return e;
                }(e, t);
                if (n) {
                  var o = Object.getOwnPropertyDescriptor(n, t);
                  return o.get ? o.get.call(arguments.length < 3 ? e : r) : o.value;
                }
              }, c.apply(this, arguments);
            }
            var f = function () {
                function t() {
                  e(this, t), Object.defineProperty(this, "listeners", {
                    value: {},
                    writable: !0,
                    configurable: !0
                  });
                }
                return n(t, [{
                  key: "addEventListener",
                  value: function value(e, t, r) {
                    e in this.listeners || (this.listeners[e] = []), this.listeners[e].push({
                      callback: t,
                      options: r
                    });
                  }
                }, {
                  key: "removeEventListener",
                  value: function value(e, t) {
                    if (e in this.listeners) for (var r = this.listeners[e], n = 0, i = r.length; n < i; n++) if (r[n].callback === t) return void r.splice(n, 1);
                  }
                }, {
                  key: "dispatchEvent",
                  value: function value(e) {
                    var _this = this;
                    if (e.type in this.listeners) {
                      var _loop = function _loop() {
                        i = t[r];
                        try {
                          i.callback.call(_this, e);
                        } catch (e) {
                          Promise.resolve().then(function () {
                            throw e;
                          });
                        }
                        i.options && i.options.once && _this.removeEventListener(e.type, i.callback);
                      };
                      for (var t = this.listeners[e.type].slice(), r = 0, n = t.length; r < n; r++) {
                        var i;
                        _loop();
                      }
                      return !e.defaultPrevented;
                    }
                  }
                }]), t;
              }(),
              d = function (t) {
                !function (e, t) {
                  if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
                  e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                      value: e,
                      writable: !0,
                      configurable: !0
                    }
                  }), Object.defineProperty(e, "prototype", {
                    writable: !1
                  }), t && a(e, t);
                }(o, t);
                var r = u(o);
                function o() {
                  var t;
                  return e(this, o), (t = r.call(this)).listeners || f.call(s(t)), Object.defineProperty(s(t), "aborted", {
                    value: !1,
                    writable: !0,
                    configurable: !0
                  }), Object.defineProperty(s(t), "onabort", {
                    value: null,
                    writable: !0,
                    configurable: !0
                  }), Object.defineProperty(s(t), "reason", {
                    value: void 0,
                    writable: !0,
                    configurable: !0
                  }), t;
                }
                return n(o, [{
                  key: "toString",
                  value: function value() {
                    return "[object AbortSignal]";
                  }
                }, {
                  key: "dispatchEvent",
                  value: function value(e) {
                    "abort" === e.type && (this.aborted = !0, "function" == typeof this.onabort && this.onabort.call(this, e)), c(i(o.prototype), "dispatchEvent", this).call(this, e);
                  }
                }]), o;
              }(f),
              l = function () {
                function t() {
                  e(this, t), Object.defineProperty(this, "signal", {
                    value: new d(),
                    writable: !0,
                    configurable: !0
                  });
                }
                return n(t, [{
                  key: "abort",
                  value: function value(e) {
                    var t;
                    try {
                      t = new Event("abort");
                    } catch (e) {
                      "undefined" != typeof document ? document.createEvent ? (t = document.createEvent("Event")).initEvent("abort", !1, !1) : (t = document.createEventObject()).type = "abort" : t = {
                        type: "abort",
                        bubbles: !1,
                        cancelable: !1
                      };
                    }
                    var r = e;
                    if (void 0 === r) if ("undefined" == typeof document) (r = new Error("This operation was aborted")).name = "AbortError";else try {
                      r = new DOMException("signal is aborted without reason");
                    } catch (e) {
                      (r = new Error("This operation was aborted")).name = "AbortError";
                    }
                    this.signal.reason = r, this.signal.dispatchEvent(t);
                  }
                }, {
                  key: "toString",
                  value: function value() {
                    return "[object AbortController]";
                  }
                }]), t;
              }();
            function h(e) {
              return e.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL ? (console.log("__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill"), !0) : "function" == typeof e.Request && !e.Request.prototype.hasOwnProperty("signal") || !e.AbortController;
            }
            "undefined" != typeof Symbol && Symbol.toStringTag && (l.prototype[Symbol.toStringTag] = "AbortController", d.prototype[Symbol.toStringTag] = "AbortSignal"), function (e) {
              if (h(e)) if (e.fetch) {
                var t = function (e) {
                    "function" == typeof e && (e = {
                      fetch: e
                    });
                    var t = e,
                      r = t.fetch,
                      n = t.Request,
                      i = void 0 === n ? r.Request : n,
                      o = t.AbortController,
                      a = t.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL,
                      s = void 0 !== a && a;
                    if (!h({
                      fetch: r,
                      Request: i,
                      AbortController: o,
                      __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL: s
                    })) return {
                      fetch: r,
                      Request: u
                    };
                    var u = i;
                    (u && !u.prototype.hasOwnProperty("signal") || s) && ((u = function u(e, t) {
                      var r;
                      t && t.signal && (r = t.signal, delete t.signal);
                      var n = new i(e, t);
                      return r && Object.defineProperty(n, "signal", {
                        writable: !1,
                        enumerable: !1,
                        configurable: !0,
                        value: r
                      }), n;
                    }).prototype = i.prototype);
                    var c = r;
                    return {
                      fetch: function fetch(e, t) {
                        var r = u && u.prototype.isPrototypeOf(e) ? e.signal : t ? t.signal : void 0;
                        if (r) {
                          var n;
                          try {
                            n = new DOMException("Aborted", "AbortError");
                          } catch (e) {
                            (n = new Error("Aborted")).name = "AbortError";
                          }
                          if (r.aborted) return Promise.reject(n);
                          var i = new Promise(function (e, t) {
                            r.addEventListener("abort", function () {
                              return t(n);
                            }, {
                              once: !0
                            });
                          });
                          return t && t.signal && delete t.signal, Promise.race([i, c(e, t)]);
                        }
                        return c(e, t);
                      },
                      Request: u
                    };
                  }(e),
                  r = t.fetch,
                  n = t.Request;
                e.fetch = r, e.Request = n, Object.defineProperty(e, "AbortController", {
                  writable: !0,
                  enumerable: !1,
                  configurable: !0,
                  value: l
                }), Object.defineProperty(e, "AbortSignal", {
                  writable: !0,
                  enumerable: !1,
                  configurable: !0,
                  value: d
                });
              } else console.warn("fetch() is not available, cannot install abortcontroller-polyfill");
            }("undefined" != typeof self ? self : r.g);
          }) ? n.call(t, r, t, e) : n) || (e.exports = i);
        },
        8357: function _(e, t, r) {
          "use strict";

          var n = t;
          n.bignum = r(1734), n.define = r(1568).define, n.base = r(2412), n.constants = r(9387), n.decoders = r(1500), n.encoders = r(7506);
        },
        1568: function _(e, t, r) {
          "use strict";

          var n = r(7506),
            i = r(1500),
            o = r(1736);
          function a(e, t) {
            this.name = e, this.body = t, this.decoders = {}, this.encoders = {};
          }
          t.define = function (e, t) {
            return new a(e, t);
          }, a.prototype._createNamed = function (e) {
            var t = this.name;
            function r(e) {
              this._initNamed(e, t);
            }
            return o(r, e), r.prototype._initNamed = function (t, r) {
              e.call(this, t, r);
            }, new r(this);
          }, a.prototype._getDecoder = function (e) {
            return e = e || "der", this.decoders.hasOwnProperty(e) || (this.decoders[e] = this._createNamed(i[e])), this.decoders[e];
          }, a.prototype.decode = function (e, t, r) {
            return this._getDecoder(t).decode(e, r);
          }, a.prototype._getEncoder = function (e) {
            return e = e || "der", this.encoders.hasOwnProperty(e) || (this.encoders[e] = this._createNamed(n[e])), this.encoders[e];
          }, a.prototype.encode = function (e, t, r) {
            return this._getEncoder(t).encode(e, r);
          };
        },
        585: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(1736),
            o = r(2719).b,
            a = r(1755).Buffer;
          function s(e, t) {
            o.call(this, t), a.isBuffer(e) ? (this.base = e, this.offset = 0, this.length = e.length) : this.error("Input not Buffer");
          }
          function u(e, t) {
            if (Array.isArray(e)) this.length = 0, this.value = e.map(function (e) {
              return u.isEncoderBuffer(e) || (e = new u(e, t)), this.length += e.length, e;
            }, this);else if ("number" == typeof e) {
              if (!(0 <= e && e <= 255)) return t.error("non-byte EncoderBuffer value");
              this.value = e, this.length = 1;
            } else if ("string" == typeof e) this.value = e, this.length = a.byteLength(e);else {
              if (!a.isBuffer(e)) return t.error("Unsupported type: " + (0, n.default)(e));
              this.value = e, this.length = e.length;
            }
          }
          i(s, o), t.C = s, s.isDecoderBuffer = function (e) {
            return e instanceof s || "object" === (0, n.default)(e) && a.isBuffer(e.base) && "DecoderBuffer" === e.constructor.name && "number" == typeof e.offset && "number" == typeof e.length && "function" == typeof e.save && "function" == typeof e.restore && "function" == typeof e.isEmpty && "function" == typeof e.readUInt8 && "function" == typeof e.skip && "function" == typeof e.raw;
          }, s.prototype.save = function () {
            return {
              offset: this.offset,
              reporter: o.prototype.save.call(this)
            };
          }, s.prototype.restore = function (e) {
            var t = new s(this.base);
            return t.offset = e.offset, t.length = this.offset, this.offset = e.offset, o.prototype.restore.call(this, e.reporter), t;
          }, s.prototype.isEmpty = function () {
            return this.offset === this.length;
          }, s.prototype.readUInt8 = function (e) {
            return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, !0) : this.error(e || "DecoderBuffer overrun");
          }, s.prototype.skip = function (e, t) {
            if (!(this.offset + e <= this.length)) return this.error(t || "DecoderBuffer overrun");
            var r = new s(this.base);
            return r._reporterState = this._reporterState, r.offset = this.offset, r.length = this.offset + e, this.offset += e, r;
          }, s.prototype.raw = function (e) {
            return this.base.slice(e ? e.offset : this.offset, this.length);
          }, t.R = u, u.isEncoderBuffer = function (e) {
            return e instanceof u || "object" === (0, n.default)(e) && "EncoderBuffer" === e.constructor.name && "number" == typeof e.length && "function" == typeof e.join;
          }, u.prototype.join = function (e, t) {
            return e || (e = a.alloc(this.length)), t || (t = 0), 0 === this.length || (Array.isArray(this.value) ? this.value.forEach(function (r) {
              r.join(e, t), t += r.length;
            }) : ("number" == typeof this.value ? e[t] = this.value : "string" == typeof this.value ? e.write(this.value, t) : a.isBuffer(this.value) && this.value.copy(e, t), t += this.length)), e;
          };
        },
        2412: function _(e, t, r) {
          "use strict";

          var n = t;
          n.Reporter = r(2719).b, n.DecoderBuffer = r(585).C, n.EncoderBuffer = r(585).R, n.Node = r(1371);
        },
        1371: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(2719).b,
            o = r(585).R,
            a = r(585).C,
            s = r(4504),
            u = ["seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr"],
            c = ["key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains"].concat(u);
          function f(e, t, r) {
            var n = {};
            this._baseState = n, n.name = r, n.enc = e, n.parent = t || null, n.children = null, n.tag = null, n.args = null, n.reverseArgs = null, n.choice = null, n.optional = !1, n.any = !1, n.obj = !1, n.use = null, n.useDecoder = null, n.key = null, n.default = null, n.explicit = null, n.implicit = null, n.contains = null, n.parent || (n.children = [], this._wrap());
          }
          e.exports = f;
          var d = ["enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains"];
          f.prototype.clone = function () {
            var e = this._baseState,
              t = {};
            d.forEach(function (r) {
              t[r] = e[r];
            });
            var r = new this.constructor(t.parent);
            return r._baseState = t, r;
          }, f.prototype._wrap = function () {
            var e = this._baseState;
            c.forEach(function (t) {
              this[t] = function () {
                var r = new this.constructor(this);
                return e.children.push(r), r[t].apply(r, arguments);
              };
            }, this);
          }, f.prototype._init = function (e) {
            var t = this._baseState;
            s(null === t.parent), e.call(this), t.children = t.children.filter(function (e) {
              return e._baseState.parent === this;
            }, this), s.equal(t.children.length, 1, "Root node can have only one child");
          }, f.prototype._useArgs = function (e) {
            var t = this._baseState,
              r = e.filter(function (e) {
                return e instanceof this.constructor;
              }, this);
            e = e.filter(function (e) {
              return !(e instanceof this.constructor);
            }, this), 0 !== r.length && (s(null === t.children), t.children = r, r.forEach(function (e) {
              e._baseState.parent = this;
            }, this)), 0 !== e.length && (s(null === t.args), t.args = e, t.reverseArgs = e.map(function (e) {
              if ("object" !== (0, n.default)(e) || e.constructor !== Object) return e;
              var t = {};
              return Object.keys(e).forEach(function (r) {
                r == (0 | r) && (r |= 0);
                var n = e[r];
                t[n] = r;
              }), t;
            }));
          }, ["_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool"].forEach(function (e) {
            f.prototype[e] = function () {
              var t = this._baseState;
              throw new Error(e + " not implemented for encoding: " + t.enc);
            };
          }), u.forEach(function (e) {
            f.prototype[e] = function () {
              var t = this._baseState,
                r = Array.prototype.slice.call(arguments);
              return s(null === t.tag), t.tag = e, this._useArgs(r), this;
            };
          }), f.prototype.use = function (e) {
            s(e);
            var t = this._baseState;
            return s(null === t.use), t.use = e, this;
          }, f.prototype.optional = function () {
            return this._baseState.optional = !0, this;
          }, f.prototype.def = function (e) {
            var t = this._baseState;
            return s(null === t.default), t.default = e, t.optional = !0, this;
          }, f.prototype.explicit = function (e) {
            var t = this._baseState;
            return s(null === t.explicit && null === t.implicit), t.explicit = e, this;
          }, f.prototype.implicit = function (e) {
            var t = this._baseState;
            return s(null === t.explicit && null === t.implicit), t.implicit = e, this;
          }, f.prototype.obj = function () {
            var e = this._baseState,
              t = Array.prototype.slice.call(arguments);
            return e.obj = !0, 0 !== t.length && this._useArgs(t), this;
          }, f.prototype.key = function (e) {
            var t = this._baseState;
            return s(null === t.key), t.key = e, this;
          }, f.prototype.any = function () {
            return this._baseState.any = !0, this;
          }, f.prototype.choice = function (e) {
            var t = this._baseState;
            return s(null === t.choice), t.choice = e, this._useArgs(Object.keys(e).map(function (t) {
              return e[t];
            })), this;
          }, f.prototype.contains = function (e) {
            var t = this._baseState;
            return s(null === t.use), t.contains = e, this;
          }, f.prototype._decode = function (e, t) {
            var r = this._baseState;
            if (null === r.parent) return e.wrapResult(r.children[0]._decode(e, t));
            var n,
              i = r.default,
              o = !0,
              s = null;
            if (null !== r.key && (s = e.enterKey(r.key)), r.optional) {
              var u = null;
              if (null !== r.explicit ? u = r.explicit : null !== r.implicit ? u = r.implicit : null !== r.tag && (u = r.tag), null !== u || r.any) {
                if (o = this._peekTag(e, u, r.any), e.isError(o)) return o;
              } else {
                var c = e.save();
                try {
                  null === r.choice ? this._decodeGeneric(r.tag, e, t) : this._decodeChoice(e, t), o = !0;
                } catch (e) {
                  o = !1;
                }
                e.restore(c);
              }
            }
            if (r.obj && o && (n = e.enterObject()), o) {
              if (null !== r.explicit) {
                var f = this._decodeTag(e, r.explicit);
                if (e.isError(f)) return f;
                e = f;
              }
              var d = e.offset;
              if (null === r.use && null === r.choice) {
                var l;
                r.any && (l = e.save());
                var h = this._decodeTag(e, null !== r.implicit ? r.implicit : r.tag, r.any);
                if (e.isError(h)) return h;
                r.any ? i = e.raw(l) : e = h;
              }
              if (t && t.track && null !== r.tag && t.track(e.path(), d, e.length, "tagged"), t && t.track && null !== r.tag && t.track(e.path(), e.offset, e.length, "content"), r.any || (i = null === r.choice ? this._decodeGeneric(r.tag, e, t) : this._decodeChoice(e, t)), e.isError(i)) return i;
              if (r.any || null !== r.choice || null === r.children || r.children.forEach(function (r) {
                r._decode(e, t);
              }), r.contains && ("octstr" === r.tag || "bitstr" === r.tag)) {
                var p = new a(i);
                i = this._getUse(r.contains, e._reporterState.obj)._decode(p, t);
              }
            }
            return r.obj && o && (i = e.leaveObject(n)), null === r.key || null === i && !0 !== o ? null !== s && e.exitKey(s) : e.leaveKey(s, r.key, i), i;
          }, f.prototype._decodeGeneric = function (e, t, r) {
            var n = this._baseState;
            return "seq" === e || "set" === e ? null : "seqof" === e || "setof" === e ? this._decodeList(t, e, n.args[0], r) : /str$/.test(e) ? this._decodeStr(t, e, r) : "objid" === e && n.args ? this._decodeObjid(t, n.args[0], n.args[1], r) : "objid" === e ? this._decodeObjid(t, null, null, r) : "gentime" === e || "utctime" === e ? this._decodeTime(t, e, r) : "null_" === e ? this._decodeNull(t, r) : "bool" === e ? this._decodeBool(t, r) : "objDesc" === e ? this._decodeStr(t, e, r) : "int" === e || "enum" === e ? this._decodeInt(t, n.args && n.args[0], r) : null !== n.use ? this._getUse(n.use, t._reporterState.obj)._decode(t, r) : t.error("unknown tag: " + e);
          }, f.prototype._getUse = function (e, t) {
            var r = this._baseState;
            return r.useDecoder = this._use(e, t), s(null === r.useDecoder._baseState.parent), r.useDecoder = r.useDecoder._baseState.children[0], r.implicit !== r.useDecoder._baseState.implicit && (r.useDecoder = r.useDecoder.clone(), r.useDecoder._baseState.implicit = r.implicit), r.useDecoder;
          }, f.prototype._decodeChoice = function (e, t) {
            var r = this._baseState,
              n = null,
              i = !1;
            return Object.keys(r.choice).some(function (o) {
              var a = e.save(),
                s = r.choice[o];
              try {
                var u = s._decode(e, t);
                if (e.isError(u)) return !1;
                n = {
                  type: o,
                  value: u
                }, i = !0;
              } catch (t) {
                return e.restore(a), !1;
              }
              return !0;
            }, this), i ? n : e.error("Choice not matched");
          }, f.prototype._createEncoderBuffer = function (e) {
            return new o(e, this.reporter);
          }, f.prototype._encode = function (e, t, r) {
            var n = this._baseState;
            if (null === n.default || n.default !== e) {
              var i = this._encodeValue(e, t, r);
              if (void 0 !== i && !this._skipDefault(i, t, r)) return i;
            }
          }, f.prototype._encodeValue = function (e, t, r) {
            var o = this._baseState;
            if (null === o.parent) return o.children[0]._encode(e, t || new i());
            var a = null;
            if (this.reporter = t, o.optional && void 0 === e) {
              if (null === o.default) return;
              e = o.default;
            }
            var s = null,
              u = !1;
            if (o.any) a = this._createEncoderBuffer(e);else if (o.choice) a = this._encodeChoice(e, t);else if (o.contains) s = this._getUse(o.contains, r)._encode(e, t), u = !0;else if (o.children) s = o.children.map(function (r) {
              if ("null_" === r._baseState.tag) return r._encode(null, t, e);
              if (null === r._baseState.key) return t.error("Child should have a key");
              var i = t.enterKey(r._baseState.key);
              if ("object" !== (0, n.default)(e)) return t.error("Child expected, but input is not object");
              var o = r._encode(e[r._baseState.key], t, e);
              return t.leaveKey(i), o;
            }, this).filter(function (e) {
              return e;
            }), s = this._createEncoderBuffer(s);else if ("seqof" === o.tag || "setof" === o.tag) {
              if (!o.args || 1 !== o.args.length) return t.error("Too many args for : " + o.tag);
              if (!Array.isArray(e)) return t.error("seqof/setof, but data is not Array");
              var c = this.clone();
              c._baseState.implicit = null, s = this._createEncoderBuffer(e.map(function (r) {
                var n = this._baseState;
                return this._getUse(n.args[0], e)._encode(r, t);
              }, c));
            } else null !== o.use ? a = this._getUse(o.use, r)._encode(e, t) : (s = this._encodePrimitive(o.tag, e), u = !0);
            if (!o.any && null === o.choice) {
              var f = null !== o.implicit ? o.implicit : o.tag,
                d = null === o.implicit ? "universal" : "context";
              null === f ? null === o.use && t.error("Tag could be omitted only for .use()") : null === o.use && (a = this._encodeComposite(f, u, d, s));
            }
            return null !== o.explicit && (a = this._encodeComposite(o.explicit, !1, "context", a)), a;
          }, f.prototype._encodeChoice = function (e, t) {
            var r = this._baseState,
              n = r.choice[e.type];
            return n || s(!1, e.type + " not found in " + JSON.stringify(Object.keys(r.choice))), n._encode(e.value, t);
          }, f.prototype._encodePrimitive = function (e, t) {
            var r = this._baseState;
            if (/str$/.test(e)) return this._encodeStr(t, e);
            if ("objid" === e && r.args) return this._encodeObjid(t, r.reverseArgs[0], r.args[1]);
            if ("objid" === e) return this._encodeObjid(t, null, null);
            if ("gentime" === e || "utctime" === e) return this._encodeTime(t, e);
            if ("null_" === e) return this._encodeNull();
            if ("int" === e || "enum" === e) return this._encodeInt(t, r.args && r.reverseArgs[0]);
            if ("bool" === e) return this._encodeBool(t);
            if ("objDesc" === e) return this._encodeStr(t, e);
            throw new Error("Unsupported tag: " + e);
          }, f.prototype._isNumstr = function (e) {
            return /^[0-9 ]*$/.test(e);
          }, f.prototype._isPrintstr = function (e) {
            return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(e);
          };
        },
        2719: function _(e, t, r) {
          "use strict";

          var n = r(1736);
          function i(e) {
            this._reporterState = {
              obj: null,
              path: [],
              options: e || {},
              errors: []
            };
          }
          function o(e, t) {
            this.path = e, this.rethrow(t);
          }
          t.b = i, i.prototype.isError = function (e) {
            return e instanceof o;
          }, i.prototype.save = function () {
            var e = this._reporterState;
            return {
              obj: e.obj,
              pathLen: e.path.length
            };
          }, i.prototype.restore = function (e) {
            var t = this._reporterState;
            t.obj = e.obj, t.path = t.path.slice(0, e.pathLen);
          }, i.prototype.enterKey = function (e) {
            return this._reporterState.path.push(e);
          }, i.prototype.exitKey = function (e) {
            var t = this._reporterState;
            t.path = t.path.slice(0, e - 1);
          }, i.prototype.leaveKey = function (e, t, r) {
            var n = this._reporterState;
            this.exitKey(e), null !== n.obj && (n.obj[t] = r);
          }, i.prototype.path = function () {
            return this._reporterState.path.join("/");
          }, i.prototype.enterObject = function () {
            var e = this._reporterState,
              t = e.obj;
            return e.obj = {}, t;
          }, i.prototype.leaveObject = function (e) {
            var t = this._reporterState,
              r = t.obj;
            return t.obj = e, r;
          }, i.prototype.error = function (e) {
            var t,
              r = this._reporterState,
              n = e instanceof o;
            if (t = n ? e : new o(r.path.map(function (e) {
              return "[" + JSON.stringify(e) + "]";
            }).join(""), e.message || e, e.stack), !r.options.partial) throw t;
            return n || r.errors.push(t), t;
          }, i.prototype.wrapResult = function (e) {
            var t = this._reporterState;
            return t.options.partial ? {
              result: this.isError(e) ? null : e,
              errors: t.errors
            } : e;
          }, n(o, Error), o.prototype.rethrow = function (e) {
            if (this.message = e + " at: " + (this.path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this, o), !this.stack) try {
              throw new Error(this.message);
            } catch (e) {
              this.stack = e.stack;
            }
            return this;
          };
        },
        6520: function _(e, t) {
          "use strict";

          function r(e) {
            var t = {};
            return Object.keys(e).forEach(function (r) {
              (0 | r) == r && (r |= 0);
              var n = e[r];
              t[n] = r;
            }), t;
          }
          t.tagClass = {
            0: "universal",
            1: "application",
            2: "context",
            3: "private"
          }, t.tagClassByName = r(t.tagClass), t.tag = {
            0: "end",
            1: "bool",
            2: "int",
            3: "bitstr",
            4: "octstr",
            5: "null_",
            6: "objid",
            7: "objDesc",
            8: "external",
            9: "real",
            10: "enum",
            11: "embed",
            12: "utf8str",
            13: "relativeOid",
            16: "seq",
            17: "set",
            18: "numstr",
            19: "printstr",
            20: "t61str",
            21: "videostr",
            22: "ia5str",
            23: "utctime",
            24: "gentime",
            25: "graphstr",
            26: "iso646str",
            27: "genstr",
            28: "unistr",
            29: "charstr",
            30: "bmpstr"
          }, t.tagByName = r(t.tag);
        },
        9387: function _(e, t, r) {
          "use strict";

          var n = t;
          n._reverse = function (e) {
            var t = {};
            return Object.keys(e).forEach(function (r) {
              (0 | r) == r && (r |= 0);
              var n = e[r];
              t[n] = r;
            }), t;
          }, n.der = r(6520);
        },
        2387: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(1734),
            o = r(585).C,
            a = r(1371),
            s = r(6520);
          function u(e) {
            this.enc = "der", this.name = e.name, this.entity = e, this.tree = new c(), this.tree._init(e.body);
          }
          function c(e) {
            a.call(this, "der", e);
          }
          function f(e, t) {
            var r = e.readUInt8(t);
            if (e.isError(r)) return r;
            var n = s.tagClass[r >> 6],
              i = 0 == (32 & r);
            if (31 == (31 & r)) {
              var o = r;
              for (r = 0; 128 == (128 & o);) {
                if (o = e.readUInt8(t), e.isError(o)) return o;
                r <<= 7, r |= 127 & o;
              }
            } else r &= 31;
            return {
              cls: n,
              primitive: i,
              tag: r,
              tagStr: s.tag[r]
            };
          }
          function d(e, t, r) {
            var n = e.readUInt8(r);
            if (e.isError(n)) return n;
            if (!t && 128 === n) return null;
            if (0 == (128 & n)) return n;
            var i = 127 & n;
            if (i > 4) return e.error("length octect is too long");
            n = 0;
            for (var o = 0; o < i; o++) {
              n <<= 8;
              var a = e.readUInt8(r);
              if (e.isError(a)) return a;
              n |= a;
            }
            return n;
          }
          e.exports = u, u.prototype.decode = function (e, t) {
            return o.isDecoderBuffer(e) || (e = new o(e, t)), this.tree._decode(e, t);
          }, n(c, a), c.prototype._peekTag = function (e, t, r) {
            if (e.isEmpty()) return !1;
            var n = e.save(),
              i = f(e, 'Failed to peek tag: "' + t + '"');
            return e.isError(i) ? i : (e.restore(n), i.tag === t || i.tagStr === t || i.tagStr + "of" === t || r);
          }, c.prototype._decodeTag = function (e, t, r) {
            var n = f(e, 'Failed to decode tag of "' + t + '"');
            if (e.isError(n)) return n;
            var i = d(e, n.primitive, 'Failed to get length of "' + t + '"');
            if (e.isError(i)) return i;
            if (!r && n.tag !== t && n.tagStr !== t && n.tagStr + "of" !== t) return e.error('Failed to match tag: "' + t + '"');
            if (n.primitive || null !== i) return e.skip(i, 'Failed to match body of: "' + t + '"');
            var o = e.save(),
              a = this._skipUntilEnd(e, 'Failed to skip indefinite length body: "' + this.tag + '"');
            return e.isError(a) ? a : (i = e.offset - o.offset, e.restore(o), e.skip(i, 'Failed to match body of: "' + t + '"'));
          }, c.prototype._skipUntilEnd = function (e, t) {
            for (;;) {
              var r = f(e, t);
              if (e.isError(r)) return r;
              var n = d(e, r.primitive, t);
              if (e.isError(n)) return n;
              var i;
              if (i = r.primitive || null !== n ? e.skip(n) : this._skipUntilEnd(e, t), e.isError(i)) return i;
              if ("end" === r.tagStr) break;
            }
          }, c.prototype._decodeList = function (e, t, r, n) {
            for (var i = []; !e.isEmpty();) {
              var o = this._peekTag(e, "end");
              if (e.isError(o)) return o;
              var a = r.decode(e, "der", n);
              if (e.isError(a) && o) break;
              i.push(a);
            }
            return i;
          }, c.prototype._decodeStr = function (e, t) {
            if ("bitstr" === t) {
              var r = e.readUInt8();
              return e.isError(r) ? r : {
                unused: r,
                data: e.raw()
              };
            }
            if ("bmpstr" === t) {
              var n = e.raw();
              if (n.length % 2 == 1) return e.error("Decoding of string type: bmpstr length mismatch");
              for (var i = "", o = 0; o < n.length / 2; o++) i += String.fromCharCode(n.readUInt16BE(2 * o));
              return i;
            }
            if ("numstr" === t) {
              var a = e.raw().toString("ascii");
              return this._isNumstr(a) ? a : e.error("Decoding of string type: numstr unsupported characters");
            }
            if ("octstr" === t) return e.raw();
            if ("objDesc" === t) return e.raw();
            if ("printstr" === t) {
              var s = e.raw().toString("ascii");
              return this._isPrintstr(s) ? s : e.error("Decoding of string type: printstr unsupported characters");
            }
            return /str$/.test(t) ? e.raw().toString() : e.error("Decoding of string type: " + t + " unsupported");
          }, c.prototype._decodeObjid = function (e, t, r) {
            for (var n, i = [], o = 0, a = 0; !e.isEmpty();) o <<= 7, o |= 127 & (a = e.readUInt8()), 0 == (128 & a) && (i.push(o), o = 0);
            128 & a && i.push(o);
            var s = i[0] / 40 | 0,
              u = i[0] % 40;
            if (n = r ? i : [s, u].concat(i.slice(1)), t) {
              var c = t[n.join(" ")];
              void 0 === c && (c = t[n.join(".")]), void 0 !== c && (n = c);
            }
            return n;
          }, c.prototype._decodeTime = function (e, t) {
            var r,
              n,
              i,
              o,
              a,
              s,
              u = e.raw().toString();
            if ("gentime" === t) r = 0 | u.slice(0, 4), n = 0 | u.slice(4, 6), i = 0 | u.slice(6, 8), o = 0 | u.slice(8, 10), a = 0 | u.slice(10, 12), s = 0 | u.slice(12, 14);else {
              if ("utctime" !== t) return e.error("Decoding " + t + " time is not supported yet");
              r = 0 | u.slice(0, 2), n = 0 | u.slice(2, 4), i = 0 | u.slice(4, 6), o = 0 | u.slice(6, 8), a = 0 | u.slice(8, 10), s = 0 | u.slice(10, 12), r = r < 70 ? 2e3 + r : 1900 + r;
            }
            return Date.UTC(r, n - 1, i, o, a, s, 0);
          }, c.prototype._decodeNull = function () {
            return null;
          }, c.prototype._decodeBool = function (e) {
            var t = e.readUInt8();
            return e.isError(t) ? t : 0 !== t;
          }, c.prototype._decodeInt = function (e, t) {
            var r = e.raw(),
              n = new i(r);
            return t && (n = t[n.toString(10)] || n), n;
          }, c.prototype._use = function (e, t) {
            return "function" == typeof e && (e = e(t)), e._getDecoder("der").tree;
          };
        },
        1500: function _(e, t, r) {
          "use strict";

          var n = t;
          n.der = r(2387), n.pem = r(529);
        },
        529: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(1755).Buffer,
            o = r(2387);
          function a(e) {
            o.call(this, e), this.enc = "pem";
          }
          n(a, o), e.exports = a, a.prototype.decode = function (e, t) {
            for (var r = e.toString().split(/[\r\n]+/g), n = t.label.toUpperCase(), a = /^-----(BEGIN|END) ([^-]+)-----$/, s = -1, u = -1, c = 0; c < r.length; c++) {
              var f = r[c].match(a);
              if (null !== f && f[2] === n) {
                if (-1 !== s) {
                  if ("END" !== f[1]) break;
                  u = c;
                  break;
                }
                if ("BEGIN" !== f[1]) break;
                s = c;
              }
            }
            if (-1 === s || -1 === u) throw new Error("PEM section not found for: " + n);
            var d = r.slice(s + 1, u).join("");
            d.replace(/[^a-z0-9+/=]+/gi, "");
            var l = i.from(d, "base64");
            return o.prototype.decode.call(this, l, t);
          };
        },
        1068: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(1755).Buffer,
            o = r(1371),
            a = r(6520);
          function s(e) {
            this.enc = "der", this.name = e.name, this.entity = e, this.tree = new u(), this.tree._init(e.body);
          }
          function u(e) {
            o.call(this, "der", e);
          }
          function c(e) {
            return e < 10 ? "0" + e : e;
          }
          e.exports = s, s.prototype.encode = function (e, t) {
            return this.tree._encode(e, t).join();
          }, n(u, o), u.prototype._encodeComposite = function (e, t, r, n) {
            var o = function (e, t, r, n) {
              var i;
              if ("seqof" === e ? e = "seq" : "setof" === e && (e = "set"), a.tagByName.hasOwnProperty(e)) i = a.tagByName[e];else {
                if ("number" != typeof e || (0 | e) !== e) return n.error("Unknown tag: " + e);
                i = e;
              }
              return i >= 31 ? n.error("Multi-octet tag encoding unsupported") : (t || (i |= 32), i |= a.tagClassByName[r || "universal"] << 6);
            }(e, t, r, this.reporter);
            if (n.length < 128) {
              var s = i.alloc(2);
              return s[0] = o, s[1] = n.length, this._createEncoderBuffer([s, n]);
            }
            for (var u = 1, c = n.length; c >= 256; c >>= 8) u++;
            var f = i.alloc(2 + u);
            f[0] = o, f[1] = 128 | u;
            for (var d = 1 + u, l = n.length; l > 0; d--, l >>= 8) f[d] = 255 & l;
            return this._createEncoderBuffer([f, n]);
          }, u.prototype._encodeStr = function (e, t) {
            if ("bitstr" === t) return this._createEncoderBuffer([0 | e.unused, e.data]);
            if ("bmpstr" === t) {
              for (var r = i.alloc(2 * e.length), n = 0; n < e.length; n++) r.writeUInt16BE(e.charCodeAt(n), 2 * n);
              return this._createEncoderBuffer(r);
            }
            return "numstr" === t ? this._isNumstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : "printstr" === t ? this._isPrintstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(t) || "objDesc" === t ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: " + t + " unsupported");
          }, u.prototype._encodeObjid = function (e, t, r) {
            if ("string" == typeof e) {
              if (!t) return this.reporter.error("string objid given, but no values map found");
              if (!t.hasOwnProperty(e)) return this.reporter.error("objid not found in values map");
              e = t[e].split(/[\s.]+/g);
              for (var n = 0; n < e.length; n++) e[n] |= 0;
            } else if (Array.isArray(e)) {
              e = e.slice();
              for (var o = 0; o < e.length; o++) e[o] |= 0;
            }
            if (!Array.isArray(e)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(e));
            if (!r) {
              if (e[1] >= 40) return this.reporter.error("Second objid identifier OOB");
              e.splice(0, 2, 40 * e[0] + e[1]);
            }
            for (var a = 0, s = 0; s < e.length; s++) {
              var u = e[s];
              for (a++; u >= 128; u >>= 7) a++;
            }
            for (var c = i.alloc(a), f = c.length - 1, d = e.length - 1; d >= 0; d--) {
              var l = e[d];
              for (c[f--] = 127 & l; (l >>= 7) > 0;) c[f--] = 128 | 127 & l;
            }
            return this._createEncoderBuffer(c);
          }, u.prototype._encodeTime = function (e, t) {
            var r,
              n = new Date(e);
            return "gentime" === t ? r = [c(n.getUTCFullYear()), c(n.getUTCMonth() + 1), c(n.getUTCDate()), c(n.getUTCHours()), c(n.getUTCMinutes()), c(n.getUTCSeconds()), "Z"].join("") : "utctime" === t ? r = [c(n.getUTCFullYear() % 100), c(n.getUTCMonth() + 1), c(n.getUTCDate()), c(n.getUTCHours()), c(n.getUTCMinutes()), c(n.getUTCSeconds()), "Z"].join("") : this.reporter.error("Encoding " + t + " time is not supported yet"), this._encodeStr(r, "octstr");
          }, u.prototype._encodeNull = function () {
            return this._createEncoderBuffer("");
          }, u.prototype._encodeInt = function (e, t) {
            if ("string" == typeof e) {
              if (!t) return this.reporter.error("String int or enum given, but no values map");
              if (!t.hasOwnProperty(e)) return this.reporter.error("Values map doesn't contain: " + JSON.stringify(e));
              e = t[e];
            }
            if ("number" != typeof e && !i.isBuffer(e)) {
              var r = e.toArray();
              !e.sign && 128 & r[0] && r.unshift(0), e = i.from(r);
            }
            if (i.isBuffer(e)) {
              var n = e.length;
              0 === e.length && n++;
              var o = i.alloc(n);
              return e.copy(o), 0 === e.length && (o[0] = 0), this._createEncoderBuffer(o);
            }
            if (e < 128) return this._createEncoderBuffer(e);
            if (e < 256) return this._createEncoderBuffer([0, e]);
            for (var a = 1, s = e; s >= 256; s >>= 8) a++;
            for (var u = new Array(a), c = u.length - 1; c >= 0; c--) u[c] = 255 & e, e >>= 8;
            return 128 & u[0] && u.unshift(0), this._createEncoderBuffer(i.from(u));
          }, u.prototype._encodeBool = function (e) {
            return this._createEncoderBuffer(e ? 255 : 0);
          }, u.prototype._use = function (e, t) {
            return "function" == typeof e && (e = e(t)), e._getEncoder("der").tree;
          }, u.prototype._skipDefault = function (e, t, r) {
            var n,
              i = this._baseState;
            if (null === i.default) return !1;
            var o = e.join();
            if (void 0 === i.defaultBuffer && (i.defaultBuffer = this._encodeValue(i.default, t, r).join()), o.length !== i.defaultBuffer.length) return !1;
            for (n = 0; n < o.length; n++) if (o[n] !== i.defaultBuffer[n]) return !1;
            return !0;
          };
        },
        7506: function _(e, t, r) {
          "use strict";

          var n = t;
          n.der = r(1068), n.pem = r(8520);
        },
        8520: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(1068);
          function o(e) {
            i.call(this, e), this.enc = "pem";
          }
          n(o, i), e.exports = o, o.prototype.encode = function (e, t) {
            for (var r = i.prototype.encode.call(this, e).toString("base64"), n = ["-----BEGIN " + t.label + "-----"], o = 0; o < r.length; o += 64) n.push(r.slice(o, o + 64));
            return n.push("-----END " + t.label + "-----"), n.join("\n");
          };
        },
        3894: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(3103);
          function o(e, t) {
            if (e === t) return 0;
            for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) if (e[i] !== t[i]) {
              r = e[i], n = t[i];
              break;
            }
            return r < n ? -1 : n < r ? 1 : 0;
          }
          function a(e) {
            return r.g.Buffer && "function" == typeof r.g.Buffer.isBuffer ? r.g.Buffer.isBuffer(e) : !(null == e || !e._isBuffer);
          }
          var s = r(9954),
            u = Object.prototype.hasOwnProperty,
            c = Array.prototype.slice,
            f = "foo" === function () {}.name;
          function d(e) {
            return Object.prototype.toString.call(e);
          }
          function l(e) {
            return !a(e) && "function" == typeof r.g.ArrayBuffer && ("function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(e) : !!e && (e instanceof DataView || !!(e.buffer && e.buffer instanceof ArrayBuffer)));
          }
          var h = e.exports = g,
            p = /\s*function\s+([^\(\s]*)\s*/;
          function b(e) {
            if (s.isFunction(e)) {
              if (f) return e.name;
              var t = e.toString().match(p);
              return t && t[1];
            }
          }
          function y(e, t) {
            return "string" == typeof e ? e.length < t ? e : e.slice(0, t) : e;
          }
          function m(e) {
            if (f || !s.isFunction(e)) return s.inspect(e);
            var t = b(e);
            return "[Function" + (t ? ": " + t : "") + "]";
          }
          function v(e, t, r, n, i) {
            throw new h.AssertionError({
              message: r,
              actual: e,
              expected: t,
              operator: n,
              stackStartFunction: i
            });
          }
          function g(e, t) {
            e || v(e, !0, t, "==", h.ok);
          }
          function w(e, t, r, i) {
            if (e === t) return !0;
            if (a(e) && a(t)) return 0 === o(e, t);
            if (s.isDate(e) && s.isDate(t)) return e.getTime() === t.getTime();
            if (s.isRegExp(e) && s.isRegExp(t)) return e.source === t.source && e.global === t.global && e.multiline === t.multiline && e.lastIndex === t.lastIndex && e.ignoreCase === t.ignoreCase;
            if (null !== e && "object" === (0, n.default)(e) || null !== t && "object" === (0, n.default)(t)) {
              if (l(e) && l(t) && d(e) === d(t) && !(e instanceof Float32Array || e instanceof Float64Array)) return 0 === o(new Uint8Array(e.buffer), new Uint8Array(t.buffer));
              if (a(e) !== a(t)) return !1;
              var u = (i = i || {
                actual: [],
                expected: []
              }).actual.indexOf(e);
              return -1 !== u && u === i.expected.indexOf(t) || (i.actual.push(e), i.expected.push(t), function (e, t, r, n) {
                if (null == e || null == t) return !1;
                if (s.isPrimitive(e) || s.isPrimitive(t)) return e === t;
                if (r && Object.getPrototypeOf(e) !== Object.getPrototypeOf(t)) return !1;
                var i = A(e),
                  o = A(t);
                if (i && !o || !i && o) return !1;
                if (i) return w(e = c.call(e), t = c.call(t), r);
                var a,
                  u,
                  f = S(e),
                  d = S(t);
                if (f.length !== d.length) return !1;
                for (f.sort(), d.sort(), u = f.length - 1; u >= 0; u--) if (f[u] !== d[u]) return !1;
                for (u = f.length - 1; u >= 0; u--) if (!w(e[a = f[u]], t[a], r, n)) return !1;
                return !0;
              }(e, t, r, i));
            }
            return r ? e === t : e == t;
          }
          function A(e) {
            return "[object Arguments]" == Object.prototype.toString.call(e);
          }
          function k(e, t) {
            if (!e || !t) return !1;
            if ("[object RegExp]" == Object.prototype.toString.call(t)) return t.test(e);
            try {
              if (e instanceof t) return !0;
            } catch (e) {}
            return !Error.isPrototypeOf(t) && !0 === t.call({}, e);
          }
          function _(e, t, r, n) {
            var i;
            if ("function" != typeof t) throw new TypeError('"block" argument must be a function');
            "string" == typeof r && (n = r, r = null), i = function (e) {
              var t;
              try {
                e();
              } catch (e) {
                t = e;
              }
              return t;
            }(t), n = (r && r.name ? " (" + r.name + ")." : ".") + (n ? " " + n : "."), e && !i && v(i, r, "Missing expected exception" + n);
            var o = "string" == typeof n,
              a = !e && i && !r;
            if ((!e && s.isError(i) && o && k(i, r) || a) && v(i, r, "Got unwanted exception" + n), e && i && r && !k(i, r) || !e && i) throw i;
          }
          h.AssertionError = function (e) {
            this.name = "AssertionError", this.actual = e.actual, this.expected = e.expected, this.operator = e.operator, e.message ? (this.message = e.message, this.generatedMessage = !1) : (this.message = function (e) {
              return y(m(e.actual), 128) + " " + e.operator + " " + y(m(e.expected), 128);
            }(this), this.generatedMessage = !0);
            var t = e.stackStartFunction || v;
            if (Error.captureStackTrace) Error.captureStackTrace(this, t);else {
              var r = new Error();
              if (r.stack) {
                var n = r.stack,
                  i = b(t),
                  o = n.indexOf("\n" + i);
                if (o >= 0) {
                  var a = n.indexOf("\n", o + 1);
                  n = n.substring(a + 1);
                }
                this.stack = n;
              }
            }
          }, s.inherits(h.AssertionError, Error), h.fail = v, h.ok = g, h.equal = function (e, t, r) {
            e != t && v(e, t, r, "==", h.equal);
          }, h.notEqual = function (e, t, r) {
            e == t && v(e, t, r, "!=", h.notEqual);
          }, h.deepEqual = function (e, t, r) {
            w(e, t, !1) || v(e, t, r, "deepEqual", h.deepEqual);
          }, h.deepStrictEqual = function (e, t, r) {
            w(e, t, !0) || v(e, t, r, "deepStrictEqual", h.deepStrictEqual);
          }, h.notDeepEqual = function (e, t, r) {
            w(e, t, !1) && v(e, t, r, "notDeepEqual", h.notDeepEqual);
          }, h.notDeepStrictEqual = function e(t, r, n) {
            w(t, r, !0) && v(t, r, n, "notDeepStrictEqual", e);
          }, h.strictEqual = function (e, t, r) {
            e !== t && v(e, t, r, "===", h.strictEqual);
          }, h.notStrictEqual = function (e, t, r) {
            e === t && v(e, t, r, "!==", h.notStrictEqual);
          }, h.throws = function (e, t, r) {
            _(!0, e, t, r);
          }, h.doesNotThrow = function (e, t, r) {
            _(!1, e, t, r);
          }, h.ifError = function (e) {
            if (e) throw e;
          }, h.strict = i(function e(t, r) {
            t || v(t, !0, r, "==", e);
          }, h, {
            equal: h.strictEqual,
            deepEqual: h.deepStrictEqual,
            notEqual: h.notStrictEqual,
            notDeepEqual: h.notDeepStrictEqual
          }), h.strict.strict = h.strict;
          var S = Object.keys || function (e) {
            var t = [];
            for (var r in e) u.call(e, r) && t.push(r);
            return t;
          };
        },
        4074: function _(e) {
          "use strict";

          "function" == typeof Object.create ? e.exports = function (e, t) {
            e.super_ = t, e.prototype = Object.create(t.prototype, {
              constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
              }
            });
          } : e.exports = function (e, t) {
            e.super_ = t;
            var r = function r() {};
            r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e;
          };
        },
        6732: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355));
          e.exports = function (e) {
            return e && "object" === (0, n.default)(e) && "function" == typeof e.copy && "function" == typeof e.fill && "function" == typeof e.readUInt8;
          };
        },
        9954: function _(e, t, r) {
          "use strict";

          var n = r(9142),
            i = r(8847)(r(3355)),
            o = /%[sdj%]/g;
          t.format = function (e) {
            if (!v(e)) {
              for (var t = [], r = 0; r < arguments.length; r++) t.push(u(arguments[r]));
              return t.join(" ");
            }
            r = 1;
            for (var n = arguments, i = n.length, a = String(e).replace(o, function (e) {
                if ("%%" === e) return "%";
                if (r >= i) return e;
                switch (e) {
                  case "%s":
                    return String(n[r++]);
                  case "%d":
                    return Number(n[r++]);
                  case "%j":
                    try {
                      return JSON.stringify(n[r++]);
                    } catch (e) {
                      return "[Circular]";
                    }
                  default:
                    return e;
                }
              }), s = n[r]; r < i; s = n[++r]) y(s) || !A(s) ? a += " " + s : a += " " + u(s);
            return a;
          }, t.deprecate = function (e, i) {
            if (g(r.g.process)) return function () {
              return t.deprecate(e, i).apply(this, arguments);
            };
            if (!0 === n.noDeprecation) return e;
            var o = !1;
            return function () {
              if (!o) {
                if (n.throwDeprecation) throw new Error(i);
                n.traceDeprecation ? console.trace(i) : console.error(i), o = !0;
              }
              return e.apply(this, arguments);
            };
          };
          var a,
            s = {};
          function u(e, r) {
            var n = {
              seen: [],
              stylize: f
            };
            return arguments.length >= 3 && (n.depth = arguments[2]), arguments.length >= 4 && (n.colors = arguments[3]), b(r) ? n.showHidden = r : r && t._extend(n, r), g(n.showHidden) && (n.showHidden = !1), g(n.depth) && (n.depth = 2), g(n.colors) && (n.colors = !1), g(n.customInspect) && (n.customInspect = !0), n.colors && (n.stylize = c), d(n, e, n.depth);
          }
          function c(e, t) {
            var r = u.styles[t];
            return r ? "[" + u.colors[r][0] + "m" + e + "[" + u.colors[r][1] + "m" : e;
          }
          function f(e, t) {
            return e;
          }
          function d(e, r, n) {
            if (e.customInspect && r && S(r.inspect) && r.inspect !== t.inspect && (!r.constructor || r.constructor.prototype !== r)) {
              var i = r.inspect(n, e);
              return v(i) || (i = d(e, i, n)), i;
            }
            var o = function (e, t) {
              if (g(t)) return e.stylize("undefined", "undefined");
              if (v(t)) {
                var r = "'" + JSON.stringify(t).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                return e.stylize(r, "string");
              }
              return m(t) ? e.stylize("" + t, "number") : b(t) ? e.stylize("" + t, "boolean") : y(t) ? e.stylize("null", "null") : void 0;
            }(e, r);
            if (o) return o;
            var a = Object.keys(r),
              s = function (e) {
                var t = {};
                return e.forEach(function (e, r) {
                  t[e] = !0;
                }), t;
              }(a);
            if (e.showHidden && (a = Object.getOwnPropertyNames(r)), _(r) && (a.indexOf("message") >= 0 || a.indexOf("description") >= 0)) return l(r);
            if (0 === a.length) {
              if (S(r)) {
                var u = r.name ? ": " + r.name : "";
                return e.stylize("[Function" + u + "]", "special");
              }
              if (w(r)) return e.stylize(RegExp.prototype.toString.call(r), "regexp");
              if (k(r)) return e.stylize(Date.prototype.toString.call(r), "date");
              if (_(r)) return l(r);
            }
            var c,
              f = "",
              A = !1,
              E = ["{", "}"];
            return p(r) && (A = !0, E = ["[", "]"]), S(r) && (f = " [Function" + (r.name ? ": " + r.name : "") + "]"), w(r) && (f = " " + RegExp.prototype.toString.call(r)), k(r) && (f = " " + Date.prototype.toUTCString.call(r)), _(r) && (f = " " + l(r)), 0 !== a.length || A && 0 != r.length ? n < 0 ? w(r) ? e.stylize(RegExp.prototype.toString.call(r), "regexp") : e.stylize("[Object]", "special") : (e.seen.push(r), c = A ? function (e, t, r, n, i) {
              for (var o = [], a = 0, s = t.length; a < s; ++a) O(t, String(a)) ? o.push(h(e, t, r, n, String(a), !0)) : o.push("");
              return i.forEach(function (i) {
                i.match(/^\d+$/) || o.push(h(e, t, r, n, i, !0));
              }), o;
            }(e, r, n, s, a) : a.map(function (t) {
              return h(e, r, n, s, t, A);
            }), e.seen.pop(), function (e, t, r) {
              return e.reduce(function (e, t) {
                return t.indexOf("\n"), e + t.replace(/\u001b\[\d\d?m/g, "").length + 1;
              }, 0) > 60 ? r[0] + ("" === t ? "" : t + "\n ") + " " + e.join(",\n  ") + " " + r[1] : r[0] + t + " " + e.join(", ") + " " + r[1];
            }(c, f, E)) : E[0] + f + E[1];
          }
          function l(e) {
            return "[" + Error.prototype.toString.call(e) + "]";
          }
          function h(e, t, r, n, i, o) {
            var a, s, u;
            if ((u = Object.getOwnPropertyDescriptor(t, i) || {
              value: t[i]
            }).get ? s = u.set ? e.stylize("[Getter/Setter]", "special") : e.stylize("[Getter]", "special") : u.set && (s = e.stylize("[Setter]", "special")), O(n, i) || (a = "[" + i + "]"), s || (e.seen.indexOf(u.value) < 0 ? (s = y(r) ? d(e, u.value, null) : d(e, u.value, r - 1)).indexOf("\n") > -1 && (s = o ? s.split("\n").map(function (e) {
              return "  " + e;
            }).join("\n").substr(2) : "\n" + s.split("\n").map(function (e) {
              return "   " + e;
            }).join("\n")) : s = e.stylize("[Circular]", "special")), g(a)) {
              if (o && i.match(/^\d+$/)) return s;
              (a = JSON.stringify("" + i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (a = a.substr(1, a.length - 2), a = e.stylize(a, "name")) : (a = a.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), a = e.stylize(a, "string"));
            }
            return a + ": " + s;
          }
          function p(e) {
            return Array.isArray(e);
          }
          function b(e) {
            return "boolean" == typeof e;
          }
          function y(e) {
            return null === e;
          }
          function m(e) {
            return "number" == typeof e;
          }
          function v(e) {
            return "string" == typeof e;
          }
          function g(e) {
            return void 0 === e;
          }
          function w(e) {
            return A(e) && "[object RegExp]" === E(e);
          }
          function A(e) {
            return "object" === (0, i.default)(e) && null !== e;
          }
          function k(e) {
            return A(e) && "[object Date]" === E(e);
          }
          function _(e) {
            return A(e) && ("[object Error]" === E(e) || e instanceof Error);
          }
          function S(e) {
            return "function" == typeof e;
          }
          function E(e) {
            return Object.prototype.toString.call(e);
          }
          function x(e) {
            return e < 10 ? "0" + e.toString(10) : e.toString(10);
          }
          t.debuglog = function (e) {
            if (g(a) && (a = n.env.NODE_DEBUG || ""), e = e.toUpperCase(), !s[e]) if (new RegExp("\\b" + e + "\\b", "i").test(a)) {
              var r = n.pid;
              s[e] = function () {
                var n = t.format.apply(t, arguments);
                console.error("%s %d: %s", e, r, n);
              };
            } else s[e] = function () {};
            return s[e];
          }, t.inspect = u, u.colors = {
            bold: [1, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            white: [37, 39],
            grey: [90, 39],
            black: [30, 39],
            blue: [34, 39],
            cyan: [36, 39],
            green: [32, 39],
            magenta: [35, 39],
            red: [31, 39],
            yellow: [33, 39]
          }, u.styles = {
            special: "cyan",
            number: "yellow",
            boolean: "yellow",
            undefined: "grey",
            null: "bold",
            string: "green",
            date: "magenta",
            regexp: "red"
          }, t.isArray = p, t.isBoolean = b, t.isNull = y, t.isNullOrUndefined = function (e) {
            return null == e;
          }, t.isNumber = m, t.isString = v, t.isSymbol = function (e) {
            return "symbol" === (0, i.default)(e);
          }, t.isUndefined = g, t.isRegExp = w, t.isObject = A, t.isDate = k, t.isError = _, t.isFunction = S, t.isPrimitive = function (e) {
            return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" === (0, i.default)(e) || void 0 === e;
          }, t.isBuffer = r(6732);
          var P = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
          function O(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
          }
          t.log = function () {
            var e, r;
            console.log("%s - %s", (r = [x((e = new Date()).getHours()), x(e.getMinutes()), x(e.getSeconds())].join(":"), [e.getDate(), P[e.getMonth()], r].join(" ")), t.format.apply(t, arguments));
          }, t.inherits = r(4074), t._extend = function (e, t) {
            if (!t || !A(t)) return e;
            for (var r = Object.keys(t), n = r.length; n--;) e[r[n]] = t[r[n]];
            return e;
          };
        },
        7548: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer;
          e.exports = function (e) {
            if (e.length >= 255) throw new TypeError("Alphabet too long");
            for (var t = new Uint8Array(256), r = 0; r < t.length; r++) t[r] = 255;
            for (var i = 0; i < e.length; i++) {
              var o = e.charAt(i),
                a = o.charCodeAt(0);
              if (255 !== t[a]) throw new TypeError(o + " is ambiguous");
              t[a] = i;
            }
            var s = e.length,
              u = e.charAt(0),
              c = Math.log(s) / Math.log(256),
              f = Math.log(256) / Math.log(s);
            function d(e) {
              if ("string" != typeof e) throw new TypeError("Expected String");
              if (0 === e.length) return n.alloc(0);
              for (var r = 0, i = 0, o = 0; e[r] === u;) i++, r++;
              for (var a = (e.length - r) * c + 1 >>> 0, f = new Uint8Array(a); e[r];) {
                var d = t[e.charCodeAt(r)];
                if (255 === d) return;
                for (var l = 0, h = a - 1; (0 !== d || l < o) && -1 !== h; h--, l++) d += s * f[h] >>> 0, f[h] = d % 256 >>> 0, d = d / 256 >>> 0;
                if (0 !== d) throw new Error("Non-zero carry");
                o = l, r++;
              }
              for (var p = a - o; p !== a && 0 === f[p];) p++;
              var b = n.allocUnsafe(i + (a - p));
              b.fill(0, 0, i);
              for (var y = i; p !== a;) b[y++] = f[p++];
              return b;
            }
            return {
              encode: function encode(t) {
                if ((Array.isArray(t) || t instanceof Uint8Array) && (t = n.from(t)), !n.isBuffer(t)) throw new TypeError("Expected Buffer");
                if (0 === t.length) return "";
                for (var r = 0, i = 0, o = 0, a = t.length; o !== a && 0 === t[o];) o++, r++;
                for (var c = (a - o) * f + 1 >>> 0, d = new Uint8Array(c); o !== a;) {
                  for (var l = t[o], h = 0, p = c - 1; (0 !== l || h < i) && -1 !== p; p--, h++) l += 256 * d[p] >>> 0, d[p] = l % s >>> 0, l = l / s >>> 0;
                  if (0 !== l) throw new Error("Non-zero carry");
                  i = h, o++;
                }
                for (var b = c - i; b !== c && 0 === d[b];) b++;
                for (var y = u.repeat(r); b < c; ++b) y += e.charAt(d[b]);
                return y;
              },
              decodeUnsafe: d,
              decode: function decode(e) {
                var t = d(e);
                if (t) return t;
                throw new Error("Non-base" + s + " character");
              }
            };
          };
        },
        4919: function _(e, t) {
          "use strict";

          t.byteLength = function (e) {
            var t = u(e),
              r = t[0],
              n = t[1];
            return 3 * (r + n) / 4 - n;
          }, t.toByteArray = function (e) {
            var t,
              r,
              o = u(e),
              a = o[0],
              s = o[1],
              c = new i(function (e, t, r) {
                return 3 * (t + r) / 4 - r;
              }(0, a, s)),
              f = 0,
              d = s > 0 ? a - 4 : a;
            for (r = 0; r < d; r += 4) t = n[e.charCodeAt(r)] << 18 | n[e.charCodeAt(r + 1)] << 12 | n[e.charCodeAt(r + 2)] << 6 | n[e.charCodeAt(r + 3)], c[f++] = t >> 16 & 255, c[f++] = t >> 8 & 255, c[f++] = 255 & t;
            return 2 === s && (t = n[e.charCodeAt(r)] << 2 | n[e.charCodeAt(r + 1)] >> 4, c[f++] = 255 & t), 1 === s && (t = n[e.charCodeAt(r)] << 10 | n[e.charCodeAt(r + 1)] << 4 | n[e.charCodeAt(r + 2)] >> 2, c[f++] = t >> 8 & 255, c[f++] = 255 & t), c;
          }, t.fromByteArray = function (e) {
            for (var t, n = e.length, i = n % 3, o = [], a = 16383, s = 0, u = n - i; s < u; s += a) o.push(c(e, s, s + a > u ? u : s + a));
            return 1 === i ? (t = e[n - 1], o.push(r[t >> 2] + r[t << 4 & 63] + "==")) : 2 === i && (t = (e[n - 2] << 8) + e[n - 1], o.push(r[t >> 10] + r[t >> 4 & 63] + r[t << 2 & 63] + "=")), o.join("");
          };
          for (var r = [], n = [], i = "undefined" != typeof Uint8Array ? Uint8Array : Array, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0, s = o.length; a < s; ++a) r[a] = o[a], n[o.charCodeAt(a)] = a;
          function u(e) {
            var t = e.length;
            if (t % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
            var r = e.indexOf("=");
            return -1 === r && (r = t), [r, r === t ? 0 : 4 - r % 4];
          }
          function c(e, t, n) {
            for (var i, o, a = [], s = t; s < n; s += 3) i = (e[s] << 16 & 16711680) + (e[s + 1] << 8 & 65280) + (255 & e[s + 2]), a.push(r[(o = i) >> 18 & 63] + r[o >> 12 & 63] + r[o >> 6 & 63] + r[63 & o]);
            return a.join("");
          }
          n["-".charCodeAt(0)] = 62, n["_".charCodeAt(0)] = 63;
        },
        1734: function _(e, t, r) {
          "use strict";

          e = r.nmd(e);
          var n = r(8847)(r(3355));
          !function (e, t) {
            function i(e, t) {
              if (!e) throw new Error(t || "Assertion failed");
            }
            function o(e, t) {
              e.super_ = t;
              var r = function r() {};
              r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e;
            }
            function a(e, t, r) {
              if (a.isBN(e)) return e;
              this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== e && ("le" !== t && "be" !== t || (r = t, t = 10), this._init(e || 0, t || 10, r || "be"));
            }
            var s;
            "object" === (0, n.default)(e) ? e.exports = a : (void 0).BN = a, a.BN = a, a.wordSize = 26;
            try {
              s = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r(9033).Buffer;
            } catch (e) {}
            function u(e, t) {
              var r = e.charCodeAt(t);
              return r >= 48 && r <= 57 ? r - 48 : r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : void i(!1, "Invalid character in " + e);
            }
            function c(e, t, r) {
              var n = u(e, r);
              return r - 1 >= t && (n |= u(e, r - 1) << 4), n;
            }
            function f(e, t, r, n) {
              for (var o = 0, a = 0, s = Math.min(e.length, r), u = t; u < s; u++) {
                var c = e.charCodeAt(u) - 48;
                o *= n, a = c >= 49 ? c - 49 + 10 : c >= 17 ? c - 17 + 10 : c, i(c >= 0 && a < n, "Invalid character"), o += a;
              }
              return o;
            }
            function d(e, t) {
              e.words = t.words, e.length = t.length, e.negative = t.negative, e.red = t.red;
            }
            if (a.isBN = function (e) {
              return e instanceof a || null !== e && "object" === (0, n.default)(e) && e.constructor.wordSize === a.wordSize && Array.isArray(e.words);
            }, a.max = function (e, t) {
              return e.cmp(t) > 0 ? e : t;
            }, a.min = function (e, t) {
              return e.cmp(t) < 0 ? e : t;
            }, a.prototype._init = function (e, t, r) {
              if ("number" == typeof e) return this._initNumber(e, t, r);
              if ("object" === (0, n.default)(e)) return this._initArray(e, t, r);
              "hex" === t && (t = 16), i(t === (0 | t) && t >= 2 && t <= 36);
              var o = 0;
              "-" === (e = e.toString().replace(/\s+/g, ""))[0] && (o++, this.negative = 1), o < e.length && (16 === t ? this._parseHex(e, o, r) : (this._parseBase(e, t, o), "le" === r && this._initArray(this.toArray(), t, r)));
            }, a.prototype._initNumber = function (e, t, r) {
              e < 0 && (this.negative = 1, e = -e), e < 67108864 ? (this.words = [67108863 & e], this.length = 1) : e < 4503599627370496 ? (this.words = [67108863 & e, e / 67108864 & 67108863], this.length = 2) : (i(e < 9007199254740992), this.words = [67108863 & e, e / 67108864 & 67108863, 1], this.length = 3), "le" === r && this._initArray(this.toArray(), t, r);
            }, a.prototype._initArray = function (e, t, r) {
              if (i("number" == typeof e.length), e.length <= 0) return this.words = [0], this.length = 1, this;
              this.length = Math.ceil(e.length / 3), this.words = new Array(this.length);
              for (var n = 0; n < this.length; n++) this.words[n] = 0;
              var o,
                a,
                s = 0;
              if ("be" === r) for (n = e.length - 1, o = 0; n >= 0; n -= 3) a = e[n] | e[n - 1] << 8 | e[n - 2] << 16, this.words[o] |= a << s & 67108863, this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++);else if ("le" === r) for (n = 0, o = 0; n < e.length; n += 3) a = e[n] | e[n + 1] << 8 | e[n + 2] << 16, this.words[o] |= a << s & 67108863, this.words[o + 1] = a >>> 26 - s & 67108863, (s += 24) >= 26 && (s -= 26, o++);
              return this._strip();
            }, a.prototype._parseHex = function (e, t, r) {
              this.length = Math.ceil((e.length - t) / 6), this.words = new Array(this.length);
              for (var n = 0; n < this.length; n++) this.words[n] = 0;
              var i,
                o = 0,
                a = 0;
              if ("be" === r) for (n = e.length - 1; n >= t; n -= 2) i = c(e, t, n) << o, this.words[a] |= 67108863 & i, o >= 18 ? (o -= 18, a += 1, this.words[a] |= i >>> 26) : o += 8;else for (n = (e.length - t) % 2 == 0 ? t + 1 : t; n < e.length; n += 2) i = c(e, t, n) << o, this.words[a] |= 67108863 & i, o >= 18 ? (o -= 18, a += 1, this.words[a] |= i >>> 26) : o += 8;
              this._strip();
            }, a.prototype._parseBase = function (e, t, r) {
              this.words = [0], this.length = 1;
              for (var n = 0, i = 1; i <= 67108863; i *= t) n++;
              n--, i = i / t | 0;
              for (var o = e.length - r, a = o % n, s = Math.min(o, o - a) + r, u = 0, c = r; c < s; c += n) u = f(e, c, c + n, t), this.imuln(i), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
              if (0 !== a) {
                var d = 1;
                for (u = f(e, c, e.length, t), c = 0; c < a; c++) d *= t;
                this.imuln(d), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
              }
              this._strip();
            }, a.prototype.copy = function (e) {
              e.words = new Array(this.length);
              for (var t = 0; t < this.length; t++) e.words[t] = this.words[t];
              e.length = this.length, e.negative = this.negative, e.red = this.red;
            }, a.prototype._move = function (e) {
              d(e, this);
            }, a.prototype.clone = function () {
              var e = new a(null);
              return this.copy(e), e;
            }, a.prototype._expand = function (e) {
              for (; this.length < e;) this.words[this.length++] = 0;
              return this;
            }, a.prototype._strip = function () {
              for (; this.length > 1 && 0 === this.words[this.length - 1];) this.length--;
              return this._normSign();
            }, a.prototype._normSign = function () {
              return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
            }, "undefined" != typeof Symbol && "function" == typeof Symbol.for) try {
              a.prototype[Symbol.for("nodejs.util.inspect.custom")] = l;
            } catch (e) {
              a.prototype.inspect = l;
            } else a.prototype.inspect = l;
            function l() {
              return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
            }
            var h = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"],
              p = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
              b = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
            function y(e, t, r) {
              r.negative = t.negative ^ e.negative;
              var n = e.length + t.length | 0;
              r.length = n, n = n - 1 | 0;
              var i = 0 | e.words[0],
                o = 0 | t.words[0],
                a = i * o,
                s = 67108863 & a,
                u = a / 67108864 | 0;
              r.words[0] = s;
              for (var c = 1; c < n; c++) {
                for (var f = u >>> 26, d = 67108863 & u, l = Math.min(c, t.length - 1), h = Math.max(0, c - e.length + 1); h <= l; h++) {
                  var p = c - h | 0;
                  f += (a = (i = 0 | e.words[p]) * (o = 0 | t.words[h]) + d) / 67108864 | 0, d = 67108863 & a;
                }
                r.words[c] = 0 | d, u = 0 | f;
              }
              return 0 !== u ? r.words[c] = 0 | u : r.length--, r._strip();
            }
            a.prototype.toString = function (e, t) {
              var r;
              if (t = 0 | t || 1, 16 === (e = e || 10) || "hex" === e) {
                r = "";
                for (var n = 0, o = 0, a = 0; a < this.length; a++) {
                  var s = this.words[a],
                    u = (16777215 & (s << n | o)).toString(16);
                  o = s >>> 24 - n & 16777215, (n += 2) >= 26 && (n -= 26, a--), r = 0 !== o || a !== this.length - 1 ? h[6 - u.length] + u + r : u + r;
                }
                for (0 !== o && (r = o.toString(16) + r); r.length % t != 0;) r = "0" + r;
                return 0 !== this.negative && (r = "-" + r), r;
              }
              if (e === (0 | e) && e >= 2 && e <= 36) {
                var c = p[e],
                  f = b[e];
                r = "";
                var d = this.clone();
                for (d.negative = 0; !d.isZero();) {
                  var l = d.modrn(f).toString(e);
                  r = (d = d.idivn(f)).isZero() ? l + r : h[c - l.length] + l + r;
                }
                for (this.isZero() && (r = "0" + r); r.length % t != 0;) r = "0" + r;
                return 0 !== this.negative && (r = "-" + r), r;
              }
              i(!1, "Base should be between 2 and 36");
            }, a.prototype.toNumber = function () {
              var e = this.words[0];
              return 2 === this.length ? e += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && i(!1, "Number can only safely store up to 53 bits"), 0 !== this.negative ? -e : e;
            }, a.prototype.toJSON = function () {
              return this.toString(16, 2);
            }, s && (a.prototype.toBuffer = function (e, t) {
              return this.toArrayLike(s, e, t);
            }), a.prototype.toArray = function (e, t) {
              return this.toArrayLike(Array, e, t);
            }, a.prototype.toArrayLike = function (e, t, r) {
              this._strip();
              var n = this.byteLength(),
                o = r || Math.max(1, n);
              i(n <= o, "byte array longer than desired length"), i(o > 0, "Requested array length <= 0");
              var a = function (e, t) {
                return e.allocUnsafe ? e.allocUnsafe(t) : new e(t);
              }(e, o);
              return this["_toArrayLike" + ("le" === t ? "LE" : "BE")](a, n), a;
            }, a.prototype._toArrayLikeLE = function (e, t) {
              for (var r = 0, n = 0, i = 0, o = 0; i < this.length; i++) {
                var a = this.words[i] << o | n;
                e[r++] = 255 & a, r < e.length && (e[r++] = a >> 8 & 255), r < e.length && (e[r++] = a >> 16 & 255), 6 === o ? (r < e.length && (e[r++] = a >> 24 & 255), n = 0, o = 0) : (n = a >>> 24, o += 2);
              }
              if (r < e.length) for (e[r++] = n; r < e.length;) e[r++] = 0;
            }, a.prototype._toArrayLikeBE = function (e, t) {
              for (var r = e.length - 1, n = 0, i = 0, o = 0; i < this.length; i++) {
                var a = this.words[i] << o | n;
                e[r--] = 255 & a, r >= 0 && (e[r--] = a >> 8 & 255), r >= 0 && (e[r--] = a >> 16 & 255), 6 === o ? (r >= 0 && (e[r--] = a >> 24 & 255), n = 0, o = 0) : (n = a >>> 24, o += 2);
              }
              if (r >= 0) for (e[r--] = n; r >= 0;) e[r--] = 0;
            }, Math.clz32 ? a.prototype._countBits = function (e) {
              return 32 - Math.clz32(e);
            } : a.prototype._countBits = function (e) {
              var t = e,
                r = 0;
              return t >= 4096 && (r += 13, t >>>= 13), t >= 64 && (r += 7, t >>>= 7), t >= 8 && (r += 4, t >>>= 4), t >= 2 && (r += 2, t >>>= 2), r + t;
            }, a.prototype._zeroBits = function (e) {
              if (0 === e) return 26;
              var t = e,
                r = 0;
              return 0 == (8191 & t) && (r += 13, t >>>= 13), 0 == (127 & t) && (r += 7, t >>>= 7), 0 == (15 & t) && (r += 4, t >>>= 4), 0 == (3 & t) && (r += 2, t >>>= 2), 0 == (1 & t) && r++, r;
            }, a.prototype.bitLength = function () {
              var e = this.words[this.length - 1],
                t = this._countBits(e);
              return 26 * (this.length - 1) + t;
            }, a.prototype.zeroBits = function () {
              if (this.isZero()) return 0;
              for (var e = 0, t = 0; t < this.length; t++) {
                var r = this._zeroBits(this.words[t]);
                if (e += r, 26 !== r) break;
              }
              return e;
            }, a.prototype.byteLength = function () {
              return Math.ceil(this.bitLength() / 8);
            }, a.prototype.toTwos = function (e) {
              return 0 !== this.negative ? this.abs().inotn(e).iaddn(1) : this.clone();
            }, a.prototype.fromTwos = function (e) {
              return this.testn(e - 1) ? this.notn(e).iaddn(1).ineg() : this.clone();
            }, a.prototype.isNeg = function () {
              return 0 !== this.negative;
            }, a.prototype.neg = function () {
              return this.clone().ineg();
            }, a.prototype.ineg = function () {
              return this.isZero() || (this.negative ^= 1), this;
            }, a.prototype.iuor = function (e) {
              for (; this.length < e.length;) this.words[this.length++] = 0;
              for (var t = 0; t < e.length; t++) this.words[t] = this.words[t] | e.words[t];
              return this._strip();
            }, a.prototype.ior = function (e) {
              return i(0 == (this.negative | e.negative)), this.iuor(e);
            }, a.prototype.or = function (e) {
              return this.length > e.length ? this.clone().ior(e) : e.clone().ior(this);
            }, a.prototype.uor = function (e) {
              return this.length > e.length ? this.clone().iuor(e) : e.clone().iuor(this);
            }, a.prototype.iuand = function (e) {
              var t;
              t = this.length > e.length ? e : this;
              for (var r = 0; r < t.length; r++) this.words[r] = this.words[r] & e.words[r];
              return this.length = t.length, this._strip();
            }, a.prototype.iand = function (e) {
              return i(0 == (this.negative | e.negative)), this.iuand(e);
            }, a.prototype.and = function (e) {
              return this.length > e.length ? this.clone().iand(e) : e.clone().iand(this);
            }, a.prototype.uand = function (e) {
              return this.length > e.length ? this.clone().iuand(e) : e.clone().iuand(this);
            }, a.prototype.iuxor = function (e) {
              var t, r;
              this.length > e.length ? (t = this, r = e) : (t = e, r = this);
              for (var n = 0; n < r.length; n++) this.words[n] = t.words[n] ^ r.words[n];
              if (this !== t) for (; n < t.length; n++) this.words[n] = t.words[n];
              return this.length = t.length, this._strip();
            }, a.prototype.ixor = function (e) {
              return i(0 == (this.negative | e.negative)), this.iuxor(e);
            }, a.prototype.xor = function (e) {
              return this.length > e.length ? this.clone().ixor(e) : e.clone().ixor(this);
            }, a.prototype.uxor = function (e) {
              return this.length > e.length ? this.clone().iuxor(e) : e.clone().iuxor(this);
            }, a.prototype.inotn = function (e) {
              i("number" == typeof e && e >= 0);
              var t = 0 | Math.ceil(e / 26),
                r = e % 26;
              this._expand(t), r > 0 && t--;
              for (var n = 0; n < t; n++) this.words[n] = 67108863 & ~this.words[n];
              return r > 0 && (this.words[n] = ~this.words[n] & 67108863 >> 26 - r), this._strip();
            }, a.prototype.notn = function (e) {
              return this.clone().inotn(e);
            }, a.prototype.setn = function (e, t) {
              i("number" == typeof e && e >= 0);
              var r = e / 26 | 0,
                n = e % 26;
              return this._expand(r + 1), this.words[r] = t ? this.words[r] | 1 << n : this.words[r] & ~(1 << n), this._strip();
            }, a.prototype.iadd = function (e) {
              var t, r, n;
              if (0 !== this.negative && 0 === e.negative) return this.negative = 0, t = this.isub(e), this.negative ^= 1, this._normSign();
              if (0 === this.negative && 0 !== e.negative) return e.negative = 0, t = this.isub(e), e.negative = 1, t._normSign();
              this.length > e.length ? (r = this, n = e) : (r = e, n = this);
              for (var i = 0, o = 0; o < n.length; o++) t = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
              for (; 0 !== i && o < r.length; o++) t = (0 | r.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
              if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++;else if (r !== this) for (; o < r.length; o++) this.words[o] = r.words[o];
              return this;
            }, a.prototype.add = function (e) {
              var t;
              return 0 !== e.negative && 0 === this.negative ? (e.negative = 0, t = this.sub(e), e.negative ^= 1, t) : 0 === e.negative && 0 !== this.negative ? (this.negative = 0, t = e.sub(this), this.negative = 1, t) : this.length > e.length ? this.clone().iadd(e) : e.clone().iadd(this);
            }, a.prototype.isub = function (e) {
              if (0 !== e.negative) {
                e.negative = 0;
                var t = this.iadd(e);
                return e.negative = 1, t._normSign();
              }
              if (0 !== this.negative) return this.negative = 0, this.iadd(e), this.negative = 1, this._normSign();
              var r,
                n,
                i = this.cmp(e);
              if (0 === i) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
              i > 0 ? (r = this, n = e) : (r = e, n = this);
              for (var o = 0, a = 0; a < n.length; a++) o = (t = (0 | r.words[a]) - (0 | n.words[a]) + o) >> 26, this.words[a] = 67108863 & t;
              for (; 0 !== o && a < r.length; a++) o = (t = (0 | r.words[a]) + o) >> 26, this.words[a] = 67108863 & t;
              if (0 === o && a < r.length && r !== this) for (; a < r.length; a++) this.words[a] = r.words[a];
              return this.length = Math.max(this.length, a), r !== this && (this.negative = 1), this._strip();
            }, a.prototype.sub = function (e) {
              return this.clone().isub(e);
            };
            var m = function m(e, t, r) {
              var n,
                i,
                o,
                a = e.words,
                s = t.words,
                u = r.words,
                c = 0,
                f = 0 | a[0],
                d = 8191 & f,
                l = f >>> 13,
                h = 0 | a[1],
                p = 8191 & h,
                b = h >>> 13,
                y = 0 | a[2],
                m = 8191 & y,
                v = y >>> 13,
                g = 0 | a[3],
                w = 8191 & g,
                A = g >>> 13,
                k = 0 | a[4],
                _ = 8191 & k,
                S = k >>> 13,
                E = 0 | a[5],
                x = 8191 & E,
                P = E >>> 13,
                O = 0 | a[6],
                B = 8191 & O,
                T = O >>> 13,
                C = 0 | a[7],
                I = 8191 & C,
                M = C >>> 13,
                U = 0 | a[8],
                R = 8191 & U,
                j = U >>> 13,
                N = 0 | a[9],
                F = 8191 & N,
                L = N >>> 13,
                D = 0 | s[0],
                H = 8191 & D,
                q = D >>> 13,
                z = 0 | s[1],
                G = 8191 & z,
                K = z >>> 13,
                V = 0 | s[2],
                J = 8191 & V,
                W = V >>> 13,
                Y = 0 | s[3],
                X = 8191 & Y,
                Q = Y >>> 13,
                Z = 0 | s[4],
                $ = 8191 & Z,
                ee = Z >>> 13,
                te = 0 | s[5],
                re = 8191 & te,
                ne = te >>> 13,
                ie = 0 | s[6],
                oe = 8191 & ie,
                ae = ie >>> 13,
                se = 0 | s[7],
                ue = 8191 & se,
                ce = se >>> 13,
                fe = 0 | s[8],
                de = 8191 & fe,
                le = fe >>> 13,
                he = 0 | s[9],
                pe = 8191 & he,
                be = he >>> 13;
              r.negative = e.negative ^ t.negative, r.length = 19;
              var ye = (c + (n = Math.imul(d, H)) | 0) + ((8191 & (i = (i = Math.imul(d, q)) + Math.imul(l, H) | 0)) << 13) | 0;
              c = ((o = Math.imul(l, q)) + (i >>> 13) | 0) + (ye >>> 26) | 0, ye &= 67108863, n = Math.imul(p, H), i = (i = Math.imul(p, q)) + Math.imul(b, H) | 0, o = Math.imul(b, q);
              var me = (c + (n = n + Math.imul(d, G) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, K) | 0) + Math.imul(l, G) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(l, K) | 0) + (i >>> 13) | 0) + (me >>> 26) | 0, me &= 67108863, n = Math.imul(m, H), i = (i = Math.imul(m, q)) + Math.imul(v, H) | 0, o = Math.imul(v, q), n = n + Math.imul(p, G) | 0, i = (i = i + Math.imul(p, K) | 0) + Math.imul(b, G) | 0, o = o + Math.imul(b, K) | 0;
              var ve = (c + (n = n + Math.imul(d, J) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, W) | 0) + Math.imul(l, J) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(l, W) | 0) + (i >>> 13) | 0) + (ve >>> 26) | 0, ve &= 67108863, n = Math.imul(w, H), i = (i = Math.imul(w, q)) + Math.imul(A, H) | 0, o = Math.imul(A, q), n = n + Math.imul(m, G) | 0, i = (i = i + Math.imul(m, K) | 0) + Math.imul(v, G) | 0, o = o + Math.imul(v, K) | 0, n = n + Math.imul(p, J) | 0, i = (i = i + Math.imul(p, W) | 0) + Math.imul(b, J) | 0, o = o + Math.imul(b, W) | 0;
              var ge = (c + (n = n + Math.imul(d, X) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, Q) | 0) + Math.imul(l, X) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(l, Q) | 0) + (i >>> 13) | 0) + (ge >>> 26) | 0, ge &= 67108863, n = Math.imul(_, H), i = (i = Math.imul(_, q)) + Math.imul(S, H) | 0, o = Math.imul(S, q), n = n + Math.imul(w, G) | 0, i = (i = i + Math.imul(w, K) | 0) + Math.imul(A, G) | 0, o = o + Math.imul(A, K) | 0, n = n + Math.imul(m, J) | 0, i = (i = i + Math.imul(m, W) | 0) + Math.imul(v, J) | 0, o = o + Math.imul(v, W) | 0, n = n + Math.imul(p, X) | 0, i = (i = i + Math.imul(p, Q) | 0) + Math.imul(b, X) | 0, o = o + Math.imul(b, Q) | 0;
              var we = (c + (n = n + Math.imul(d, $) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, ee) | 0) + Math.imul(l, $) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(l, ee) | 0) + (i >>> 13) | 0) + (we >>> 26) | 0, we &= 67108863, n = Math.imul(x, H), i = (i = Math.imul(x, q)) + Math.imul(P, H) | 0, o = Math.imul(P, q), n = n + Math.imul(_, G) | 0, i = (i = i + Math.imul(_, K) | 0) + Math.imul(S, G) | 0, o = o + Math.imul(S, K) | 0, n = n + Math.imul(w, J) | 0, i = (i = i + Math.imul(w, W) | 0) + Math.imul(A, J) | 0, o = o + Math.imul(A, W) | 0, n = n + Math.imul(m, X) | 0, i = (i = i + Math.imul(m, Q) | 0) + Math.imul(v, X) | 0, o = o + Math.imul(v, Q) | 0, n = n + Math.imul(p, $) | 0, i = (i = i + Math.imul(p, ee) | 0) + Math.imul(b, $) | 0, o = o + Math.imul(b, ee) | 0;
              var Ae = (c + (n = n + Math.imul(d, re) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, ne) | 0) + Math.imul(l, re) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(l, ne) | 0) + (i >>> 13) | 0) + (Ae >>> 26) | 0, Ae &= 67108863, n = Math.imul(B, H), i = (i = Math.imul(B, q)) + Math.imul(T, H) | 0, o = Math.imul(T, q), n = n + Math.imul(x, G) | 0, i = (i = i + Math.imul(x, K) | 0) + Math.imul(P, G) | 0, o = o + Math.imul(P, K) | 0, n = n + Math.imul(_, J) | 0, i = (i = i + Math.imul(_, W) | 0) + Math.imul(S, J) | 0, o = o + Math.imul(S, W) | 0, n = n + Math.imul(w, X) | 0, i = (i = i + Math.imul(w, Q) | 0) + Math.imul(A, X) | 0, o = o + Math.imul(A, Q) | 0, n = n + Math.imul(m, $) | 0, i = (i = i + Math.imul(m, ee) | 0) + Math.imul(v, $) | 0, o = o + Math.imul(v, ee) | 0, n = n + Math.imul(p, re) | 0, i = (i = i + Math.imul(p, ne) | 0) + Math.imul(b, re) | 0, o = o + Math.imul(b, ne) | 0;
              var ke = (c + (n = n + Math.imul(d, oe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, ae) | 0) + Math.imul(l, oe) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(l, ae) | 0) + (i >>> 13) | 0) + (ke >>> 26) | 0, ke &= 67108863, n = Math.imul(I, H), i = (i = Math.imul(I, q)) + Math.imul(M, H) | 0, o = Math.imul(M, q), n = n + Math.imul(B, G) | 0, i = (i = i + Math.imul(B, K) | 0) + Math.imul(T, G) | 0, o = o + Math.imul(T, K) | 0, n = n + Math.imul(x, J) | 0, i = (i = i + Math.imul(x, W) | 0) + Math.imul(P, J) | 0, o = o + Math.imul(P, W) | 0, n = n + Math.imul(_, X) | 0, i = (i = i + Math.imul(_, Q) | 0) + Math.imul(S, X) | 0, o = o + Math.imul(S, Q) | 0, n = n + Math.imul(w, $) | 0, i = (i = i + Math.imul(w, ee) | 0) + Math.imul(A, $) | 0, o = o + Math.imul(A, ee) | 0, n = n + Math.imul(m, re) | 0, i = (i = i + Math.imul(m, ne) | 0) + Math.imul(v, re) | 0, o = o + Math.imul(v, ne) | 0, n = n + Math.imul(p, oe) | 0, i = (i = i + Math.imul(p, ae) | 0) + Math.imul(b, oe) | 0, o = o + Math.imul(b, ae) | 0;
              var _e = (c + (n = n + Math.imul(d, ue) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, ce) | 0) + Math.imul(l, ue) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(l, ce) | 0) + (i >>> 13) | 0) + (_e >>> 26) | 0, _e &= 67108863, n = Math.imul(R, H), i = (i = Math.imul(R, q)) + Math.imul(j, H) | 0, o = Math.imul(j, q), n = n + Math.imul(I, G) | 0, i = (i = i + Math.imul(I, K) | 0) + Math.imul(M, G) | 0, o = o + Math.imul(M, K) | 0, n = n + Math.imul(B, J) | 0, i = (i = i + Math.imul(B, W) | 0) + Math.imul(T, J) | 0, o = o + Math.imul(T, W) | 0, n = n + Math.imul(x, X) | 0, i = (i = i + Math.imul(x, Q) | 0) + Math.imul(P, X) | 0, o = o + Math.imul(P, Q) | 0, n = n + Math.imul(_, $) | 0, i = (i = i + Math.imul(_, ee) | 0) + Math.imul(S, $) | 0, o = o + Math.imul(S, ee) | 0, n = n + Math.imul(w, re) | 0, i = (i = i + Math.imul(w, ne) | 0) + Math.imul(A, re) | 0, o = o + Math.imul(A, ne) | 0, n = n + Math.imul(m, oe) | 0, i = (i = i + Math.imul(m, ae) | 0) + Math.imul(v, oe) | 0, o = o + Math.imul(v, ae) | 0, n = n + Math.imul(p, ue) | 0, i = (i = i + Math.imul(p, ce) | 0) + Math.imul(b, ue) | 0, o = o + Math.imul(b, ce) | 0;
              var Se = (c + (n = n + Math.imul(d, de) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, le) | 0) + Math.imul(l, de) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(l, le) | 0) + (i >>> 13) | 0) + (Se >>> 26) | 0, Se &= 67108863, n = Math.imul(F, H), i = (i = Math.imul(F, q)) + Math.imul(L, H) | 0, o = Math.imul(L, q), n = n + Math.imul(R, G) | 0, i = (i = i + Math.imul(R, K) | 0) + Math.imul(j, G) | 0, o = o + Math.imul(j, K) | 0, n = n + Math.imul(I, J) | 0, i = (i = i + Math.imul(I, W) | 0) + Math.imul(M, J) | 0, o = o + Math.imul(M, W) | 0, n = n + Math.imul(B, X) | 0, i = (i = i + Math.imul(B, Q) | 0) + Math.imul(T, X) | 0, o = o + Math.imul(T, Q) | 0, n = n + Math.imul(x, $) | 0, i = (i = i + Math.imul(x, ee) | 0) + Math.imul(P, $) | 0, o = o + Math.imul(P, ee) | 0, n = n + Math.imul(_, re) | 0, i = (i = i + Math.imul(_, ne) | 0) + Math.imul(S, re) | 0, o = o + Math.imul(S, ne) | 0, n = n + Math.imul(w, oe) | 0, i = (i = i + Math.imul(w, ae) | 0) + Math.imul(A, oe) | 0, o = o + Math.imul(A, ae) | 0, n = n + Math.imul(m, ue) | 0, i = (i = i + Math.imul(m, ce) | 0) + Math.imul(v, ue) | 0, o = o + Math.imul(v, ce) | 0, n = n + Math.imul(p, de) | 0, i = (i = i + Math.imul(p, le) | 0) + Math.imul(b, de) | 0, o = o + Math.imul(b, le) | 0;
              var Ee = (c + (n = n + Math.imul(d, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(d, be) | 0) + Math.imul(l, pe) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(l, be) | 0) + (i >>> 13) | 0) + (Ee >>> 26) | 0, Ee &= 67108863, n = Math.imul(F, G), i = (i = Math.imul(F, K)) + Math.imul(L, G) | 0, o = Math.imul(L, K), n = n + Math.imul(R, J) | 0, i = (i = i + Math.imul(R, W) | 0) + Math.imul(j, J) | 0, o = o + Math.imul(j, W) | 0, n = n + Math.imul(I, X) | 0, i = (i = i + Math.imul(I, Q) | 0) + Math.imul(M, X) | 0, o = o + Math.imul(M, Q) | 0, n = n + Math.imul(B, $) | 0, i = (i = i + Math.imul(B, ee) | 0) + Math.imul(T, $) | 0, o = o + Math.imul(T, ee) | 0, n = n + Math.imul(x, re) | 0, i = (i = i + Math.imul(x, ne) | 0) + Math.imul(P, re) | 0, o = o + Math.imul(P, ne) | 0, n = n + Math.imul(_, oe) | 0, i = (i = i + Math.imul(_, ae) | 0) + Math.imul(S, oe) | 0, o = o + Math.imul(S, ae) | 0, n = n + Math.imul(w, ue) | 0, i = (i = i + Math.imul(w, ce) | 0) + Math.imul(A, ue) | 0, o = o + Math.imul(A, ce) | 0, n = n + Math.imul(m, de) | 0, i = (i = i + Math.imul(m, le) | 0) + Math.imul(v, de) | 0, o = o + Math.imul(v, le) | 0;
              var xe = (c + (n = n + Math.imul(p, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(p, be) | 0) + Math.imul(b, pe) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(b, be) | 0) + (i >>> 13) | 0) + (xe >>> 26) | 0, xe &= 67108863, n = Math.imul(F, J), i = (i = Math.imul(F, W)) + Math.imul(L, J) | 0, o = Math.imul(L, W), n = n + Math.imul(R, X) | 0, i = (i = i + Math.imul(R, Q) | 0) + Math.imul(j, X) | 0, o = o + Math.imul(j, Q) | 0, n = n + Math.imul(I, $) | 0, i = (i = i + Math.imul(I, ee) | 0) + Math.imul(M, $) | 0, o = o + Math.imul(M, ee) | 0, n = n + Math.imul(B, re) | 0, i = (i = i + Math.imul(B, ne) | 0) + Math.imul(T, re) | 0, o = o + Math.imul(T, ne) | 0, n = n + Math.imul(x, oe) | 0, i = (i = i + Math.imul(x, ae) | 0) + Math.imul(P, oe) | 0, o = o + Math.imul(P, ae) | 0, n = n + Math.imul(_, ue) | 0, i = (i = i + Math.imul(_, ce) | 0) + Math.imul(S, ue) | 0, o = o + Math.imul(S, ce) | 0, n = n + Math.imul(w, de) | 0, i = (i = i + Math.imul(w, le) | 0) + Math.imul(A, de) | 0, o = o + Math.imul(A, le) | 0;
              var Pe = (c + (n = n + Math.imul(m, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(m, be) | 0) + Math.imul(v, pe) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(v, be) | 0) + (i >>> 13) | 0) + (Pe >>> 26) | 0, Pe &= 67108863, n = Math.imul(F, X), i = (i = Math.imul(F, Q)) + Math.imul(L, X) | 0, o = Math.imul(L, Q), n = n + Math.imul(R, $) | 0, i = (i = i + Math.imul(R, ee) | 0) + Math.imul(j, $) | 0, o = o + Math.imul(j, ee) | 0, n = n + Math.imul(I, re) | 0, i = (i = i + Math.imul(I, ne) | 0) + Math.imul(M, re) | 0, o = o + Math.imul(M, ne) | 0, n = n + Math.imul(B, oe) | 0, i = (i = i + Math.imul(B, ae) | 0) + Math.imul(T, oe) | 0, o = o + Math.imul(T, ae) | 0, n = n + Math.imul(x, ue) | 0, i = (i = i + Math.imul(x, ce) | 0) + Math.imul(P, ue) | 0, o = o + Math.imul(P, ce) | 0, n = n + Math.imul(_, de) | 0, i = (i = i + Math.imul(_, le) | 0) + Math.imul(S, de) | 0, o = o + Math.imul(S, le) | 0;
              var Oe = (c + (n = n + Math.imul(w, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(w, be) | 0) + Math.imul(A, pe) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(A, be) | 0) + (i >>> 13) | 0) + (Oe >>> 26) | 0, Oe &= 67108863, n = Math.imul(F, $), i = (i = Math.imul(F, ee)) + Math.imul(L, $) | 0, o = Math.imul(L, ee), n = n + Math.imul(R, re) | 0, i = (i = i + Math.imul(R, ne) | 0) + Math.imul(j, re) | 0, o = o + Math.imul(j, ne) | 0, n = n + Math.imul(I, oe) | 0, i = (i = i + Math.imul(I, ae) | 0) + Math.imul(M, oe) | 0, o = o + Math.imul(M, ae) | 0, n = n + Math.imul(B, ue) | 0, i = (i = i + Math.imul(B, ce) | 0) + Math.imul(T, ue) | 0, o = o + Math.imul(T, ce) | 0, n = n + Math.imul(x, de) | 0, i = (i = i + Math.imul(x, le) | 0) + Math.imul(P, de) | 0, o = o + Math.imul(P, le) | 0;
              var Be = (c + (n = n + Math.imul(_, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(_, be) | 0) + Math.imul(S, pe) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(S, be) | 0) + (i >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, n = Math.imul(F, re), i = (i = Math.imul(F, ne)) + Math.imul(L, re) | 0, o = Math.imul(L, ne), n = n + Math.imul(R, oe) | 0, i = (i = i + Math.imul(R, ae) | 0) + Math.imul(j, oe) | 0, o = o + Math.imul(j, ae) | 0, n = n + Math.imul(I, ue) | 0, i = (i = i + Math.imul(I, ce) | 0) + Math.imul(M, ue) | 0, o = o + Math.imul(M, ce) | 0, n = n + Math.imul(B, de) | 0, i = (i = i + Math.imul(B, le) | 0) + Math.imul(T, de) | 0, o = o + Math.imul(T, le) | 0;
              var Te = (c + (n = n + Math.imul(x, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(x, be) | 0) + Math.imul(P, pe) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(P, be) | 0) + (i >>> 13) | 0) + (Te >>> 26) | 0, Te &= 67108863, n = Math.imul(F, oe), i = (i = Math.imul(F, ae)) + Math.imul(L, oe) | 0, o = Math.imul(L, ae), n = n + Math.imul(R, ue) | 0, i = (i = i + Math.imul(R, ce) | 0) + Math.imul(j, ue) | 0, o = o + Math.imul(j, ce) | 0, n = n + Math.imul(I, de) | 0, i = (i = i + Math.imul(I, le) | 0) + Math.imul(M, de) | 0, o = o + Math.imul(M, le) | 0;
              var Ce = (c + (n = n + Math.imul(B, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(B, be) | 0) + Math.imul(T, pe) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(T, be) | 0) + (i >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, n = Math.imul(F, ue), i = (i = Math.imul(F, ce)) + Math.imul(L, ue) | 0, o = Math.imul(L, ce), n = n + Math.imul(R, de) | 0, i = (i = i + Math.imul(R, le) | 0) + Math.imul(j, de) | 0, o = o + Math.imul(j, le) | 0;
              var Ie = (c + (n = n + Math.imul(I, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(I, be) | 0) + Math.imul(M, pe) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(M, be) | 0) + (i >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, n = Math.imul(F, de), i = (i = Math.imul(F, le)) + Math.imul(L, de) | 0, o = Math.imul(L, le);
              var Me = (c + (n = n + Math.imul(R, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(R, be) | 0) + Math.imul(j, pe) | 0)) << 13) | 0;
              c = ((o = o + Math.imul(j, be) | 0) + (i >>> 13) | 0) + (Me >>> 26) | 0, Me &= 67108863;
              var Ue = (c + (n = Math.imul(F, pe)) | 0) + ((8191 & (i = (i = Math.imul(F, be)) + Math.imul(L, pe) | 0)) << 13) | 0;
              return c = ((o = Math.imul(L, be)) + (i >>> 13) | 0) + (Ue >>> 26) | 0, Ue &= 67108863, u[0] = ye, u[1] = me, u[2] = ve, u[3] = ge, u[4] = we, u[5] = Ae, u[6] = ke, u[7] = _e, u[8] = Se, u[9] = Ee, u[10] = xe, u[11] = Pe, u[12] = Oe, u[13] = Be, u[14] = Te, u[15] = Ce, u[16] = Ie, u[17] = Me, u[18] = Ue, 0 !== c && (u[19] = c, r.length++), r;
            };
            function v(e, t, r) {
              r.negative = t.negative ^ e.negative, r.length = e.length + t.length;
              for (var n = 0, i = 0, o = 0; o < r.length - 1; o++) {
                var a = i;
                i = 0;
                for (var s = 67108863 & n, u = Math.min(o, t.length - 1), c = Math.max(0, o - e.length + 1); c <= u; c++) {
                  var f = o - c,
                    d = (0 | e.words[f]) * (0 | t.words[c]),
                    l = 67108863 & d;
                  s = 67108863 & (l = l + s | 0), i += (a = (a = a + (d / 67108864 | 0) | 0) + (l >>> 26) | 0) >>> 26, a &= 67108863;
                }
                r.words[o] = s, n = a, a = i;
              }
              return 0 !== n ? r.words[o] = n : r.length--, r._strip();
            }
            function g(e, t, r) {
              return v(e, t, r);
            }
            function w(e, t) {
              this.x = e, this.y = t;
            }
            Math.imul || (m = y), a.prototype.mulTo = function (e, t) {
              var r = this.length + e.length;
              return 10 === this.length && 10 === e.length ? m(this, e, t) : r < 63 ? y(this, e, t) : r < 1024 ? v(this, e, t) : g(this, e, t);
            }, w.prototype.makeRBT = function (e) {
              for (var t = new Array(e), r = a.prototype._countBits(e) - 1, n = 0; n < e; n++) t[n] = this.revBin(n, r, e);
              return t;
            }, w.prototype.revBin = function (e, t, r) {
              if (0 === e || e === r - 1) return e;
              for (var n = 0, i = 0; i < t; i++) n |= (1 & e) << t - i - 1, e >>= 1;
              return n;
            }, w.prototype.permute = function (e, t, r, n, i, o) {
              for (var a = 0; a < o; a++) n[a] = t[e[a]], i[a] = r[e[a]];
            }, w.prototype.transform = function (e, t, r, n, i, o) {
              this.permute(o, e, t, r, n, i);
              for (var a = 1; a < i; a <<= 1) for (var s = a << 1, u = Math.cos(2 * Math.PI / s), c = Math.sin(2 * Math.PI / s), f = 0; f < i; f += s) for (var d = u, l = c, h = 0; h < a; h++) {
                var p = r[f + h],
                  b = n[f + h],
                  y = r[f + h + a],
                  m = n[f + h + a],
                  v = d * y - l * m;
                m = d * m + l * y, y = v, r[f + h] = p + y, n[f + h] = b + m, r[f + h + a] = p - y, n[f + h + a] = b - m, h !== s && (v = u * d - c * l, l = u * l + c * d, d = v);
              }
            }, w.prototype.guessLen13b = function (e, t) {
              var r = 1 | Math.max(t, e),
                n = 1 & r,
                i = 0;
              for (r = r / 2 | 0; r; r >>>= 1) i++;
              return 1 << i + 1 + n;
            }, w.prototype.conjugate = function (e, t, r) {
              if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
                var i = e[n];
                e[n] = e[r - n - 1], e[r - n - 1] = i, i = t[n], t[n] = -t[r - n - 1], t[r - n - 1] = -i;
              }
            }, w.prototype.normalize13b = function (e, t) {
              for (var r = 0, n = 0; n < t / 2; n++) {
                var i = 8192 * Math.round(e[2 * n + 1] / t) + Math.round(e[2 * n] / t) + r;
                e[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
              }
              return e;
            }, w.prototype.convert13b = function (e, t, r, n) {
              for (var o = 0, a = 0; a < t; a++) o += 0 | e[a], r[2 * a] = 8191 & o, o >>>= 13, r[2 * a + 1] = 8191 & o, o >>>= 13;
              for (a = 2 * t; a < n; ++a) r[a] = 0;
              i(0 === o), i(0 == (-8192 & o));
            }, w.prototype.stub = function (e) {
              for (var t = new Array(e), r = 0; r < e; r++) t[r] = 0;
              return t;
            }, w.prototype.mulp = function (e, t, r) {
              var n = 2 * this.guessLen13b(e.length, t.length),
                i = this.makeRBT(n),
                o = this.stub(n),
                a = new Array(n),
                s = new Array(n),
                u = new Array(n),
                c = new Array(n),
                f = new Array(n),
                d = new Array(n),
                l = r.words;
              l.length = n, this.convert13b(e.words, e.length, a, n), this.convert13b(t.words, t.length, c, n), this.transform(a, o, s, u, n, i), this.transform(c, o, f, d, n, i);
              for (var h = 0; h < n; h++) {
                var p = s[h] * f[h] - u[h] * d[h];
                u[h] = s[h] * d[h] + u[h] * f[h], s[h] = p;
              }
              return this.conjugate(s, u, n), this.transform(s, u, l, o, n, i), this.conjugate(l, o, n), this.normalize13b(l, n), r.negative = e.negative ^ t.negative, r.length = e.length + t.length, r._strip();
            }, a.prototype.mul = function (e) {
              var t = new a(null);
              return t.words = new Array(this.length + e.length), this.mulTo(e, t);
            }, a.prototype.mulf = function (e) {
              var t = new a(null);
              return t.words = new Array(this.length + e.length), g(this, e, t);
            }, a.prototype.imul = function (e) {
              return this.clone().mulTo(e, this);
            }, a.prototype.imuln = function (e) {
              var t = e < 0;
              t && (e = -e), i("number" == typeof e), i(e < 67108864);
              for (var r = 0, n = 0; n < this.length; n++) {
                var o = (0 | this.words[n]) * e,
                  a = (67108863 & o) + (67108863 & r);
                r >>= 26, r += o / 67108864 | 0, r += a >>> 26, this.words[n] = 67108863 & a;
              }
              return 0 !== r && (this.words[n] = r, this.length++), t ? this.ineg() : this;
            }, a.prototype.muln = function (e) {
              return this.clone().imuln(e);
            }, a.prototype.sqr = function () {
              return this.mul(this);
            }, a.prototype.isqr = function () {
              return this.imul(this.clone());
            }, a.prototype.pow = function (e) {
              var t = function (e) {
                for (var t = new Array(e.bitLength()), r = 0; r < t.length; r++) {
                  var n = r / 26 | 0,
                    i = r % 26;
                  t[r] = e.words[n] >>> i & 1;
                }
                return t;
              }(e);
              if (0 === t.length) return new a(1);
              for (var r = this, n = 0; n < t.length && 0 === t[n]; n++, r = r.sqr());
              if (++n < t.length) for (var i = r.sqr(); n < t.length; n++, i = i.sqr()) 0 !== t[n] && (r = r.mul(i));
              return r;
            }, a.prototype.iushln = function (e) {
              i("number" == typeof e && e >= 0);
              var t,
                r = e % 26,
                n = (e - r) / 26,
                o = 67108863 >>> 26 - r << 26 - r;
              if (0 !== r) {
                var a = 0;
                for (t = 0; t < this.length; t++) {
                  var s = this.words[t] & o,
                    u = (0 | this.words[t]) - s << r;
                  this.words[t] = u | a, a = s >>> 26 - r;
                }
                a && (this.words[t] = a, this.length++);
              }
              if (0 !== n) {
                for (t = this.length - 1; t >= 0; t--) this.words[t + n] = this.words[t];
                for (t = 0; t < n; t++) this.words[t] = 0;
                this.length += n;
              }
              return this._strip();
            }, a.prototype.ishln = function (e) {
              return i(0 === this.negative), this.iushln(e);
            }, a.prototype.iushrn = function (e, t, r) {
              var n;
              i("number" == typeof e && e >= 0), n = t ? (t - t % 26) / 26 : 0;
              var o = e % 26,
                a = Math.min((e - o) / 26, this.length),
                s = 67108863 ^ 67108863 >>> o << o,
                u = r;
              if (n -= a, n = Math.max(0, n), u) {
                for (var c = 0; c < a; c++) u.words[c] = this.words[c];
                u.length = a;
              }
              if (0 === a) ;else if (this.length > a) for (this.length -= a, c = 0; c < this.length; c++) this.words[c] = this.words[c + a];else this.words[0] = 0, this.length = 1;
              var f = 0;
              for (c = this.length - 1; c >= 0 && (0 !== f || c >= n); c--) {
                var d = 0 | this.words[c];
                this.words[c] = f << 26 - o | d >>> o, f = d & s;
              }
              return u && 0 !== f && (u.words[u.length++] = f), 0 === this.length && (this.words[0] = 0, this.length = 1), this._strip();
            }, a.prototype.ishrn = function (e, t, r) {
              return i(0 === this.negative), this.iushrn(e, t, r);
            }, a.prototype.shln = function (e) {
              return this.clone().ishln(e);
            }, a.prototype.ushln = function (e) {
              return this.clone().iushln(e);
            }, a.prototype.shrn = function (e) {
              return this.clone().ishrn(e);
            }, a.prototype.ushrn = function (e) {
              return this.clone().iushrn(e);
            }, a.prototype.testn = function (e) {
              i("number" == typeof e && e >= 0);
              var t = e % 26,
                r = (e - t) / 26,
                n = 1 << t;
              return !(this.length <= r || !(this.words[r] & n));
            }, a.prototype.imaskn = function (e) {
              i("number" == typeof e && e >= 0);
              var t = e % 26,
                r = (e - t) / 26;
              if (i(0 === this.negative, "imaskn works only with positive numbers"), this.length <= r) return this;
              if (0 !== t && r++, this.length = Math.min(r, this.length), 0 !== t) {
                var n = 67108863 ^ 67108863 >>> t << t;
                this.words[this.length - 1] &= n;
              }
              return this._strip();
            }, a.prototype.maskn = function (e) {
              return this.clone().imaskn(e);
            }, a.prototype.iaddn = function (e) {
              return i("number" == typeof e), i(e < 67108864), e < 0 ? this.isubn(-e) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) <= e ? (this.words[0] = e - (0 | this.words[0]), this.negative = 0, this) : (this.negative = 0, this.isubn(e), this.negative = 1, this) : this._iaddn(e);
            }, a.prototype._iaddn = function (e) {
              this.words[0] += e;
              for (var t = 0; t < this.length && this.words[t] >= 67108864; t++) this.words[t] -= 67108864, t === this.length - 1 ? this.words[t + 1] = 1 : this.words[t + 1]++;
              return this.length = Math.max(this.length, t + 1), this;
            }, a.prototype.isubn = function (e) {
              if (i("number" == typeof e), i(e < 67108864), e < 0) return this.iaddn(-e);
              if (0 !== this.negative) return this.negative = 0, this.iaddn(e), this.negative = 1, this;
              if (this.words[0] -= e, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1;else for (var t = 0; t < this.length && this.words[t] < 0; t++) this.words[t] += 67108864, this.words[t + 1] -= 1;
              return this._strip();
            }, a.prototype.addn = function (e) {
              return this.clone().iaddn(e);
            }, a.prototype.subn = function (e) {
              return this.clone().isubn(e);
            }, a.prototype.iabs = function () {
              return this.negative = 0, this;
            }, a.prototype.abs = function () {
              return this.clone().iabs();
            }, a.prototype._ishlnsubmul = function (e, t, r) {
              var n,
                o,
                a = e.length + r;
              this._expand(a);
              var s = 0;
              for (n = 0; n < e.length; n++) {
                o = (0 | this.words[n + r]) + s;
                var u = (0 | e.words[n]) * t;
                s = ((o -= 67108863 & u) >> 26) - (u / 67108864 | 0), this.words[n + r] = 67108863 & o;
              }
              for (; n < this.length - r; n++) s = (o = (0 | this.words[n + r]) + s) >> 26, this.words[n + r] = 67108863 & o;
              if (0 === s) return this._strip();
              for (i(-1 === s), s = 0, n = 0; n < this.length; n++) s = (o = -(0 | this.words[n]) + s) >> 26, this.words[n] = 67108863 & o;
              return this.negative = 1, this._strip();
            }, a.prototype._wordDiv = function (e, t) {
              var r = (this.length, e.length),
                n = this.clone(),
                i = e,
                o = 0 | i.words[i.length - 1];
              0 != (r = 26 - this._countBits(o)) && (i = i.ushln(r), n.iushln(r), o = 0 | i.words[i.length - 1]);
              var s,
                u = n.length - i.length;
              if ("mod" !== t) {
                (s = new a(null)).length = u + 1, s.words = new Array(s.length);
                for (var c = 0; c < s.length; c++) s.words[c] = 0;
              }
              var f = n.clone()._ishlnsubmul(i, 1, u);
              0 === f.negative && (n = f, s && (s.words[u] = 1));
              for (var d = u - 1; d >= 0; d--) {
                var l = 67108864 * (0 | n.words[i.length + d]) + (0 | n.words[i.length + d - 1]);
                for (l = Math.min(l / o | 0, 67108863), n._ishlnsubmul(i, l, d); 0 !== n.negative;) l--, n.negative = 0, n._ishlnsubmul(i, 1, d), n.isZero() || (n.negative ^= 1);
                s && (s.words[d] = l);
              }
              return s && s._strip(), n._strip(), "div" !== t && 0 !== r && n.iushrn(r), {
                div: s || null,
                mod: n
              };
            }, a.prototype.divmod = function (e, t, r) {
              return i(!e.isZero()), this.isZero() ? {
                div: new a(0),
                mod: new a(0)
              } : 0 !== this.negative && 0 === e.negative ? (s = this.neg().divmod(e, t), "mod" !== t && (n = s.div.neg()), "div" !== t && (o = s.mod.neg(), r && 0 !== o.negative && o.iadd(e)), {
                div: n,
                mod: o
              }) : 0 === this.negative && 0 !== e.negative ? (s = this.divmod(e.neg(), t), "mod" !== t && (n = s.div.neg()), {
                div: n,
                mod: s.mod
              }) : 0 != (this.negative & e.negative) ? (s = this.neg().divmod(e.neg(), t), "div" !== t && (o = s.mod.neg(), r && 0 !== o.negative && o.isub(e)), {
                div: s.div,
                mod: o
              }) : e.length > this.length || this.cmp(e) < 0 ? {
                div: new a(0),
                mod: this
              } : 1 === e.length ? "div" === t ? {
                div: this.divn(e.words[0]),
                mod: null
              } : "mod" === t ? {
                div: null,
                mod: new a(this.modrn(e.words[0]))
              } : {
                div: this.divn(e.words[0]),
                mod: new a(this.modrn(e.words[0]))
              } : this._wordDiv(e, t);
              var n, o, s;
            }, a.prototype.div = function (e) {
              return this.divmod(e, "div", !1).div;
            }, a.prototype.mod = function (e) {
              return this.divmod(e, "mod", !1).mod;
            }, a.prototype.umod = function (e) {
              return this.divmod(e, "mod", !0).mod;
            }, a.prototype.divRound = function (e) {
              var t = this.divmod(e);
              if (t.mod.isZero()) return t.div;
              var r = 0 !== t.div.negative ? t.mod.isub(e) : t.mod,
                n = e.ushrn(1),
                i = e.andln(1),
                o = r.cmp(n);
              return o < 0 || 1 === i && 0 === o ? t.div : 0 !== t.div.negative ? t.div.isubn(1) : t.div.iaddn(1);
            }, a.prototype.modrn = function (e) {
              var t = e < 0;
              t && (e = -e), i(e <= 67108863);
              for (var r = (1 << 26) % e, n = 0, o = this.length - 1; o >= 0; o--) n = (r * n + (0 | this.words[o])) % e;
              return t ? -n : n;
            }, a.prototype.modn = function (e) {
              return this.modrn(e);
            }, a.prototype.idivn = function (e) {
              var t = e < 0;
              t && (e = -e), i(e <= 67108863);
              for (var r = 0, n = this.length - 1; n >= 0; n--) {
                var o = (0 | this.words[n]) + 67108864 * r;
                this.words[n] = o / e | 0, r = o % e;
              }
              return this._strip(), t ? this.ineg() : this;
            }, a.prototype.divn = function (e) {
              return this.clone().idivn(e);
            }, a.prototype.egcd = function (e) {
              i(0 === e.negative), i(!e.isZero());
              var t = this,
                r = e.clone();
              t = 0 !== t.negative ? t.umod(e) : t.clone();
              for (var n = new a(1), o = new a(0), s = new a(0), u = new a(1), c = 0; t.isEven() && r.isEven();) t.iushrn(1), r.iushrn(1), ++c;
              for (var f = r.clone(), d = t.clone(); !t.isZero();) {
                for (var l = 0, h = 1; 0 == (t.words[0] & h) && l < 26; ++l, h <<= 1);
                if (l > 0) for (t.iushrn(l); l-- > 0;) (n.isOdd() || o.isOdd()) && (n.iadd(f), o.isub(d)), n.iushrn(1), o.iushrn(1);
                for (var p = 0, b = 1; 0 == (r.words[0] & b) && p < 26; ++p, b <<= 1);
                if (p > 0) for (r.iushrn(p); p-- > 0;) (s.isOdd() || u.isOdd()) && (s.iadd(f), u.isub(d)), s.iushrn(1), u.iushrn(1);
                t.cmp(r) >= 0 ? (t.isub(r), n.isub(s), o.isub(u)) : (r.isub(t), s.isub(n), u.isub(o));
              }
              return {
                a: s,
                b: u,
                gcd: r.iushln(c)
              };
            }, a.prototype._invmp = function (e) {
              i(0 === e.negative), i(!e.isZero());
              var t = this,
                r = e.clone();
              t = 0 !== t.negative ? t.umod(e) : t.clone();
              for (var n, o = new a(1), s = new a(0), u = r.clone(); t.cmpn(1) > 0 && r.cmpn(1) > 0;) {
                for (var c = 0, f = 1; 0 == (t.words[0] & f) && c < 26; ++c, f <<= 1);
                if (c > 0) for (t.iushrn(c); c-- > 0;) o.isOdd() && o.iadd(u), o.iushrn(1);
                for (var d = 0, l = 1; 0 == (r.words[0] & l) && d < 26; ++d, l <<= 1);
                if (d > 0) for (r.iushrn(d); d-- > 0;) s.isOdd() && s.iadd(u), s.iushrn(1);
                t.cmp(r) >= 0 ? (t.isub(r), o.isub(s)) : (r.isub(t), s.isub(o));
              }
              return (n = 0 === t.cmpn(1) ? o : s).cmpn(0) < 0 && n.iadd(e), n;
            }, a.prototype.gcd = function (e) {
              if (this.isZero()) return e.abs();
              if (e.isZero()) return this.abs();
              var t = this.clone(),
                r = e.clone();
              t.negative = 0, r.negative = 0;
              for (var n = 0; t.isEven() && r.isEven(); n++) t.iushrn(1), r.iushrn(1);
              for (;;) {
                for (; t.isEven();) t.iushrn(1);
                for (; r.isEven();) r.iushrn(1);
                var i = t.cmp(r);
                if (i < 0) {
                  var o = t;
                  t = r, r = o;
                } else if (0 === i || 0 === r.cmpn(1)) break;
                t.isub(r);
              }
              return r.iushln(n);
            }, a.prototype.invm = function (e) {
              return this.egcd(e).a.umod(e);
            }, a.prototype.isEven = function () {
              return 0 == (1 & this.words[0]);
            }, a.prototype.isOdd = function () {
              return 1 == (1 & this.words[0]);
            }, a.prototype.andln = function (e) {
              return this.words[0] & e;
            }, a.prototype.bincn = function (e) {
              i("number" == typeof e);
              var t = e % 26,
                r = (e - t) / 26,
                n = 1 << t;
              if (this.length <= r) return this._expand(r + 1), this.words[r] |= n, this;
              for (var o = n, a = r; 0 !== o && a < this.length; a++) {
                var s = 0 | this.words[a];
                o = (s += o) >>> 26, s &= 67108863, this.words[a] = s;
              }
              return 0 !== o && (this.words[a] = o, this.length++), this;
            }, a.prototype.isZero = function () {
              return 1 === this.length && 0 === this.words[0];
            }, a.prototype.cmpn = function (e) {
              var t,
                r = e < 0;
              if (0 !== this.negative && !r) return -1;
              if (0 === this.negative && r) return 1;
              if (this._strip(), this.length > 1) t = 1;else {
                r && (e = -e), i(e <= 67108863, "Number is too big");
                var n = 0 | this.words[0];
                t = n === e ? 0 : n < e ? -1 : 1;
              }
              return 0 !== this.negative ? 0 | -t : t;
            }, a.prototype.cmp = function (e) {
              if (0 !== this.negative && 0 === e.negative) return -1;
              if (0 === this.negative && 0 !== e.negative) return 1;
              var t = this.ucmp(e);
              return 0 !== this.negative ? 0 | -t : t;
            }, a.prototype.ucmp = function (e) {
              if (this.length > e.length) return 1;
              if (this.length < e.length) return -1;
              for (var t = 0, r = this.length - 1; r >= 0; r--) {
                var n = 0 | this.words[r],
                  i = 0 | e.words[r];
                if (n !== i) {
                  n < i ? t = -1 : n > i && (t = 1);
                  break;
                }
              }
              return t;
            }, a.prototype.gtn = function (e) {
              return 1 === this.cmpn(e);
            }, a.prototype.gt = function (e) {
              return 1 === this.cmp(e);
            }, a.prototype.gten = function (e) {
              return this.cmpn(e) >= 0;
            }, a.prototype.gte = function (e) {
              return this.cmp(e) >= 0;
            }, a.prototype.ltn = function (e) {
              return -1 === this.cmpn(e);
            }, a.prototype.lt = function (e) {
              return -1 === this.cmp(e);
            }, a.prototype.lten = function (e) {
              return this.cmpn(e) <= 0;
            }, a.prototype.lte = function (e) {
              return this.cmp(e) <= 0;
            }, a.prototype.eqn = function (e) {
              return 0 === this.cmpn(e);
            }, a.prototype.eq = function (e) {
              return 0 === this.cmp(e);
            }, a.red = function (e) {
              return new P(e);
            }, a.prototype.toRed = function (e) {
              return i(!this.red, "Already a number in reduction context"), i(0 === this.negative, "red works only with positives"), e.convertTo(this)._forceRed(e);
            }, a.prototype.fromRed = function () {
              return i(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
            }, a.prototype._forceRed = function (e) {
              return this.red = e, this;
            }, a.prototype.forceRed = function (e) {
              return i(!this.red, "Already a number in reduction context"), this._forceRed(e);
            }, a.prototype.redAdd = function (e) {
              return i(this.red, "redAdd works only with red numbers"), this.red.add(this, e);
            }, a.prototype.redIAdd = function (e) {
              return i(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, e);
            }, a.prototype.redSub = function (e) {
              return i(this.red, "redSub works only with red numbers"), this.red.sub(this, e);
            }, a.prototype.redISub = function (e) {
              return i(this.red, "redISub works only with red numbers"), this.red.isub(this, e);
            }, a.prototype.redShl = function (e) {
              return i(this.red, "redShl works only with red numbers"), this.red.shl(this, e);
            }, a.prototype.redMul = function (e) {
              return i(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.mul(this, e);
            }, a.prototype.redIMul = function (e) {
              return i(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.imul(this, e);
            }, a.prototype.redSqr = function () {
              return i(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
            }, a.prototype.redISqr = function () {
              return i(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
            }, a.prototype.redSqrt = function () {
              return i(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
            }, a.prototype.redInvm = function () {
              return i(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
            }, a.prototype.redNeg = function () {
              return i(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
            }, a.prototype.redPow = function (e) {
              return i(this.red && !e.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, e);
            };
            var A = {
              k256: null,
              p224: null,
              p192: null,
              p25519: null
            };
            function k(e, t) {
              this.name = e, this.p = new a(t, 16), this.n = this.p.bitLength(), this.k = new a(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
            }
            function _() {
              k.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
            }
            function S() {
              k.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
            }
            function E() {
              k.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
            }
            function x() {
              k.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
            }
            function P(e) {
              if ("string" == typeof e) {
                var t = a._prime(e);
                this.m = t.p, this.prime = t;
              } else i(e.gtn(1), "modulus must be greater than 1"), this.m = e, this.prime = null;
            }
            function O(e) {
              P.call(this, e), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new a(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
            }
            k.prototype._tmp = function () {
              var e = new a(null);
              return e.words = new Array(Math.ceil(this.n / 13)), e;
            }, k.prototype.ireduce = function (e) {
              var t,
                r = e;
              do {
                this.split(r, this.tmp), t = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength();
              } while (t > this.n);
              var n = t < this.n ? -1 : r.ucmp(this.p);
              return 0 === n ? (r.words[0] = 0, r.length = 1) : n > 0 ? r.isub(this.p) : void 0 !== r.strip ? r.strip() : r._strip(), r;
            }, k.prototype.split = function (e, t) {
              e.iushrn(this.n, 0, t);
            }, k.prototype.imulK = function (e) {
              return e.imul(this.k);
            }, o(_, k), _.prototype.split = function (e, t) {
              for (var r = 4194303, n = Math.min(e.length, 9), i = 0; i < n; i++) t.words[i] = e.words[i];
              if (t.length = n, e.length <= 9) return e.words[0] = 0, void (e.length = 1);
              var o = e.words[9];
              for (t.words[t.length++] = o & r, i = 10; i < e.length; i++) {
                var a = 0 | e.words[i];
                e.words[i - 10] = (a & r) << 4 | o >>> 22, o = a;
              }
              o >>>= 22, e.words[i - 10] = o, 0 === o && e.length > 10 ? e.length -= 10 : e.length -= 9;
            }, _.prototype.imulK = function (e) {
              e.words[e.length] = 0, e.words[e.length + 1] = 0, e.length += 2;
              for (var t = 0, r = 0; r < e.length; r++) {
                var n = 0 | e.words[r];
                t += 977 * n, e.words[r] = 67108863 & t, t = 64 * n + (t / 67108864 | 0);
              }
              return 0 === e.words[e.length - 1] && (e.length--, 0 === e.words[e.length - 1] && e.length--), e;
            }, o(S, k), o(E, k), o(x, k), x.prototype.imulK = function (e) {
              for (var t = 0, r = 0; r < e.length; r++) {
                var n = 19 * (0 | e.words[r]) + t,
                  i = 67108863 & n;
                n >>>= 26, e.words[r] = i, t = n;
              }
              return 0 !== t && (e.words[e.length++] = t), e;
            }, a._prime = function (e) {
              if (A[e]) return A[e];
              var t;
              if ("k256" === e) t = new _();else if ("p224" === e) t = new S();else if ("p192" === e) t = new E();else {
                if ("p25519" !== e) throw new Error("Unknown prime " + e);
                t = new x();
              }
              return A[e] = t, t;
            }, P.prototype._verify1 = function (e) {
              i(0 === e.negative, "red works only with positives"), i(e.red, "red works only with red numbers");
            }, P.prototype._verify2 = function (e, t) {
              i(0 == (e.negative | t.negative), "red works only with positives"), i(e.red && e.red === t.red, "red works only with red numbers");
            }, P.prototype.imod = function (e) {
              return this.prime ? this.prime.ireduce(e)._forceRed(this) : (d(e, e.umod(this.m)._forceRed(this)), e);
            }, P.prototype.neg = function (e) {
              return e.isZero() ? e.clone() : this.m.sub(e)._forceRed(this);
            }, P.prototype.add = function (e, t) {
              this._verify2(e, t);
              var r = e.add(t);
              return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
            }, P.prototype.iadd = function (e, t) {
              this._verify2(e, t);
              var r = e.iadd(t);
              return r.cmp(this.m) >= 0 && r.isub(this.m), r;
            }, P.prototype.sub = function (e, t) {
              this._verify2(e, t);
              var r = e.sub(t);
              return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
            }, P.prototype.isub = function (e, t) {
              this._verify2(e, t);
              var r = e.isub(t);
              return r.cmpn(0) < 0 && r.iadd(this.m), r;
            }, P.prototype.shl = function (e, t) {
              return this._verify1(e), this.imod(e.ushln(t));
            }, P.prototype.imul = function (e, t) {
              return this._verify2(e, t), this.imod(e.imul(t));
            }, P.prototype.mul = function (e, t) {
              return this._verify2(e, t), this.imod(e.mul(t));
            }, P.prototype.isqr = function (e) {
              return this.imul(e, e.clone());
            }, P.prototype.sqr = function (e) {
              return this.mul(e, e);
            }, P.prototype.sqrt = function (e) {
              if (e.isZero()) return e.clone();
              var t = this.m.andln(3);
              if (i(t % 2 == 1), 3 === t) {
                var r = this.m.add(new a(1)).iushrn(2);
                return this.pow(e, r);
              }
              for (var n = this.m.subn(1), o = 0; !n.isZero() && 0 === n.andln(1);) o++, n.iushrn(1);
              i(!n.isZero());
              var s = new a(1).toRed(this),
                u = s.redNeg(),
                c = this.m.subn(1).iushrn(1),
                f = this.m.bitLength();
              for (f = new a(2 * f * f).toRed(this); 0 !== this.pow(f, c).cmp(u);) f.redIAdd(u);
              for (var d = this.pow(f, n), l = this.pow(e, n.addn(1).iushrn(1)), h = this.pow(e, n), p = o; 0 !== h.cmp(s);) {
                for (var b = h, y = 0; 0 !== b.cmp(s); y++) b = b.redSqr();
                i(y < p);
                var m = this.pow(d, new a(1).iushln(p - y - 1));
                l = l.redMul(m), d = m.redSqr(), h = h.redMul(d), p = y;
              }
              return l;
            }, P.prototype.invm = function (e) {
              var t = e._invmp(this.m);
              return 0 !== t.negative ? (t.negative = 0, this.imod(t).redNeg()) : this.imod(t);
            }, P.prototype.pow = function (e, t) {
              if (t.isZero()) return new a(1).toRed(this);
              if (0 === t.cmpn(1)) return e.clone();
              var r = new Array(16);
              r[0] = new a(1).toRed(this), r[1] = e;
              for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], e);
              var i = r[0],
                o = 0,
                s = 0,
                u = t.bitLength() % 26;
              for (0 === u && (u = 26), n = t.length - 1; n >= 0; n--) {
                for (var c = t.words[n], f = u - 1; f >= 0; f--) {
                  var d = c >> f & 1;
                  i !== r[0] && (i = this.sqr(i)), 0 !== d || 0 !== o ? (o <<= 1, o |= d, (4 == ++s || 0 === n && 0 === f) && (i = this.mul(i, r[o]), s = 0, o = 0)) : s = 0;
                }
                u = 26;
              }
              return i;
            }, P.prototype.convertTo = function (e) {
              var t = e.umod(this.m);
              return t === e ? t.clone() : t;
            }, P.prototype.convertFrom = function (e) {
              var t = e.clone();
              return t.red = null, t;
            }, a.mont = function (e) {
              return new O(e);
            }, o(O, P), O.prototype.convertTo = function (e) {
              return this.imod(e.ushln(this.shift));
            }, O.prototype.convertFrom = function (e) {
              var t = this.imod(e.mul(this.rinv));
              return t.red = null, t;
            }, O.prototype.imul = function (e, t) {
              if (e.isZero() || t.isZero()) return e.words[0] = 0, e.length = 1, e;
              var r = e.imul(t),
                n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),
                i = r.isub(n).iushrn(this.shift),
                o = i;
              return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
            }, O.prototype.mul = function (e, t) {
              if (e.isZero() || t.isZero()) return new a(0)._forceRed(this);
              var r = e.mul(t),
                n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),
                i = r.isub(n).iushrn(this.shift),
                o = i;
              return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);
            }, O.prototype.invm = function (e) {
              return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this);
            };
          }(e);
        },
        2202: function _(e, t, r) {
          "use strict";

          var n,
            i = r(8847)(r(3355));
          function o(e) {
            this.rand = e;
          }
          if (e.exports = function (e) {
            return n || (n = new o(null)), n.generate(e);
          }, e.exports.Rand = o, o.prototype.generate = function (e) {
            return this._rand(e);
          }, o.prototype._rand = function (e) {
            if (this.rand.getBytes) return this.rand.getBytes(e);
            for (var t = new Uint8Array(e), r = 0; r < t.length; r++) t[r] = this.rand.getByte();
            return t;
          }, "object" === ("undefined" == typeof self ? "undefined" : (0, i.default)(self))) self.crypto && self.crypto.getRandomValues ? o.prototype._rand = function (e) {
            var t = new Uint8Array(e);
            return self.crypto.getRandomValues(t), t;
          } : self.msCrypto && self.msCrypto.getRandomValues ? o.prototype._rand = function (e) {
            var t = new Uint8Array(e);
            return self.msCrypto.getRandomValues(t), t;
          } : "object" === ("undefined" == typeof window ? "undefined" : (0, i.default)(window)) && (o.prototype._rand = function () {
            throw new Error("Not implemented yet");
          });else try {
            var a = r(9214);
            if ("function" != typeof a.randomBytes) throw new Error("Not supported");
            o.prototype._rand = function (e) {
              return a.randomBytes(e);
            };
          } catch (e) {}
        },
        7494: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer;
          function i(e) {
            n.isBuffer(e) || (e = n.from(e));
            for (var t = e.length / 4 | 0, r = new Array(t), i = 0; i < t; i++) r[i] = e.readUInt32BE(4 * i);
            return r;
          }
          function o(e) {
            for (; 0 < e.length; e++) e[0] = 0;
          }
          function a(e, t, r, n, i) {
            for (var o, a, s, u, c = r[0], f = r[1], d = r[2], l = r[3], h = e[0] ^ t[0], p = e[1] ^ t[1], b = e[2] ^ t[2], y = e[3] ^ t[3], m = 4, v = 1; v < i; v++) o = c[h >>> 24] ^ f[p >>> 16 & 255] ^ d[b >>> 8 & 255] ^ l[255 & y] ^ t[m++], a = c[p >>> 24] ^ f[b >>> 16 & 255] ^ d[y >>> 8 & 255] ^ l[255 & h] ^ t[m++], s = c[b >>> 24] ^ f[y >>> 16 & 255] ^ d[h >>> 8 & 255] ^ l[255 & p] ^ t[m++], u = c[y >>> 24] ^ f[h >>> 16 & 255] ^ d[p >>> 8 & 255] ^ l[255 & b] ^ t[m++], h = o, p = a, b = s, y = u;
            return o = (n[h >>> 24] << 24 | n[p >>> 16 & 255] << 16 | n[b >>> 8 & 255] << 8 | n[255 & y]) ^ t[m++], a = (n[p >>> 24] << 24 | n[b >>> 16 & 255] << 16 | n[y >>> 8 & 255] << 8 | n[255 & h]) ^ t[m++], s = (n[b >>> 24] << 24 | n[y >>> 16 & 255] << 16 | n[h >>> 8 & 255] << 8 | n[255 & p]) ^ t[m++], u = (n[y >>> 24] << 24 | n[h >>> 16 & 255] << 16 | n[p >>> 8 & 255] << 8 | n[255 & b]) ^ t[m++], [o >>>= 0, a >>>= 0, s >>>= 0, u >>>= 0];
          }
          var s = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
            u = function () {
              for (var e = new Array(256), t = 0; t < 256; t++) e[t] = t < 128 ? t << 1 : t << 1 ^ 283;
              for (var r = [], n = [], i = [[], [], [], []], o = [[], [], [], []], a = 0, s = 0, u = 0; u < 256; ++u) {
                var c = s ^ s << 1 ^ s << 2 ^ s << 3 ^ s << 4;
                c = c >>> 8 ^ 255 & c ^ 99, r[a] = c, n[c] = a;
                var f = e[a],
                  d = e[f],
                  l = e[d],
                  h = 257 * e[c] ^ 16843008 * c;
                i[0][a] = h << 24 | h >>> 8, i[1][a] = h << 16 | h >>> 16, i[2][a] = h << 8 | h >>> 24, i[3][a] = h, h = 16843009 * l ^ 65537 * d ^ 257 * f ^ 16843008 * a, o[0][c] = h << 24 | h >>> 8, o[1][c] = h << 16 | h >>> 16, o[2][c] = h << 8 | h >>> 24, o[3][c] = h, 0 === a ? a = s = 1 : (a = f ^ e[e[e[l ^ f]]], s ^= e[e[s]]);
              }
              return {
                SBOX: r,
                INV_SBOX: n,
                SUB_MIX: i,
                INV_SUB_MIX: o
              };
            }();
          function c(e) {
            this._key = i(e), this._reset();
          }
          c.blockSize = 16, c.keySize = 32, c.prototype.blockSize = c.blockSize, c.prototype.keySize = c.keySize, c.prototype._reset = function () {
            for (var e = this._key, t = e.length, r = t + 6, n = 4 * (r + 1), i = [], o = 0; o < t; o++) i[o] = e[o];
            for (o = t; o < n; o++) {
              var a = i[o - 1];
              o % t == 0 ? (a = a << 8 | a >>> 24, a = u.SBOX[a >>> 24] << 24 | u.SBOX[a >>> 16 & 255] << 16 | u.SBOX[a >>> 8 & 255] << 8 | u.SBOX[255 & a], a ^= s[o / t | 0] << 24) : t > 6 && o % t == 4 && (a = u.SBOX[a >>> 24] << 24 | u.SBOX[a >>> 16 & 255] << 16 | u.SBOX[a >>> 8 & 255] << 8 | u.SBOX[255 & a]), i[o] = i[o - t] ^ a;
            }
            for (var c = [], f = 0; f < n; f++) {
              var d = n - f,
                l = i[d - (f % 4 ? 0 : 4)];
              c[f] = f < 4 || d <= 4 ? l : u.INV_SUB_MIX[0][u.SBOX[l >>> 24]] ^ u.INV_SUB_MIX[1][u.SBOX[l >>> 16 & 255]] ^ u.INV_SUB_MIX[2][u.SBOX[l >>> 8 & 255]] ^ u.INV_SUB_MIX[3][u.SBOX[255 & l]];
            }
            this._nRounds = r, this._keySchedule = i, this._invKeySchedule = c;
          }, c.prototype.encryptBlockRaw = function (e) {
            return a(e = i(e), this._keySchedule, u.SUB_MIX, u.SBOX, this._nRounds);
          }, c.prototype.encryptBlock = function (e) {
            var t = this.encryptBlockRaw(e),
              r = n.allocUnsafe(16);
            return r.writeUInt32BE(t[0], 0), r.writeUInt32BE(t[1], 4), r.writeUInt32BE(t[2], 8), r.writeUInt32BE(t[3], 12), r;
          }, c.prototype.decryptBlock = function (e) {
            var t = (e = i(e))[1];
            e[1] = e[3], e[3] = t;
            var r = a(e, this._invKeySchedule, u.INV_SUB_MIX, u.INV_SBOX, this._nRounds),
              o = n.allocUnsafe(16);
            return o.writeUInt32BE(r[0], 0), o.writeUInt32BE(r[3], 4), o.writeUInt32BE(r[2], 8), o.writeUInt32BE(r[1], 12), o;
          }, c.prototype.scrub = function () {
            o(this._keySchedule), o(this._invKeySchedule), o(this._key);
          }, e.exports.AES = c;
        },
        426: function _(e, t, r) {
          "use strict";

          var n = r(7494),
            i = r(8850).Buffer,
            o = r(3013),
            a = r(1736),
            s = r(6626),
            u = r(6316),
            c = r(7557);
          function f(e, t, r, a) {
            o.call(this);
            var u = i.alloc(4, 0);
            this._cipher = new n.AES(t);
            var f = this._cipher.encryptBlock(u);
            this._ghash = new s(f), r = function (e, t, r) {
              if (12 === t.length) return e._finID = i.concat([t, i.from([0, 0, 0, 1])]), i.concat([t, i.from([0, 0, 0, 2])]);
              var n = new s(r),
                o = t.length,
                a = o % 16;
              n.update(t), a && (a = 16 - a, n.update(i.alloc(a, 0))), n.update(i.alloc(8, 0));
              var u = 8 * o,
                f = i.alloc(8);
              f.writeUIntBE(u, 0, 8), n.update(f), e._finID = n.state;
              var d = i.from(e._finID);
              return c(d), d;
            }(this, r, f), this._prev = i.from(r), this._cache = i.allocUnsafe(0), this._secCache = i.allocUnsafe(0), this._decrypt = a, this._alen = 0, this._len = 0, this._mode = e, this._authTag = null, this._called = !1;
          }
          a(f, o), f.prototype._update = function (e) {
            if (!this._called && this._alen) {
              var t = 16 - this._alen % 16;
              t < 16 && (t = i.alloc(t, 0), this._ghash.update(t));
            }
            this._called = !0;
            var r = this._mode.encrypt(this, e);
            return this._decrypt ? this._ghash.update(e) : this._ghash.update(r), this._len += e.length, r;
          }, f.prototype._final = function () {
            if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
            var e = u(this._ghash.final(8 * this._alen, 8 * this._len), this._cipher.encryptBlock(this._finID));
            if (this._decrypt && function (e, t) {
              var r = 0;
              e.length !== t.length && r++;
              for (var n = Math.min(e.length, t.length), i = 0; i < n; ++i) r += e[i] ^ t[i];
              return r;
            }(e, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
            this._authTag = e, this._cipher.scrub();
          }, f.prototype.getAuthTag = function () {
            if (this._decrypt || !i.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
            return this._authTag;
          }, f.prototype.setAuthTag = function (e) {
            if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
            this._authTag = e;
          }, f.prototype.setAAD = function (e) {
            if (this._called) throw new Error("Attempting to set AAD in unsupported state");
            this._ghash.update(e), this._alen += e.length;
          }, e.exports = f;
        },
        8073: function _(e, t, r) {
          "use strict";

          var n = r(5478),
            i = r(2184),
            o = r(4946);
          t.createCipher = t.Cipher = n.createCipher, t.createCipheriv = t.Cipheriv = n.createCipheriv, t.createDecipher = t.Decipher = i.createDecipher, t.createDecipheriv = t.Decipheriv = i.createDecipheriv, t.listCiphers = t.getCiphers = function () {
            return Object.keys(o);
          };
        },
        2184: function _(e, t, r) {
          "use strict";

          var n = r(426),
            i = r(8850).Buffer,
            o = r(8408),
            a = r(1408),
            s = r(3013),
            u = r(7494),
            c = r(7085);
          function f(e, t, r) {
            s.call(this), this._cache = new d(), this._last = void 0, this._cipher = new u.AES(t), this._prev = i.from(r), this._mode = e, this._autopadding = !0;
          }
          function d() {
            this.cache = i.allocUnsafe(0);
          }
          function l(e, t, r) {
            var s = o[e.toLowerCase()];
            if (!s) throw new TypeError("invalid suite type");
            if ("string" == typeof r && (r = i.from(r)), "GCM" !== s.mode && r.length !== s.iv) throw new TypeError("invalid iv length " + r.length);
            if ("string" == typeof t && (t = i.from(t)), t.length !== s.key / 8) throw new TypeError("invalid key length " + t.length);
            return "stream" === s.type ? new a(s.module, t, r, !0) : "auth" === s.type ? new n(s.module, t, r, !0) : new f(s.module, t, r);
          }
          r(1736)(f, s), f.prototype._update = function (e) {
            var t, r;
            this._cache.add(e);
            for (var n = []; t = this._cache.get(this._autopadding);) r = this._mode.decrypt(this, t), n.push(r);
            return i.concat(n);
          }, f.prototype._final = function () {
            var e = this._cache.flush();
            if (this._autopadding) return function (e) {
              var t = e[15];
              if (t < 1 || t > 16) throw new Error("unable to decrypt data");
              for (var r = -1; ++r < t;) if (e[r + (16 - t)] !== t) throw new Error("unable to decrypt data");
              if (16 !== t) return e.slice(0, 16 - t);
            }(this._mode.decrypt(this, e));
            if (e) throw new Error("data not multiple of block length");
          }, f.prototype.setAutoPadding = function (e) {
            return this._autopadding = !!e, this;
          }, d.prototype.add = function (e) {
            this.cache = i.concat([this.cache, e]);
          }, d.prototype.get = function (e) {
            var t;
            if (e) {
              if (this.cache.length > 16) return t = this.cache.slice(0, 16), this.cache = this.cache.slice(16), t;
            } else if (this.cache.length >= 16) return t = this.cache.slice(0, 16), this.cache = this.cache.slice(16), t;
            return null;
          }, d.prototype.flush = function () {
            if (this.cache.length) return this.cache;
          }, t.createDecipher = function (e, t) {
            var r = o[e.toLowerCase()];
            if (!r) throw new TypeError("invalid suite type");
            var n = c(t, !1, r.key, r.iv);
            return l(e, n.key, n.iv);
          }, t.createDecipheriv = l;
        },
        5478: function _(e, t, r) {
          "use strict";

          var n = r(8408),
            i = r(426),
            o = r(8850).Buffer,
            a = r(1408),
            s = r(3013),
            u = r(7494),
            c = r(7085);
          function f(e, t, r) {
            s.call(this), this._cache = new l(), this._cipher = new u.AES(t), this._prev = o.from(r), this._mode = e, this._autopadding = !0;
          }
          r(1736)(f, s), f.prototype._update = function (e) {
            var t, r;
            this._cache.add(e);
            for (var n = []; t = this._cache.get();) r = this._mode.encrypt(this, t), n.push(r);
            return o.concat(n);
          };
          var d = o.alloc(16, 16);
          function l() {
            this.cache = o.allocUnsafe(0);
          }
          function h(e, t, r) {
            var s = n[e.toLowerCase()];
            if (!s) throw new TypeError("invalid suite type");
            if ("string" == typeof t && (t = o.from(t)), t.length !== s.key / 8) throw new TypeError("invalid key length " + t.length);
            if ("string" == typeof r && (r = o.from(r)), "GCM" !== s.mode && r.length !== s.iv) throw new TypeError("invalid iv length " + r.length);
            return "stream" === s.type ? new a(s.module, t, r) : "auth" === s.type ? new i(s.module, t, r) : new f(s.module, t, r);
          }
          f.prototype._final = function () {
            var e = this._cache.flush();
            if (this._autopadding) return e = this._mode.encrypt(this, e), this._cipher.scrub(), e;
            if (!e.equals(d)) throw this._cipher.scrub(), new Error("data not multiple of block length");
          }, f.prototype.setAutoPadding = function (e) {
            return this._autopadding = !!e, this;
          }, l.prototype.add = function (e) {
            this.cache = o.concat([this.cache, e]);
          }, l.prototype.get = function () {
            if (this.cache.length > 15) {
              var e = this.cache.slice(0, 16);
              return this.cache = this.cache.slice(16), e;
            }
            return null;
          }, l.prototype.flush = function () {
            for (var e = 16 - this.cache.length, t = o.allocUnsafe(e), r = -1; ++r < e;) t.writeUInt8(e, r);
            return o.concat([this.cache, t]);
          }, t.createCipheriv = h, t.createCipher = function (e, t) {
            var r = n[e.toLowerCase()];
            if (!r) throw new TypeError("invalid suite type");
            var i = c(t, !1, r.key, r.iv);
            return h(e, i.key, i.iv);
          };
        },
        6626: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer,
            i = n.alloc(16, 0);
          function o(e) {
            var t = n.allocUnsafe(16);
            return t.writeUInt32BE(e[0] >>> 0, 0), t.writeUInt32BE(e[1] >>> 0, 4), t.writeUInt32BE(e[2] >>> 0, 8), t.writeUInt32BE(e[3] >>> 0, 12), t;
          }
          function a(e) {
            this.h = e, this.state = n.alloc(16, 0), this.cache = n.allocUnsafe(0);
          }
          a.prototype.ghash = function (e) {
            for (var t = -1; ++t < e.length;) this.state[t] ^= e[t];
            this._multiply();
          }, a.prototype._multiply = function () {
            for (var e, t, r, n = [(e = this.h).readUInt32BE(0), e.readUInt32BE(4), e.readUInt32BE(8), e.readUInt32BE(12)], i = [0, 0, 0, 0], a = -1; ++a < 128;) {
              for (0 != (this.state[~~(a / 8)] & 1 << 7 - a % 8) && (i[0] ^= n[0], i[1] ^= n[1], i[2] ^= n[2], i[3] ^= n[3]), r = 0 != (1 & n[3]), t = 3; t > 0; t--) n[t] = n[t] >>> 1 | (1 & n[t - 1]) << 31;
              n[0] = n[0] >>> 1, r && (n[0] = n[0] ^ 225 << 24);
            }
            this.state = o(i);
          }, a.prototype.update = function (e) {
            var t;
            for (this.cache = n.concat([this.cache, e]); this.cache.length >= 16;) t = this.cache.slice(0, 16), this.cache = this.cache.slice(16), this.ghash(t);
          }, a.prototype.final = function (e, t) {
            return this.cache.length && this.ghash(n.concat([this.cache, i], 16)), this.ghash(o([0, e, 0, t])), this.state;
          }, e.exports = a;
        },
        7557: function _(e) {
          "use strict";

          e.exports = function (e) {
            for (var t, r = e.length; r--;) {
              if (255 !== (t = e.readUInt8(r))) {
                t++, e.writeUInt8(t, r);
                break;
              }
              e.writeUInt8(0, r);
            }
          };
        },
        7427: function _(e, t, r) {
          "use strict";

          var n = r(6316);
          t.encrypt = function (e, t) {
            var r = n(t, e._prev);
            return e._prev = e._cipher.encryptBlock(r), e._prev;
          }, t.decrypt = function (e, t) {
            var r = e._prev;
            e._prev = t;
            var i = e._cipher.decryptBlock(t);
            return n(i, r);
          };
        },
        4030: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer,
            i = r(6316);
          function o(e, t, r) {
            var o = t.length,
              a = i(t, e._cache);
            return e._cache = e._cache.slice(o), e._prev = n.concat([e._prev, r ? t : a]), a;
          }
          t.encrypt = function (e, t, r) {
            for (var i, a = n.allocUnsafe(0); t.length;) {
              if (0 === e._cache.length && (e._cache = e._cipher.encryptBlock(e._prev), e._prev = n.allocUnsafe(0)), !(e._cache.length <= t.length)) {
                a = n.concat([a, o(e, t, r)]);
                break;
              }
              i = e._cache.length, a = n.concat([a, o(e, t.slice(0, i), r)]), t = t.slice(i);
            }
            return a;
          };
        },
        3206: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer;
          function i(e, t, r) {
            for (var n, i, a = -1, s = 0; ++a < 8;) n = t & 1 << 7 - a ? 128 : 0, s += (128 & (i = e._cipher.encryptBlock(e._prev)[0] ^ n)) >> a % 8, e._prev = o(e._prev, r ? n : i);
            return s;
          }
          function o(e, t) {
            var r = e.length,
              i = -1,
              o = n.allocUnsafe(e.length);
            for (e = n.concat([e, n.from([t])]); ++i < r;) o[i] = e[i] << 1 | e[i + 1] >> 7;
            return o;
          }
          t.encrypt = function (e, t, r) {
            for (var o = t.length, a = n.allocUnsafe(o), s = -1; ++s < o;) a[s] = i(e, t[s], r);
            return a;
          };
        },
        4726: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer;
          function i(e, t, r) {
            var i = e._cipher.encryptBlock(e._prev)[0] ^ t;
            return e._prev = n.concat([e._prev.slice(1), n.from([r ? t : i])]), i;
          }
          t.encrypt = function (e, t, r) {
            for (var o = t.length, a = n.allocUnsafe(o), s = -1; ++s < o;) a[s] = i(e, t[s], r);
            return a;
          };
        },
        2802: function _(e, t, r) {
          "use strict";

          var n = r(6316),
            i = r(8850).Buffer,
            o = r(7557);
          function a(e) {
            var t = e._cipher.encryptBlockRaw(e._prev);
            return o(e._prev), t;
          }
          t.encrypt = function (e, t) {
            var r = Math.ceil(t.length / 16),
              o = e._cache.length;
            e._cache = i.concat([e._cache, i.allocUnsafe(16 * r)]);
            for (var s = 0; s < r; s++) {
              var u = a(e),
                c = o + 16 * s;
              e._cache.writeUInt32BE(u[0], c + 0), e._cache.writeUInt32BE(u[1], c + 4), e._cache.writeUInt32BE(u[2], c + 8), e._cache.writeUInt32BE(u[3], c + 12);
            }
            var f = e._cache.slice(0, t.length);
            return e._cache = e._cache.slice(t.length), n(t, f);
          };
        },
        9297: function _(e, t) {
          "use strict";

          t.encrypt = function (e, t) {
            return e._cipher.encryptBlock(t);
          }, t.decrypt = function (e, t) {
            return e._cipher.decryptBlock(t);
          };
        },
        8408: function _(e, t, r) {
          "use strict";

          var n = {
              ECB: r(9297),
              CBC: r(7427),
              CFB: r(4030),
              CFB8: r(4726),
              CFB1: r(3206),
              OFB: r(1962),
              CTR: r(2802),
              GCM: r(2802)
            },
            i = r(4946);
          for (var o in i) i[o].module = n[i[o].mode];
          e.exports = i;
        },
        1962: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(6316);
          function o(e) {
            return e._prev = e._cipher.encryptBlock(e._prev), e._prev;
          }
          t.encrypt = function (e, t) {
            for (; e._cache.length < t.length;) e._cache = n.concat([e._cache, o(e)]);
            var r = e._cache.slice(0, t.length);
            return e._cache = e._cache.slice(t.length), i(t, r);
          };
        },
        1408: function _(e, t, r) {
          "use strict";

          var n = r(7494),
            i = r(8850).Buffer,
            o = r(3013);
          function a(e, t, r, a) {
            o.call(this), this._cipher = new n.AES(t), this._prev = i.from(r), this._cache = i.allocUnsafe(0), this._secCache = i.allocUnsafe(0), this._decrypt = a, this._mode = e;
          }
          r(1736)(a, o), a.prototype._update = function (e) {
            return this._mode.encrypt(this, e, this._decrypt);
          }, a.prototype._final = function () {
            this._cipher.scrub();
          }, e.exports = a;
        },
        6805: function _(e, t, r) {
          "use strict";

          var n = r(9120),
            i = r(8073),
            o = r(8408),
            a = r(867),
            s = r(7085);
          function u(e, t, r) {
            if (e = e.toLowerCase(), o[e]) return i.createCipheriv(e, t, r);
            if (a[e]) return new n({
              key: t,
              iv: r,
              mode: e
            });
            throw new TypeError("invalid suite type");
          }
          function c(e, t, r) {
            if (e = e.toLowerCase(), o[e]) return i.createDecipheriv(e, t, r);
            if (a[e]) return new n({
              key: t,
              iv: r,
              mode: e,
              decrypt: !0
            });
            throw new TypeError("invalid suite type");
          }
          t.createCipher = t.Cipher = function (e, t) {
            var r, n;
            if (e = e.toLowerCase(), o[e]) r = o[e].key, n = o[e].iv;else {
              if (!a[e]) throw new TypeError("invalid suite type");
              r = 8 * a[e].key, n = a[e].iv;
            }
            var i = s(t, !1, r, n);
            return u(e, i.key, i.iv);
          }, t.createCipheriv = t.Cipheriv = u, t.createDecipher = t.Decipher = function (e, t) {
            var r, n;
            if (e = e.toLowerCase(), o[e]) r = o[e].key, n = o[e].iv;else {
              if (!a[e]) throw new TypeError("invalid suite type");
              r = 8 * a[e].key, n = a[e].iv;
            }
            var i = s(t, !1, r, n);
            return c(e, i.key, i.iv);
          }, t.createDecipheriv = t.Decipheriv = c, t.listCiphers = t.getCiphers = function () {
            return Object.keys(a).concat(i.getCiphers());
          };
        },
        9120: function _(e, t, r) {
          "use strict";

          var n = r(3013),
            i = r(5626),
            o = r(1736),
            a = r(8850).Buffer,
            s = {
              "des-ede3-cbc": i.CBC.instantiate(i.EDE),
              "des-ede3": i.EDE,
              "des-ede-cbc": i.CBC.instantiate(i.EDE),
              "des-ede": i.EDE,
              "des-cbc": i.CBC.instantiate(i.DES),
              "des-ecb": i.DES
            };
          function u(e) {
            n.call(this);
            var t,
              r = e.mode.toLowerCase(),
              i = s[r];
            t = e.decrypt ? "decrypt" : "encrypt";
            var o = e.key;
            a.isBuffer(o) || (o = a.from(o)), "des-ede" !== r && "des-ede-cbc" !== r || (o = a.concat([o, o.slice(0, 8)]));
            var u = e.iv;
            a.isBuffer(u) || (u = a.from(u)), this._des = i.create({
              key: o,
              iv: u,
              type: t
            });
          }
          s.des = s["des-cbc"], s.des3 = s["des-ede3-cbc"], e.exports = u, o(u, n), u.prototype._update = function (e) {
            return a.from(this._des.update(e));
          }, u.prototype._final = function () {
            return a.from(this._des.final());
          };
        },
        867: function _(e, t) {
          "use strict";

          t["des-ecb"] = {
            key: 8,
            iv: 0
          }, t["des-cbc"] = t.des = {
            key: 8,
            iv: 8
          }, t["des-ede3-cbc"] = t.des3 = {
            key: 24,
            iv: 8
          }, t["des-ede3"] = {
            key: 24,
            iv: 0
          }, t["des-ede-cbc"] = {
            key: 16,
            iv: 8
          }, t["des-ede"] = {
            key: 16,
            iv: 0
          };
        },
        9782: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(1734),
            o = r(5010);
          function a(e) {
            var t,
              r = e.modulus.byteLength();
            do {
              t = new i(o(r));
            } while (t.cmp(e.modulus) >= 0 || !t.umod(e.prime1) || !t.umod(e.prime2));
            return t;
          }
          function s(e, t) {
            var r = function (e) {
                var t = a(e);
                return {
                  blinder: t.toRed(i.mont(e.modulus)).redPow(new i(e.publicExponent)).fromRed(),
                  unblinder: t.invm(e.modulus)
                };
              }(t),
              o = t.modulus.byteLength(),
              s = new i(e).mul(r.blinder).umod(t.modulus),
              u = s.toRed(i.mont(t.prime1)),
              c = s.toRed(i.mont(t.prime2)),
              f = t.coefficient,
              d = t.prime1,
              l = t.prime2,
              h = u.redPow(t.exponent1).fromRed(),
              p = c.redPow(t.exponent2).fromRed(),
              b = h.isub(p).imul(f).umod(d).imul(l);
            return p.iadd(b).imul(r.unblinder).umod(t.modulus).toArrayLike(n, "be", o);
          }
          s.getr = a, e.exports = s;
        },
        6561: function _(e, t, r) {
          "use strict";

          e.exports = r(5207);
        },
        9527: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer,
            i = r(5866),
            o = r(6505),
            a = r(1736),
            s = r(1628),
            u = r(5410),
            c = r(5207);
          function f(e) {
            o.Writable.call(this);
            var t = c[e];
            if (!t) throw new Error("Unknown message digest");
            this._hashType = t.hash, this._hash = i(t.hash), this._tag = t.id, this._signType = t.sign;
          }
          function d(e) {
            o.Writable.call(this);
            var t = c[e];
            if (!t) throw new Error("Unknown message digest");
            this._hash = i(t.hash), this._tag = t.id, this._signType = t.sign;
          }
          function l(e) {
            return new f(e);
          }
          function h(e) {
            return new d(e);
          }
          Object.keys(c).forEach(function (e) {
            c[e].id = n.from(c[e].id, "hex"), c[e.toLowerCase()] = c[e];
          }), a(f, o.Writable), f.prototype._write = function (e, t, r) {
            this._hash.update(e), r();
          }, f.prototype.update = function (e, t) {
            return "string" == typeof e && (e = n.from(e, t)), this._hash.update(e), this;
          }, f.prototype.sign = function (e, t) {
            this.end();
            var r = this._hash.digest(),
              n = s(r, e, this._hashType, this._signType, this._tag);
            return t ? n.toString(t) : n;
          }, a(d, o.Writable), d.prototype._write = function (e, t, r) {
            this._hash.update(e), r();
          }, d.prototype.update = function (e, t) {
            return "string" == typeof e && (e = n.from(e, t)), this._hash.update(e), this;
          }, d.prototype.verify = function (e, t, r) {
            "string" == typeof t && (t = n.from(t, r)), this.end();
            var i = this._hash.digest();
            return u(t, i, e, this._signType, this._tag);
          }, e.exports = {
            Sign: l,
            Verify: h,
            createSign: l,
            createVerify: h
          };
        },
        1628: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer,
            i = r(4424),
            o = r(9782),
            a = r(6597).ec,
            s = r(1734),
            u = r(7552),
            c = r(1308);
          function f(e, t, r, o) {
            if ((e = n.from(e.toArray())).length < t.byteLength()) {
              var a = n.alloc(t.byteLength() - e.length);
              e = n.concat([a, e]);
            }
            var s = r.length,
              u = function (e, t) {
                e = (e = d(e, t)).mod(t);
                var r = n.from(e.toArray());
                if (r.length < t.byteLength()) {
                  var i = n.alloc(t.byteLength() - r.length);
                  r = n.concat([i, r]);
                }
                return r;
              }(r, t),
              c = n.alloc(s);
            c.fill(1);
            var f = n.alloc(s);
            return f = i(o, f).update(c).update(n.from([0])).update(e).update(u).digest(), c = i(o, f).update(c).digest(), {
              k: f = i(o, f).update(c).update(n.from([1])).update(e).update(u).digest(),
              v: c = i(o, f).update(c).digest()
            };
          }
          function d(e, t) {
            var r = new s(e),
              n = (e.length << 3) - t.bitLength();
            return n > 0 && r.ishrn(n), r;
          }
          function l(e, t, r) {
            var o, a;
            do {
              for (o = n.alloc(0); 8 * o.length < e.bitLength();) t.v = i(r, t.k).update(t.v).digest(), o = n.concat([o, t.v]);
              a = d(o, e), t.k = i(r, t.k).update(t.v).update(n.from([0])).digest(), t.v = i(r, t.k).update(t.v).digest();
            } while (-1 !== a.cmp(e));
            return a;
          }
          function h(e, t, r, n) {
            return e.toRed(s.mont(r)).redPow(t).fromRed().mod(n);
          }
          e.exports = function (e, t, r, i, p) {
            var b = u(t);
            if (b.curve) {
              if ("ecdsa" !== i && "ecdsa/rsa" !== i) throw new Error("wrong private key type");
              return function (e, t) {
                var r = c[t.curve.join(".")];
                if (!r) throw new Error("unknown curve " + t.curve.join("."));
                var i = new a(r).keyFromPrivate(t.privateKey).sign(e);
                return n.from(i.toDER());
              }(e, b);
            }
            if ("dsa" === b.type) {
              if ("dsa" !== i) throw new Error("wrong private key type");
              return function (e, t, r) {
                for (var i, o = t.params.priv_key, a = t.params.p, u = t.params.q, c = t.params.g, p = new s(0), b = d(e, u).mod(u), y = !1, m = f(o, u, e, r); !1 === y;) p = h(c, i = l(u, m, r), a, u), 0 === (y = i.invm(u).imul(b.add(o.mul(p))).mod(u)).cmpn(0) && (y = !1, p = new s(0));
                return function (e, t) {
                  e = e.toArray(), t = t.toArray(), 128 & e[0] && (e = [0].concat(e)), 128 & t[0] && (t = [0].concat(t));
                  var r = [48, e.length + t.length + 4, 2, e.length];
                  return r = r.concat(e, [2, t.length], t), n.from(r);
                }(p, y);
              }(e, b, r);
            }
            if ("rsa" !== i && "ecdsa/rsa" !== i) throw new Error("wrong private key type");
            e = n.concat([p, e]);
            for (var y = b.modulus.byteLength(), m = [0, 1]; e.length + m.length + 1 < y;) m.push(255);
            m.push(0);
            for (var v = -1; ++v < e.length;) m.push(e[v]);
            return o(m, b);
          }, e.exports.getKey = f, e.exports.makeKey = l;
        },
        5410: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer,
            i = r(1734),
            o = r(6597).ec,
            a = r(7552),
            s = r(1308);
          function u(e, t) {
            if (e.cmpn(0) <= 0) throw new Error("invalid sig");
            if (e.cmp(t) >= t) throw new Error("invalid sig");
          }
          e.exports = function (e, t, r, c, f) {
            var d = a(r);
            if ("ec" === d.type) {
              if ("ecdsa" !== c && "ecdsa/rsa" !== c) throw new Error("wrong public key type");
              return function (e, t, r) {
                var n = s[r.data.algorithm.curve.join(".")];
                if (!n) throw new Error("unknown curve " + r.data.algorithm.curve.join("."));
                var i = new o(n),
                  a = r.data.subjectPrivateKey.data;
                return i.verify(t, e, a);
              }(e, t, d);
            }
            if ("dsa" === d.type) {
              if ("dsa" !== c) throw new Error("wrong public key type");
              return function (e, t, r) {
                var n = r.data.p,
                  o = r.data.q,
                  s = r.data.g,
                  c = r.data.pub_key,
                  f = a.signature.decode(e, "der"),
                  d = f.s,
                  l = f.r;
                u(d, o), u(l, o);
                var h = i.mont(n),
                  p = d.invm(o);
                return 0 === s.toRed(h).redPow(new i(t).mul(p).mod(o)).fromRed().mul(c.toRed(h).redPow(l.mul(p).mod(o)).fromRed()).mod(n).mod(o).cmp(l);
              }(e, t, d);
            }
            if ("rsa" !== c && "ecdsa/rsa" !== c) throw new Error("wrong public key type");
            t = n.concat([f, t]);
            for (var l = d.modulus.byteLength(), h = [1], p = 0; t.length + h.length + 2 < l;) h.push(255), p++;
            h.push(0);
            for (var b = -1; ++b < t.length;) h.push(t[b]);
            h = n.from(h);
            var y = i.mont(d.modulus);
            e = (e = new i(e).toRed(y)).redPow(new i(d.publicExponent)), e = n.from(e.fromRed().toArray());
            var m = p < 8 ? 1 : 0;
            for (l = Math.min(e.length, h.length), e.length !== h.length && (m = 1), b = -1; ++b < l;) m |= e[b] ^ h[b];
            return 0 === m;
          };
        },
        6316: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer;
          e.exports = function (e, t) {
            for (var r = Math.min(e.length, t.length), i = new n(r), o = 0; o < r; ++o) i[o] = e[o] ^ t[o];
            return i;
          };
        },
        9033: function _(e, t, r) {
          "use strict";

          var n = r(4919),
            i = r(3226),
            o = r(9484);
          function a() {
            return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
          }
          function s(e, t) {
            if (a() < t) throw new RangeError("Invalid typed array length");
            return u.TYPED_ARRAY_SUPPORT ? (e = new Uint8Array(t)).__proto__ = u.prototype : (null === e && (e = new u(t)), e.length = t), e;
          }
          function u(e, t, r) {
            if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u)) return new u(e, t, r);
            if ("number" == typeof e) {
              if ("string" == typeof t) throw new Error("If encoding is specified then the first argument must be a string");
              return d(this, e);
            }
            return c(this, e, t, r);
          }
          function c(e, t, r, n) {
            if ("number" == typeof t) throw new TypeError('"value" argument must not be a number');
            return "undefined" != typeof ArrayBuffer && t instanceof ArrayBuffer ? function (e, t, r, n) {
              if (t.byteLength, r < 0 || t.byteLength < r) throw new RangeError("'offset' is out of bounds");
              if (t.byteLength < r + (n || 0)) throw new RangeError("'length' is out of bounds");
              return t = void 0 === r && void 0 === n ? new Uint8Array(t) : void 0 === n ? new Uint8Array(t, r) : new Uint8Array(t, r, n), u.TYPED_ARRAY_SUPPORT ? (e = t).__proto__ = u.prototype : e = l(e, t), e;
            }(e, t, r, n) : "string" == typeof t ? function (e, t, r) {
              if ("string" == typeof r && "" !== r || (r = "utf8"), !u.isEncoding(r)) throw new TypeError('"encoding" must be a valid string encoding');
              var n = 0 | p(t, r),
                i = (e = s(e, n)).write(t, r);
              return i !== n && (e = e.slice(0, i)), e;
            }(e, t, r) : function (e, t) {
              if (u.isBuffer(t)) {
                var r = 0 | h(t.length);
                return 0 === (e = s(e, r)).length || t.copy(e, 0, 0, r), e;
              }
              if (t) {
                if ("undefined" != typeof ArrayBuffer && t.buffer instanceof ArrayBuffer || "length" in t) return "number" != typeof t.length || (n = t.length) != n ? s(e, 0) : l(e, t);
                if ("Buffer" === t.type && o(t.data)) return l(e, t.data);
              }
              var n;
              throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
            }(e, t);
          }
          function f(e) {
            if ("number" != typeof e) throw new TypeError('"size" argument must be a number');
            if (e < 0) throw new RangeError('"size" argument must not be negative');
          }
          function d(e, t) {
            if (f(t), e = s(e, t < 0 ? 0 : 0 | h(t)), !u.TYPED_ARRAY_SUPPORT) for (var r = 0; r < t; ++r) e[r] = 0;
            return e;
          }
          function l(e, t) {
            var r = t.length < 0 ? 0 : 0 | h(t.length);
            e = s(e, r);
            for (var n = 0; n < r; n += 1) e[n] = 255 & t[n];
            return e;
          }
          function h(e) {
            if (e >= a()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a().toString(16) + " bytes");
            return 0 | e;
          }
          function p(e, t) {
            if (u.isBuffer(e)) return e.length;
            if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(e) || e instanceof ArrayBuffer)) return e.byteLength;
            "string" != typeof e && (e = "" + e);
            var r = e.length;
            if (0 === r) return 0;
            for (var n = !1;;) switch (t) {
              case "ascii":
              case "latin1":
              case "binary":
                return r;
              case "utf8":
              case "utf-8":
              case void 0:
                return D(e).length;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return 2 * r;
              case "hex":
                return r >>> 1;
              case "base64":
                return H(e).length;
              default:
                if (n) return D(e).length;
                t = ("" + t).toLowerCase(), n = !0;
            }
          }
          function b(e, t, r) {
            var n = !1;
            if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";
            if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";
            if ((r >>>= 0) <= (t >>>= 0)) return "";
            for (e || (e = "utf8");;) switch (e) {
              case "hex":
                return T(this, t, r);
              case "utf8":
              case "utf-8":
                return x(this, t, r);
              case "ascii":
                return O(this, t, r);
              case "latin1":
              case "binary":
                return B(this, t, r);
              case "base64":
                return E(this, t, r);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return C(this, t, r);
              default:
                if (n) throw new TypeError("Unknown encoding: " + e);
                e = (e + "").toLowerCase(), n = !0;
            }
          }
          function y(e, t, r) {
            var n = e[t];
            e[t] = e[r], e[r] = n;
          }
          function m(e, t, r, n, i) {
            if (0 === e.length) return -1;
            if ("string" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, isNaN(r) && (r = i ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {
              if (i) return -1;
              r = e.length - 1;
            } else if (r < 0) {
              if (!i) return -1;
              r = 0;
            }
            if ("string" == typeof t && (t = u.from(t, n)), u.isBuffer(t)) return 0 === t.length ? -1 : v(e, t, r, n, i);
            if ("number" == typeof t) return t &= 255, u.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : v(e, [t], r, n, i);
            throw new TypeError("val must be string, number or Buffer");
          }
          function v(e, t, r, n, i) {
            var o,
              a = 1,
              s = e.length,
              u = t.length;
            if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
              if (e.length < 2 || t.length < 2) return -1;
              a = 2, s /= 2, u /= 2, r /= 2;
            }
            function c(e, t) {
              return 1 === a ? e[t] : e.readUInt16BE(t * a);
            }
            if (i) {
              var f = -1;
              for (o = r; o < s; o++) if (c(e, o) === c(t, -1 === f ? 0 : o - f)) {
                if (-1 === f && (f = o), o - f + 1 === u) return f * a;
              } else -1 !== f && (o -= o - f), f = -1;
            } else for (r + u > s && (r = s - u), o = r; o >= 0; o--) {
              for (var d = !0, l = 0; l < u; l++) if (c(e, o + l) !== c(t, l)) {
                d = !1;
                break;
              }
              if (d) return o;
            }
            return -1;
          }
          function g(e, t, r, n) {
            r = Number(r) || 0;
            var i = e.length - r;
            n ? (n = Number(n)) > i && (n = i) : n = i;
            var o = t.length;
            if (o % 2 != 0) throw new TypeError("Invalid hex string");
            n > o / 2 && (n = o / 2);
            for (var a = 0; a < n; ++a) {
              var s = parseInt(t.substr(2 * a, 2), 16);
              if (isNaN(s)) return a;
              e[r + a] = s;
            }
            return a;
          }
          function w(e, t, r, n) {
            return q(D(t, e.length - r), e, r, n);
          }
          function A(e, t, r, n) {
            return q(function (e) {
              for (var t = [], r = 0; r < e.length; ++r) t.push(255 & e.charCodeAt(r));
              return t;
            }(t), e, r, n);
          }
          function k(e, t, r, n) {
            return A(e, t, r, n);
          }
          function _(e, t, r, n) {
            return q(H(t), e, r, n);
          }
          function S(e, t, r, n) {
            return q(function (e, t) {
              for (var r, n, i, o = [], a = 0; a < e.length && !((t -= 2) < 0); ++a) n = (r = e.charCodeAt(a)) >> 8, i = r % 256, o.push(i), o.push(n);
              return o;
            }(t, e.length - r), e, r, n);
          }
          function E(e, t, r) {
            return 0 === t && r === e.length ? n.fromByteArray(e) : n.fromByteArray(e.slice(t, r));
          }
          function x(e, t, r) {
            r = Math.min(e.length, r);
            for (var n = [], i = t; i < r;) {
              var o,
                a,
                s,
                u,
                c = e[i],
                f = null,
                d = c > 239 ? 4 : c > 223 ? 3 : c > 191 ? 2 : 1;
              if (i + d <= r) switch (d) {
                case 1:
                  c < 128 && (f = c);
                  break;
                case 2:
                  128 == (192 & (o = e[i + 1])) && (u = (31 & c) << 6 | 63 & o) > 127 && (f = u);
                  break;
                case 3:
                  o = e[i + 1], a = e[i + 2], 128 == (192 & o) && 128 == (192 & a) && (u = (15 & c) << 12 | (63 & o) << 6 | 63 & a) > 2047 && (u < 55296 || u > 57343) && (f = u);
                  break;
                case 4:
                  o = e[i + 1], a = e[i + 2], s = e[i + 3], 128 == (192 & o) && 128 == (192 & a) && 128 == (192 & s) && (u = (15 & c) << 18 | (63 & o) << 12 | (63 & a) << 6 | 63 & s) > 65535 && u < 1114112 && (f = u);
              }
              null === f ? (f = 65533, d = 1) : f > 65535 && (f -= 65536, n.push(f >>> 10 & 1023 | 55296), f = 56320 | 1023 & f), n.push(f), i += d;
            }
            return function (e) {
              var t = e.length;
              if (t <= P) return String.fromCharCode.apply(String, e);
              for (var r = "", n = 0; n < t;) r += String.fromCharCode.apply(String, e.slice(n, n += P));
              return r;
            }(n);
          }
          t.Buffer = u, t.SlowBuffer = function (e) {
            return +e != e && (e = 0), u.alloc(+e);
          }, t.INSPECT_MAX_BYTES = 50, u.TYPED_ARRAY_SUPPORT = void 0 !== r.g.TYPED_ARRAY_SUPPORT ? r.g.TYPED_ARRAY_SUPPORT : function () {
            try {
              var e = new Uint8Array(1);
              return e.__proto__ = {
                __proto__: Uint8Array.prototype,
                foo: function foo() {
                  return 42;
                }
              }, 42 === e.foo() && "function" == typeof e.subarray && 0 === e.subarray(1, 1).byteLength;
            } catch (e) {
              return !1;
            }
          }(), t.kMaxLength = a(), u.poolSize = 8192, u._augment = function (e) {
            return e.__proto__ = u.prototype, e;
          }, u.from = function (e, t, r) {
            return c(null, e, t, r);
          }, u.TYPED_ARRAY_SUPPORT && (u.prototype.__proto__ = Uint8Array.prototype, u.__proto__ = Uint8Array, "undefined" != typeof Symbol && Symbol.species && u[Symbol.species] === u && Object.defineProperty(u, Symbol.species, {
            value: null,
            configurable: !0
          })), u.alloc = function (e, t, r) {
            return function (e, t, r, n) {
              return f(t), t <= 0 ? s(e, t) : void 0 !== r ? "string" == typeof n ? s(e, t).fill(r, n) : s(e, t).fill(r) : s(e, t);
            }(null, e, t, r);
          }, u.allocUnsafe = function (e) {
            return d(null, e);
          }, u.allocUnsafeSlow = function (e) {
            return d(null, e);
          }, u.isBuffer = function (e) {
            return !(null == e || !e._isBuffer);
          }, u.compare = function (e, t) {
            if (!u.isBuffer(e) || !u.isBuffer(t)) throw new TypeError("Arguments must be Buffers");
            if (e === t) return 0;
            for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) if (e[i] !== t[i]) {
              r = e[i], n = t[i];
              break;
            }
            return r < n ? -1 : n < r ? 1 : 0;
          }, u.isEncoding = function (e) {
            switch (String(e).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return !0;
              default:
                return !1;
            }
          }, u.concat = function (e, t) {
            if (!o(e)) throw new TypeError('"list" argument must be an Array of Buffers');
            if (0 === e.length) return u.alloc(0);
            var r;
            if (void 0 === t) for (t = 0, r = 0; r < e.length; ++r) t += e[r].length;
            var n = u.allocUnsafe(t),
              i = 0;
            for (r = 0; r < e.length; ++r) {
              var a = e[r];
              if (!u.isBuffer(a)) throw new TypeError('"list" argument must be an Array of Buffers');
              a.copy(n, i), i += a.length;
            }
            return n;
          }, u.byteLength = p, u.prototype._isBuffer = !0, u.prototype.swap16 = function () {
            var e = this.length;
            if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var t = 0; t < e; t += 2) y(this, t, t + 1);
            return this;
          }, u.prototype.swap32 = function () {
            var e = this.length;
            if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var t = 0; t < e; t += 4) y(this, t, t + 3), y(this, t + 1, t + 2);
            return this;
          }, u.prototype.swap64 = function () {
            var e = this.length;
            if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var t = 0; t < e; t += 8) y(this, t, t + 7), y(this, t + 1, t + 6), y(this, t + 2, t + 5), y(this, t + 3, t + 4);
            return this;
          }, u.prototype.toString = function () {
            var e = 0 | this.length;
            return 0 === e ? "" : 0 === arguments.length ? x(this, 0, e) : b.apply(this, arguments);
          }, u.prototype.equals = function (e) {
            if (!u.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
            return this === e || 0 === u.compare(this, e);
          }, u.prototype.inspect = function () {
            var e = "",
              r = t.INSPECT_MAX_BYTES;
            return this.length > 0 && (e = this.toString("hex", 0, r).match(/.{2}/g).join(" "), this.length > r && (e += " ... ")), "<Buffer " + e + ">";
          }, u.prototype.compare = function (e, t, r, n, i) {
            if (!u.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
            if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), t < 0 || r > e.length || n < 0 || i > this.length) throw new RangeError("out of range index");
            if (n >= i && t >= r) return 0;
            if (n >= i) return -1;
            if (t >= r) return 1;
            if (this === e) return 0;
            for (var o = (i >>>= 0) - (n >>>= 0), a = (r >>>= 0) - (t >>>= 0), s = Math.min(o, a), c = this.slice(n, i), f = e.slice(t, r), d = 0; d < s; ++d) if (c[d] !== f[d]) {
              o = c[d], a = f[d];
              break;
            }
            return o < a ? -1 : a < o ? 1 : 0;
          }, u.prototype.includes = function (e, t, r) {
            return -1 !== this.indexOf(e, t, r);
          }, u.prototype.indexOf = function (e, t, r) {
            return m(this, e, t, r, !0);
          }, u.prototype.lastIndexOf = function (e, t, r) {
            return m(this, e, t, r, !1);
          }, u.prototype.write = function (e, t, r, n) {
            if (void 0 === t) n = "utf8", r = this.length, t = 0;else if (void 0 === r && "string" == typeof t) n = t, r = this.length, t = 0;else {
              if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
              t |= 0, isFinite(r) ? (r |= 0, void 0 === n && (n = "utf8")) : (n = r, r = void 0);
            }
            var i = this.length - t;
            if ((void 0 === r || r > i) && (r = i), e.length > 0 && (r < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");
            n || (n = "utf8");
            for (var o = !1;;) switch (n) {
              case "hex":
                return g(this, e, t, r);
              case "utf8":
              case "utf-8":
                return w(this, e, t, r);
              case "ascii":
                return A(this, e, t, r);
              case "latin1":
              case "binary":
                return k(this, e, t, r);
              case "base64":
                return _(this, e, t, r);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return S(this, e, t, r);
              default:
                if (o) throw new TypeError("Unknown encoding: " + n);
                n = ("" + n).toLowerCase(), o = !0;
            }
          }, u.prototype.toJSON = function () {
            return {
              type: "Buffer",
              data: Array.prototype.slice.call(this._arr || this, 0)
            };
          };
          var P = 4096;
          function O(e, t, r) {
            var n = "";
            r = Math.min(e.length, r);
            for (var i = t; i < r; ++i) n += String.fromCharCode(127 & e[i]);
            return n;
          }
          function B(e, t, r) {
            var n = "";
            r = Math.min(e.length, r);
            for (var i = t; i < r; ++i) n += String.fromCharCode(e[i]);
            return n;
          }
          function T(e, t, r) {
            var n,
              i = e.length;
            (!t || t < 0) && (t = 0), (!r || r < 0 || r > i) && (r = i);
            for (var o = "", a = t; a < r; ++a) o += (n = e[a]) < 16 ? "0" + n.toString(16) : n.toString(16);
            return o;
          }
          function C(e, t, r) {
            for (var n = e.slice(t, r), i = "", o = 0; o < n.length; o += 2) i += String.fromCharCode(n[o] + 256 * n[o + 1]);
            return i;
          }
          function I(e, t, r) {
            if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");
            if (e + t > r) throw new RangeError("Trying to access beyond buffer length");
          }
          function M(e, t, r, n, i, o) {
            if (!u.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
            if (t > i || t < o) throw new RangeError('"value" argument is out of bounds');
            if (r + n > e.length) throw new RangeError("Index out of range");
          }
          function U(e, t, r, n) {
            t < 0 && (t = 65535 + t + 1);
            for (var i = 0, o = Math.min(e.length - r, 2); i < o; ++i) e[r + i] = (t & 255 << 8 * (n ? i : 1 - i)) >>> 8 * (n ? i : 1 - i);
          }
          function R(e, t, r, n) {
            t < 0 && (t = 4294967295 + t + 1);
            for (var i = 0, o = Math.min(e.length - r, 4); i < o; ++i) e[r + i] = t >>> 8 * (n ? i : 3 - i) & 255;
          }
          function j(e, t, r, n, i, o) {
            if (r + n > e.length) throw new RangeError("Index out of range");
            if (r < 0) throw new RangeError("Index out of range");
          }
          function N(e, t, r, n, o) {
            return o || j(e, 0, r, 4), i.write(e, t, r, n, 23, 4), r + 4;
          }
          function F(e, t, r, n, o) {
            return o || j(e, 0, r, 8), i.write(e, t, r, n, 52, 8), r + 8;
          }
          u.prototype.slice = function (e, t) {
            var r,
              n = this.length;
            if ((e = ~~e) < 0 ? (e += n) < 0 && (e = 0) : e > n && (e = n), (t = void 0 === t ? n : ~~t) < 0 ? (t += n) < 0 && (t = 0) : t > n && (t = n), t < e && (t = e), u.TYPED_ARRAY_SUPPORT) (r = this.subarray(e, t)).__proto__ = u.prototype;else {
              var i = t - e;
              r = new u(i, void 0);
              for (var o = 0; o < i; ++o) r[o] = this[o + e];
            }
            return r;
          }, u.prototype.readUIntLE = function (e, t, r) {
            e |= 0, t |= 0, r || I(e, t, this.length);
            for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) n += this[e + o] * i;
            return n;
          }, u.prototype.readUIntBE = function (e, t, r) {
            e |= 0, t |= 0, r || I(e, t, this.length);
            for (var n = this[e + --t], i = 1; t > 0 && (i *= 256);) n += this[e + --t] * i;
            return n;
          }, u.prototype.readUInt8 = function (e, t) {
            return t || I(e, 1, this.length), this[e];
          }, u.prototype.readUInt16LE = function (e, t) {
            return t || I(e, 2, this.length), this[e] | this[e + 1] << 8;
          }, u.prototype.readUInt16BE = function (e, t) {
            return t || I(e, 2, this.length), this[e] << 8 | this[e + 1];
          }, u.prototype.readUInt32LE = function (e, t) {
            return t || I(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];
          }, u.prototype.readUInt32BE = function (e, t) {
            return t || I(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
          }, u.prototype.readIntLE = function (e, t, r) {
            e |= 0, t |= 0, r || I(e, t, this.length);
            for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) n += this[e + o] * i;
            return n >= (i *= 128) && (n -= Math.pow(2, 8 * t)), n;
          }, u.prototype.readIntBE = function (e, t, r) {
            e |= 0, t |= 0, r || I(e, t, this.length);
            for (var n = t, i = 1, o = this[e + --n]; n > 0 && (i *= 256);) o += this[e + --n] * i;
            return o >= (i *= 128) && (o -= Math.pow(2, 8 * t)), o;
          }, u.prototype.readInt8 = function (e, t) {
            return t || I(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
          }, u.prototype.readInt16LE = function (e, t) {
            t || I(e, 2, this.length);
            var r = this[e] | this[e + 1] << 8;
            return 32768 & r ? 4294901760 | r : r;
          }, u.prototype.readInt16BE = function (e, t) {
            t || I(e, 2, this.length);
            var r = this[e + 1] | this[e] << 8;
            return 32768 & r ? 4294901760 | r : r;
          }, u.prototype.readInt32LE = function (e, t) {
            return t || I(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
          }, u.prototype.readInt32BE = function (e, t) {
            return t || I(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
          }, u.prototype.readFloatLE = function (e, t) {
            return t || I(e, 4, this.length), i.read(this, e, !0, 23, 4);
          }, u.prototype.readFloatBE = function (e, t) {
            return t || I(e, 4, this.length), i.read(this, e, !1, 23, 4);
          }, u.prototype.readDoubleLE = function (e, t) {
            return t || I(e, 8, this.length), i.read(this, e, !0, 52, 8);
          }, u.prototype.readDoubleBE = function (e, t) {
            return t || I(e, 8, this.length), i.read(this, e, !1, 52, 8);
          }, u.prototype.writeUIntLE = function (e, t, r, n) {
            e = +e, t |= 0, r |= 0, n || M(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
            var i = 1,
              o = 0;
            for (this[t] = 255 & e; ++o < r && (i *= 256);) this[t + o] = e / i & 255;
            return t + r;
          }, u.prototype.writeUIntBE = function (e, t, r, n) {
            e = +e, t |= 0, r |= 0, n || M(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
            var i = r - 1,
              o = 1;
            for (this[t + i] = 255 & e; --i >= 0 && (o *= 256);) this[t + i] = e / o & 255;
            return t + r;
          }, u.prototype.writeUInt8 = function (e, t, r) {
            return e = +e, t |= 0, r || M(this, e, t, 1, 255, 0), u.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), this[t] = 255 & e, t + 1;
          }, u.prototype.writeUInt16LE = function (e, t, r) {
            return e = +e, t |= 0, r || M(this, e, t, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8) : U(this, e, t, !0), t + 2;
          }, u.prototype.writeUInt16BE = function (e, t, r) {
            return e = +e, t |= 0, r || M(this, e, t, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8, this[t + 1] = 255 & e) : U(this, e, t, !1), t + 2;
          }, u.prototype.writeUInt32LE = function (e, t, r) {
            return e = +e, t |= 0, r || M(this, e, t, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e) : R(this, e, t, !0), t + 4;
          }, u.prototype.writeUInt32BE = function (e, t, r) {
            return e = +e, t |= 0, r || M(this, e, t, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e) : R(this, e, t, !1), t + 4;
          }, u.prototype.writeIntLE = function (e, t, r, n) {
            if (e = +e, t |= 0, !n) {
              var i = Math.pow(2, 8 * r - 1);
              M(this, e, t, r, i - 1, -i);
            }
            var o = 0,
              a = 1,
              s = 0;
            for (this[t] = 255 & e; ++o < r && (a *= 256);) e < 0 && 0 === s && 0 !== this[t + o - 1] && (s = 1), this[t + o] = (e / a >> 0) - s & 255;
            return t + r;
          }, u.prototype.writeIntBE = function (e, t, r, n) {
            if (e = +e, t |= 0, !n) {
              var i = Math.pow(2, 8 * r - 1);
              M(this, e, t, r, i - 1, -i);
            }
            var o = r - 1,
              a = 1,
              s = 0;
            for (this[t + o] = 255 & e; --o >= 0 && (a *= 256);) e < 0 && 0 === s && 0 !== this[t + o + 1] && (s = 1), this[t + o] = (e / a >> 0) - s & 255;
            return t + r;
          }, u.prototype.writeInt8 = function (e, t, r) {
            return e = +e, t |= 0, r || M(this, e, t, 1, 127, -128), u.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;
          }, u.prototype.writeInt16LE = function (e, t, r) {
            return e = +e, t |= 0, r || M(this, e, t, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8) : U(this, e, t, !0), t + 2;
          }, u.prototype.writeInt16BE = function (e, t, r) {
            return e = +e, t |= 0, r || M(this, e, t, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8, this[t + 1] = 255 & e) : U(this, e, t, !1), t + 2;
          }, u.prototype.writeInt32LE = function (e, t, r) {
            return e = +e, t |= 0, r || M(this, e, t, 4, 2147483647, -2147483648), u.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24) : R(this, e, t, !0), t + 4;
          }, u.prototype.writeInt32BE = function (e, t, r) {
            return e = +e, t |= 0, r || M(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), u.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e) : R(this, e, t, !1), t + 4;
          }, u.prototype.writeFloatLE = function (e, t, r) {
            return N(this, e, t, !0, r);
          }, u.prototype.writeFloatBE = function (e, t, r) {
            return N(this, e, t, !1, r);
          }, u.prototype.writeDoubleLE = function (e, t, r) {
            return F(this, e, t, !0, r);
          }, u.prototype.writeDoubleBE = function (e, t, r) {
            return F(this, e, t, !1, r);
          }, u.prototype.copy = function (e, t, r, n) {
            if (r || (r = 0), n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t || (t = 0), n > 0 && n < r && (n = r), n === r) return 0;
            if (0 === e.length || 0 === this.length) return 0;
            if (t < 0) throw new RangeError("targetStart out of bounds");
            if (r < 0 || r >= this.length) throw new RangeError("sourceStart out of bounds");
            if (n < 0) throw new RangeError("sourceEnd out of bounds");
            n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);
            var i,
              o = n - r;
            if (this === e && r < t && t < n) for (i = o - 1; i >= 0; --i) e[i + t] = this[i + r];else if (o < 1e3 || !u.TYPED_ARRAY_SUPPORT) for (i = 0; i < o; ++i) e[i + t] = this[i + r];else Uint8Array.prototype.set.call(e, this.subarray(r, r + o), t);
            return o;
          }, u.prototype.fill = function (e, t, r, n) {
            if ("string" == typeof e) {
              if ("string" == typeof t ? (n = t, t = 0, r = this.length) : "string" == typeof r && (n = r, r = this.length), 1 === e.length) {
                var i = e.charCodeAt(0);
                i < 256 && (e = i);
              }
              if (void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");
              if ("string" == typeof n && !u.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);
            } else "number" == typeof e && (e &= 255);
            if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");
            if (r <= t) return this;
            var o;
            if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, e || (e = 0), "number" == typeof e) for (o = t; o < r; ++o) this[o] = e;else {
              var a = u.isBuffer(e) ? e : D(new u(e, n).toString()),
                s = a.length;
              for (o = 0; o < r - t; ++o) this[o + t] = a[o % s];
            }
            return this;
          };
          var L = /[^+\/0-9A-Za-z-_]/g;
          function D(e, t) {
            var r;
            t = t || 1 / 0;
            for (var n = e.length, i = null, o = [], a = 0; a < n; ++a) {
              if ((r = e.charCodeAt(a)) > 55295 && r < 57344) {
                if (!i) {
                  if (r > 56319) {
                    (t -= 3) > -1 && o.push(239, 191, 189);
                    continue;
                  }
                  if (a + 1 === n) {
                    (t -= 3) > -1 && o.push(239, 191, 189);
                    continue;
                  }
                  i = r;
                  continue;
                }
                if (r < 56320) {
                  (t -= 3) > -1 && o.push(239, 191, 189), i = r;
                  continue;
                }
                r = 65536 + (i - 55296 << 10 | r - 56320);
              } else i && (t -= 3) > -1 && o.push(239, 191, 189);
              if (i = null, r < 128) {
                if ((t -= 1) < 0) break;
                o.push(r);
              } else if (r < 2048) {
                if ((t -= 2) < 0) break;
                o.push(r >> 6 | 192, 63 & r | 128);
              } else if (r < 65536) {
                if ((t -= 3) < 0) break;
                o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
              } else {
                if (!(r < 1114112)) throw new Error("Invalid code point");
                if ((t -= 4) < 0) break;
                o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
              }
            }
            return o;
          }
          function H(e) {
            return n.toByteArray(function (e) {
              if ((e = function (e) {
                return e.trim ? e.trim() : e.replace(/^\s+|\s+$/g, "");
              }(e).replace(L, "")).length < 2) return "";
              for (; e.length % 4 != 0;) e += "=";
              return e;
            }(e));
          }
          function q(e, t, r, n) {
            for (var i = 0; i < n && !(i + r >= t.length || i >= e.length); ++i) t[i + r] = e[i];
            return i;
          }
        },
        3675: function _(e) {
          "use strict";

          e.exports = {
            100: "Continue",
            101: "Switching Protocols",
            102: "Processing",
            200: "OK",
            201: "Created",
            202: "Accepted",
            203: "Non-Authoritative Information",
            204: "No Content",
            205: "Reset Content",
            206: "Partial Content",
            207: "Multi-Status",
            208: "Already Reported",
            226: "IM Used",
            300: "Multiple Choices",
            301: "Moved Permanently",
            302: "Found",
            303: "See Other",
            304: "Not Modified",
            305: "Use Proxy",
            307: "Temporary Redirect",
            308: "Permanent Redirect",
            400: "Bad Request",
            401: "Unauthorized",
            402: "Payment Required",
            403: "Forbidden",
            404: "Not Found",
            405: "Method Not Allowed",
            406: "Not Acceptable",
            407: "Proxy Authentication Required",
            408: "Request Timeout",
            409: "Conflict",
            410: "Gone",
            411: "Length Required",
            412: "Precondition Failed",
            413: "Payload Too Large",
            414: "URI Too Long",
            415: "Unsupported Media Type",
            416: "Range Not Satisfiable",
            417: "Expectation Failed",
            418: "I'm a teapot",
            421: "Misdirected Request",
            422: "Unprocessable Entity",
            423: "Locked",
            424: "Failed Dependency",
            425: "Unordered Collection",
            426: "Upgrade Required",
            428: "Precondition Required",
            429: "Too Many Requests",
            431: "Request Header Fields Too Large",
            451: "Unavailable For Legal Reasons",
            500: "Internal Server Error",
            501: "Not Implemented",
            502: "Bad Gateway",
            503: "Service Unavailable",
            504: "Gateway Timeout",
            505: "HTTP Version Not Supported",
            506: "Variant Also Negotiates",
            507: "Insufficient Storage",
            508: "Loop Detected",
            509: "Bandwidth Limit Exceeded",
            510: "Not Extended",
            511: "Network Authentication Required"
          };
        },
        593: function _(e, t, r) {
          "use strict";

          var n = r(7701),
            i = r(4373),
            o = i(n("String.prototype.indexOf"));
          e.exports = function (e, t) {
            var r = n(e, !!t);
            return "function" == typeof r && o(e, ".prototype.") > -1 ? i(r) : r;
          };
        },
        4373: function _(e, t, r) {
          "use strict";

          var n = r(3767),
            i = r(7701),
            o = i("%Function.prototype.apply%"),
            a = i("%Function.prototype.call%"),
            s = i("%Reflect.apply%", !0) || n.call(a, o),
            u = i("%Object.getOwnPropertyDescriptor%", !0),
            c = i("%Object.defineProperty%", !0),
            f = i("%Math.max%");
          if (c) try {
            c({}, "a", {
              value: 1
            });
          } catch (e) {
            c = null;
          }
          e.exports = function (e) {
            var t = s(n, a, arguments);
            return u && c && u(t, "length").configurable && c(t, "length", {
              value: 1 + f(0, e.length - (arguments.length - 1))
            }), t;
          };
          var d = function d() {
            return s(n, o, arguments);
          };
          c ? c(e.exports, "apply", {
            value: d
          }) : e.exports.apply = d;
        },
        7759: function _(e, t, r) {
          "use strict";

          for (var n = r(8847)(r(4519)), i = r(3630), o = {}, a = 0, s = Object.entries(i); a < s.length; a++) {
            var u = (0, n.default)(s[a], 2),
              c = u[0],
              f = u[1];
            o[c.toUpperCase().replace(/-/g, "_")] = f;
          }
          e.exports = Object.freeze(o);
        },
        7223: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(6657),
            o = r(5262),
            a = r(1842),
            s = r(779);
          (t = e.exports).addPrefix = function (e, t) {
            var r;
            if (n.isBuffer(e)) r = s.varintBufferEncode(e);else {
              if (!a[e]) throw new Error("multicodec not recognized");
              r = a[e];
            }
            return n.concat([r, t]);
          }, t.rmPrefix = function (e) {
            return i.decode(e), e.slice(i.decode.bytes);
          }, t.getCodec = function (e) {
            var t = i.decode(e),
              r = o.get(t);
            if (void 0 === r) throw new Error("Code ".concat(t, " not found"));
            return r;
          }, t.getName = function (e) {
            return o.get(e);
          }, t.getNumber = function (e) {
            var t = a[e];
            if (void 0 === t) throw new Error("Codec `" + e + "` not found");
            return s.varintBufferDecode(t)[0];
          }, t.getCode = function (e) {
            return i.decode(e);
          }, t.getCodeVarint = function (e) {
            var t = a[e];
            if (void 0 === t) throw new Error("Codec `" + e + "` not found");
            return t;
          }, t.getVarint = function (e) {
            return i.encode(e);
          };
          var u = r(7759);
          Object.assign(t, u), t.print = r(9268);
        },
        5262: function _(e, t, r) {
          "use strict";

          var n = r(3630),
            i = new Map();
          for (var o in n) {
            var a = n[o];
            i.set(a, o);
          }
          e.exports = Object.freeze(i);
        },
        9268: function _(e, t, r) {
          "use strict";

          for (var n = r(8847)(r(4519)), i = r(3630), o = {}, a = 0, s = Object.entries(i); a < s.length; a++) {
            var u = (0, n.default)(s[a], 2),
              c = u[0],
              f = u[1];
            void 0 === o[f] && (o[f] = c);
          }
          e.exports = Object.freeze(o);
        },
        779: function _(e, t, r) {
          "use strict";

          var n = r(6657),
            i = r(9033).Buffer;
          function o(e) {
            return parseInt(e.toString("hex"), 16);
          }
          function a(e) {
            var t = e.toString(16);
            return t.length % 2 == 1 && (t = "0" + t), i.from(t, "hex");
          }
          e.exports = {
            numberToBuffer: a,
            bufferToNumber: o,
            varintBufferEncode: function varintBufferEncode(e) {
              return i.from(n.encode(o(e)));
            },
            varintBufferDecode: function varintBufferDecode(e) {
              return a(n.decode(e));
            },
            varintEncode: function varintEncode(e) {
              return i.from(n.encode(e));
            }
          };
        },
        1842: function _(e, t, r) {
          "use strict";

          var n = r(3630),
            i = r(779).varintEncode,
            o = {};
          for (var a in n) {
            var s = n[a];
            o[a] = i(s);
          }
          e.exports = Object.freeze(o);
        },
        9976: function _(e, t, r) {
          "use strict";

          var n = r(7748),
            i = r(9033).Buffer,
            o = {
              checkCIDComponents: function checkCIDComponents(e) {
                if (null == e) return "null values are not valid CIDs";
                if (0 !== e.version && 1 !== e.version) return "Invalid version, must be a number equal to 1 or 0";
                if ("string" != typeof e.codec) return "codec must be string";
                if (0 === e.version) {
                  if ("dag-pb" !== e.codec) return "codec must be 'dag-pb' for CIDv0";
                  if ("base58btc" !== e.multibaseName) return "multibaseName must be 'base58btc' for CIDv0";
                }
                if (!i.isBuffer(e.multihash)) return "multihash must be a Buffer";
                try {
                  n.validate(e.multihash);
                } catch (e) {
                  var t = e.message;
                  return t || (t = "Multihash validation failed"), t;
                }
              }
            };
          e.exports = o;
        },
        2753: function _(e, t, r) {
          "use strict";

          var n = r(8847),
            i = n(r(9721)),
            o = n(r(8985)),
            a = r(9033).Buffer,
            s = r(7748),
            u = r(6086),
            c = r(7223),
            f = r(3630),
            d = r(9976),
            l = r(3162)(function (e) {
              function t(e, r, n, o) {
                if ((0, i.default)(this, t), l.isCID(e)) {
                  var f = e;
                  return this.version = f.version, this.codec = f.codec, this.multihash = a.from(f.multihash), void (this.multibaseName = f.multibaseName || (0 === f.version ? "base58btc" : "base32"));
                }
                if ("string" == typeof e) {
                  var d = u.isEncoded(e);
                  if (d) {
                    var h = u.decode(e);
                    this.version = parseInt(h.slice(0, 1).toString("hex"), 16), this.codec = c.getCodec(h.slice(1)), this.multihash = c.rmPrefix(h.slice(1)), this.multibaseName = d;
                  } else this.version = 0, this.codec = "dag-pb", this.multihash = s.fromB58String(e), this.multibaseName = "base58btc";
                  return t.validateCID(this), void Object.defineProperty(this, "string", {
                    value: e
                  });
                }
                if (a.isBuffer(e)) {
                  var p = e.slice(0, 1),
                    b = parseInt(p.toString("hex"), 16);
                  if (1 === b) {
                    var y = e;
                    this.version = b, this.codec = c.getCodec(y.slice(1)), this.multihash = c.rmPrefix(y.slice(1)), this.multibaseName = "base32";
                  } else this.version = 0, this.codec = "dag-pb", this.multihash = e, this.multibaseName = "base58btc";
                  t.validateCID(this);
                } else this.version = e, this.codec = r, this.multihash = n, this.multibaseName = o || (0 === e ? "base58btc" : "base32"), t.validateCID(this);
              }
              return (0, o.default)(t, [{
                key: "buffer",
                get: function get() {
                  var e = this._buffer;
                  if (!e) {
                    if (0 === this.version) e = this.multihash;else {
                      if (1 !== this.version) throw new Error("unsupported version");
                      e = a.concat([a.from("01", "hex"), c.getCodeVarint(this.codec), this.multihash]);
                    }
                    Object.defineProperty(this, "_buffer", {
                      value: e
                    });
                  }
                  return e;
                }
              }, {
                key: "prefix",
                get: function get() {
                  return a.concat([a.from("0".concat(this.version), "hex"), c.getCodeVarint(this.codec), s.prefix(this.multihash)]);
                }
              }, {
                key: "toV0",
                value: function value() {
                  if ("dag-pb" !== this.codec) throw new Error("Cannot convert a non dag-pb CID to CIDv0");
                  var e = s.decode(this.multihash),
                    t = e.name,
                    r = e.length;
                  if ("sha2-256" !== t) throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
                  if (32 !== r) throw new Error("Cannot convert non 32 byte multihash CID to CIDv0");
                  return new l(0, this.codec, this.multihash);
                }
              }, {
                key: "toV1",
                value: function value() {
                  return new l(1, this.codec, this.multihash);
                }
              }, {
                key: "toBaseEncodedString",
                value: function value() {
                  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.multibaseName;
                  if (this.string && e === this.multibaseName) return this.string;
                  var t = null;
                  if (0 === this.version) {
                    if ("base58btc" !== e) throw new Error("not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()");
                    t = s.toB58String(this.multihash);
                  } else {
                    if (1 !== this.version) throw new Error("unsupported version");
                    t = u.encode(e, this.buffer).toString();
                  }
                  return e === this.multibaseName && Object.defineProperty(this, "string", {
                    value: t
                  }), t;
                }
              }, {
                key: e,
                value: function value() {
                  return "CID(" + this.toString() + ")";
                }
              }, {
                key: "toString",
                value: function value(e) {
                  return this.toBaseEncodedString(e);
                }
              }, {
                key: "toJSON",
                value: function value() {
                  return {
                    codec: this.codec,
                    version: this.version,
                    hash: this.multihash
                  };
                }
              }, {
                key: "equals",
                value: function value(e) {
                  return this.codec === e.codec && this.version === e.version && this.multihash.equals(e.multihash);
                }
              }], [{
                key: "validateCID",
                value: function value(e) {
                  var t = d.checkCIDComponents(e);
                  if (t) throw new Error(t);
                }
              }]), t;
            }(Symbol.for("nodejs.util.inspect.custom")), {
              className: "CID",
              symbolName: "@ipld/js-cid/CID"
            });
          l.codecs = f, e.exports = l;
        },
        3013: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer,
            i = r(7245).Transform,
            o = r(3462).s;
          function a(e) {
            i.call(this), this.hashMode = "string" == typeof e, this.hashMode ? this[e] = this._finalOrDigest : this.final = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
          }
          r(1736)(a, i), a.prototype.update = function (e, t, r) {
            "string" == typeof e && (e = n.from(e, t));
            var i = this._update(e);
            return this.hashMode ? this : (r && (i = this._toString(i, r)), i);
          }, a.prototype.setAutoPadding = function () {}, a.prototype.getAuthTag = function () {
            throw new Error("trying to get auth tag in unsupported state");
          }, a.prototype.setAuthTag = function () {
            throw new Error("trying to set auth tag in unsupported state");
          }, a.prototype.setAAD = function () {
            throw new Error("trying to set aad in unsupported state");
          }, a.prototype._transform = function (e, t, r) {
            var n;
            try {
              this.hashMode ? this._update(e) : this.push(this._update(e));
            } catch (e) {
              n = e;
            } finally {
              r(n);
            }
          }, a.prototype._flush = function (e) {
            var t;
            try {
              this.push(this.__final());
            } catch (e) {
              t = e;
            }
            e(t);
          }, a.prototype._finalOrDigest = function (e) {
            var t = this.__final() || n.alloc(0);
            return e && (t = this._toString(t, e, !0)), t;
          }, a.prototype._toString = function (e, t, r) {
            if (this._decoder || (this._decoder = new o(t), this._encoding = t), this._encoding !== t) throw new Error("can't switch encodings");
            var n = this._decoder.write(e);
            return r && (n += this._decoder.end()), n;
          }, e.exports = a;
        },
        3162: function _(e, t, r) {
          "use strict";

          var n = r(8847),
            i = n(r(4727)),
            o = n(r(775)),
            a = n(r(9721)),
            s = n(r(8985)),
            u = n(r(8975)),
            c = n(r(5163)),
            f = n(r(4650)),
            d = n(r(1949));
          e.exports = function (e, t) {
            var r = t.className,
              n = t.symbolName,
              i = Symbol.for(n),
              l = (0, o.default)({}, r, function (e, t) {
                (0, c.default)(h, e);
                var n,
                  o,
                  l = (n = h, o = function () {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                    } catch (e) {
                      return !1;
                    }
                  }(), function () {
                    var e,
                      t = (0, d.default)(n);
                    if (o) {
                      var r = (0, d.default)(this).constructor;
                      e = Reflect.construct(t, arguments, r);
                    } else e = t.apply(this, arguments);
                    return (0, f.default)(this, e);
                  });
                function h() {
                  var e;
                  (0, a.default)(this, h);
                  for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                  return e = l.call.apply(l, [this].concat(r)), Object.defineProperty((0, u.default)(e), i, {
                    value: !0
                  }), e;
                }
                return (0, s.default)(h, [{
                  key: t,
                  get: function get() {
                    return r;
                  }
                }]), h;
              }(e, Symbol.toStringTag))[r];
            return l["is".concat(r)] = function (e) {
              return !(!e || !e[i]);
            }, l;
          }, e.exports.proto = function (e, t) {
            var r = t.className,
              n = t.symbolName,
              a = t.withoutNew,
              s = Symbol.for(n),
              u = (0, o.default)({}, r, function () {
                for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                if (a && !(this instanceof u)) return (0, i.default)(u, r);
                var o = e.call.apply(e, [this].concat(r)) || this;
                return o && !o[s] && Object.defineProperty(o, s, {
                  value: !0
                }), o;
              })[r];
            return u.prototype = Object.create(e.prototype), u.prototype.constructor = u, Object.defineProperty(u.prototype, Symbol.toStringTag, {
              get: function get() {
                return r;
              }
            }), u["is".concat(r)] = function (e) {
              return !(!e || !e[s]);
            }, u;
          };
        },
        6834: function _(e, t, r) {
          "use strict";

          var n = r(2753);
          t.cidV0ToV1Base32 = function (e) {
            var t = new n(e);
            return 0 === t.version && (t = t.toV1()), t.toString("base32");
          };
        },
        4308: function _(e, t, r) {
          "use strict";

          var n = r(9206),
            i = r(9512),
            o = i.hexStringToBuffer,
            a = i.profiles,
            s = r(6834).cidV0ToV1Base32;
          e.exports = {
            helpers: {
              cidV0ToV1Base32: s
            },
            decode: function decode(e) {
              var t = o(e),
                r = n.getCodec(t),
                i = n.rmPrefix(t),
                s = a[r];
              return s || (s = a.default), s.decode(i);
            },
            fromIpfs: function fromIpfs(e) {
              return this.encode("ipfs-ns", e);
            },
            fromSwarm: function fromSwarm(e) {
              return this.encode("swarm-ns", e);
            },
            encode: function encode(e, t) {
              var r = a[e];
              r || (r = a.default);
              var i = r.encode(t);
              return n.addPrefix(e, i).toString("hex");
            },
            getCodec: function getCodec(e) {
              var t = o(e);
              return n.getCodec(t);
            }
          };
        },
        9512: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(2753),
            o = r(7748),
            a = function a(e) {
              var t,
                r = e.slice(0, 2),
                n = e.slice(2);
              return t = "0x" === r ? n : e, o.fromHexString(t);
            },
            s = {
              swarm: function swarm(e) {
                var t = o.encode(a(e), "keccak-256");
                return new i(1, "swarm-manifest", t).buffer;
              },
              ipfs: function ipfs(e) {
                var t = o.fromB58String(e);
                return new i(1, "dag-pb", t).buffer;
              },
              utf8: function utf8(e) {
                return n.from(e, "utf8");
              }
            },
            u = {
              hexMultiHash: function hexMultiHash(e) {
                var t = new i(e);
                return o.decode(t.multihash).digest.toString("hex");
              },
              b58MultiHash: function b58MultiHash(e) {
                var t = new i(e);
                return o.toB58String(t.multihash);
              },
              utf8: function utf8(e) {
                return e.toString("utf8");
              }
            },
            c = {
              "swarm-ns": {
                encode: s.swarm,
                decode: u.hexMultiHash
              },
              "ipfs-ns": {
                encode: s.ipfs,
                decode: u.b58MultiHash
              },
              "ipns-ns": {
                encode: s.ipfs,
                decode: u.b58MultiHash
              },
              default: {
                encode: s.utf8,
                decode: u.utf8
              }
            };
          t.hexStringToBuffer = a, t.profiles = c;
        },
        4628: function _(e, t, r) {
          "use strict";

          var n,
            i,
            o = r(8847)(r(3355));
          i = function i(e) {
            e.version = "1.2.2";
            var t = function () {
                for (var e = 0, t = new Array(256), r = 0; 256 != r; ++r) e = 1 & (e = 1 & (e = 1 & (e = 1 & (e = 1 & (e = 1 & (e = 1 & (e = 1 & (e = r) ? -306674912 ^ e >>> 1 : e >>> 1) ? -306674912 ^ e >>> 1 : e >>> 1) ? -306674912 ^ e >>> 1 : e >>> 1) ? -306674912 ^ e >>> 1 : e >>> 1) ? -306674912 ^ e >>> 1 : e >>> 1) ? -306674912 ^ e >>> 1 : e >>> 1) ? -306674912 ^ e >>> 1 : e >>> 1) ? -306674912 ^ e >>> 1 : e >>> 1, t[r] = e;
                return "undefined" != typeof Int32Array ? new Int32Array(t) : t;
              }(),
              r = function (e) {
                var t = 0,
                  r = 0,
                  n = 0,
                  i = "undefined" != typeof Int32Array ? new Int32Array(4096) : new Array(4096);
                for (n = 0; 256 != n; ++n) i[n] = e[n];
                for (n = 0; 256 != n; ++n) for (r = e[n], t = 256 + n; t < 4096; t += 256) r = i[t] = r >>> 8 ^ e[255 & r];
                var o = [];
                for (n = 1; 16 != n; ++n) o[n - 1] = "undefined" != typeof Int32Array ? i.subarray(256 * n, 256 * n + 256) : i.slice(256 * n, 256 * n + 256);
                return o;
              }(t),
              n = r[0],
              i = r[1],
              o = r[2],
              a = r[3],
              s = r[4],
              u = r[5],
              c = r[6],
              f = r[7],
              d = r[8],
              l = r[9],
              h = r[10],
              p = r[11],
              b = r[12],
              y = r[13],
              m = r[14];
            e.table = t, e.bstr = function (e, r) {
              for (var n = -1 ^ r, i = 0, o = e.length; i < o;) n = n >>> 8 ^ t[255 & (n ^ e.charCodeAt(i++))];
              return ~n;
            }, e.buf = function (e, r) {
              for (var v = -1 ^ r, g = e.length - 15, w = 0; w < g;) v = m[e[w++] ^ 255 & v] ^ y[e[w++] ^ v >> 8 & 255] ^ b[e[w++] ^ v >> 16 & 255] ^ p[e[w++] ^ v >>> 24] ^ h[e[w++]] ^ l[e[w++]] ^ d[e[w++]] ^ f[e[w++]] ^ c[e[w++]] ^ u[e[w++]] ^ s[e[w++]] ^ a[e[w++]] ^ o[e[w++]] ^ i[e[w++]] ^ n[e[w++]] ^ t[e[w++]];
              for (g += 15; w < g;) v = v >>> 8 ^ t[255 & (v ^ e[w++])];
              return ~v;
            }, e.str = function (e, r) {
              for (var n = -1 ^ r, i = 0, o = e.length, a = 0, s = 0; i < o;) (a = e.charCodeAt(i++)) < 128 ? n = n >>> 8 ^ t[255 & (n ^ a)] : a < 2048 ? n = (n = n >>> 8 ^ t[255 & (n ^ (192 | a >> 6 & 31))]) >>> 8 ^ t[255 & (n ^ (128 | 63 & a))] : a >= 55296 && a < 57344 ? (a = 64 + (1023 & a), s = 1023 & e.charCodeAt(i++), n = (n = (n = (n = n >>> 8 ^ t[255 & (n ^ (240 | a >> 8 & 7))]) >>> 8 ^ t[255 & (n ^ (128 | a >> 2 & 63))]) >>> 8 ^ t[255 & (n ^ (128 | s >> 6 & 15 | (3 & a) << 4))]) >>> 8 ^ t[255 & (n ^ (128 | 63 & s))]) : n = (n = (n = n >>> 8 ^ t[255 & (n ^ (224 | a >> 12 & 15))]) >>> 8 ^ t[255 & (n ^ (128 | a >> 6 & 63))]) >>> 8 ^ t[255 & (n ^ (128 | 63 & a))];
              return ~n;
            };
          }, "undefined" == typeof DO_NOT_EXPORT_CRC ? "object" === (0, o.default)(t) ? i(t) : (n = function () {
            var e = {};
            return i(e), e;
          }.call(t, r, t, e), void 0 === n || (e.exports = n)) : i({});
        },
        5102: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(6597),
            o = r(1734);
          e.exports = function (e) {
            return new s(e);
          };
          var a = {
            secp256k1: {
              name: "secp256k1",
              byteLength: 32
            },
            secp224r1: {
              name: "p224",
              byteLength: 28
            },
            prime256v1: {
              name: "p256",
              byteLength: 32
            },
            prime192v1: {
              name: "p192",
              byteLength: 24
            },
            ed25519: {
              name: "ed25519",
              byteLength: 32
            },
            secp384r1: {
              name: "p384",
              byteLength: 48
            },
            secp521r1: {
              name: "p521",
              byteLength: 66
            }
          };
          function s(e) {
            this.curveType = a[e], this.curveType || (this.curveType = {
              name: e
            }), this.curve = new i.ec(this.curveType.name), this.keys = void 0;
          }
          function u(e, t, r) {
            Array.isArray(e) || (e = e.toArray());
            var i = new n(e);
            if (r && i.length < r) {
              var o = new n(r - i.length);
              o.fill(0), i = n.concat([o, i]);
            }
            return t ? i.toString(t) : i;
          }
          a.p224 = a.secp224r1, a.p256 = a.secp256r1 = a.prime256v1, a.p192 = a.secp192r1 = a.prime192v1, a.p384 = a.secp384r1, a.p521 = a.secp521r1, s.prototype.generateKeys = function (e, t) {
            return this.keys = this.curve.genKeyPair(), this.getPublicKey(e, t);
          }, s.prototype.computeSecret = function (e, t, r) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), u(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(), r, this.curveType.byteLength);
          }, s.prototype.getPublicKey = function (e, t) {
            var r = this.keys.getPublic("compressed" === t, !0);
            return "hybrid" === t && (r[r.length - 1] % 2 ? r[0] = 7 : r[0] = 6), u(r, e);
          }, s.prototype.getPrivateKey = function (e) {
            return u(this.keys.getPrivate(), e);
          }, s.prototype.setPublicKey = function (e, t) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), this.keys._importPublic(e), this;
          }, s.prototype.setPrivateKey = function (e, t) {
            t = t || "utf8", n.isBuffer(e) || (e = new n(e, t));
            var r = new o(e);
            return r = r.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(r), this;
          };
        },
        5866: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(807),
            o = r(6707),
            a = r(1708),
            s = r(3013);
          function u(e) {
            s.call(this, "digest"), this._hash = e;
          }
          n(u, s), u.prototype._update = function (e) {
            this._hash.update(e);
          }, u.prototype._final = function () {
            return this._hash.digest();
          }, e.exports = function (e) {
            return "md5" === (e = e.toLowerCase()) ? new i() : "rmd160" === e || "ripemd160" === e ? new o() : new u(a(e));
          };
        },
        5349: function _(e, t, r) {
          "use strict";

          var n = r(807);
          e.exports = function (e) {
            return new n().update(e).digest();
          };
        },
        4424: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(9956),
            o = r(3013),
            a = r(8850).Buffer,
            s = r(5349),
            u = r(6707),
            c = r(1708),
            f = a.alloc(128);
          function d(e, t) {
            o.call(this, "digest"), "string" == typeof t && (t = a.from(t));
            var r = "sha512" === e || "sha384" === e ? 128 : 64;
            this._alg = e, this._key = t, t.length > r ? t = ("rmd160" === e ? new u() : c(e)).update(t).digest() : t.length < r && (t = a.concat([t, f], r));
            for (var n = this._ipad = a.allocUnsafe(r), i = this._opad = a.allocUnsafe(r), s = 0; s < r; s++) n[s] = 54 ^ t[s], i[s] = 92 ^ t[s];
            this._hash = "rmd160" === e ? new u() : c(e), this._hash.update(n);
          }
          n(d, o), d.prototype._update = function (e) {
            this._hash.update(e);
          }, d.prototype._final = function () {
            var e = this._hash.digest();
            return ("rmd160" === this._alg ? new u() : c(this._alg)).update(this._opad).update(e).digest();
          }, e.exports = function (e, t) {
            return "rmd160" === (e = e.toLowerCase()) || "ripemd160" === e ? new d("rmd160", t) : "md5" === e ? new i(s, t) : new d(e, t);
          };
        },
        9956: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(8850).Buffer,
            o = r(3013),
            a = i.alloc(128),
            s = 64;
          function u(e, t) {
            o.call(this, "digest"), "string" == typeof t && (t = i.from(t)), this._alg = e, this._key = t, t.length > s ? t = e(t) : t.length < s && (t = i.concat([t, a], s));
            for (var r = this._ipad = i.allocUnsafe(s), n = this._opad = i.allocUnsafe(s), u = 0; u < s; u++) r[u] = 54 ^ t[u], n[u] = 92 ^ t[u];
            this._hash = [r];
          }
          n(u, o), u.prototype._update = function (e) {
            this._hash.push(e);
          }, u.prototype._final = function () {
            var e = this._alg(i.concat(this._hash));
            return this._alg(i.concat([this._opad, e]));
          }, e.exports = u;
        },
        2439: function _() {
          "use strict";

          !function (e) {
            !function (t) {
              var r = {
                searchParams: "URLSearchParams" in e,
                iterable: "Symbol" in e && "iterator" in Symbol,
                blob: "FileReader" in e && "Blob" in e && function () {
                  try {
                    return new Blob(), !0;
                  } catch (e) {
                    return !1;
                  }
                }(),
                formData: "FormData" in e,
                arrayBuffer: "ArrayBuffer" in e
              };
              if (r.arrayBuffer) var n = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"],
                i = ArrayBuffer.isView || function (e) {
                  return e && n.indexOf(Object.prototype.toString.call(e)) > -1;
                };
              function o(e) {
                if ("string" != typeof e && (e = String(e)), /[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e)) throw new TypeError("Invalid character in header field name");
                return e.toLowerCase();
              }
              function a(e) {
                return "string" != typeof e && (e = String(e)), e;
              }
              function s(e) {
                var t = {
                  next: function next() {
                    var t = e.shift();
                    return {
                      done: void 0 === t,
                      value: t
                    };
                  }
                };
                return r.iterable && (t[Symbol.iterator] = function () {
                  return t;
                }), t;
              }
              function u(e) {
                this.map = {}, e instanceof u ? e.forEach(function (e, t) {
                  this.append(t, e);
                }, this) : Array.isArray(e) ? e.forEach(function (e) {
                  this.append(e[0], e[1]);
                }, this) : e && Object.getOwnPropertyNames(e).forEach(function (t) {
                  this.append(t, e[t]);
                }, this);
              }
              function c(e) {
                if (e.bodyUsed) return Promise.reject(new TypeError("Already read"));
                e.bodyUsed = !0;
              }
              function f(e) {
                return new Promise(function (t, r) {
                  e.onload = function () {
                    t(e.result);
                  }, e.onerror = function () {
                    r(e.error);
                  };
                });
              }
              function d(e) {
                var t = new FileReader(),
                  r = f(t);
                return t.readAsArrayBuffer(e), r;
              }
              function l(e) {
                if (e.slice) return e.slice(0);
                var t = new Uint8Array(e.byteLength);
                return t.set(new Uint8Array(e)), t.buffer;
              }
              function h() {
                return this.bodyUsed = !1, this._initBody = function (e) {
                  var t;
                  this._bodyInit = e, e ? "string" == typeof e ? this._bodyText = e : r.blob && Blob.prototype.isPrototypeOf(e) ? this._bodyBlob = e : r.formData && FormData.prototype.isPrototypeOf(e) ? this._bodyFormData = e : r.searchParams && URLSearchParams.prototype.isPrototypeOf(e) ? this._bodyText = e.toString() : r.arrayBuffer && r.blob && (t = e) && DataView.prototype.isPrototypeOf(t) ? (this._bodyArrayBuffer = l(e.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer])) : r.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(e) || i(e)) ? this._bodyArrayBuffer = l(e) : this._bodyText = e = Object.prototype.toString.call(e) : this._bodyText = "", this.headers.get("content-type") || ("string" == typeof e ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : r.searchParams && URLSearchParams.prototype.isPrototypeOf(e) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"));
                }, r.blob && (this.blob = function () {
                  var e = c(this);
                  if (e) return e;
                  if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                  if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                  if (this._bodyFormData) throw new Error("could not read FormData body as blob");
                  return Promise.resolve(new Blob([this._bodyText]));
                }, this.arrayBuffer = function () {
                  return this._bodyArrayBuffer ? c(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(d);
                }), this.text = function () {
                  var e,
                    t,
                    r,
                    n = c(this);
                  if (n) return n;
                  if (this._bodyBlob) return e = this._bodyBlob, r = f(t = new FileReader()), t.readAsText(e), r;
                  if (this._bodyArrayBuffer) return Promise.resolve(function (e) {
                    for (var t = new Uint8Array(e), r = new Array(t.length), n = 0; n < t.length; n++) r[n] = String.fromCharCode(t[n]);
                    return r.join("");
                  }(this._bodyArrayBuffer));
                  if (this._bodyFormData) throw new Error("could not read FormData body as text");
                  return Promise.resolve(this._bodyText);
                }, r.formData && (this.formData = function () {
                  return this.text().then(y);
                }), this.json = function () {
                  return this.text().then(JSON.parse);
                }, this;
              }
              u.prototype.append = function (e, t) {
                e = o(e), t = a(t);
                var r = this.map[e];
                this.map[e] = r ? r + ", " + t : t;
              }, u.prototype.delete = function (e) {
                delete this.map[o(e)];
              }, u.prototype.get = function (e) {
                return e = o(e), this.has(e) ? this.map[e] : null;
              }, u.prototype.has = function (e) {
                return this.map.hasOwnProperty(o(e));
              }, u.prototype.set = function (e, t) {
                this.map[o(e)] = a(t);
              }, u.prototype.forEach = function (e, t) {
                for (var r in this.map) this.map.hasOwnProperty(r) && e.call(t, this.map[r], r, this);
              }, u.prototype.keys = function () {
                var e = [];
                return this.forEach(function (t, r) {
                  e.push(r);
                }), s(e);
              }, u.prototype.values = function () {
                var e = [];
                return this.forEach(function (t) {
                  e.push(t);
                }), s(e);
              }, u.prototype.entries = function () {
                var e = [];
                return this.forEach(function (t, r) {
                  e.push([r, t]);
                }), s(e);
              }, r.iterable && (u.prototype[Symbol.iterator] = u.prototype.entries);
              var p = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
              function b(e, t) {
                var r,
                  n,
                  i = (t = t || {}).body;
                if (e instanceof b) {
                  if (e.bodyUsed) throw new TypeError("Already read");
                  this.url = e.url, this.credentials = e.credentials, t.headers || (this.headers = new u(e.headers)), this.method = e.method, this.mode = e.mode, this.signal = e.signal, i || null == e._bodyInit || (i = e._bodyInit, e.bodyUsed = !0);
                } else this.url = String(e);
                if (this.credentials = t.credentials || this.credentials || "same-origin", !t.headers && this.headers || (this.headers = new u(t.headers)), this.method = (n = (r = t.method || this.method || "GET").toUpperCase(), p.indexOf(n) > -1 ? n : r), this.mode = t.mode || this.mode || null, this.signal = t.signal || this.signal, this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && i) throw new TypeError("Body not allowed for GET or HEAD requests");
                this._initBody(i);
              }
              function y(e) {
                var t = new FormData();
                return e.trim().split("&").forEach(function (e) {
                  if (e) {
                    var r = e.split("="),
                      n = r.shift().replace(/\+/g, " "),
                      i = r.join("=").replace(/\+/g, " ");
                    t.append(decodeURIComponent(n), decodeURIComponent(i));
                  }
                }), t;
              }
              function m(e, t) {
                t || (t = {}), this.type = "default", this.status = void 0 === t.status ? 200 : t.status, this.ok = this.status >= 200 && this.status < 300, this.statusText = "statusText" in t ? t.statusText : "OK", this.headers = new u(t.headers), this.url = t.url || "", this._initBody(e);
              }
              b.prototype.clone = function () {
                return new b(this, {
                  body: this._bodyInit
                });
              }, h.call(b.prototype), h.call(m.prototype), m.prototype.clone = function () {
                return new m(this._bodyInit, {
                  status: this.status,
                  statusText: this.statusText,
                  headers: new u(this.headers),
                  url: this.url
                });
              }, m.error = function () {
                var e = new m(null, {
                  status: 0,
                  statusText: ""
                });
                return e.type = "error", e;
              };
              var v = [301, 302, 303, 307, 308];
              m.redirect = function (e, t) {
                if (-1 === v.indexOf(t)) throw new RangeError("Invalid status code");
                return new m(null, {
                  status: t,
                  headers: {
                    location: e
                  }
                });
              }, t.DOMException = e.DOMException;
              try {
                new t.DOMException();
              } catch (e) {
                t.DOMException = function (e, t) {
                  this.message = e, this.name = t;
                  var r = Error(e);
                  this.stack = r.stack;
                }, t.DOMException.prototype = Object.create(Error.prototype), t.DOMException.prototype.constructor = t.DOMException;
              }
              function g(e, n) {
                return new Promise(function (i, o) {
                  var a = new b(e, n);
                  if (a.signal && a.signal.aborted) return o(new t.DOMException("Aborted", "AbortError"));
                  var s = new XMLHttpRequest();
                  function c() {
                    s.abort();
                  }
                  s.onload = function () {
                    var e,
                      t,
                      r = {
                        status: s.status,
                        statusText: s.statusText,
                        headers: (e = s.getAllResponseHeaders() || "", t = new u(), e.replace(/\r?\n[\t ]+/g, " ").split(/\r?\n/).forEach(function (e) {
                          var r = e.split(":"),
                            n = r.shift().trim();
                          if (n) {
                            var i = r.join(":").trim();
                            t.append(n, i);
                          }
                        }), t)
                      };
                    r.url = "responseURL" in s ? s.responseURL : r.headers.get("X-Request-URL");
                    var n = "response" in s ? s.response : s.responseText;
                    i(new m(n, r));
                  }, s.onerror = function () {
                    o(new TypeError("Network request failed"));
                  }, s.ontimeout = function () {
                    o(new TypeError("Network request failed"));
                  }, s.onabort = function () {
                    o(new t.DOMException("Aborted", "AbortError"));
                  }, s.open(a.method, a.url, !0), "include" === a.credentials ? s.withCredentials = !0 : "omit" === a.credentials && (s.withCredentials = !1), "responseType" in s && r.blob && (s.responseType = "blob"), a.headers.forEach(function (e, t) {
                    s.setRequestHeader(t, e);
                  }), a.signal && (a.signal.addEventListener("abort", c), s.onreadystatechange = function () {
                    4 === s.readyState && a.signal.removeEventListener("abort", c);
                  }), s.send(void 0 === a._bodyInit ? null : a._bodyInit);
                });
              }
              g.polyfill = !0, e.fetch || (e.fetch = g, e.Headers = u, e.Request = b, e.Response = m), t.Headers = u, t.Request = b, t.Response = m, t.fetch = g, Object.defineProperty(t, "__esModule", {
                value: !0
              });
            }({});
          }("undefined" != typeof self ? self : void 0);
        },
        4293: function _(e, t, r) {
          "use strict";

          t.randomBytes = t.rng = t.pseudoRandomBytes = t.prng = r(5010), t.createHash = t.Hash = r(5866), t.createHmac = t.Hmac = r(4424);
          var n = r(6561),
            i = Object.keys(n),
            o = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(i);
          t.getHashes = function () {
            return o;
          };
          var a = r(4192);
          t.pbkdf2 = a.pbkdf2, t.pbkdf2Sync = a.pbkdf2Sync;
          var s = r(6805);
          t.Cipher = s.Cipher, t.createCipher = s.createCipher, t.Cipheriv = s.Cipheriv, t.createCipheriv = s.createCipheriv, t.Decipher = s.Decipher, t.createDecipher = s.createDecipher, t.Decipheriv = s.Decipheriv, t.createDecipheriv = s.createDecipheriv, t.getCiphers = s.getCiphers, t.listCiphers = s.listCiphers;
          var u = r(8333);
          t.DiffieHellmanGroup = u.DiffieHellmanGroup, t.createDiffieHellmanGroup = u.createDiffieHellmanGroup, t.getDiffieHellman = u.getDiffieHellman, t.createDiffieHellman = u.createDiffieHellman, t.DiffieHellman = u.DiffieHellman;
          var c = r(9527);
          t.createSign = c.createSign, t.Sign = c.Sign, t.createVerify = c.createVerify, t.Verify = c.Verify, t.createECDH = r(5102);
          var f = r(6991);
          t.publicEncrypt = f.publicEncrypt, t.privateEncrypt = f.privateEncrypt, t.publicDecrypt = f.publicDecrypt, t.privateDecrypt = f.privateDecrypt;
          var d = r(6509);
          t.randomFill = d.randomFill, t.randomFillSync = d.randomFillSync, t.createCredentials = function () {
            throw new Error(["sorry, createCredentials is not implemented yet", "we accept pull requests", "https://github.com/crypto-browserify/crypto-browserify"].join("\n"));
          }, t.constants = {
            DH_CHECK_P_NOT_SAFE_PRIME: 2,
            DH_CHECK_P_NOT_PRIME: 1,
            DH_UNABLE_TO_CHECK_GENERATOR: 4,
            DH_NOT_SUITABLE_GENERATOR: 8,
            NPN_ENABLED: 1,
            ALPN_ENABLED: 1,
            RSA_PKCS1_PADDING: 1,
            RSA_SSLV23_PADDING: 2,
            RSA_NO_PADDING: 3,
            RSA_PKCS1_OAEP_PADDING: 4,
            RSA_X931_PADDING: 5,
            RSA_PKCS1_PSS_PADDING: 6,
            POINT_CONVERSION_COMPRESSED: 2,
            POINT_CONVERSION_UNCOMPRESSED: 4,
            POINT_CONVERSION_HYBRID: 6
          };
        },
        34: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = "%[a-f0-9]{2}",
            o = new RegExp("(" + i + ")|([^%]+?)", "gi"),
            a = new RegExp("(" + i + ")+", "gi");
          function s(e, t) {
            try {
              return [decodeURIComponent(e.join(""))];
            } catch (e) {}
            if (1 === e.length) return e;
            t = t || 1;
            var r = e.slice(0, t),
              n = e.slice(t);
            return Array.prototype.concat.call([], s(r), s(n));
          }
          function u(e) {
            try {
              return decodeURIComponent(e);
            } catch (n) {
              for (var t = e.match(o) || [], r = 1; r < t.length; r++) t = (e = s(t, r).join("")).match(o) || [];
              return e;
            }
          }
          e.exports = function (e) {
            if ("string" != typeof e) throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + (0, n.default)(e) + "`");
            try {
              return e = e.replace(/\+/g, " "), decodeURIComponent(e);
            } catch (t) {
              return function (e) {
                for (var t = {
                    "%FE%FF": "��",
                    "%FF%FE": "��"
                  }, r = a.exec(e); r;) {
                  try {
                    t[r[0]] = decodeURIComponent(r[0]);
                  } catch (e) {
                    var n = u(r[0]);
                    n !== r[0] && (t[r[0]] = n);
                  }
                  r = a.exec(e);
                }
                t["%C2"] = "�";
                for (var i = Object.keys(t), o = 0; o < i.length; o++) {
                  var s = i[o];
                  e = e.replace(new RegExp(s, "g"), t[s]);
                }
                return e;
              }(e);
            }
          };
        },
        5626: function _(e, t, r) {
          "use strict";

          t.utils = r(319), t.Cipher = r(9591), t.DES = r(3049), t.CBC = r(4375), t.EDE = r(9413);
        },
        4375: function _(e, t, r) {
          "use strict";

          var n = r(4504),
            i = r(1736),
            o = {};
          function a(e) {
            n.equal(e.length, 8, "Invalid IV length"), this.iv = new Array(8);
            for (var t = 0; t < this.iv.length; t++) this.iv[t] = e[t];
          }
          t.instantiate = function (e) {
            function t(t) {
              e.call(this, t), this._cbcInit();
            }
            i(t, e);
            for (var r = Object.keys(o), n = 0; n < r.length; n++) {
              var a = r[n];
              t.prototype[a] = o[a];
            }
            return t.create = function (e) {
              return new t(e);
            }, t;
          }, o._cbcInit = function () {
            var e = new a(this.options.iv);
            this._cbcState = e;
          }, o._update = function (e, t, r, n) {
            var i = this._cbcState,
              o = this.constructor.super_.prototype,
              a = i.iv;
            if ("encrypt" === this.type) {
              for (var s = 0; s < this.blockSize; s++) a[s] ^= e[t + s];
              for (o._update.call(this, a, 0, r, n), s = 0; s < this.blockSize; s++) a[s] = r[n + s];
            } else {
              for (o._update.call(this, e, t, r, n), s = 0; s < this.blockSize; s++) r[n + s] ^= a[s];
              for (s = 0; s < this.blockSize; s++) a[s] = e[t + s];
            }
          };
        },
        9591: function _(e, t, r) {
          "use strict";

          var n = r(4504);
          function i(e) {
            this.options = e, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), this.bufferOff = 0;
          }
          e.exports = i, i.prototype._init = function () {}, i.prototype.update = function (e) {
            return 0 === e.length ? [] : "decrypt" === this.type ? this._updateDecrypt(e) : this._updateEncrypt(e);
          }, i.prototype._buffer = function (e, t) {
            for (var r = Math.min(this.buffer.length - this.bufferOff, e.length - t), n = 0; n < r; n++) this.buffer[this.bufferOff + n] = e[t + n];
            return this.bufferOff += r, r;
          }, i.prototype._flushBuffer = function (e, t) {
            return this._update(this.buffer, 0, e, t), this.bufferOff = 0, this.blockSize;
          }, i.prototype._updateEncrypt = function (e) {
            var t = 0,
              r = 0,
              n = (this.bufferOff + e.length) / this.blockSize | 0,
              i = new Array(n * this.blockSize);
            0 !== this.bufferOff && (t += this._buffer(e, t), this.bufferOff === this.buffer.length && (r += this._flushBuffer(i, r)));
            for (var o = e.length - (e.length - t) % this.blockSize; t < o; t += this.blockSize) this._update(e, t, i, r), r += this.blockSize;
            for (; t < e.length; t++, this.bufferOff++) this.buffer[this.bufferOff] = e[t];
            return i;
          }, i.prototype._updateDecrypt = function (e) {
            for (var t = 0, r = 0, n = Math.ceil((this.bufferOff + e.length) / this.blockSize) - 1, i = new Array(n * this.blockSize); n > 0; n--) t += this._buffer(e, t), r += this._flushBuffer(i, r);
            return t += this._buffer(e, t), i;
          }, i.prototype.final = function (e) {
            var t, r;
            return e && (t = this.update(e)), r = "encrypt" === this.type ? this._finalEncrypt() : this._finalDecrypt(), t ? t.concat(r) : r;
          }, i.prototype._pad = function (e, t) {
            if (0 === t) return !1;
            for (; t < e.length;) e[t++] = 0;
            return !0;
          }, i.prototype._finalEncrypt = function () {
            if (!this._pad(this.buffer, this.bufferOff)) return [];
            var e = new Array(this.blockSize);
            return this._update(this.buffer, 0, e, 0), e;
          }, i.prototype._unpad = function (e) {
            return e;
          }, i.prototype._finalDecrypt = function () {
            n.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
            var e = new Array(this.blockSize);
            return this._flushBuffer(e, 0), this._unpad(e);
          };
        },
        3049: function _(e, t, r) {
          "use strict";

          var n = r(4504),
            i = r(1736),
            o = r(319),
            a = r(9591);
          function s() {
            this.tmp = new Array(2), this.keys = null;
          }
          function u(e) {
            a.call(this, e);
            var t = new s();
            this._desState = t, this.deriveKeys(t, e.key);
          }
          i(u, a), e.exports = u, u.create = function (e) {
            return new u(e);
          };
          var c = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
          u.prototype.deriveKeys = function (e, t) {
            e.keys = new Array(32), n.equal(t.length, this.blockSize, "Invalid key length");
            var r = o.readUInt32BE(t, 0),
              i = o.readUInt32BE(t, 4);
            o.pc1(r, i, e.tmp, 0), r = e.tmp[0], i = e.tmp[1];
            for (var a = 0; a < e.keys.length; a += 2) {
              var s = c[a >>> 1];
              r = o.r28shl(r, s), i = o.r28shl(i, s), o.pc2(r, i, e.keys, a);
            }
          }, u.prototype._update = function (e, t, r, n) {
            var i = this._desState,
              a = o.readUInt32BE(e, t),
              s = o.readUInt32BE(e, t + 4);
            o.ip(a, s, i.tmp, 0), a = i.tmp[0], s = i.tmp[1], "encrypt" === this.type ? this._encrypt(i, a, s, i.tmp, 0) : this._decrypt(i, a, s, i.tmp, 0), a = i.tmp[0], s = i.tmp[1], o.writeUInt32BE(r, a, n), o.writeUInt32BE(r, s, n + 4);
          }, u.prototype._pad = function (e, t) {
            for (var r = e.length - t, n = t; n < e.length; n++) e[n] = r;
            return !0;
          }, u.prototype._unpad = function (e) {
            for (var t = e[e.length - 1], r = e.length - t; r < e.length; r++) n.equal(e[r], t);
            return e.slice(0, e.length - t);
          }, u.prototype._encrypt = function (e, t, r, n, i) {
            for (var a = t, s = r, u = 0; u < e.keys.length; u += 2) {
              var c = e.keys[u],
                f = e.keys[u + 1];
              o.expand(s, e.tmp, 0), c ^= e.tmp[0], f ^= e.tmp[1];
              var d = o.substitute(c, f),
                l = s;
              s = (a ^ o.permute(d)) >>> 0, a = l;
            }
            o.rip(s, a, n, i);
          }, u.prototype._decrypt = function (e, t, r, n, i) {
            for (var a = r, s = t, u = e.keys.length - 2; u >= 0; u -= 2) {
              var c = e.keys[u],
                f = e.keys[u + 1];
              o.expand(a, e.tmp, 0), c ^= e.tmp[0], f ^= e.tmp[1];
              var d = o.substitute(c, f),
                l = a;
              a = (s ^ o.permute(d)) >>> 0, s = l;
            }
            o.rip(a, s, n, i);
          };
        },
        9413: function _(e, t, r) {
          "use strict";

          var n = r(4504),
            i = r(1736),
            o = r(9591),
            a = r(3049);
          function s(e, t) {
            n.equal(t.length, 24, "Invalid key length");
            var r = t.slice(0, 8),
              i = t.slice(8, 16),
              o = t.slice(16, 24);
            this.ciphers = "encrypt" === e ? [a.create({
              type: "encrypt",
              key: r
            }), a.create({
              type: "decrypt",
              key: i
            }), a.create({
              type: "encrypt",
              key: o
            })] : [a.create({
              type: "decrypt",
              key: o
            }), a.create({
              type: "encrypt",
              key: i
            }), a.create({
              type: "decrypt",
              key: r
            })];
          }
          function u(e) {
            o.call(this, e);
            var t = new s(this.type, this.options.key);
            this._edeState = t;
          }
          i(u, o), e.exports = u, u.create = function (e) {
            return new u(e);
          }, u.prototype._update = function (e, t, r, n) {
            var i = this._edeState;
            i.ciphers[0]._update(e, t, r, n), i.ciphers[1]._update(r, n, r, n), i.ciphers[2]._update(r, n, r, n);
          }, u.prototype._pad = a.prototype._pad, u.prototype._unpad = a.prototype._unpad;
        },
        319: function _(e, t) {
          "use strict";

          t.readUInt32BE = function (e, t) {
            return (e[0 + t] << 24 | e[1 + t] << 16 | e[2 + t] << 8 | e[3 + t]) >>> 0;
          }, t.writeUInt32BE = function (e, t, r) {
            e[0 + r] = t >>> 24, e[1 + r] = t >>> 16 & 255, e[2 + r] = t >>> 8 & 255, e[3 + r] = 255 & t;
          }, t.ip = function (e, t, r, n) {
            for (var i = 0, o = 0, a = 6; a >= 0; a -= 2) {
              for (var s = 0; s <= 24; s += 8) i <<= 1, i |= t >>> s + a & 1;
              for (s = 0; s <= 24; s += 8) i <<= 1, i |= e >>> s + a & 1;
            }
            for (a = 6; a >= 0; a -= 2) {
              for (s = 1; s <= 25; s += 8) o <<= 1, o |= t >>> s + a & 1;
              for (s = 1; s <= 25; s += 8) o <<= 1, o |= e >>> s + a & 1;
            }
            r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
          }, t.rip = function (e, t, r, n) {
            for (var i = 0, o = 0, a = 0; a < 4; a++) for (var s = 24; s >= 0; s -= 8) i <<= 1, i |= t >>> s + a & 1, i <<= 1, i |= e >>> s + a & 1;
            for (a = 4; a < 8; a++) for (s = 24; s >= 0; s -= 8) o <<= 1, o |= t >>> s + a & 1, o <<= 1, o |= e >>> s + a & 1;
            r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
          }, t.pc1 = function (e, t, r, n) {
            for (var i = 0, o = 0, a = 7; a >= 5; a--) {
              for (var s = 0; s <= 24; s += 8) i <<= 1, i |= t >> s + a & 1;
              for (s = 0; s <= 24; s += 8) i <<= 1, i |= e >> s + a & 1;
            }
            for (s = 0; s <= 24; s += 8) i <<= 1, i |= t >> s + a & 1;
            for (a = 1; a <= 3; a++) {
              for (s = 0; s <= 24; s += 8) o <<= 1, o |= t >> s + a & 1;
              for (s = 0; s <= 24; s += 8) o <<= 1, o |= e >> s + a & 1;
            }
            for (s = 0; s <= 24; s += 8) o <<= 1, o |= e >> s + a & 1;
            r[n + 0] = i >>> 0, r[n + 1] = o >>> 0;
          }, t.r28shl = function (e, t) {
            return e << t & 268435455 | e >>> 28 - t;
          };
          var r = [14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];
          t.pc2 = function (e, t, n, i) {
            for (var o = 0, a = 0, s = r.length >>> 1, u = 0; u < s; u++) o <<= 1, o |= e >>> r[u] & 1;
            for (u = s; u < r.length; u++) a <<= 1, a |= t >>> r[u] & 1;
            n[i + 0] = o >>> 0, n[i + 1] = a >>> 0;
          }, t.expand = function (e, t, r) {
            var n = 0,
              i = 0;
            n = (1 & e) << 5 | e >>> 27;
            for (var o = 23; o >= 15; o -= 4) n <<= 6, n |= e >>> o & 63;
            for (o = 11; o >= 3; o -= 4) i |= e >>> o & 63, i <<= 6;
            i |= (31 & e) << 1 | e >>> 31, t[r + 0] = n >>> 0, t[r + 1] = i >>> 0;
          };
          var n = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];
          t.substitute = function (e, t) {
            for (var r = 0, i = 0; i < 4; i++) r <<= 4, r |= n[64 * i + (e >>> 18 - 6 * i & 63)];
            for (i = 0; i < 4; i++) r <<= 4, r |= n[256 + 64 * i + (t >>> 18 - 6 * i & 63)];
            return r >>> 0;
          };
          var i = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];
          t.permute = function (e) {
            for (var t = 0, r = 0; r < i.length; r++) t <<= 1, t |= e >>> i[r] & 1;
            return t >>> 0;
          }, t.padSplit = function (e, t, r) {
            for (var n = e.toString(2); n.length < t;) n = "0" + n;
            for (var i = [], o = 0; o < t; o += r) i.push(n.slice(o, o + r));
            return i.join(" ");
          };
        },
        8333: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(8557),
            o = r(9799),
            a = r(1592),
            s = {
              binary: !0,
              hex: !0,
              base64: !0
            };
          t.DiffieHellmanGroup = t.createDiffieHellmanGroup = t.getDiffieHellman = function (e) {
            var t = new n(o[e].prime, "hex"),
              r = new n(o[e].gen, "hex");
            return new a(t, r);
          }, t.createDiffieHellman = t.DiffieHellman = function e(t, r, o, u) {
            return n.isBuffer(r) || void 0 === s[r] ? e(t, "binary", r, o) : (r = r || "binary", u = u || "binary", o = o || new n([2]), n.isBuffer(o) || (o = new n(o, u)), "number" == typeof t ? new a(i(t, o), o, !0) : (n.isBuffer(t) || (t = new n(t, r)), new a(t, o, !0)));
          };
        },
        1592: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(1734),
            o = new (r(137))(),
            a = new i(24),
            s = new i(11),
            u = new i(10),
            c = new i(3),
            f = new i(7),
            d = r(8557),
            l = r(5010);
          function h(e, t) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), this._pub = new i(e), this;
          }
          function p(e, t) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), this._priv = new i(e), this;
          }
          e.exports = y;
          var b = {};
          function y(e, t, r) {
            this.setGenerator(t), this.__prime = new i(e), this._prime = i.mont(this.__prime), this._primeLen = e.length, this._pub = void 0, this._priv = void 0, this._primeCode = void 0, r ? (this.setPublicKey = h, this.setPrivateKey = p) : this._primeCode = 8;
          }
          function m(e, t) {
            var r = new n(e.toArray());
            return t ? r.toString(t) : r;
          }
          Object.defineProperty(y.prototype, "verifyError", {
            enumerable: !0,
            get: function get() {
              return "number" != typeof this._primeCode && (this._primeCode = function (e, t) {
                var r = t.toString("hex"),
                  n = [r, e.toString(16)].join("_");
                if (n in b) return b[n];
                var i,
                  l = 0;
                if (e.isEven() || !d.simpleSieve || !d.fermatTest(e) || !o.test(e)) return l += 1, l += "02" === r || "05" === r ? 8 : 4, b[n] = l, l;
                switch (o.test(e.shrn(1)) || (l += 2), r) {
                  case "02":
                    e.mod(a).cmp(s) && (l += 8);
                    break;
                  case "05":
                    (i = e.mod(u)).cmp(c) && i.cmp(f) && (l += 8);
                    break;
                  default:
                    l += 4;
                }
                return b[n] = l, l;
              }(this.__prime, this.__gen)), this._primeCode;
            }
          }), y.prototype.generateKeys = function () {
            return this._priv || (this._priv = new i(l(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), this.getPublicKey();
          }, y.prototype.computeSecret = function (e) {
            var t = (e = (e = new i(e)).toRed(this._prime)).redPow(this._priv).fromRed(),
              r = new n(t.toArray()),
              o = this.getPrime();
            if (r.length < o.length) {
              var a = new n(o.length - r.length);
              a.fill(0), r = n.concat([a, r]);
            }
            return r;
          }, y.prototype.getPublicKey = function (e) {
            return m(this._pub, e);
          }, y.prototype.getPrivateKey = function (e) {
            return m(this._priv, e);
          }, y.prototype.getPrime = function (e) {
            return m(this.__prime, e);
          }, y.prototype.getGenerator = function (e) {
            return m(this._gen, e);
          }, y.prototype.setGenerator = function (e, t) {
            return t = t || "utf8", n.isBuffer(e) || (e = new n(e, t)), this.__gen = e, this._gen = new i(e), this;
          };
        },
        8557: function _(e, t, r) {
          "use strict";

          var n = r(5010);
          e.exports = v, v.simpleSieve = y, v.fermatTest = m;
          var i = r(1734),
            o = new i(24),
            a = new (r(137))(),
            s = new i(1),
            u = new i(2),
            c = new i(5),
            f = (new i(16), new i(8), new i(10)),
            d = new i(3),
            l = (new i(7), new i(11)),
            h = new i(4),
            p = (new i(12), null);
          function b() {
            if (null !== p) return p;
            var e = [];
            e[0] = 2;
            for (var t = 1, r = 3; r < 1048576; r += 2) {
              for (var n = Math.ceil(Math.sqrt(r)), i = 0; i < t && e[i] <= n && r % e[i] != 0; i++);
              t !== i && e[i] <= n || (e[t++] = r);
            }
            return p = e, e;
          }
          function y(e) {
            for (var t = b(), r = 0; r < t.length; r++) if (0 === e.modn(t[r])) return 0 === e.cmpn(t[r]);
            return !0;
          }
          function m(e) {
            var t = i.mont(e);
            return 0 === u.toRed(t).redPow(e.subn(1)).fromRed().cmpn(1);
          }
          function v(e, t) {
            if (e < 16) return new i(2 === t || 5 === t ? [140, 123] : [140, 39]);
            var r, p;
            for (t = new i(t);;) {
              for (r = new i(n(Math.ceil(e / 8))); r.bitLength() > e;) r.ishrn(1);
              if (r.isEven() && r.iadd(s), r.testn(1) || r.iadd(u), t.cmp(u)) {
                if (!t.cmp(c)) for (; r.mod(f).cmp(d);) r.iadd(h);
              } else for (; r.mod(o).cmp(l);) r.iadd(h);
              if (y(p = r.shrn(1)) && y(r) && m(p) && m(r) && a.test(p) && a.test(r)) return r;
            }
          }
        },
        6597: function _(e, t, r) {
          "use strict";

          var n = t;
          n.version = r(8597).i8, n.utils = r(7528), n.rand = r(2202), n.curve = r(6063), n.curves = r(506), n.ec = r(8320), n.eddsa = r(8027);
        },
        1249: function _(e, t, r) {
          "use strict";

          var n = r(1734),
            i = r(7528),
            o = i.getNAF,
            a = i.getJSF,
            s = i.assert;
          function u(e, t) {
            this.type = e, this.p = new n(t.p, 16), this.red = t.prime ? n.red(t.prime) : n.mont(this.p), this.zero = new n(0).toRed(this.red), this.one = new n(1).toRed(this.red), this.two = new n(2).toRed(this.red), this.n = t.n && new n(t.n, 16), this.g = t.g && this.pointFromJSON(t.g, t.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
            var r = this.n && this.p.div(this.n);
            !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
          }
          function c(e, t) {
            this.curve = e, this.type = t, this.precomputed = null;
          }
          e.exports = u, u.prototype.point = function () {
            throw new Error("Not implemented");
          }, u.prototype.validate = function () {
            throw new Error("Not implemented");
          }, u.prototype._fixedNafMul = function (e, t) {
            s(e.precomputed);
            var r = e._getDoubles(),
              n = o(t, 1, this._bitLength),
              i = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);
            i /= 3;
            var a,
              u,
              c = [];
            for (a = 0; a < n.length; a += r.step) {
              u = 0;
              for (var f = a + r.step - 1; f >= a; f--) u = (u << 1) + n[f];
              c.push(u);
            }
            for (var d = this.jpoint(null, null, null), l = this.jpoint(null, null, null), h = i; h > 0; h--) {
              for (a = 0; a < c.length; a++) (u = c[a]) === h ? l = l.mixedAdd(r.points[a]) : u === -h && (l = l.mixedAdd(r.points[a].neg()));
              d = d.add(l);
            }
            return d.toP();
          }, u.prototype._wnafMul = function (e, t) {
            var r = 4,
              n = e._getNAFPoints(r);
            r = n.wnd;
            for (var i = n.points, a = o(t, r, this._bitLength), u = this.jpoint(null, null, null), c = a.length - 1; c >= 0; c--) {
              for (var f = 0; c >= 0 && 0 === a[c]; c--) f++;
              if (c >= 0 && f++, u = u.dblp(f), c < 0) break;
              var d = a[c];
              s(0 !== d), u = "affine" === e.type ? d > 0 ? u.mixedAdd(i[d - 1 >> 1]) : u.mixedAdd(i[-d - 1 >> 1].neg()) : d > 0 ? u.add(i[d - 1 >> 1]) : u.add(i[-d - 1 >> 1].neg());
            }
            return "affine" === e.type ? u.toP() : u;
          }, u.prototype._wnafMulAdd = function (e, t, r, n, i) {
            var s,
              u,
              c,
              f = this._wnafT1,
              d = this._wnafT2,
              l = this._wnafT3,
              h = 0;
            for (s = 0; s < n; s++) {
              var p = (c = t[s])._getNAFPoints(e);
              f[s] = p.wnd, d[s] = p.points;
            }
            for (s = n - 1; s >= 1; s -= 2) {
              var b = s - 1,
                y = s;
              if (1 === f[b] && 1 === f[y]) {
                var m = [t[b], null, null, t[y]];
                0 === t[b].y.cmp(t[y].y) ? (m[1] = t[b].add(t[y]), m[2] = t[b].toJ().mixedAdd(t[y].neg())) : 0 === t[b].y.cmp(t[y].y.redNeg()) ? (m[1] = t[b].toJ().mixedAdd(t[y]), m[2] = t[b].add(t[y].neg())) : (m[1] = t[b].toJ().mixedAdd(t[y]), m[2] = t[b].toJ().mixedAdd(t[y].neg()));
                var v = [-3, -1, -5, -7, 0, 7, 5, 1, 3],
                  g = a(r[b], r[y]);
                for (h = Math.max(g[0].length, h), l[b] = new Array(h), l[y] = new Array(h), u = 0; u < h; u++) {
                  var w = 0 | g[0][u],
                    A = 0 | g[1][u];
                  l[b][u] = v[3 * (w + 1) + (A + 1)], l[y][u] = 0, d[b] = m;
                }
              } else l[b] = o(r[b], f[b], this._bitLength), l[y] = o(r[y], f[y], this._bitLength), h = Math.max(l[b].length, h), h = Math.max(l[y].length, h);
            }
            var k = this.jpoint(null, null, null),
              _ = this._wnafT4;
            for (s = h; s >= 0; s--) {
              for (var S = 0; s >= 0;) {
                var E = !0;
                for (u = 0; u < n; u++) _[u] = 0 | l[u][s], 0 !== _[u] && (E = !1);
                if (!E) break;
                S++, s--;
              }
              if (s >= 0 && S++, k = k.dblp(S), s < 0) break;
              for (u = 0; u < n; u++) {
                var x = _[u];
                0 !== x && (x > 0 ? c = d[u][x - 1 >> 1] : x < 0 && (c = d[u][-x - 1 >> 1].neg()), k = "affine" === c.type ? k.mixedAdd(c) : k.add(c));
              }
            }
            for (s = 0; s < n; s++) d[s] = null;
            return i ? k : k.toP();
          }, u.BasePoint = c, c.prototype.eq = function () {
            throw new Error("Not implemented");
          }, c.prototype.validate = function () {
            return this.curve.validate(this);
          }, u.prototype.decodePoint = function (e, t) {
            e = i.toArray(e, t);
            var r = this.p.byteLength();
            if ((4 === e[0] || 6 === e[0] || 7 === e[0]) && e.length - 1 == 2 * r) return 6 === e[0] ? s(e[e.length - 1] % 2 == 0) : 7 === e[0] && s(e[e.length - 1] % 2 == 1), this.point(e.slice(1, 1 + r), e.slice(1 + r, 1 + 2 * r));
            if ((2 === e[0] || 3 === e[0]) && e.length - 1 === r) return this.pointFromX(e.slice(1, 1 + r), 3 === e[0]);
            throw new Error("Unknown point format");
          }, c.prototype.encodeCompressed = function (e) {
            return this.encode(e, !0);
          }, c.prototype._encode = function (e) {
            var t = this.curve.p.byteLength(),
              r = this.getX().toArray("be", t);
            return e ? [this.getY().isEven() ? 2 : 3].concat(r) : [4].concat(r, this.getY().toArray("be", t));
          }, c.prototype.encode = function (e, t) {
            return i.encode(this._encode(t), e);
          }, c.prototype.precompute = function (e) {
            if (this.precomputed) return this;
            var t = {
              doubles: null,
              naf: null,
              beta: null
            };
            return t.naf = this._getNAFPoints(8), t.doubles = this._getDoubles(4, e), t.beta = this._getBeta(), this.precomputed = t, this;
          }, c.prototype._hasDoubles = function (e) {
            if (!this.precomputed) return !1;
            var t = this.precomputed.doubles;
            return !!t && t.points.length >= Math.ceil((e.bitLength() + 1) / t.step);
          }, c.prototype._getDoubles = function (e, t) {
            if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
            for (var r = [this], n = this, i = 0; i < t; i += e) {
              for (var o = 0; o < e; o++) n = n.dbl();
              r.push(n);
            }
            return {
              step: e,
              points: r
            };
          }, c.prototype._getNAFPoints = function (e) {
            if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
            for (var t = [this], r = (1 << e) - 1, n = 1 === r ? null : this.dbl(), i = 1; i < r; i++) t[i] = t[i - 1].add(n);
            return {
              wnd: e,
              points: t
            };
          }, c.prototype._getBeta = function () {
            return null;
          }, c.prototype.dblp = function (e) {
            for (var t = this, r = 0; r < e; r++) t = t.dbl();
            return t;
          };
        },
        1123: function _(e, t, r) {
          "use strict";

          var n = r(7528),
            i = r(1734),
            o = r(1736),
            a = r(1249),
            s = n.assert;
          function u(e) {
            this.twisted = 1 != (0 | e.a), this.mOneA = this.twisted && -1 == (0 | e.a), this.extended = this.mOneA, a.call(this, "edwards", e), this.a = new i(e.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new i(e.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), this.d = new i(e.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), s(!this.twisted || 0 === this.c.fromRed().cmpn(1)), this.oneC = 1 == (0 | e.c);
          }
          function c(e, t, r, n, o) {
            a.BasePoint.call(this, e, "projective"), null === t && null === r && null === n ? (this.x = this.curve.zero, this.y = this.curve.one, this.z = this.curve.one, this.t = this.curve.zero, this.zOne = !0) : (this.x = new i(t, 16), this.y = new i(r, 16), this.z = n ? new i(n, 16) : this.curve.one, this.t = o && new i(o, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
          }
          o(u, a), e.exports = u, u.prototype._mulA = function (e) {
            return this.mOneA ? e.redNeg() : this.a.redMul(e);
          }, u.prototype._mulC = function (e) {
            return this.oneC ? e : this.c.redMul(e);
          }, u.prototype.jpoint = function (e, t, r, n) {
            return this.point(e, t, r, n);
          }, u.prototype.pointFromX = function (e, t) {
            (e = new i(e, 16)).red || (e = e.toRed(this.red));
            var r = e.redSqr(),
              n = this.c2.redSub(this.a.redMul(r)),
              o = this.one.redSub(this.c2.redMul(this.d).redMul(r)),
              a = n.redMul(o.redInvm()),
              s = a.redSqrt();
            if (0 !== s.redSqr().redSub(a).cmp(this.zero)) throw new Error("invalid point");
            var u = s.fromRed().isOdd();
            return (t && !u || !t && u) && (s = s.redNeg()), this.point(e, s);
          }, u.prototype.pointFromY = function (e, t) {
            (e = new i(e, 16)).red || (e = e.toRed(this.red));
            var r = e.redSqr(),
              n = r.redSub(this.c2),
              o = r.redMul(this.d).redMul(this.c2).redSub(this.a),
              a = n.redMul(o.redInvm());
            if (0 === a.cmp(this.zero)) {
              if (t) throw new Error("invalid point");
              return this.point(this.zero, e);
            }
            var s = a.redSqrt();
            if (0 !== s.redSqr().redSub(a).cmp(this.zero)) throw new Error("invalid point");
            return s.fromRed().isOdd() !== t && (s = s.redNeg()), this.point(s, e);
          }, u.prototype.validate = function (e) {
            if (e.isInfinity()) return !0;
            e.normalize();
            var t = e.x.redSqr(),
              r = e.y.redSqr(),
              n = t.redMul(this.a).redAdd(r),
              i = this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(r)));
            return 0 === n.cmp(i);
          }, o(c, a.BasePoint), u.prototype.pointFromJSON = function (e) {
            return c.fromJSON(this, e);
          }, u.prototype.point = function (e, t, r, n) {
            return new c(this, e, t, r, n);
          }, c.fromJSON = function (e, t) {
            return new c(e, t[0], t[1], t[2]);
          }, c.prototype.inspect = function () {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
          }, c.prototype.isInfinity = function () {
            return 0 === this.x.cmpn(0) && (0 === this.y.cmp(this.z) || this.zOne && 0 === this.y.cmp(this.curve.c));
          }, c.prototype._extDbl = function () {
            var e = this.x.redSqr(),
              t = this.y.redSqr(),
              r = this.z.redSqr();
            r = r.redIAdd(r);
            var n = this.curve._mulA(e),
              i = this.x.redAdd(this.y).redSqr().redISub(e).redISub(t),
              o = n.redAdd(t),
              a = o.redSub(r),
              s = n.redSub(t),
              u = i.redMul(a),
              c = o.redMul(s),
              f = i.redMul(s),
              d = a.redMul(o);
            return this.curve.point(u, c, d, f);
          }, c.prototype._projDbl = function () {
            var e,
              t,
              r,
              n,
              i,
              o,
              a = this.x.redAdd(this.y).redSqr(),
              s = this.x.redSqr(),
              u = this.y.redSqr();
            if (this.curve.twisted) {
              var c = (n = this.curve._mulA(s)).redAdd(u);
              this.zOne ? (e = a.redSub(s).redSub(u).redMul(c.redSub(this.curve.two)), t = c.redMul(n.redSub(u)), r = c.redSqr().redSub(c).redSub(c)) : (i = this.z.redSqr(), o = c.redSub(i).redISub(i), e = a.redSub(s).redISub(u).redMul(o), t = c.redMul(n.redSub(u)), r = c.redMul(o));
            } else n = s.redAdd(u), i = this.curve._mulC(this.z).redSqr(), o = n.redSub(i).redSub(i), e = this.curve._mulC(a.redISub(n)).redMul(o), t = this.curve._mulC(n).redMul(s.redISub(u)), r = n.redMul(o);
            return this.curve.point(e, t, r);
          }, c.prototype.dbl = function () {
            return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
          }, c.prototype._extAdd = function (e) {
            var t = this.y.redSub(this.x).redMul(e.y.redSub(e.x)),
              r = this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)),
              n = this.t.redMul(this.curve.dd).redMul(e.t),
              i = this.z.redMul(e.z.redAdd(e.z)),
              o = r.redSub(t),
              a = i.redSub(n),
              s = i.redAdd(n),
              u = r.redAdd(t),
              c = o.redMul(a),
              f = s.redMul(u),
              d = o.redMul(u),
              l = a.redMul(s);
            return this.curve.point(c, f, l, d);
          }, c.prototype._projAdd = function (e) {
            var t,
              r,
              n = this.z.redMul(e.z),
              i = n.redSqr(),
              o = this.x.redMul(e.x),
              a = this.y.redMul(e.y),
              s = this.curve.d.redMul(o).redMul(a),
              u = i.redSub(s),
              c = i.redAdd(s),
              f = this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(o).redISub(a),
              d = n.redMul(u).redMul(f);
            return this.curve.twisted ? (t = n.redMul(c).redMul(a.redSub(this.curve._mulA(o))), r = u.redMul(c)) : (t = n.redMul(c).redMul(a.redSub(o)), r = this.curve._mulC(u).redMul(c)), this.curve.point(d, t, r);
          }, c.prototype.add = function (e) {
            return this.isInfinity() ? e : e.isInfinity() ? this : this.curve.extended ? this._extAdd(e) : this._projAdd(e);
          }, c.prototype.mul = function (e) {
            return this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve._wnafMul(this, e);
          }, c.prototype.mulAdd = function (e, t, r) {
            return this.curve._wnafMulAdd(1, [this, t], [e, r], 2, !1);
          }, c.prototype.jmulAdd = function (e, t, r) {
            return this.curve._wnafMulAdd(1, [this, t], [e, r], 2, !0);
          }, c.prototype.normalize = function () {
            if (this.zOne) return this;
            var e = this.z.redInvm();
            return this.x = this.x.redMul(e), this.y = this.y.redMul(e), this.t && (this.t = this.t.redMul(e)), this.z = this.curve.one, this.zOne = !0, this;
          }, c.prototype.neg = function () {
            return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
          }, c.prototype.getX = function () {
            return this.normalize(), this.x.fromRed();
          }, c.prototype.getY = function () {
            return this.normalize(), this.y.fromRed();
          }, c.prototype.eq = function (e) {
            return this === e || 0 === this.getX().cmp(e.getX()) && 0 === this.getY().cmp(e.getY());
          }, c.prototype.eqXToP = function (e) {
            var t = e.toRed(this.curve.red).redMul(this.z);
            if (0 === this.x.cmp(t)) return !0;
            for (var r = e.clone(), n = this.curve.redN.redMul(this.z);;) {
              if (r.iadd(this.curve.n), r.cmp(this.curve.p) >= 0) return !1;
              if (t.redIAdd(n), 0 === this.x.cmp(t)) return !0;
            }
          }, c.prototype.toP = c.prototype.normalize, c.prototype.mixedAdd = c.prototype.add;
        },
        6063: function _(e, t, r) {
          "use strict";

          var n = t;
          n.base = r(1249), n.short = r(3148), n.mont = r(1105), n.edwards = r(1123);
        },
        1105: function _(e, t, r) {
          "use strict";

          var n = r(1734),
            i = r(1736),
            o = r(1249),
            a = r(7528);
          function s(e) {
            o.call(this, "mont", e), this.a = new n(e.a, 16).toRed(this.red), this.b = new n(e.b, 16).toRed(this.red), this.i4 = new n(4).toRed(this.red).redInvm(), this.two = new n(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
          }
          function u(e, t, r) {
            o.BasePoint.call(this, e, "projective"), null === t && null === r ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new n(t, 16), this.z = new n(r, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
          }
          i(s, o), e.exports = s, s.prototype.validate = function (e) {
            var t = e.normalize().x,
              r = t.redSqr(),
              n = r.redMul(t).redAdd(r.redMul(this.a)).redAdd(t);
            return 0 === n.redSqrt().redSqr().cmp(n);
          }, i(u, o.BasePoint), s.prototype.decodePoint = function (e, t) {
            return this.point(a.toArray(e, t), 1);
          }, s.prototype.point = function (e, t) {
            return new u(this, e, t);
          }, s.prototype.pointFromJSON = function (e) {
            return u.fromJSON(this, e);
          }, u.prototype.precompute = function () {}, u.prototype._encode = function () {
            return this.getX().toArray("be", this.curve.p.byteLength());
          }, u.fromJSON = function (e, t) {
            return new u(e, t[0], t[1] || e.one);
          }, u.prototype.inspect = function () {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
          }, u.prototype.isInfinity = function () {
            return 0 === this.z.cmpn(0);
          }, u.prototype.dbl = function () {
            var e = this.x.redAdd(this.z).redSqr(),
              t = this.x.redSub(this.z).redSqr(),
              r = e.redSub(t),
              n = e.redMul(t),
              i = r.redMul(t.redAdd(this.curve.a24.redMul(r)));
            return this.curve.point(n, i);
          }, u.prototype.add = function () {
            throw new Error("Not supported on Montgomery curve");
          }, u.prototype.diffAdd = function (e, t) {
            var r = this.x.redAdd(this.z),
              n = this.x.redSub(this.z),
              i = e.x.redAdd(e.z),
              o = e.x.redSub(e.z).redMul(r),
              a = i.redMul(n),
              s = t.z.redMul(o.redAdd(a).redSqr()),
              u = t.x.redMul(o.redISub(a).redSqr());
            return this.curve.point(s, u);
          }, u.prototype.mul = function (e) {
            for (var t = e.clone(), r = this, n = this.curve.point(null, null), i = []; 0 !== t.cmpn(0); t.iushrn(1)) i.push(t.andln(1));
            for (var o = i.length - 1; o >= 0; o--) 0 === i[o] ? (r = r.diffAdd(n, this), n = n.dbl()) : (n = r.diffAdd(n, this), r = r.dbl());
            return n;
          }, u.prototype.mulAdd = function () {
            throw new Error("Not supported on Montgomery curve");
          }, u.prototype.jumlAdd = function () {
            throw new Error("Not supported on Montgomery curve");
          }, u.prototype.eq = function (e) {
            return 0 === this.getX().cmp(e.getX());
          }, u.prototype.normalize = function () {
            return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
          }, u.prototype.getX = function () {
            return this.normalize(), this.x.fromRed();
          };
        },
        3148: function _(e, t, r) {
          "use strict";

          var n = r(7528),
            i = r(1734),
            o = r(1736),
            a = r(1249),
            s = n.assert;
          function u(e) {
            a.call(this, "short", e), this.a = new i(e.a, 16).toRed(this.red), this.b = new i(e.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
          }
          function c(e, t, r, n) {
            a.BasePoint.call(this, e, "affine"), null === t && null === r ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new i(t, 16), this.y = new i(r, 16), n && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
          }
          function f(e, t, r, n) {
            a.BasePoint.call(this, e, "jacobian"), null === t && null === r && null === n ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new i(0)) : (this.x = new i(t, 16), this.y = new i(r, 16), this.z = new i(n, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
          }
          o(u, a), e.exports = u, u.prototype._getEndomorphism = function (e) {
            if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
              var t, r;
              if (e.beta) t = new i(e.beta, 16).toRed(this.red);else {
                var n = this._getEndoRoots(this.p);
                t = (t = n[0].cmp(n[1]) < 0 ? n[0] : n[1]).toRed(this.red);
              }
              if (e.lambda) r = new i(e.lambda, 16);else {
                var o = this._getEndoRoots(this.n);
                0 === this.g.mul(o[0]).x.cmp(this.g.x.redMul(t)) ? r = o[0] : (r = o[1], s(0 === this.g.mul(r).x.cmp(this.g.x.redMul(t))));
              }
              return {
                beta: t,
                lambda: r,
                basis: e.basis ? e.basis.map(function (e) {
                  return {
                    a: new i(e.a, 16),
                    b: new i(e.b, 16)
                  };
                }) : this._getEndoBasis(r)
              };
            }
          }, u.prototype._getEndoRoots = function (e) {
            var t = e === this.p ? this.red : i.mont(e),
              r = new i(2).toRed(t).redInvm(),
              n = r.redNeg(),
              o = new i(3).toRed(t).redNeg().redSqrt().redMul(r);
            return [n.redAdd(o).fromRed(), n.redSub(o).fromRed()];
          }, u.prototype._getEndoBasis = function (e) {
            for (var t, r, n, o, a, s, u, c, f, d = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), l = e, h = this.n.clone(), p = new i(1), b = new i(0), y = new i(0), m = new i(1), v = 0; 0 !== l.cmpn(0);) {
              var g = h.div(l);
              c = h.sub(g.mul(l)), f = y.sub(g.mul(p));
              var w = m.sub(g.mul(b));
              if (!n && c.cmp(d) < 0) t = u.neg(), r = p, n = c.neg(), o = f;else if (n && 2 == ++v) break;
              u = c, h = l, l = c, y = p, p = f, m = b, b = w;
            }
            a = c.neg(), s = f;
            var A = n.sqr().add(o.sqr());
            return a.sqr().add(s.sqr()).cmp(A) >= 0 && (a = t, s = r), n.negative && (n = n.neg(), o = o.neg()), a.negative && (a = a.neg(), s = s.neg()), [{
              a: n,
              b: o
            }, {
              a: a,
              b: s
            }];
          }, u.prototype._endoSplit = function (e) {
            var t = this.endo.basis,
              r = t[0],
              n = t[1],
              i = n.b.mul(e).divRound(this.n),
              o = r.b.neg().mul(e).divRound(this.n),
              a = i.mul(r.a),
              s = o.mul(n.a),
              u = i.mul(r.b),
              c = o.mul(n.b);
            return {
              k1: e.sub(a).sub(s),
              k2: u.add(c).neg()
            };
          }, u.prototype.pointFromX = function (e, t) {
            (e = new i(e, 16)).red || (e = e.toRed(this.red));
            var r = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),
              n = r.redSqrt();
            if (0 !== n.redSqr().redSub(r).cmp(this.zero)) throw new Error("invalid point");
            var o = n.fromRed().isOdd();
            return (t && !o || !t && o) && (n = n.redNeg()), this.point(e, n);
          }, u.prototype.validate = function (e) {
            if (e.inf) return !0;
            var t = e.x,
              r = e.y,
              n = this.a.redMul(t),
              i = t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);
            return 0 === r.redSqr().redISub(i).cmpn(0);
          }, u.prototype._endoWnafMulAdd = function (e, t, r) {
            for (var n = this._endoWnafT1, i = this._endoWnafT2, o = 0; o < e.length; o++) {
              var a = this._endoSplit(t[o]),
                s = e[o],
                u = s._getBeta();
              a.k1.negative && (a.k1.ineg(), s = s.neg(!0)), a.k2.negative && (a.k2.ineg(), u = u.neg(!0)), n[2 * o] = s, n[2 * o + 1] = u, i[2 * o] = a.k1, i[2 * o + 1] = a.k2;
            }
            for (var c = this._wnafMulAdd(1, n, i, 2 * o, r), f = 0; f < 2 * o; f++) n[f] = null, i[f] = null;
            return c;
          }, o(c, a.BasePoint), u.prototype.point = function (e, t, r) {
            return new c(this, e, t, r);
          }, u.prototype.pointFromJSON = function (e, t) {
            return c.fromJSON(this, e, t);
          }, c.prototype._getBeta = function () {
            if (this.curve.endo) {
              var e = this.precomputed;
              if (e && e.beta) return e.beta;
              var t = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
              if (e) {
                var r = this.curve,
                  n = function n(e) {
                    return r.point(e.x.redMul(r.endo.beta), e.y);
                  };
                e.beta = t, t.precomputed = {
                  beta: null,
                  naf: e.naf && {
                    wnd: e.naf.wnd,
                    points: e.naf.points.map(n)
                  },
                  doubles: e.doubles && {
                    step: e.doubles.step,
                    points: e.doubles.points.map(n)
                  }
                };
              }
              return t;
            }
          }, c.prototype.toJSON = function () {
            return this.precomputed ? [this.x, this.y, this.precomputed && {
              doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
              },
              naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
              }
            }] : [this.x, this.y];
          }, c.fromJSON = function (e, t, r) {
            "string" == typeof t && (t = JSON.parse(t));
            var n = e.point(t[0], t[1], r);
            if (!t[2]) return n;
            function i(t) {
              return e.point(t[0], t[1], r);
            }
            var o = t[2];
            return n.precomputed = {
              beta: null,
              doubles: o.doubles && {
                step: o.doubles.step,
                points: [n].concat(o.doubles.points.map(i))
              },
              naf: o.naf && {
                wnd: o.naf.wnd,
                points: [n].concat(o.naf.points.map(i))
              }
            }, n;
          }, c.prototype.inspect = function () {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
          }, c.prototype.isInfinity = function () {
            return this.inf;
          }, c.prototype.add = function (e) {
            if (this.inf) return e;
            if (e.inf) return this;
            if (this.eq(e)) return this.dbl();
            if (this.neg().eq(e)) return this.curve.point(null, null);
            if (0 === this.x.cmp(e.x)) return this.curve.point(null, null);
            var t = this.y.redSub(e.y);
            0 !== t.cmpn(0) && (t = t.redMul(this.x.redSub(e.x).redInvm()));
            var r = t.redSqr().redISub(this.x).redISub(e.x),
              n = t.redMul(this.x.redSub(r)).redISub(this.y);
            return this.curve.point(r, n);
          }, c.prototype.dbl = function () {
            if (this.inf) return this;
            var e = this.y.redAdd(this.y);
            if (0 === e.cmpn(0)) return this.curve.point(null, null);
            var t = this.curve.a,
              r = this.x.redSqr(),
              n = e.redInvm(),
              i = r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n),
              o = i.redSqr().redISub(this.x.redAdd(this.x)),
              a = i.redMul(this.x.redSub(o)).redISub(this.y);
            return this.curve.point(o, a);
          }, c.prototype.getX = function () {
            return this.x.fromRed();
          }, c.prototype.getY = function () {
            return this.y.fromRed();
          }, c.prototype.mul = function (e) {
            return e = new i(e, 16), this.isInfinity() ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e]) : this.curve._wnafMul(this, e);
          }, c.prototype.mulAdd = function (e, t, r) {
            var n = [this, t],
              i = [e, r];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n, i) : this.curve._wnafMulAdd(1, n, i, 2);
          }, c.prototype.jmulAdd = function (e, t, r) {
            var n = [this, t],
              i = [e, r];
            return this.curve.endo ? this.curve._endoWnafMulAdd(n, i, !0) : this.curve._wnafMulAdd(1, n, i, 2, !0);
          }, c.prototype.eq = function (e) {
            return this === e || this.inf === e.inf && (this.inf || 0 === this.x.cmp(e.x) && 0 === this.y.cmp(e.y));
          }, c.prototype.neg = function (e) {
            if (this.inf) return this;
            var t = this.curve.point(this.x, this.y.redNeg());
            if (e && this.precomputed) {
              var r = this.precomputed,
                n = function n(e) {
                  return e.neg();
                };
              t.precomputed = {
                naf: r.naf && {
                  wnd: r.naf.wnd,
                  points: r.naf.points.map(n)
                },
                doubles: r.doubles && {
                  step: r.doubles.step,
                  points: r.doubles.points.map(n)
                }
              };
            }
            return t;
          }, c.prototype.toJ = function () {
            return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
          }, o(f, a.BasePoint), u.prototype.jpoint = function (e, t, r) {
            return new f(this, e, t, r);
          }, f.prototype.toP = function () {
            if (this.isInfinity()) return this.curve.point(null, null);
            var e = this.z.redInvm(),
              t = e.redSqr(),
              r = this.x.redMul(t),
              n = this.y.redMul(t).redMul(e);
            return this.curve.point(r, n);
          }, f.prototype.neg = function () {
            return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
          }, f.prototype.add = function (e) {
            if (this.isInfinity()) return e;
            if (e.isInfinity()) return this;
            var t = e.z.redSqr(),
              r = this.z.redSqr(),
              n = this.x.redMul(t),
              i = e.x.redMul(r),
              o = this.y.redMul(t.redMul(e.z)),
              a = e.y.redMul(r.redMul(this.z)),
              s = n.redSub(i),
              u = o.redSub(a);
            if (0 === s.cmpn(0)) return 0 !== u.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var c = s.redSqr(),
              f = c.redMul(s),
              d = n.redMul(c),
              l = u.redSqr().redIAdd(f).redISub(d).redISub(d),
              h = u.redMul(d.redISub(l)).redISub(o.redMul(f)),
              p = this.z.redMul(e.z).redMul(s);
            return this.curve.jpoint(l, h, p);
          }, f.prototype.mixedAdd = function (e) {
            if (this.isInfinity()) return e.toJ();
            if (e.isInfinity()) return this;
            var t = this.z.redSqr(),
              r = this.x,
              n = e.x.redMul(t),
              i = this.y,
              o = e.y.redMul(t).redMul(this.z),
              a = r.redSub(n),
              s = i.redSub(o);
            if (0 === a.cmpn(0)) return 0 !== s.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var u = a.redSqr(),
              c = u.redMul(a),
              f = r.redMul(u),
              d = s.redSqr().redIAdd(c).redISub(f).redISub(f),
              l = s.redMul(f.redISub(d)).redISub(i.redMul(c)),
              h = this.z.redMul(a);
            return this.curve.jpoint(d, l, h);
          }, f.prototype.dblp = function (e) {
            if (0 === e) return this;
            if (this.isInfinity()) return this;
            if (!e) return this.dbl();
            var t;
            if (this.curve.zeroA || this.curve.threeA) {
              var r = this;
              for (t = 0; t < e; t++) r = r.dbl();
              return r;
            }
            var n = this.curve.a,
              i = this.curve.tinv,
              o = this.x,
              a = this.y,
              s = this.z,
              u = s.redSqr().redSqr(),
              c = a.redAdd(a);
            for (t = 0; t < e; t++) {
              var f = o.redSqr(),
                d = c.redSqr(),
                l = d.redSqr(),
                h = f.redAdd(f).redIAdd(f).redIAdd(n.redMul(u)),
                p = o.redMul(d),
                b = h.redSqr().redISub(p.redAdd(p)),
                y = p.redISub(b),
                m = h.redMul(y);
              m = m.redIAdd(m).redISub(l);
              var v = c.redMul(s);
              t + 1 < e && (u = u.redMul(l)), o = b, s = v, c = m;
            }
            return this.curve.jpoint(o, c.redMul(i), s);
          }, f.prototype.dbl = function () {
            return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
          }, f.prototype._zeroDbl = function () {
            var e, t, r;
            if (this.zOne) {
              var n = this.x.redSqr(),
                i = this.y.redSqr(),
                o = i.redSqr(),
                a = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
              a = a.redIAdd(a);
              var s = n.redAdd(n).redIAdd(n),
                u = s.redSqr().redISub(a).redISub(a),
                c = o.redIAdd(o);
              c = (c = c.redIAdd(c)).redIAdd(c), e = u, t = s.redMul(a.redISub(u)).redISub(c), r = this.y.redAdd(this.y);
            } else {
              var f = this.x.redSqr(),
                d = this.y.redSqr(),
                l = d.redSqr(),
                h = this.x.redAdd(d).redSqr().redISub(f).redISub(l);
              h = h.redIAdd(h);
              var p = f.redAdd(f).redIAdd(f),
                b = p.redSqr(),
                y = l.redIAdd(l);
              y = (y = y.redIAdd(y)).redIAdd(y), e = b.redISub(h).redISub(h), t = p.redMul(h.redISub(e)).redISub(y), r = (r = this.y.redMul(this.z)).redIAdd(r);
            }
            return this.curve.jpoint(e, t, r);
          }, f.prototype._threeDbl = function () {
            var e, t, r;
            if (this.zOne) {
              var n = this.x.redSqr(),
                i = this.y.redSqr(),
                o = i.redSqr(),
                a = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
              a = a.redIAdd(a);
              var s = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),
                u = s.redSqr().redISub(a).redISub(a);
              e = u;
              var c = o.redIAdd(o);
              c = (c = c.redIAdd(c)).redIAdd(c), t = s.redMul(a.redISub(u)).redISub(c), r = this.y.redAdd(this.y);
            } else {
              var f = this.z.redSqr(),
                d = this.y.redSqr(),
                l = this.x.redMul(d),
                h = this.x.redSub(f).redMul(this.x.redAdd(f));
              h = h.redAdd(h).redIAdd(h);
              var p = l.redIAdd(l),
                b = (p = p.redIAdd(p)).redAdd(p);
              e = h.redSqr().redISub(b), r = this.y.redAdd(this.z).redSqr().redISub(d).redISub(f);
              var y = d.redSqr();
              y = (y = (y = y.redIAdd(y)).redIAdd(y)).redIAdd(y), t = h.redMul(p.redISub(e)).redISub(y);
            }
            return this.curve.jpoint(e, t, r);
          }, f.prototype._dbl = function () {
            var e = this.curve.a,
              t = this.x,
              r = this.y,
              n = this.z,
              i = n.redSqr().redSqr(),
              o = t.redSqr(),
              a = r.redSqr(),
              s = o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)),
              u = t.redAdd(t),
              c = (u = u.redIAdd(u)).redMul(a),
              f = s.redSqr().redISub(c.redAdd(c)),
              d = c.redISub(f),
              l = a.redSqr();
            l = (l = (l = l.redIAdd(l)).redIAdd(l)).redIAdd(l);
            var h = s.redMul(d).redISub(l),
              p = r.redAdd(r).redMul(n);
            return this.curve.jpoint(f, h, p);
          }, f.prototype.trpl = function () {
            if (!this.curve.zeroA) return this.dbl().add(this);
            var e = this.x.redSqr(),
              t = this.y.redSqr(),
              r = this.z.redSqr(),
              n = t.redSqr(),
              i = e.redAdd(e).redIAdd(e),
              o = i.redSqr(),
              a = this.x.redAdd(t).redSqr().redISub(e).redISub(n),
              s = (a = (a = (a = a.redIAdd(a)).redAdd(a).redIAdd(a)).redISub(o)).redSqr(),
              u = n.redIAdd(n);
            u = (u = (u = u.redIAdd(u)).redIAdd(u)).redIAdd(u);
            var c = i.redIAdd(a).redSqr().redISub(o).redISub(s).redISub(u),
              f = t.redMul(c);
            f = (f = f.redIAdd(f)).redIAdd(f);
            var d = this.x.redMul(s).redISub(f);
            d = (d = d.redIAdd(d)).redIAdd(d);
            var l = this.y.redMul(c.redMul(u.redISub(c)).redISub(a.redMul(s)));
            l = (l = (l = l.redIAdd(l)).redIAdd(l)).redIAdd(l);
            var h = this.z.redAdd(a).redSqr().redISub(r).redISub(s);
            return this.curve.jpoint(d, l, h);
          }, f.prototype.mul = function (e, t) {
            return e = new i(e, t), this.curve._wnafMul(this, e);
          }, f.prototype.eq = function (e) {
            if ("affine" === e.type) return this.eq(e.toJ());
            if (this === e) return !0;
            var t = this.z.redSqr(),
              r = e.z.redSqr();
            if (0 !== this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0)) return !1;
            var n = t.redMul(this.z),
              i = r.redMul(e.z);
            return 0 === this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0);
          }, f.prototype.eqXToP = function (e) {
            var t = this.z.redSqr(),
              r = e.toRed(this.curve.red).redMul(t);
            if (0 === this.x.cmp(r)) return !0;
            for (var n = e.clone(), i = this.curve.redN.redMul(t);;) {
              if (n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0) return !1;
              if (r.redIAdd(i), 0 === this.x.cmp(r)) return !0;
            }
          }, f.prototype.inspect = function () {
            return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
          }, f.prototype.isInfinity = function () {
            return 0 === this.z.cmpn(0);
          };
        },
        506: function _(e, t, r) {
          "use strict";

          var n,
            i = t,
            o = r(7198),
            a = r(6063),
            s = r(7528).assert;
          function u(e) {
            "short" === e.type ? this.curve = new a.short(e) : "edwards" === e.type ? this.curve = new a.edwards(e) : this.curve = new a.mont(e), this.g = this.curve.g, this.n = this.curve.n, this.hash = e.hash, s(this.g.validate(), "Invalid curve"), s(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
          }
          function c(e, t) {
            Object.defineProperty(i, e, {
              configurable: !0,
              enumerable: !0,
              get: function get() {
                var r = new u(t);
                return Object.defineProperty(i, e, {
                  configurable: !0,
                  enumerable: !0,
                  value: r
                }), r;
              }
            });
          }
          i.PresetCurve = u, c("p192", {
            type: "short",
            prime: "p192",
            p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
            a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
            b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
            n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
            hash: o.sha256,
            gRed: !1,
            g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]
          }), c("p224", {
            type: "short",
            prime: "p224",
            p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
            a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
            b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
            n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
            hash: o.sha256,
            gRed: !1,
            g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]
          }), c("p256", {
            type: "short",
            prime: null,
            p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
            a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
            b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
            n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
            hash: o.sha256,
            gRed: !1,
            g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]
          }), c("p384", {
            type: "short",
            prime: null,
            p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
            a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
            b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
            n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
            hash: o.sha384,
            gRed: !1,
            g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]
          }), c("p521", {
            type: "short",
            prime: null,
            p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
            a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
            b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
            n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
            hash: o.sha512,
            gRed: !1,
            g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]
          }), c("curve25519", {
            type: "mont",
            prime: "p25519",
            p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
            a: "76d06",
            b: "1",
            n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
            hash: o.sha256,
            gRed: !1,
            g: ["9"]
          }), c("ed25519", {
            type: "edwards",
            prime: "p25519",
            p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
            a: "-1",
            c: "1",
            d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
            n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
            hash: o.sha256,
            gRed: !1,
            g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"]
          });
          try {
            n = r(6401);
          } catch (e) {
            n = void 0;
          }
          c("secp256k1", {
            type: "short",
            prime: "k256",
            p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
            a: "0",
            b: "7",
            n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
            h: "1",
            hash: o.sha256,
            beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
            lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
            basis: [{
              a: "3086d221a7d46bcde86c90e49284eb15",
              b: "-e4437ed6010e88286f547fa90abfe4c3"
            }, {
              a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
              b: "3086d221a7d46bcde86c90e49284eb15"
            }],
            gRed: !1,
            g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", n]
          });
        },
        8320: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(1734),
            o = r(9410),
            a = r(7528),
            s = r(506),
            u = r(2202),
            c = a.assert,
            f = r(7791),
            d = r(488);
          function l(e) {
            if (!(this instanceof l)) return new l(e);
            "string" == typeof e && (c(Object.prototype.hasOwnProperty.call(s, e), "Unknown curve " + e), e = s[e]), e instanceof s.PresetCurve && (e = {
              curve: e
            }), this.curve = e.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e.curve.g, this.g.precompute(e.curve.n.bitLength() + 1), this.hash = e.hash || e.curve.hash;
          }
          e.exports = l, l.prototype.keyPair = function (e) {
            return new f(this, e);
          }, l.prototype.keyFromPrivate = function (e, t) {
            return f.fromPrivate(this, e, t);
          }, l.prototype.keyFromPublic = function (e, t) {
            return f.fromPublic(this, e, t);
          }, l.prototype.genKeyPair = function (e) {
            e || (e = {});
            for (var t = new o({
                hash: this.hash,
                pers: e.pers,
                persEnc: e.persEnc || "utf8",
                entropy: e.entropy || u(this.hash.hmacStrength),
                entropyEnc: e.entropy && e.entropyEnc || "utf8",
                nonce: this.n.toArray()
              }), r = this.n.byteLength(), n = this.n.sub(new i(2));;) {
              var a = new i(t.generate(r));
              if (!(a.cmp(n) > 0)) return a.iaddn(1), this.keyFromPrivate(a);
            }
          }, l.prototype._truncateToN = function (e, t) {
            var r = 8 * e.byteLength() - this.n.bitLength();
            return r > 0 && (e = e.ushrn(r)), !t && e.cmp(this.n) >= 0 ? e.sub(this.n) : e;
          }, l.prototype.sign = function (e, t, r, a) {
            "object" === (0, n.default)(r) && (a = r, r = null), a || (a = {}), t = this.keyFromPrivate(t, r), e = this._truncateToN(new i(e, 16));
            for (var s = this.n.byteLength(), u = t.getPrivate().toArray("be", s), c = e.toArray("be", s), f = new o({
                hash: this.hash,
                entropy: u,
                nonce: c,
                pers: a.pers,
                persEnc: a.persEnc || "utf8"
              }), l = this.n.sub(new i(1)), h = 0;; h++) {
              var p = a.k ? a.k(h) : new i(f.generate(this.n.byteLength()));
              if (!((p = this._truncateToN(p, !0)).cmpn(1) <= 0 || p.cmp(l) >= 0)) {
                var b = this.g.mul(p);
                if (!b.isInfinity()) {
                  var y = b.getX(),
                    m = y.umod(this.n);
                  if (0 !== m.cmpn(0)) {
                    var v = p.invm(this.n).mul(m.mul(t.getPrivate()).iadd(e));
                    if (0 !== (v = v.umod(this.n)).cmpn(0)) {
                      var g = (b.getY().isOdd() ? 1 : 0) | (0 !== y.cmp(m) ? 2 : 0);
                      return a.canonical && v.cmp(this.nh) > 0 && (v = this.n.sub(v), g ^= 1), new d({
                        r: m,
                        s: v,
                        recoveryParam: g
                      });
                    }
                  }
                }
              }
            }
          }, l.prototype.verify = function (e, t, r, n) {
            e = this._truncateToN(new i(e, 16)), r = this.keyFromPublic(r, n);
            var o = (t = new d(t, "hex")).r,
              a = t.s;
            if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0) return !1;
            if (a.cmpn(1) < 0 || a.cmp(this.n) >= 0) return !1;
            var s,
              u = a.invm(this.n),
              c = u.mul(e).umod(this.n),
              f = u.mul(o).umod(this.n);
            return this.curve._maxwellTrick ? !(s = this.g.jmulAdd(c, r.getPublic(), f)).isInfinity() && s.eqXToP(o) : !(s = this.g.mulAdd(c, r.getPublic(), f)).isInfinity() && 0 === s.getX().umod(this.n).cmp(o);
          }, l.prototype.recoverPubKey = function (e, t, r, n) {
            c((3 & r) === r, "The recovery param is more than two bits"), t = new d(t, n);
            var o = this.n,
              a = new i(e),
              s = t.r,
              u = t.s,
              f = 1 & r,
              l = r >> 1;
            if (s.cmp(this.curve.p.umod(this.curve.n)) >= 0 && l) throw new Error("Unable to find sencond key candinate");
            s = l ? this.curve.pointFromX(s.add(this.curve.n), f) : this.curve.pointFromX(s, f);
            var h = t.r.invm(o),
              p = o.sub(a).mul(h).umod(o),
              b = u.mul(h).umod(o);
            return this.g.mulAdd(p, s, b);
          }, l.prototype.getKeyRecoveryParam = function (e, t, r, n) {
            if (null !== (t = new d(t, n)).recoveryParam) return t.recoveryParam;
            for (var i = 0; i < 4; i++) {
              var o;
              try {
                o = this.recoverPubKey(e, t, i);
              } catch (e) {
                continue;
              }
              if (o.eq(r)) return i;
            }
            throw new Error("Unable to find valid recovery factor");
          };
        },
        7791: function _(e, t, r) {
          "use strict";

          var n = r(1734),
            i = r(7528).assert;
          function o(e, t) {
            this.ec = e, this.priv = null, this.pub = null, t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);
          }
          e.exports = o, o.fromPublic = function (e, t, r) {
            return t instanceof o ? t : new o(e, {
              pub: t,
              pubEnc: r
            });
          }, o.fromPrivate = function (e, t, r) {
            return t instanceof o ? t : new o(e, {
              priv: t,
              privEnc: r
            });
          }, o.prototype.validate = function () {
            var e = this.getPublic();
            return e.isInfinity() ? {
              result: !1,
              reason: "Invalid public key"
            } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? {
              result: !0,
              reason: null
            } : {
              result: !1,
              reason: "Public key * N != O"
            } : {
              result: !1,
              reason: "Public key is not a point"
            };
          }, o.prototype.getPublic = function (e, t) {
            return "string" == typeof e && (t = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), t ? this.pub.encode(t, e) : this.pub;
          }, o.prototype.getPrivate = function (e) {
            return "hex" === e ? this.priv.toString(16, 2) : this.priv;
          }, o.prototype._importPrivate = function (e, t) {
            this.priv = new n(e, t || 16), this.priv = this.priv.umod(this.ec.curve.n);
          }, o.prototype._importPublic = function (e, t) {
            if (e.x || e.y) return "mont" === this.ec.curve.type ? i(e.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || i(e.x && e.y, "Need both x and y coordinate"), void (this.pub = this.ec.curve.point(e.x, e.y));
            this.pub = this.ec.curve.decodePoint(e, t);
          }, o.prototype.derive = function (e) {
            return e.validate() || i(e.validate(), "public point not validated"), e.mul(this.priv).getX();
          }, o.prototype.sign = function (e, t, r) {
            return this.ec.sign(e, this, t, r);
          }, o.prototype.verify = function (e, t) {
            return this.ec.verify(e, t, this);
          }, o.prototype.inspect = function () {
            return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
          };
        },
        488: function _(e, t, r) {
          "use strict";

          var n = r(1734),
            i = r(7528),
            o = i.assert;
          function a(e, t) {
            if (e instanceof a) return e;
            this._importDER(e, t) || (o(e.r && e.s, "Signature without r or s"), this.r = new n(e.r, 16), this.s = new n(e.s, 16), void 0 === e.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam);
          }
          function s() {
            this.place = 0;
          }
          function u(e, t) {
            var r = e[t.place++];
            if (!(128 & r)) return r;
            var n = 15 & r;
            if (0 === n || n > 4) return !1;
            for (var i = 0, o = 0, a = t.place; o < n; o++, a++) i <<= 8, i |= e[a], i >>>= 0;
            return !(i <= 127) && (t.place = a, i);
          }
          function c(e) {
            for (var t = 0, r = e.length - 1; !e[t] && !(128 & e[t + 1]) && t < r;) t++;
            return 0 === t ? e : e.slice(t);
          }
          function f(e, t) {
            if (t < 128) e.push(t);else {
              var r = 1 + (Math.log(t) / Math.LN2 >>> 3);
              for (e.push(128 | r); --r;) e.push(t >>> (r << 3) & 255);
              e.push(t);
            }
          }
          e.exports = a, a.prototype._importDER = function (e, t) {
            e = i.toArray(e, t);
            var r = new s();
            if (48 !== e[r.place++]) return !1;
            var o = u(e, r);
            if (!1 === o) return !1;
            if (o + r.place !== e.length) return !1;
            if (2 !== e[r.place++]) return !1;
            var a = u(e, r);
            if (!1 === a) return !1;
            var c = e.slice(r.place, a + r.place);
            if (r.place += a, 2 !== e[r.place++]) return !1;
            var f = u(e, r);
            if (!1 === f) return !1;
            if (e.length !== f + r.place) return !1;
            var d = e.slice(r.place, f + r.place);
            if (0 === c[0]) {
              if (!(128 & c[1])) return !1;
              c = c.slice(1);
            }
            if (0 === d[0]) {
              if (!(128 & d[1])) return !1;
              d = d.slice(1);
            }
            return this.r = new n(c), this.s = new n(d), this.recoveryParam = null, !0;
          }, a.prototype.toDER = function (e) {
            var t = this.r.toArray(),
              r = this.s.toArray();
            for (128 & t[0] && (t = [0].concat(t)), 128 & r[0] && (r = [0].concat(r)), t = c(t), r = c(r); !(r[0] || 128 & r[1]);) r = r.slice(1);
            var n = [2];
            f(n, t.length), (n = n.concat(t)).push(2), f(n, r.length);
            var o = n.concat(r),
              a = [48];
            return f(a, o.length), a = a.concat(o), i.encode(a, e);
          };
        },
        8027: function _(e, t, r) {
          "use strict";

          var n = r(7198),
            i = r(506),
            o = r(7528),
            a = o.assert,
            s = o.parseBytes,
            u = r(7303),
            c = r(6646);
          function f(e) {
            if (a("ed25519" === e, "only tested with ed25519 so far"), !(this instanceof f)) return new f(e);
            e = i[e].curve, this.curve = e, this.g = e.g, this.g.precompute(e.n.bitLength() + 1), this.pointClass = e.point().constructor, this.encodingLength = Math.ceil(e.n.bitLength() / 8), this.hash = n.sha512;
          }
          e.exports = f, f.prototype.sign = function (e, t) {
            e = s(e);
            var r = this.keyFromSecret(t),
              n = this.hashInt(r.messagePrefix(), e),
              i = this.g.mul(n),
              o = this.encodePoint(i),
              a = this.hashInt(o, r.pubBytes(), e).mul(r.priv()),
              u = n.add(a).umod(this.curve.n);
            return this.makeSignature({
              R: i,
              S: u,
              Rencoded: o
            });
          }, f.prototype.verify = function (e, t, r) {
            e = s(e), t = this.makeSignature(t);
            var n = this.keyFromPublic(r),
              i = this.hashInt(t.Rencoded(), n.pubBytes(), e),
              o = this.g.mul(t.S());
            return t.R().add(n.pub().mul(i)).eq(o);
          }, f.prototype.hashInt = function () {
            for (var e = this.hash(), t = 0; t < arguments.length; t++) e.update(arguments[t]);
            return o.intFromLE(e.digest()).umod(this.curve.n);
          }, f.prototype.keyFromPublic = function (e) {
            return u.fromPublic(this, e);
          }, f.prototype.keyFromSecret = function (e) {
            return u.fromSecret(this, e);
          }, f.prototype.makeSignature = function (e) {
            return e instanceof c ? e : new c(this, e);
          }, f.prototype.encodePoint = function (e) {
            var t = e.getY().toArray("le", this.encodingLength);
            return t[this.encodingLength - 1] |= e.getX().isOdd() ? 128 : 0, t;
          }, f.prototype.decodePoint = function (e) {
            var t = (e = o.parseBytes(e)).length - 1,
              r = e.slice(0, t).concat(-129 & e[t]),
              n = 0 != (128 & e[t]),
              i = o.intFromLE(r);
            return this.curve.pointFromY(i, n);
          }, f.prototype.encodeInt = function (e) {
            return e.toArray("le", this.encodingLength);
          }, f.prototype.decodeInt = function (e) {
            return o.intFromLE(e);
          }, f.prototype.isPoint = function (e) {
            return e instanceof this.pointClass;
          };
        },
        7303: function _(e, t, r) {
          "use strict";

          var n = r(7528),
            i = n.assert,
            o = n.parseBytes,
            a = n.cachedProperty;
          function s(e, t) {
            this.eddsa = e, this._secret = o(t.secret), e.isPoint(t.pub) ? this._pub = t.pub : this._pubBytes = o(t.pub);
          }
          s.fromPublic = function (e, t) {
            return t instanceof s ? t : new s(e, {
              pub: t
            });
          }, s.fromSecret = function (e, t) {
            return t instanceof s ? t : new s(e, {
              secret: t
            });
          }, s.prototype.secret = function () {
            return this._secret;
          }, a(s, "pubBytes", function () {
            return this.eddsa.encodePoint(this.pub());
          }), a(s, "pub", function () {
            return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
          }), a(s, "privBytes", function () {
            var e = this.eddsa,
              t = this.hash(),
              r = e.encodingLength - 1,
              n = t.slice(0, e.encodingLength);
            return n[0] &= 248, n[r] &= 127, n[r] |= 64, n;
          }), a(s, "priv", function () {
            return this.eddsa.decodeInt(this.privBytes());
          }), a(s, "hash", function () {
            return this.eddsa.hash().update(this.secret()).digest();
          }), a(s, "messagePrefix", function () {
            return this.hash().slice(this.eddsa.encodingLength);
          }), s.prototype.sign = function (e) {
            return i(this._secret, "KeyPair can only verify"), this.eddsa.sign(e, this);
          }, s.prototype.verify = function (e, t) {
            return this.eddsa.verify(e, t, this);
          }, s.prototype.getSecret = function (e) {
            return i(this._secret, "KeyPair is public only"), n.encode(this.secret(), e);
          }, s.prototype.getPublic = function (e) {
            return n.encode(this.pubBytes(), e);
          }, e.exports = s;
        },
        6646: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(1734),
            o = r(7528),
            a = o.assert,
            s = o.cachedProperty,
            u = o.parseBytes;
          function c(e, t) {
            this.eddsa = e, "object" !== (0, n.default)(t) && (t = u(t)), Array.isArray(t) && (t = {
              R: t.slice(0, e.encodingLength),
              S: t.slice(e.encodingLength)
            }), a(t.R && t.S, "Signature without R or S"), e.isPoint(t.R) && (this._R = t.R), t.S instanceof i && (this._S = t.S), this._Rencoded = Array.isArray(t.R) ? t.R : t.Rencoded, this._Sencoded = Array.isArray(t.S) ? t.S : t.Sencoded;
          }
          s(c, "S", function () {
            return this.eddsa.decodeInt(this.Sencoded());
          }), s(c, "R", function () {
            return this.eddsa.decodePoint(this.Rencoded());
          }), s(c, "Rencoded", function () {
            return this.eddsa.encodePoint(this.R());
          }), s(c, "Sencoded", function () {
            return this.eddsa.encodeInt(this.S());
          }), c.prototype.toBytes = function () {
            return this.Rencoded().concat(this.Sencoded());
          }, c.prototype.toHex = function () {
            return o.encode(this.toBytes(), "hex").toUpperCase();
          }, e.exports = c;
        },
        6401: function _(e) {
          "use strict";

          e.exports = {
            doubles: {
              step: 4,
              points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]
            },
            naf: {
              wnd: 7,
              points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]
            }
          };
        },
        7528: function _(e, t, r) {
          "use strict";

          var n = t,
            i = r(1734),
            o = r(4504),
            a = r(6580);
          n.assert = o, n.toArray = a.toArray, n.zero2 = a.zero2, n.toHex = a.toHex, n.encode = a.encode, n.getNAF = function (e, t, r) {
            var n = new Array(Math.max(e.bitLength(), r) + 1);
            n.fill(0);
            for (var i = 1 << t + 1, o = e.clone(), a = 0; a < n.length; a++) {
              var s,
                u = o.andln(i - 1);
              o.isOdd() ? (s = u > (i >> 1) - 1 ? (i >> 1) - u : u, o.isubn(s)) : s = 0, n[a] = s, o.iushrn(1);
            }
            return n;
          }, n.getJSF = function (e, t) {
            var r = [[], []];
            e = e.clone(), t = t.clone();
            for (var n, i = 0, o = 0; e.cmpn(-i) > 0 || t.cmpn(-o) > 0;) {
              var a,
                s,
                u = e.andln(3) + i & 3,
                c = t.andln(3) + o & 3;
              3 === u && (u = -1), 3 === c && (c = -1), a = 0 == (1 & u) ? 0 : 3 != (n = e.andln(7) + i & 7) && 5 !== n || 2 !== c ? u : -u, r[0].push(a), s = 0 == (1 & c) ? 0 : 3 != (n = t.andln(7) + o & 7) && 5 !== n || 2 !== u ? c : -c, r[1].push(s), 2 * i === a + 1 && (i = 1 - i), 2 * o === s + 1 && (o = 1 - o), e.iushrn(1), t.iushrn(1);
            }
            return r;
          }, n.cachedProperty = function (e, t, r) {
            var n = "_" + t;
            e.prototype[t] = function () {
              return void 0 !== this[n] ? this[n] : this[n] = r.call(this);
            };
          }, n.parseBytes = function (e) {
            return "string" == typeof e ? n.toArray(e, "hex") : e;
          }, n.intFromLE = function (e) {
            return new i(e, "hex", "le");
          };
        },
        6464: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = function i() {
              if ("object" === ("undefined" == typeof self ? "undefined" : (0, n.default)(self)) && self) return self;
              if ("object" === ("undefined" == typeof window ? "undefined" : (0, n.default)(window)) && window) return window;
              throw new Error("Unable to resolve global `this`");
            };
          e.exports = function () {
            if (this) return this;
            if ("object" === ("undefined" == typeof globalThis ? "undefined" : (0, n.default)(globalThis)) && globalThis) return globalThis;
            try {
              Object.defineProperty(Object.prototype, "__global__", {
                get: function get() {
                  return this;
                },
                configurable: !0
              });
            } catch (e) {
              return i();
            }
            try {
              return __global__ || i();
            } finally {
              delete Object.prototype.__global__;
            }
          }();
        },
        4258: function _(e, t, r) {
          "use strict";

          var n,
            i,
            o,
            a = r(9142),
            s = r(8847)(r(3355));
          o = function o() {
            function e(e) {
              return "function" == typeof e;
            }
            var t = Array.isArray ? Array.isArray : function (e) {
                return "[object Array]" === Object.prototype.toString.call(e);
              },
              n = 0,
              i = void 0,
              o = void 0,
              u = function u(e, t) {
                b[n] = e, b[n + 1] = t, 2 === (n += 2) && (o ? o(y) : A());
              },
              c = "undefined" != typeof window ? window : void 0,
              f = c || {},
              d = f.MutationObserver || f.WebKitMutationObserver,
              l = "undefined" == typeof self && void 0 !== a && "[object process]" === {}.toString.call(a),
              h = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel;
            function p() {
              var e = setTimeout;
              return function () {
                return e(y, 1);
              };
            }
            var b = new Array(1e3);
            function y() {
              for (var e = 0; e < n; e += 2) (0, b[e])(b[e + 1]), b[e] = void 0, b[e + 1] = void 0;
              n = 0;
            }
            var m,
              v,
              g,
              w,
              A = void 0;
            function k(e, t) {
              var r = this,
                n = new this.constructor(E);
              void 0 === n[S] && F(n);
              var i = r._state;
              if (i) {
                var o = arguments[i - 1];
                u(function () {
                  return j(i, n, o, r._result);
                });
              } else U(r, n, e, t);
              return n;
            }
            function _(e) {
              if (e && "object" === (0, s.default)(e) && e.constructor === this) return e;
              var t = new this(E);
              return T(t, e), t;
            }
            l ? A = function A() {
              return a.nextTick(y);
            } : d ? (v = 0, g = new d(y), w = document.createTextNode(""), g.observe(w, {
              characterData: !0
            }), A = function A() {
              w.data = v = ++v % 2;
            }) : h ? ((m = new MessageChannel()).port1.onmessage = y, A = function A() {
              return m.port2.postMessage(0);
            }) : A = void 0 === c ? function () {
              try {
                var e = Function("return this")().require("vertx");
                return void 0 !== (i = e.runOnLoop || e.runOnContext) ? function () {
                  i(y);
                } : p();
              } catch (e) {
                return p();
              }
            }() : p();
            var S = Math.random().toString(36).substring(2);
            function E() {}
            var x = void 0,
              P = 1,
              O = 2;
            function B(t, r, n) {
              r.constructor === t.constructor && n === k && r.constructor.resolve === _ ? function (e, t) {
                t._state === P ? I(e, t._result) : t._state === O ? M(e, t._result) : U(t, void 0, function (t) {
                  return T(e, t);
                }, function (t) {
                  return M(e, t);
                });
              }(t, r) : void 0 === n ? I(t, r) : e(n) ? function (e, t, r) {
                u(function (e) {
                  var n = !1,
                    i = function (r, i, o, a) {
                      try {
                        r.call(i, function (r) {
                          n || (n = !0, t !== r ? T(e, r) : I(e, r));
                        }, function (t) {
                          n || (n = !0, M(e, t));
                        });
                      } catch (e) {
                        return e;
                      }
                    }(r, t, 0, 0, e._label);
                  !n && i && (n = !0, M(e, i));
                }, e);
              }(t, r, n) : I(t, r);
            }
            function T(e, t) {
              if (e === t) M(e, new TypeError("You cannot resolve a promise with itself"));else if (n = t, i = (0, s.default)(n), null === n || "object" !== i && "function" !== i) I(e, t);else {
                var r = void 0;
                try {
                  r = t.then;
                } catch (t) {
                  return void M(e, t);
                }
                B(e, t, r);
              }
              var n, i;
            }
            function C(e) {
              e._onerror && e._onerror(e._result), R(e);
            }
            function I(e, t) {
              e._state === x && (e._result = t, e._state = P, 0 !== e._subscribers.length && u(R, e));
            }
            function M(e, t) {
              e._state === x && (e._state = O, e._result = t, u(C, e));
            }
            function U(e, t, r, n) {
              var i = e._subscribers,
                o = i.length;
              e._onerror = null, i[o] = t, i[o + P] = r, i[o + O] = n, 0 === o && e._state && u(R, e);
            }
            function R(e) {
              var t = e._subscribers,
                r = e._state;
              if (0 !== t.length) {
                for (var n = void 0, i = void 0, o = e._result, a = 0; a < t.length; a += 3) n = t[a], i = t[a + r], n ? j(r, n, i, o) : i(o);
                e._subscribers.length = 0;
              }
            }
            function j(t, r, n, i) {
              var o = e(n),
                a = void 0,
                s = void 0,
                u = !0;
              if (o) {
                try {
                  a = n(i);
                } catch (e) {
                  u = !1, s = e;
                }
                if (r === a) return void M(r, new TypeError("A promises callback cannot return that same promise."));
              } else a = i;
              r._state !== x || (o && u ? T(r, a) : !1 === u ? M(r, s) : t === P ? I(r, a) : t === O && M(r, a));
            }
            var N = 0;
            function F(e) {
              e[S] = N++, e._state = void 0, e._result = void 0, e._subscribers = [];
            }
            var L = function () {
                function e(e, r) {
                  this._instanceConstructor = e, this.promise = new e(E), this.promise[S] || F(this.promise), t(r) ? (this.length = r.length, this._remaining = r.length, this._result = new Array(this.length), 0 === this.length ? I(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(r), 0 === this._remaining && I(this.promise, this._result))) : M(this.promise, new Error("Array Methods must be provided an Array"));
                }
                return e.prototype._enumerate = function (e) {
                  for (var t = 0; this._state === x && t < e.length; t++) this._eachEntry(e[t], t);
                }, e.prototype._eachEntry = function (e, t) {
                  var r = this._instanceConstructor,
                    n = r.resolve;
                  if (n === _) {
                    var i = void 0,
                      o = void 0,
                      a = !1;
                    try {
                      i = e.then;
                    } catch (e) {
                      a = !0, o = e;
                    }
                    if (i === k && e._state !== x) this._settledAt(e._state, t, e._result);else if ("function" != typeof i) this._remaining--, this._result[t] = e;else if (r === D) {
                      var s = new r(E);
                      a ? M(s, o) : B(s, e, i), this._willSettleAt(s, t);
                    } else this._willSettleAt(new r(function (t) {
                      return t(e);
                    }), t);
                  } else this._willSettleAt(n(e), t);
                }, e.prototype._settledAt = function (e, t, r) {
                  var n = this.promise;
                  n._state === x && (this._remaining--, e === O ? M(n, r) : this._result[t] = r), 0 === this._remaining && I(n, this._result);
                }, e.prototype._willSettleAt = function (e, t) {
                  var r = this;
                  U(e, void 0, function (e) {
                    return r._settledAt(P, t, e);
                  }, function (e) {
                    return r._settledAt(O, t, e);
                  });
                }, e;
              }(),
              D = function () {
                function t(e) {
                  this[S] = N++, this._result = this._state = void 0, this._subscribers = [], E !== e && ("function" != typeof e && function () {
                    throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
                  }(), this instanceof t ? function (e, t) {
                    try {
                      t(function (t) {
                        T(e, t);
                      }, function (t) {
                        M(e, t);
                      });
                    } catch (t) {
                      M(e, t);
                    }
                  }(this, e) : function () {
                    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
                  }());
                }
                return t.prototype.catch = function (e) {
                  return this.then(null, e);
                }, t.prototype.finally = function (t) {
                  var r = this,
                    n = r.constructor;
                  return e(t) ? r.then(function (e) {
                    return n.resolve(t()).then(function () {
                      return e;
                    });
                  }, function (e) {
                    return n.resolve(t()).then(function () {
                      throw e;
                    });
                  }) : r.then(t, t);
                }, t;
              }();
            return D.prototype.then = k, D.all = function (e) {
              return new L(this, e).promise;
            }, D.race = function (e) {
              var r = this;
              return t(e) ? new r(function (t, n) {
                for (var i = e.length, o = 0; o < i; o++) r.resolve(e[o]).then(t, n);
              }) : new r(function (e, t) {
                return t(new TypeError("You must pass an array to race."));
              });
            }, D.resolve = _, D.reject = function (e) {
              var t = new this(E);
              return M(t, e), t;
            }, D._setScheduler = function (e) {
              o = e;
            }, D._setAsap = function (e) {
              u = e;
            }, D._asap = u, D.polyfill = function () {
              var e = void 0;
              if (void 0 !== r.g) e = r.g;else if ("undefined" != typeof self) e = self;else try {
                e = Function("return this")();
              } catch (e) {
                throw new Error("polyfill failed because global object is unavailable in this environment");
              }
              var t = e.Promise;
              if (t) {
                var n = null;
                try {
                  n = Object.prototype.toString.call(t.resolve());
                } catch (e) {}
                if ("[object Promise]" === n && !t.cast) return;
              }
              e.Promise = D;
            }, D.Promise = D, D;
          }, "object" === (0, s.default)(t) ? e.exports = o() : void 0 === (i = "function" == typeof (n = o) ? n.call(t, r, t, e) : n) || (e.exports = i);
        },
        1006: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(4858).keccak_256,
            o = r(3956);
          function a(e) {
            return e ? o.toUnicode(e, {
              useStd3ASCII: !0,
              transitional: !1
            }) : e;
          }
          t.hash = function (e) {
            for (var t = "", r = 0; r < 32; r++) t += "00";
            if (name = a(e), name) {
              var o = name.split(".");
              for (r = o.length - 1; r >= 0; r--) {
                var s = i(o[r]);
                t = i(new n(t + s, "hex"));
              }
            }
            return "0x" + t;
          }, t.normalize = a;
        },
        3058: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(8847)(r(4519)),
            o = r(6851),
            a = r(9733),
            s = r(6597),
            u = (r(6740), new s.ec("secp256k1")),
            c = r(2922),
            f = c.keccak256,
            d = c.keccak256s,
            l = function l(e) {
              for (var t = d(e.slice(2)), r = "0x", n = 0; n < 40; n++) r += parseInt(t[n + 2], 16) > 7 ? e[n + 2].toUpperCase() : e[n + 2];
              return r;
            },
            h = function h(e) {
              var t = new n(e.slice(2), "hex"),
                r = "0x" + u.keyFromPrivate(t).getPublic(!1, "hex").slice(2),
                i = f(r);
              return {
                address: l("0x" + i.slice(-40)),
                privateKey: e
              };
            },
            p = function p(e) {
              var t = (0, i.default)(e, 3),
                r = t[0],
                n = t[1],
                a = t[2];
              return o.flatten([n, a, r]);
            },
            b = function b(e) {
              return [o.slice(64, o.length(e), e), o.slice(0, 32, e), o.slice(32, 64, e)];
            },
            y = function y(e) {
              return function (t, r) {
                var i = u.keyFromPrivate(new n(r.slice(2), "hex")).sign(new n(t.slice(2), "hex"), {
                  canonical: !0
                });
                return p([a.fromString(o.fromNumber(e + i.recoveryParam)), o.pad(32, o.fromNat("0x" + i.r.toString(16))), o.pad(32, o.fromNat("0x" + i.s.toString(16)))]);
              };
            },
            m = y(27);
          e.exports = {
            create: function create(e) {
              var t = f(o.concat(o.random(32), e || o.random(32))),
                r = o.concat(o.concat(o.random(32), t), o.random(32)),
                n = f(r);
              return h(n);
            },
            toChecksum: l,
            fromPrivate: h,
            sign: m,
            makeSigner: y,
            recover: function recover(e, t) {
              var r = b(t),
                i = {
                  v: o.toNumber(r[0]),
                  r: r[1].slice(2),
                  s: r[2].slice(2)
                },
                a = "0x" + u.recoverPubKey(new n(e.slice(2), "hex"), i, i.v < 2 ? i.v : 1 - i.v % 2).encode("hex", !1).slice(2),
                s = f(a);
              return l("0x" + s.slice(-40));
            },
            encodeSignature: p,
            decodeSignature: b
          };
        },
        1376: function _(e) {
          "use strict";

          var t = function t(e, _t) {
            for (var r = [], n = 0; n < e; ++n) r.push(_t(n));
            return r;
          };
          e.exports = {
            generate: t,
            replicate: function replicate(e, r) {
              return t(e, function () {
                return r;
              });
            },
            concat: function concat(e, t) {
              return e.concat(t);
            },
            flatten: function flatten(e) {
              for (var t = [], r = 0, n = e.length; r < n; ++r) for (var i = 0, o = e[r].length; i < o; ++i) t.push(e[r][i]);
              return t;
            },
            chunksOf: function chunksOf(e, t) {
              for (var r = [], n = 0, i = t.length; n < i; n += e) r.push(t.slice(n, n + e));
              return r;
            }
          };
        },
        6851: function _(e, t, r) {
          "use strict";

          r(1376);
          var n = function n(e, t) {
              return parseInt(e.slice(2 * t + 2, 2 * t + 4), 16);
            },
            i = function i(e) {
              return (e.length - 2) / 2;
            },
            o = function o(e) {
              for (var t = [], r = 2, n = e.length; r < n; r += 2) t.push(parseInt(e.slice(r, r + 2), 16));
              return t;
            },
            a = function a(e) {
              for (var t = "0x", r = 0, n = e.length; r < n; ++r) {
                var i = e[r];
                t += (i < 16 ? "0" : "") + i.toString(16);
              }
              return t;
            };
          e.exports = {
            random: function random(e) {
              var t;
              t = "undefined" != typeof window && window.crypto && window.crypto.getRandomValues ? window.crypto.getRandomValues(new Uint8Array(e)) : r(4293).randomBytes(e);
              for (var n = "0x", i = 0; i < e; ++i) n += ("00" + t[i].toString(16)).slice(-2);
              return n;
            },
            length: i,
            concat: function concat(e, t) {
              return e.concat(t.slice(2));
            },
            flatten: function flatten(e) {
              return "0x" + e.reduce(function (e, t) {
                return e + t.slice(2);
              }, "");
            },
            slice: function slice(e, t, r) {
              return "0x" + r.slice(2 * e + 2, 2 * t + 2);
            },
            reverse: function reverse(e) {
              for (var t = "0x", r = 0, n = i(e); r < n; ++r) t += e.slice(2 * (n - r), 2 * (n - r + 1));
              return t;
            },
            pad: function e(t, r) {
              return r.length === 2 * t + 2 ? r : e(t, "0x0" + r.slice(2));
            },
            padRight: function e(t, r) {
              return r.length === 2 * t + 2 ? r : e(t, r + "0");
            },
            fromAscii: function fromAscii(e) {
              for (var t = "0x", r = 0; r < e.length; ++r) t += ("00" + e.charCodeAt(r).toString(16)).slice(-2);
              return t;
            },
            toAscii: function toAscii(e) {
              for (var t = "", r = 2; r < e.length; r += 2) t += String.fromCharCode(parseInt(e.slice(r, r + 2), 16));
              return t;
            },
            fromString: function fromString(e) {
              for (var t = function t(e) {
                  var t = e.toString(16);
                  return t.length < 2 ? "0" + t : t;
                }, r = "0x", n = 0; n != e.length; n++) {
                var i = e.charCodeAt(n);
                if (i < 128) r += t(i);else {
                  if (i < 2048) r += t(i >> 6 | 192);else {
                    if (i > 55295 && i < 56320) {
                      if (++n == e.length) return null;
                      var o = e.charCodeAt(n);
                      if (o < 56320 || o > 57343) return null;
                      r += t((i = 65536 + ((1023 & i) << 10) + (1023 & o)) >> 18 | 240), r += t(i >> 12 & 63 | 128);
                    } else r += t(i >> 12 | 224);
                    r += t(i >> 6 & 63 | 128);
                  }
                  r += t(63 & i | 128);
                }
              }
              return r;
            },
            toString: function toString(e) {
              for (var t = "", r = 0, o = i(e); r < o;) {
                var a = n(e, r++);
                if (a > 127) {
                  if (a > 191 && a < 224) {
                    if (r >= o) return null;
                    a = (31 & a) << 6 | 63 & n(e, r);
                  } else if (a > 223 && a < 240) {
                    if (r + 1 >= o) return null;
                    a = (15 & a) << 12 | (63 & n(e, r)) << 6 | 63 & n(e, ++r);
                  } else {
                    if (!(a > 239 && a < 248)) return null;
                    if (r + 2 >= o) return null;
                    a = (7 & a) << 18 | (63 & n(e, r)) << 12 | (63 & n(e, ++r)) << 6 | 63 & n(e, ++r);
                  }
                  ++r;
                }
                if (a <= 65535) t += String.fromCharCode(a);else {
                  if (!(a <= 1114111)) return null;
                  a -= 65536, t += String.fromCharCode(a >> 10 | 55296), t += String.fromCharCode(1023 & a | 56320);
                }
              }
              return t;
            },
            fromNumber: function fromNumber(e) {
              var t = e.toString(16);
              return t.length % 2 == 0 ? "0x" + t : "0x0" + t;
            },
            toNumber: function toNumber(e) {
              return parseInt(e.slice(2), 16);
            },
            fromNat: function fromNat(e) {
              return "0x0" === e ? "0x" : e.length % 2 == 0 ? e : "0x0" + e.slice(2);
            },
            toNat: function toNat(e) {
              return "0" === e[2] ? "0x" + e.slice(3) : e;
            },
            fromArray: a,
            toArray: o,
            fromUint8Array: function fromUint8Array(e) {
              return a([].slice.call(e, 0));
            },
            toUint8Array: function toUint8Array(e) {
              return new Uint8Array(o(e));
            }
          };
        },
        2922: function _(e) {
          "use strict";

          var t = "0123456789abcdef".split(""),
            r = [1, 256, 65536, 16777216],
            n = [0, 8, 16, 24],
            i = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648],
            o = function o(e) {
              var t, r, n, o, a, s, u, c, f, d, l, h, p, b, y, m, v, g, w, A, k, _, S, E, x, P, O, B, T, C, I, M, U, R, j, N, F, L, D, H, q, z, G, K, V, J, W, Y, X, Q, Z, $, ee, te, re, ne, ie, oe, ae, se, ue, ce, fe;
              for (n = 0; n < 48; n += 2) o = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], a = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], s = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], u = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], c = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], f = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], d = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], l = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], t = (h = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48]) ^ (s << 1 | u >>> 31), r = (p = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (u << 1 | s >>> 31), e[0] ^= t, e[1] ^= r, e[10] ^= t, e[11] ^= r, e[20] ^= t, e[21] ^= r, e[30] ^= t, e[31] ^= r, e[40] ^= t, e[41] ^= r, t = o ^ (c << 1 | f >>> 31), r = a ^ (f << 1 | c >>> 31), e[2] ^= t, e[3] ^= r, e[12] ^= t, e[13] ^= r, e[22] ^= t, e[23] ^= r, e[32] ^= t, e[33] ^= r, e[42] ^= t, e[43] ^= r, t = s ^ (d << 1 | l >>> 31), r = u ^ (l << 1 | d >>> 31), e[4] ^= t, e[5] ^= r, e[14] ^= t, e[15] ^= r, e[24] ^= t, e[25] ^= r, e[34] ^= t, e[35] ^= r, e[44] ^= t, e[45] ^= r, t = c ^ (h << 1 | p >>> 31), r = f ^ (p << 1 | h >>> 31), e[6] ^= t, e[7] ^= r, e[16] ^= t, e[17] ^= r, e[26] ^= t, e[27] ^= r, e[36] ^= t, e[37] ^= r, e[46] ^= t, e[47] ^= r, t = d ^ (o << 1 | a >>> 31), r = l ^ (a << 1 | o >>> 31), e[8] ^= t, e[9] ^= r, e[18] ^= t, e[19] ^= r, e[28] ^= t, e[29] ^= r, e[38] ^= t, e[39] ^= r, e[48] ^= t, e[49] ^= r, b = e[0], y = e[1], J = e[11] << 4 | e[10] >>> 28, W = e[10] << 4 | e[11] >>> 28, B = e[20] << 3 | e[21] >>> 29, T = e[21] << 3 | e[20] >>> 29, se = e[31] << 9 | e[30] >>> 23, ue = e[30] << 9 | e[31] >>> 23, z = e[40] << 18 | e[41] >>> 14, G = e[41] << 18 | e[40] >>> 14, R = e[2] << 1 | e[3] >>> 31, j = e[3] << 1 | e[2] >>> 31, m = e[13] << 12 | e[12] >>> 20, v = e[12] << 12 | e[13] >>> 20, Y = e[22] << 10 | e[23] >>> 22, X = e[23] << 10 | e[22] >>> 22, C = e[33] << 13 | e[32] >>> 19, I = e[32] << 13 | e[33] >>> 19, ce = e[42] << 2 | e[43] >>> 30, fe = e[43] << 2 | e[42] >>> 30, te = e[5] << 30 | e[4] >>> 2, re = e[4] << 30 | e[5] >>> 2, N = e[14] << 6 | e[15] >>> 26, F = e[15] << 6 | e[14] >>> 26, g = e[25] << 11 | e[24] >>> 21, w = e[24] << 11 | e[25] >>> 21, Q = e[34] << 15 | e[35] >>> 17, Z = e[35] << 15 | e[34] >>> 17, M = e[45] << 29 | e[44] >>> 3, U = e[44] << 29 | e[45] >>> 3, E = e[6] << 28 | e[7] >>> 4, x = e[7] << 28 | e[6] >>> 4, ne = e[17] << 23 | e[16] >>> 9, ie = e[16] << 23 | e[17] >>> 9, L = e[26] << 25 | e[27] >>> 7, D = e[27] << 25 | e[26] >>> 7, A = e[36] << 21 | e[37] >>> 11, k = e[37] << 21 | e[36] >>> 11, $ = e[47] << 24 | e[46] >>> 8, ee = e[46] << 24 | e[47] >>> 8, K = e[8] << 27 | e[9] >>> 5, V = e[9] << 27 | e[8] >>> 5, P = e[18] << 20 | e[19] >>> 12, O = e[19] << 20 | e[18] >>> 12, oe = e[29] << 7 | e[28] >>> 25, ae = e[28] << 7 | e[29] >>> 25, H = e[38] << 8 | e[39] >>> 24, q = e[39] << 8 | e[38] >>> 24, _ = e[48] << 14 | e[49] >>> 18, S = e[49] << 14 | e[48] >>> 18, e[0] = b ^ ~m & g, e[1] = y ^ ~v & w, e[10] = E ^ ~P & B, e[11] = x ^ ~O & T, e[20] = R ^ ~N & L, e[21] = j ^ ~F & D, e[30] = K ^ ~J & Y, e[31] = V ^ ~W & X, e[40] = te ^ ~ne & oe, e[41] = re ^ ~ie & ae, e[2] = m ^ ~g & A, e[3] = v ^ ~w & k, e[12] = P ^ ~B & C, e[13] = O ^ ~T & I, e[22] = N ^ ~L & H, e[23] = F ^ ~D & q, e[32] = J ^ ~Y & Q, e[33] = W ^ ~X & Z, e[42] = ne ^ ~oe & se, e[43] = ie ^ ~ae & ue, e[4] = g ^ ~A & _, e[5] = w ^ ~k & S, e[14] = B ^ ~C & M, e[15] = T ^ ~I & U, e[24] = L ^ ~H & z, e[25] = D ^ ~q & G, e[34] = Y ^ ~Q & $, e[35] = X ^ ~Z & ee, e[44] = oe ^ ~se & ce, e[45] = ae ^ ~ue & fe, e[6] = A ^ ~_ & b, e[7] = k ^ ~S & y, e[16] = C ^ ~M & E, e[17] = I ^ ~U & x, e[26] = H ^ ~z & R, e[27] = q ^ ~G & j, e[36] = Q ^ ~$ & K, e[37] = Z ^ ~ee & V, e[46] = se ^ ~ce & te, e[47] = ue ^ ~fe & re, e[8] = _ ^ ~b & m, e[9] = S ^ ~y & v, e[18] = M ^ ~E & P, e[19] = U ^ ~x & O, e[28] = z ^ ~R & N, e[29] = G ^ ~j & F, e[38] = $ ^ ~K & J, e[39] = ee ^ ~V & W, e[48] = ce ^ ~te & ne, e[49] = fe ^ ~re & ie, e[0] ^= i[n], e[1] ^= i[n + 1];
            },
            a = function a(e) {
              return function (i) {
                var a;
                if ("0x" === i.slice(0, 2)) {
                  a = [];
                  for (var s = 2, u = i.length; s < u; s += 2) a.push(parseInt(i.slice(s, s + 2), 16));
                } else a = i;
                return function (e, i) {
                  for (var a, s = i.length, u = e.blocks, c = e.blockCount << 2, f = e.blockCount, d = e.outputBlocks, l = e.s, h = 0; h < s;) {
                    if (e.reset) for (e.reset = !1, u[0] = e.block, y = 1; y < f + 1; ++y) u[y] = 0;
                    if ("string" != typeof i) for (y = e.start; h < s && y < c; ++h) u[y >> 2] |= i[h] << n[3 & y++];else for (y = e.start; h < s && y < c; ++h) (a = i.charCodeAt(h)) < 128 ? u[y >> 2] |= a << n[3 & y++] : a < 2048 ? (u[y >> 2] |= (192 | a >> 6) << n[3 & y++], u[y >> 2] |= (128 | 63 & a) << n[3 & y++]) : a < 55296 || a >= 57344 ? (u[y >> 2] |= (224 | a >> 12) << n[3 & y++], u[y >> 2] |= (128 | a >> 6 & 63) << n[3 & y++], u[y >> 2] |= (128 | 63 & a) << n[3 & y++]) : (a = 65536 + ((1023 & a) << 10 | 1023 & i.charCodeAt(++h)), u[y >> 2] |= (240 | a >> 18) << n[3 & y++], u[y >> 2] |= (128 | a >> 12 & 63) << n[3 & y++], u[y >> 2] |= (128 | a >> 6 & 63) << n[3 & y++], u[y >> 2] |= (128 | 63 & a) << n[3 & y++]);
                    if (e.lastByteIndex = y, y >= c) {
                      for (e.start = y - c, e.block = u[f], y = 0; y < f; ++y) l[y] ^= u[y];
                      o(l), e.reset = !0;
                    } else e.start = y;
                  }
                  if (u[(y = e.lastByteIndex) >> 2] |= r[3 & y], e.lastByteIndex === c) for (u[0] = u[f], y = 1; y < f + 1; ++y) u[y] = 0;
                  for (u[f - 1] |= 2147483648, y = 0; y < f; ++y) l[y] ^= u[y];
                  o(l);
                  for (var p, b = "", y = 0, m = 0; m < d;) {
                    for (y = 0; y < f && m < d; ++y, ++m) p = l[y], b += t[p >> 4 & 15] + t[15 & p] + t[p >> 12 & 15] + t[p >> 8 & 15] + t[p >> 20 & 15] + t[p >> 16 & 15] + t[p >> 28 & 15] + t[p >> 24 & 15];
                    m % f == 0 && (o(l), y = 0);
                  }
                  return "0x" + b;
                }(function (e) {
                  return {
                    blocks: [],
                    reset: !0,
                    block: 0,
                    start: 0,
                    blockCount: 1600 - (e << 1) >> 5,
                    outputBlocks: e >> 5,
                    s: (t = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [].concat(t, t, t, t, t))
                  };
                  var t;
                }(e), a);
              };
            };
          e.exports = {
            keccak256: a(256),
            keccak512: a(512),
            keccak256s: a(256),
            keccak512s: a(512)
          };
        },
        9733: function _(e, t, r) {
          "use strict";

          var n = r(1734),
            i = r(6851),
            o = function o(e) {
              return new n(e.slice(2), 16);
            },
            a = function a(e) {
              var t = "0x" + ("0x" === e.slice(0, 2) ? new n(e.slice(2), 16) : new n(e, 10)).toString("hex");
              return "0x0" === t ? "0x" : t;
            },
            s = function s(e) {
              return "string" == typeof e ? /^0x/.test(e) ? e : "0x" + e : "0x" + new n(e).toString("hex");
            },
            u = function u(e) {
              return o(e).toNumber();
            },
            c = function c(e) {
              return function (t, r) {
                return "0x" + o(t)[e](o(r)).toString("hex");
              };
            },
            f = c("add"),
            d = c("mul"),
            l = c("div"),
            h = c("sub");
          e.exports = {
            toString: function toString(e) {
              return o(e).toString(10);
            },
            fromString: a,
            toNumber: u,
            fromNumber: s,
            toEther: function toEther(e) {
              return u(l(e, a("10000000000"))) / 1e8;
            },
            fromEther: function fromEther(e) {
              return d(s(Math.floor(1e8 * e)), a("10000000000"));
            },
            toUint256: function toUint256(e) {
              return i.pad(32, e);
            },
            add: f,
            mul: d,
            div: l,
            sub: h
          };
        },
        6740: function _(e) {
          "use strict";

          e.exports = {
            encode: function encode(e) {
              var t = function t(e) {
                  return (t = e.toString(16)).length % 2 == 0 ? t : "0" + t;
                  var t;
                },
                r = function r(e, _r) {
                  return e < 56 ? t(_r + e) : t(_r + t(e).length / 2 + 55) + t(e);
                };
              return "0x" + function e(t) {
                if ("string" == typeof t) {
                  var n = t.slice(2);
                  return (2 != n.length || n >= "80" ? r(n.length / 2, 128) : "") + n;
                }
                var i = t.map(e).join("");
                return r(i.length / 2, 192) + i;
              }(e);
            },
            decode: function decode(e) {
              var t = 2,
                r = function r() {
                  if (t >= e.length) throw "";
                  var r = e.slice(t, t + 2);
                  return r < "80" ? (t += 2, "0x" + r) : r < "c0" ? i() : o();
                },
                n = function n() {
                  var r = parseInt(e.slice(t, t += 2), 16) % 64;
                  return r < 56 ? r : parseInt(e.slice(t, t += 2 * (r - 55)), 16);
                },
                i = function i() {
                  var r = n();
                  return "0x" + e.slice(t, t += 2 * r);
                },
                o = function o() {
                  for (var e = 2 * n() + t, i = []; t < e;) i.push(r());
                  return i;
                };
              try {
                return r();
              } catch (e) {
                return [];
              }
            }
          };
        },
        9313: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355));
          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var i = r(8179);
          function o(e) {
            return !("string" != typeof e || !/^(0x)?[0-9a-f]{512}$/i.test(e) || !/^(0x)?[0-9a-f]{512}$/.test(e) && !/^(0x)?[0-9A-F]{512}$/.test(e));
          }
          function a(e, t) {
            "object" === (0, n.default)(t) && t.constructor === Uint8Array && (t = i.bytesToHex(t));
            for (var r = i.keccak256(t).replace("0x", ""), o = 0; o < 12; o += 4) {
              var a = (parseInt(r.substr(o, 2), 16) << 8) + parseInt(r.substr(o + 2, 2), 16) & 2047,
                u = 1 << a % 4;
              if ((s(e.charCodeAt(e.length - 1 - Math.floor(a / 4))) & u) !== u) return !1;
            }
            return !0;
          }
          function s(e) {
            if (e >= 48 && e <= 57) return e - 48;
            if (e >= 65 && e <= 70) return e - 55;
            if (e >= 97 && e <= 102) return e - 87;
            throw new Error("invalid bloom");
          }
          function u(e) {
            return !("string" != typeof e || !/^(0x)?[0-9a-f]{64}$/i.test(e) || !/^(0x)?[0-9a-f]{64}$/.test(e) && !/^(0x)?[0-9A-F]{64}$/.test(e));
          }
          function c(e) {
            return !("string" != typeof e || !e.match(/^(0x)?[0-9a-fA-F]{40}$/) && !e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/));
          }
          t.isBloom = o, t.isInBloom = a, t.isUserEthereumAddressInBloom = function (e, t) {
            if (!o(e)) throw new Error("Invalid bloom given");
            if (!c(t)) throw new Error('Invalid ethereum address given: "'.concat(t, '"'));
            return a(e, i.padLeft(t, 64));
          }, t.isContractAddressInBloom = function (e, t) {
            if (!o(e)) throw new Error("Invalid bloom given");
            if (!c(t)) throw new Error('Invalid contract address given: "'.concat(t, '"'));
            return a(e, t);
          }, t.isTopicInBloom = function (e, t) {
            if (!o(e)) throw new Error("Invalid bloom given");
            if (!u(t)) throw new Error("Invalid topic");
            return a(e, t);
          }, t.isTopic = u, t.isAddress = c;
        },
        8179: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var n = r(7286);
          function i(e) {
            if (null == e) throw new Error("cannot convert null value to array");
            if ("string" == typeof e) {
              var t = e.match(/^(0x)?[0-9a-fA-F]*$/);
              if (!t) throw new Error("invalid hexidecimal string");
              if ("0x" !== t[1]) throw new Error("hex string must have 0x prefix");
              (e = e.substring(2)).length % 2 && (e = "0" + e);
              for (var r = [], n = 0; n < e.length; n += 2) r.push(parseInt(e.substr(n, 2), 16));
              return o(new Uint8Array(r));
            }
            if (function (e) {
              if (!e || parseInt(String(e.length)) != e.length || "string" == typeof e) return !1;
              for (var t = 0; t < e.length; t++) {
                var r = e[t];
                if (r < 0 || r >= 256 || parseInt(String(r)) != r) return !1;
              }
              return !0;
            }(e)) return o(new Uint8Array(e));
            throw new Error("invalid arrayify value");
          }
          function o(e) {
            var t = arguments;
            return void 0 !== e.slice || (e.slice = function () {
              var r = Array.prototype.slice.call(t);
              return o(new Uint8Array(Array.prototype.slice.apply(e, r)));
            }), e;
          }
          t.keccak256 = function (e) {
            return "0x" + n.keccak_256(i(e));
          }, t.padLeft = function (e, t) {
            var r = /^0x/i.test(e) || "number" == typeof e,
              n = t - (e = e.toString().replace(/^0x/i, "")).length + 1 >= 0 ? t - e.length + 1 : 0;
            return (r ? "0x" : "") + new Array(n).join("0") + e;
          }, t.bytesToHex = function (e) {
            for (var t = [], r = 0; r < e.length; r++) t.push((e[r] >>> 4).toString(16)), t.push((15 & e[r]).toString(16));
            return "0x".concat(t.join("").replace(/^0+/, ""));
          }, t.toByteArray = i;
        },
        7286: function _(e, t, r) {
          "use strict";

          e = r.nmd(e);
          var n,
            i = r(9142),
            o = r(8847)(r(3355));
          !function () {
            var a = "input is invalid type",
              s = "object" === ("undefined" == typeof window ? "undefined" : (0, o.default)(window)),
              u = s ? window : {};
            u.JS_SHA3_NO_WINDOW && (s = !1);
            var c = !s && "object" === ("undefined" == typeof self ? "undefined" : (0, o.default)(self));
            !u.JS_SHA3_NO_NODE_JS && "object" === (void 0 === i ? "undefined" : (0, o.default)(i)) && i.versions && i.versions.node ? u = r.g : c && (u = self);
            var f = !u.JS_SHA3_NO_COMMON_JS && "object" === (0, o.default)(e) && e.exports,
              d = r.amdO,
              l = !u.JS_SHA3_NO_ARRAY_BUFFER && "undefined" != typeof ArrayBuffer,
              h = "0123456789abcdef".split(""),
              p = [4, 1024, 262144, 67108864],
              b = [0, 8, 16, 24],
              y = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648],
              m = [224, 256, 384, 512],
              v = [128, 256],
              g = ["hex", "buffer", "arrayBuffer", "array", "digest"],
              w = {
                128: 168,
                256: 136
              };
            !u.JS_SHA3_NO_NODE_JS && Array.isArray || (Array.isArray = function (e) {
              return "[object Array]" === Object.prototype.toString.call(e);
            }), !l || !u.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW && ArrayBuffer.isView || (ArrayBuffer.isView = function (e) {
              return "object" === (0, o.default)(e) && e.buffer && e.buffer.constructor === ArrayBuffer;
            });
            for (var A = function A(e, t, r) {
                return function (n) {
                  return new j(e, t, e).update(n)[r]();
                };
              }, k = function k(e, t, r) {
                return function (n, i) {
                  return new j(e, t, i).update(n)[r]();
                };
              }, _ = function _(e, t, r) {
                return function (t, n, i, o) {
                  return O["cshake" + e].update(t, n, i, o)[r]();
                };
              }, S = function S(e, t, r) {
                return function (t, n, i, o) {
                  return O["kmac" + e].update(t, n, i, o)[r]();
                };
              }, E = function E(e, t, r, n) {
                for (var i = 0; i < g.length; ++i) {
                  var o = g[i];
                  e[o] = t(r, n, o);
                }
                return e;
              }, x = function x(e, t) {
                var r = A(e, t, "hex");
                return r.create = function () {
                  return new j(e, t, e);
                }, r.update = function (e) {
                  return r.create().update(e);
                }, E(r, A, e, t);
              }, P = [{
                name: "keccak",
                padding: [1, 256, 65536, 16777216],
                bits: m,
                createMethod: x
              }, {
                name: "sha3",
                padding: [6, 1536, 393216, 100663296],
                bits: m,
                createMethod: x
              }, {
                name: "shake",
                padding: [31, 7936, 2031616, 520093696],
                bits: v,
                createMethod: function createMethod(e, t) {
                  var r = k(e, t, "hex");
                  return r.create = function (r) {
                    return new j(e, t, r);
                  }, r.update = function (e, t) {
                    return r.create(t).update(e);
                  }, E(r, k, e, t);
                }
              }, {
                name: "cshake",
                padding: p,
                bits: v,
                createMethod: function createMethod(e, t) {
                  var r = w[e],
                    n = _(e, 0, "hex");
                  return n.create = function (n, i, o) {
                    return i || o ? new j(e, t, n).bytepad([i, o], r) : O["shake" + e].create(n);
                  }, n.update = function (e, t, r, i) {
                    return n.create(t, r, i).update(e);
                  }, E(n, _, e, t);
                }
              }, {
                name: "kmac",
                padding: p,
                bits: v,
                createMethod: function createMethod(e, t) {
                  var r = w[e],
                    n = S(e, 0, "hex");
                  return n.create = function (n, i, o) {
                    return new N(e, t, i).bytepad(["KMAC", o], r).bytepad([n], r);
                  }, n.update = function (e, t, r, i) {
                    return n.create(e, r, i).update(t);
                  }, E(n, S, e, t);
                }
              }], O = {}, B = [], T = 0; T < P.length; ++T) for (var C = P[T], I = C.bits, M = 0; M < I.length; ++M) {
              var U = C.name + "_" + I[M];
              if (B.push(U), O[U] = C.createMethod(I[M], C.padding), "sha3" !== C.name) {
                var R = C.name + I[M];
                B.push(R), O[R] = O[U];
              }
            }
            function j(e, t, r) {
              this.blocks = [], this.s = [], this.padding = t, this.outputBits = r, this.reset = !0, this.finalized = !1, this.block = 0, this.start = 0, this.blockCount = 1600 - (e << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r >> 5, this.extraBytes = (31 & r) >> 3;
              for (var n = 0; n < 50; ++n) this.s[n] = 0;
            }
            function N(e, t, r) {
              j.call(this, e, t, r);
            }
            j.prototype.update = function (e) {
              if (this.finalized) throw new Error("finalize already called");
              var t,
                r = (0, o.default)(e);
              if ("string" !== r) {
                if ("object" !== r) throw new Error(a);
                if (null === e) throw new Error(a);
                if (l && e.constructor === ArrayBuffer) e = new Uint8Array(e);else if (!(Array.isArray(e) || l && ArrayBuffer.isView(e))) throw new Error(a);
                t = !0;
              }
              for (var n, i, s = this.blocks, u = this.byteCount, c = e.length, f = this.blockCount, d = 0, h = this.s; d < c;) {
                if (this.reset) for (this.reset = !1, s[0] = this.block, n = 1; n < f + 1; ++n) s[n] = 0;
                if (t) for (n = this.start; d < c && n < u; ++d) s[n >> 2] |= e[d] << b[3 & n++];else for (n = this.start; d < c && n < u; ++d) (i = e.charCodeAt(d)) < 128 ? s[n >> 2] |= i << b[3 & n++] : i < 2048 ? (s[n >> 2] |= (192 | i >> 6) << b[3 & n++], s[n >> 2] |= (128 | 63 & i) << b[3 & n++]) : i < 55296 || i >= 57344 ? (s[n >> 2] |= (224 | i >> 12) << b[3 & n++], s[n >> 2] |= (128 | i >> 6 & 63) << b[3 & n++], s[n >> 2] |= (128 | 63 & i) << b[3 & n++]) : (i = 65536 + ((1023 & i) << 10 | 1023 & e.charCodeAt(++d)), s[n >> 2] |= (240 | i >> 18) << b[3 & n++], s[n >> 2] |= (128 | i >> 12 & 63) << b[3 & n++], s[n >> 2] |= (128 | i >> 6 & 63) << b[3 & n++], s[n >> 2] |= (128 | 63 & i) << b[3 & n++]);
                if (this.lastByteIndex = n, n >= u) {
                  for (this.start = n - u, this.block = s[f], n = 0; n < f; ++n) h[n] ^= s[n];
                  F(h), this.reset = !0;
                } else this.start = n;
              }
              return this;
            }, j.prototype.encode = function (e, t) {
              var r = 255 & e,
                n = 1,
                i = [r];
              for (r = 255 & (e >>= 8); r > 0;) i.unshift(r), r = 255 & (e >>= 8), ++n;
              return t ? i.push(n) : i.unshift(n), this.update(i), i.length;
            }, j.prototype.encodeString = function (e) {
              var t,
                r = (0, o.default)(e);
              if ("string" !== r) {
                if ("object" !== r) throw new Error(a);
                if (null === e) throw new Error(a);
                if (l && e.constructor === ArrayBuffer) e = new Uint8Array(e);else if (!(Array.isArray(e) || l && ArrayBuffer.isView(e))) throw new Error(a);
                t = !0;
              }
              var n = 0,
                i = e.length;
              if (t) n = i;else for (var s = 0; s < e.length; ++s) {
                var u = e.charCodeAt(s);
                u < 128 ? n += 1 : u < 2048 ? n += 2 : u < 55296 || u >= 57344 ? n += 3 : (u = 65536 + ((1023 & u) << 10 | 1023 & e.charCodeAt(++s)), n += 4);
              }
              return n += this.encode(8 * n), this.update(e), n;
            }, j.prototype.bytepad = function (e, t) {
              for (var r = this.encode(t), n = 0; n < e.length; ++n) r += this.encodeString(e[n]);
              var i = t - r % t,
                o = [];
              return o.length = i, this.update(o), this;
            }, j.prototype.finalize = function () {
              if (!this.finalized) {
                this.finalized = !0;
                var e = this.blocks,
                  t = this.lastByteIndex,
                  r = this.blockCount,
                  n = this.s;
                if (e[t >> 2] |= this.padding[3 & t], this.lastByteIndex === this.byteCount) for (e[0] = e[r], t = 1; t < r + 1; ++t) e[t] = 0;
                for (e[r - 1] |= 2147483648, t = 0; t < r; ++t) n[t] ^= e[t];
                F(n);
              }
            }, j.prototype.toString = j.prototype.hex = function () {
              this.finalize();
              for (var e, t = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, a = 0, s = ""; a < n;) {
                for (o = 0; o < t && a < n; ++o, ++a) e = r[o], s += h[e >> 4 & 15] + h[15 & e] + h[e >> 12 & 15] + h[e >> 8 & 15] + h[e >> 20 & 15] + h[e >> 16 & 15] + h[e >> 28 & 15] + h[e >> 24 & 15];
                a % t == 0 && (F(r), o = 0);
              }
              return i && (e = r[o], s += h[e >> 4 & 15] + h[15 & e], i > 1 && (s += h[e >> 12 & 15] + h[e >> 8 & 15]), i > 2 && (s += h[e >> 20 & 15] + h[e >> 16 & 15])), s;
            }, j.prototype.arrayBuffer = function () {
              this.finalize();
              var e,
                t = this.blockCount,
                r = this.s,
                n = this.outputBlocks,
                i = this.extraBytes,
                o = 0,
                a = 0,
                s = this.outputBits >> 3;
              e = i ? new ArrayBuffer(n + 1 << 2) : new ArrayBuffer(s);
              for (var u = new Uint32Array(e); a < n;) {
                for (o = 0; o < t && a < n; ++o, ++a) u[a] = r[o];
                a % t == 0 && F(r);
              }
              return i && (u[o] = r[o], e = e.slice(0, s)), e;
            }, j.prototype.buffer = j.prototype.arrayBuffer, j.prototype.digest = j.prototype.array = function () {
              this.finalize();
              for (var e, t, r = this.blockCount, n = this.s, i = this.outputBlocks, o = this.extraBytes, a = 0, s = 0, u = []; s < i;) {
                for (a = 0; a < r && s < i; ++a, ++s) e = s << 2, t = n[a], u[e] = 255 & t, u[e + 1] = t >> 8 & 255, u[e + 2] = t >> 16 & 255, u[e + 3] = t >> 24 & 255;
                s % r == 0 && F(n);
              }
              return o && (e = s << 2, t = n[a], u[e] = 255 & t, o > 1 && (u[e + 1] = t >> 8 & 255), o > 2 && (u[e + 2] = t >> 16 & 255)), u;
            }, N.prototype = new j(), N.prototype.finalize = function () {
              return this.encode(this.outputBits, !0), j.prototype.finalize.call(this);
            };
            var F = function F(e) {
              var t, r, n, i, o, a, s, u, c, f, d, l, h, p, b, m, v, g, w, A, k, _, S, E, x, P, O, B, T, C, I, M, U, R, j, N, F, L, D, H, q, z, G, K, V, J, W, Y, X, Q, Z, $, ee, te, re, ne, ie, oe, ae, se, ue, ce, fe;
              for (n = 0; n < 48; n += 2) i = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], o = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], a = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], s = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], u = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], c = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], f = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], d = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], t = (l = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48]) ^ (a << 1 | s >>> 31), r = (h = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (s << 1 | a >>> 31), e[0] ^= t, e[1] ^= r, e[10] ^= t, e[11] ^= r, e[20] ^= t, e[21] ^= r, e[30] ^= t, e[31] ^= r, e[40] ^= t, e[41] ^= r, t = i ^ (u << 1 | c >>> 31), r = o ^ (c << 1 | u >>> 31), e[2] ^= t, e[3] ^= r, e[12] ^= t, e[13] ^= r, e[22] ^= t, e[23] ^= r, e[32] ^= t, e[33] ^= r, e[42] ^= t, e[43] ^= r, t = a ^ (f << 1 | d >>> 31), r = s ^ (d << 1 | f >>> 31), e[4] ^= t, e[5] ^= r, e[14] ^= t, e[15] ^= r, e[24] ^= t, e[25] ^= r, e[34] ^= t, e[35] ^= r, e[44] ^= t, e[45] ^= r, t = u ^ (l << 1 | h >>> 31), r = c ^ (h << 1 | l >>> 31), e[6] ^= t, e[7] ^= r, e[16] ^= t, e[17] ^= r, e[26] ^= t, e[27] ^= r, e[36] ^= t, e[37] ^= r, e[46] ^= t, e[47] ^= r, t = f ^ (i << 1 | o >>> 31), r = d ^ (o << 1 | i >>> 31), e[8] ^= t, e[9] ^= r, e[18] ^= t, e[19] ^= r, e[28] ^= t, e[29] ^= r, e[38] ^= t, e[39] ^= r, e[48] ^= t, e[49] ^= r, p = e[0], b = e[1], J = e[11] << 4 | e[10] >>> 28, W = e[10] << 4 | e[11] >>> 28, B = e[20] << 3 | e[21] >>> 29, T = e[21] << 3 | e[20] >>> 29, se = e[31] << 9 | e[30] >>> 23, ue = e[30] << 9 | e[31] >>> 23, z = e[40] << 18 | e[41] >>> 14, G = e[41] << 18 | e[40] >>> 14, R = e[2] << 1 | e[3] >>> 31, j = e[3] << 1 | e[2] >>> 31, m = e[13] << 12 | e[12] >>> 20, v = e[12] << 12 | e[13] >>> 20, Y = e[22] << 10 | e[23] >>> 22, X = e[23] << 10 | e[22] >>> 22, C = e[33] << 13 | e[32] >>> 19, I = e[32] << 13 | e[33] >>> 19, ce = e[42] << 2 | e[43] >>> 30, fe = e[43] << 2 | e[42] >>> 30, te = e[5] << 30 | e[4] >>> 2, re = e[4] << 30 | e[5] >>> 2, N = e[14] << 6 | e[15] >>> 26, F = e[15] << 6 | e[14] >>> 26, g = e[25] << 11 | e[24] >>> 21, w = e[24] << 11 | e[25] >>> 21, Q = e[34] << 15 | e[35] >>> 17, Z = e[35] << 15 | e[34] >>> 17, M = e[45] << 29 | e[44] >>> 3, U = e[44] << 29 | e[45] >>> 3, E = e[6] << 28 | e[7] >>> 4, x = e[7] << 28 | e[6] >>> 4, ne = e[17] << 23 | e[16] >>> 9, ie = e[16] << 23 | e[17] >>> 9, L = e[26] << 25 | e[27] >>> 7, D = e[27] << 25 | e[26] >>> 7, A = e[36] << 21 | e[37] >>> 11, k = e[37] << 21 | e[36] >>> 11, $ = e[47] << 24 | e[46] >>> 8, ee = e[46] << 24 | e[47] >>> 8, K = e[8] << 27 | e[9] >>> 5, V = e[9] << 27 | e[8] >>> 5, P = e[18] << 20 | e[19] >>> 12, O = e[19] << 20 | e[18] >>> 12, oe = e[29] << 7 | e[28] >>> 25, ae = e[28] << 7 | e[29] >>> 25, H = e[38] << 8 | e[39] >>> 24, q = e[39] << 8 | e[38] >>> 24, _ = e[48] << 14 | e[49] >>> 18, S = e[49] << 14 | e[48] >>> 18, e[0] = p ^ ~m & g, e[1] = b ^ ~v & w, e[10] = E ^ ~P & B, e[11] = x ^ ~O & T, e[20] = R ^ ~N & L, e[21] = j ^ ~F & D, e[30] = K ^ ~J & Y, e[31] = V ^ ~W & X, e[40] = te ^ ~ne & oe, e[41] = re ^ ~ie & ae, e[2] = m ^ ~g & A, e[3] = v ^ ~w & k, e[12] = P ^ ~B & C, e[13] = O ^ ~T & I, e[22] = N ^ ~L & H, e[23] = F ^ ~D & q, e[32] = J ^ ~Y & Q, e[33] = W ^ ~X & Z, e[42] = ne ^ ~oe & se, e[43] = ie ^ ~ae & ue, e[4] = g ^ ~A & _, e[5] = w ^ ~k & S, e[14] = B ^ ~C & M, e[15] = T ^ ~I & U, e[24] = L ^ ~H & z, e[25] = D ^ ~q & G, e[34] = Y ^ ~Q & $, e[35] = X ^ ~Z & ee, e[44] = oe ^ ~se & ce, e[45] = ae ^ ~ue & fe, e[6] = A ^ ~_ & p, e[7] = k ^ ~S & b, e[16] = C ^ ~M & E, e[17] = I ^ ~U & x, e[26] = H ^ ~z & R, e[27] = q ^ ~G & j, e[36] = Q ^ ~$ & K, e[37] = Z ^ ~ee & V, e[46] = se ^ ~ce & te, e[47] = ue ^ ~fe & re, e[8] = _ ^ ~p & m, e[9] = S ^ ~b & v, e[18] = M ^ ~E & P, e[19] = U ^ ~x & O, e[28] = z ^ ~R & N, e[29] = G ^ ~j & F, e[38] = $ ^ ~K & J, e[39] = ee ^ ~V & W, e[48] = ce ^ ~te & ne, e[49] = fe ^ ~re & ie, e[0] ^= y[n], e[1] ^= y[n + 1];
            };
            if (f) e.exports = O;else {
              for (T = 0; T < B.length; ++T) u[B[T]] = O[B[T]];
              d && (void 0 === (n = function () {
                return O;
              }.call(t, r, t, e)) || (e.exports = n));
            }
          }();
        },
        9989: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.createHashFunction = function (e) {
            return function (t) {
              var r = e();
              return r.update(t), n.from(r.digest());
            };
          };
        },
        1243: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var n = r(9989),
            i = r(3135);
          t.keccak224 = n.createHashFunction(function () {
            return i("keccak224");
          }), t.keccak256 = n.createHashFunction(function () {
            return i("keccak256");
          }), t.keccak384 = n.createHashFunction(function () {
            return i("keccak384");
          }), t.keccak512 = n.createHashFunction(function () {
            return i("keccak512");
          });
        },
        4893: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var n = r(5010);
          t.getRandomBytes = function (e) {
            return new Promise(function (t, r) {
              n(e, function (e, n) {
                e ? r(e) : t(n);
              });
            });
          }, t.getRandomBytesSync = function (e) {
            return n(e);
          };
        },
        6992: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          });
          var n = r(7902),
            i = r(4893);
          t.createPrivateKey = function () {
            return e = this, t = void 0, o = function o() {
              var e;
              return function (e, t) {
                var r,
                  n,
                  i,
                  o,
                  a = {
                    label: 0,
                    sent: function sent() {
                      if (1 & i[0]) throw i[1];
                      return i[1];
                    },
                    trys: [],
                    ops: []
                  };
                return o = {
                  next: s(0),
                  throw: s(1),
                  return: s(2)
                }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {
                  return this;
                }), o;
                function s(o) {
                  return function (s) {
                    return function (o) {
                      if (r) throw new TypeError("Generator is already executing.");
                      for (; a;) try {
                        if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;
                        switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {
                          case 0:
                          case 1:
                            i = o;
                            break;
                          case 4:
                            return a.label++, {
                              value: o[1],
                              done: !1
                            };
                          case 5:
                            a.label++, n = o[1], o = [0];
                            continue;
                          case 7:
                            o = a.ops.pop(), a.trys.pop();
                            continue;
                          default:
                            if (!((i = (i = a.trys).length > 0 && i[i.length - 1]) || 6 !== o[0] && 2 !== o[0])) {
                              a = 0;
                              continue;
                            }
                            if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {
                              a.label = o[1];
                              break;
                            }
                            if (6 === o[0] && a.label < i[1]) {
                              a.label = i[1], i = o;
                              break;
                            }
                            if (i && a.label < i[2]) {
                              a.label = i[2], a.ops.push(o);
                              break;
                            }
                            i[2] && a.ops.pop(), a.trys.pop();
                            continue;
                        }
                        o = t.call(e, a);
                      } catch (e) {
                        o = [6, e], n = 0;
                      } finally {
                        r = i = 0;
                      }
                      if (5 & o[0]) throw o[1];
                      return {
                        value: o[0] ? o[1] : void 0,
                        done: !0
                      };
                    }([o, s]);
                  };
                }
              }(this, function (t) {
                switch (t.label) {
                  case 0:
                    return [4, i.getRandomBytes(32)];
                  case 1:
                    return e = t.sent(), n.privateKeyVerify(e) ? [2, e] : [3, 0];
                  case 2:
                    return [2];
                }
              });
            }, new ((r = void 0) || (r = Promise))(function (n, i) {
              function a(e) {
                try {
                  u(o.next(e));
                } catch (e) {
                  i(e);
                }
              }
              function s(e) {
                try {
                  u(o.throw(e));
                } catch (e) {
                  i(e);
                }
              }
              function u(e) {
                var t;
                e.done ? n(e.value) : (t = e.value, t instanceof r ? t : new r(function (e) {
                  e(t);
                })).then(a, s);
              }
              u((o = o.apply(e, t || [])).next());
            });
            var e, t, r, o;
          }, t.createPrivateKeySync = function () {
            for (;;) {
              var e = i.getRandomBytesSync(32);
              if (n.privateKeyVerify(e)) return e;
            }
          }, function (e) {
            for (var r in e) t.hasOwnProperty(r) || (t[r] = e[r]);
          }(r(7902));
        },
        1968: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.isZeroAddress = t.zeroAddress = t.importPublic = t.privateToAddress = t.privateToPublic = t.publicToAddress = t.pubToAddress = t.isValidPublic = t.isValidPrivate = t.generateAddress2 = t.generateAddress = t.isValidChecksumAddress = t.toChecksumAddress = t.isValidAddress = t.Account = void 0;
          var i,
            o = (i = r(3894)) && i.__esModule ? i : {
              default: i
            },
            a = r(9100),
            s = r(6992),
            u = r(3271),
            c = r(986),
            f = r(3464),
            d = r(9808),
            l = r(5725),
            h = r(5513),
            p = function () {
              function e(e, t, r, n) {
                void 0 === e && (e = new a.BN(0)), void 0 === t && (t = new a.BN(0)), void 0 === r && (r = c.KECCAK256_RLP), void 0 === n && (n = c.KECCAK256_NULL), this.nonce = e, this.balance = t, this.stateRoot = r, this.codeHash = n, this._validate();
              }
              return e.fromAccountData = function (t) {
                var r = t.nonce,
                  n = t.balance,
                  i = t.stateRoot,
                  o = t.codeHash;
                return new e(r ? new a.BN((0, f.toBuffer)(r)) : void 0, n ? new a.BN((0, f.toBuffer)(n)) : void 0, i ? (0, f.toBuffer)(i) : void 0, o ? (0, f.toBuffer)(o) : void 0);
              }, e.fromRlpSerializedAccount = function (e) {
                var t = a.rlp.decode(e);
                if (!Array.isArray(t)) throw new Error("Invalid serialized account input. Must be array");
                return this.fromValuesArray(t);
              }, e.fromValuesArray = function (t) {
                var r = function (e, t) {
                    var r = "function" == typeof Symbol && e[Symbol.iterator];
                    if (!r) return e;
                    var n,
                      i,
                      o = r.call(e),
                      a = [];
                    try {
                      for (; (void 0 === t || t-- > 0) && !(n = o.next()).done;) a.push(n.value);
                    } catch (e) {
                      i = {
                        error: e
                      };
                    } finally {
                      try {
                        n && !n.done && (r = o.return) && r.call(o);
                      } finally {
                        if (i) throw i.error;
                      }
                    }
                    return a;
                  }(t, 4),
                  n = r[0],
                  i = r[1],
                  o = r[2],
                  s = r[3];
                return new e(new a.BN(n), new a.BN(i), o, s);
              }, e.prototype._validate = function () {
                if (this.nonce.lt(new a.BN(0))) throw new Error("nonce must be greater than zero");
                if (this.balance.lt(new a.BN(0))) throw new Error("balance must be greater than zero");
                if (32 !== this.stateRoot.length) throw new Error("stateRoot must have a length of 32");
                if (32 !== this.codeHash.length) throw new Error("codeHash must have a length of 32");
              }, e.prototype.raw = function () {
                return [(0, h.bnToUnpaddedBuffer)(this.nonce), (0, h.bnToUnpaddedBuffer)(this.balance), this.stateRoot, this.codeHash];
              }, e.prototype.serialize = function () {
                return a.rlp.encode(this.raw());
              }, e.prototype.isContract = function () {
                return !this.codeHash.equals(c.KECCAK256_NULL);
              }, e.prototype.isEmpty = function () {
                return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(c.KECCAK256_NULL);
              }, e;
            }();
          t.Account = p, t.isValidAddress = function (e) {
            try {
              (0, l.assertIsString)(e);
            } catch (e) {
              return !1;
            }
            return /^0x[0-9a-fA-F]{40}$/.test(e);
          }, t.toChecksumAddress = function (e, t) {
            (0, l.assertIsHexString)(e);
            var r = (0, u.stripHexPrefix)(e).toLowerCase(),
              n = "";
            t && (n = (0, h.toType)(t, h.TypeOutput.BN).toString() + "0x");
            for (var i = (0, d.keccakFromString)(n + r).toString("hex"), o = "0x", a = 0; a < r.length; a++) parseInt(i[a], 16) >= 8 ? o += r[a].toUpperCase() : o += r[a];
            return o;
          }, t.isValidChecksumAddress = function (e, r) {
            return (0, t.isValidAddress)(e) && (0, t.toChecksumAddress)(e, r) === e;
          }, t.generateAddress = function (e, t) {
            (0, l.assertIsBuffer)(e), (0, l.assertIsBuffer)(t);
            var r = new a.BN(t);
            return r.isZero() ? (0, d.rlphash)([e, null]).slice(-20) : (0, d.rlphash)([e, n.from(r.toArray())]).slice(-20);
          }, t.generateAddress2 = function (e, t, r) {
            return (0, l.assertIsBuffer)(e), (0, l.assertIsBuffer)(t), (0, l.assertIsBuffer)(r), (0, o.default)(20 === e.length), (0, o.default)(32 === t.length), (0, d.keccak256)(n.concat([n.from("ff", "hex"), e, t, (0, d.keccak256)(r)])).slice(-20);
          }, t.isValidPrivate = function (e) {
            return (0, s.privateKeyVerify)(e);
          }, t.isValidPublic = function (e, t) {
            return void 0 === t && (t = !1), (0, l.assertIsBuffer)(e), 64 === e.length ? (0, s.publicKeyVerify)(n.concat([n.from([4]), e])) : !!t && (0, s.publicKeyVerify)(e);
          }, t.pubToAddress = function (e, t) {
            return void 0 === t && (t = !1), (0, l.assertIsBuffer)(e), t && 64 !== e.length && (e = n.from((0, s.publicKeyConvert)(e, !1).slice(1))), (0, o.default)(64 === e.length), (0, d.keccak)(e).slice(-20);
          }, t.publicToAddress = t.pubToAddress, t.privateToPublic = function (e) {
            return (0, l.assertIsBuffer)(e), n.from((0, s.publicKeyCreate)(e, !1)).slice(1);
          }, t.privateToAddress = function (e) {
            return (0, t.publicToAddress)((0, t.privateToPublic)(e));
          }, t.importPublic = function (e) {
            return (0, l.assertIsBuffer)(e), 64 !== e.length && (e = n.from((0, s.publicKeyConvert)(e, !1).slice(1))), e;
          }, t.zeroAddress = function () {
            var e = (0, f.zeros)(20);
            return (0, f.bufferToHex)(e);
          }, t.isZeroAddress = function (e) {
            try {
              (0, l.assertIsString)(e);
            } catch (e) {
              return !1;
            }
            return (0, t.zeroAddress)() === e;
          };
        },
        1984: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.Address = void 0;
          var i,
            o = (i = r(3894)) && i.__esModule ? i : {
              default: i
            },
            a = r(9100),
            s = r(3464),
            u = r(1968),
            c = function () {
              function e(e) {
                (0, o.default)(20 === e.length, "Invalid address length"), this.buf = e;
              }
              return e.zero = function () {
                return new e((0, s.zeros)(20));
              }, e.fromString = function (t) {
                return (0, o.default)((0, u.isValidAddress)(t), "Invalid address"), new e((0, s.toBuffer)(t));
              }, e.fromPublicKey = function (t) {
                return (0, o.default)(n.isBuffer(t), "Public key should be Buffer"), new e((0, u.pubToAddress)(t));
              }, e.fromPrivateKey = function (t) {
                return (0, o.default)(n.isBuffer(t), "Private key should be Buffer"), new e((0, u.privateToAddress)(t));
              }, e.generate = function (t, r) {
                return (0, o.default)(a.BN.isBN(r)), new e((0, u.generateAddress)(t.buf, r.toArrayLike(n)));
              }, e.generate2 = function (t, r, i) {
                return (0, o.default)(n.isBuffer(r)), (0, o.default)(n.isBuffer(i)), new e((0, u.generateAddress2)(t.buf, r, i));
              }, e.prototype.equals = function (e) {
                return this.buf.equals(e.buf);
              }, e.prototype.isZero = function () {
                return this.equals(e.zero());
              }, e.prototype.isPrecompileOrSystemAddress = function () {
                var e = new a.BN(this.buf),
                  t = new a.BN(0),
                  r = new a.BN("ffff", "hex");
                return e.gte(t) && e.lte(r);
              }, e.prototype.toString = function () {
                return "0x" + this.buf.toString("hex");
              }, e.prototype.toBuffer = function () {
                return n.from(this.buf);
              }, e;
            }();
          t.Address = c;
        },
        3464: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = function i(e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                i,
                o = r.call(e),
                a = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = o.next()).done;) a.push(n.value);
              } catch (e) {
                i = {
                  error: e
                };
              } finally {
                try {
                  n && !n.done && (r = o.return) && r.call(o);
                } finally {
                  if (i) throw i.error;
                }
              }
              return a;
            };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.bufArrToArr = t.arrToBufArr = t.validateNoLeadingZeroes = t.baToJSON = t.toUtf8 = t.addHexPrefix = t.toUnsigned = t.fromSigned = t.bufferToHex = t.bufferToInt = t.toBuffer = t.unpadHexString = t.unpadArray = t.unpadBuffer = t.setLengthRight = t.setLengthLeft = t.zeros = t.intToBuffer = t.intToHex = void 0;
          var o = r(9100),
            a = r(3271),
            s = r(5725);
          t.intToHex = function (e) {
            if (!Number.isSafeInteger(e) || e < 0) throw new Error("Received an invalid integer type: ".concat(e));
            return "0x".concat(e.toString(16));
          }, t.intToBuffer = function (e) {
            var r = (0, t.intToHex)(e);
            return n.from((0, a.padToEven)(r.slice(2)), "hex");
          }, t.zeros = function (e) {
            return n.allocUnsafe(e).fill(0);
          };
          var u = function u(e, r, n) {
            var i = (0, t.zeros)(r);
            return n ? e.length < r ? (e.copy(i), i) : e.slice(0, r) : e.length < r ? (e.copy(i, r - e.length), i) : e.slice(-r);
          };
          t.setLengthLeft = function (e, t) {
            return (0, s.assertIsBuffer)(e), u(e, t, !1);
          }, t.setLengthRight = function (e, t) {
            return (0, s.assertIsBuffer)(e), u(e, t, !0);
          };
          var c = function c(e) {
            for (var t = e[0]; e.length > 0 && "0" === t.toString();) t = (e = e.slice(1))[0];
            return e;
          };
          t.unpadBuffer = function (e) {
            return (0, s.assertIsBuffer)(e), c(e);
          }, t.unpadArray = function (e) {
            return (0, s.assertIsArray)(e), c(e);
          }, t.unpadHexString = function (e) {
            return (0, s.assertIsHexString)(e), e = (0, a.stripHexPrefix)(e), c(e);
          }, t.toBuffer = function (e) {
            if (null == e) return n.allocUnsafe(0);
            if (n.isBuffer(e)) return n.from(e);
            if (Array.isArray(e) || e instanceof Uint8Array) return n.from(e);
            if ("string" == typeof e) {
              if (!(0, a.isHexString)(e)) throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(e));
              return n.from((0, a.padToEven)((0, a.stripHexPrefix)(e)), "hex");
            }
            if ("number" == typeof e) return (0, t.intToBuffer)(e);
            if (o.BN.isBN(e)) {
              if (e.isNeg()) throw new Error("Cannot convert negative BN to buffer. Given: ".concat(e));
              return e.toArrayLike(n);
            }
            if (e.toArray) return n.from(e.toArray());
            if (e.toBuffer) return n.from(e.toBuffer());
            throw new Error("invalid type");
          }, t.bufferToInt = function (e) {
            return new o.BN((0, t.toBuffer)(e)).toNumber();
          }, t.bufferToHex = function (e) {
            return "0x" + (e = (0, t.toBuffer)(e)).toString("hex");
          }, t.fromSigned = function (e) {
            return new o.BN(e).fromTwos(256);
          }, t.toUnsigned = function (e) {
            return n.from(e.toTwos(256).toArray());
          }, t.addHexPrefix = function (e) {
            return "string" != typeof e || (0, a.isHexPrefixed)(e) ? e : "0x" + e;
          }, t.toUtf8 = function (e) {
            if ((e = (0, a.stripHexPrefix)(e)).length % 2 != 0) throw new Error("Invalid non-even hex string input for toUtf8() provided");
            return n.from(e.replace(/^(00)+|(00)+$/g, ""), "hex").toString("utf8");
          }, t.baToJSON = function (e) {
            if (n.isBuffer(e)) return "0x".concat(e.toString("hex"));
            if (e instanceof Array) {
              for (var r = [], i = 0; i < e.length; i++) r.push((0, t.baToJSON)(e[i]));
              return r;
            }
          }, t.validateNoLeadingZeroes = function (e) {
            var t, r;
            try {
              for (var n = function (e) {
                  var t = "function" == typeof Symbol && Symbol.iterator,
                    r = t && e[t],
                    n = 0;
                  if (r) return r.call(e);
                  if (e && "number" == typeof e.length) return {
                    next: function next() {
                      return e && n >= e.length && (e = void 0), {
                        value: e && e[n++],
                        done: !e
                      };
                    }
                  };
                  throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
                }(Object.entries(e)), o = n.next(); !o.done; o = n.next()) {
                var a = i(o.value, 2),
                  s = a[0],
                  u = a[1];
                if (void 0 !== u && u.length > 0 && 0 === u[0]) throw new Error("".concat(s, " cannot have leading zeroes, received: ").concat(u.toString("hex")));
              }
            } catch (e) {
              t = {
                error: e
              };
            } finally {
              try {
                o && !o.done && (r = n.return) && r.call(n);
              } finally {
                if (t) throw t.error;
              }
            }
          }, t.arrToBufArr = function e(t) {
            return Array.isArray(t) ? t.map(function (t) {
              return e(t);
            }) : n.from(t);
          }, t.bufArrToArr = function e(t) {
            return Array.isArray(t) ? t.map(function (t) {
              return e(t);
            }) : Uint8Array.from(null != t ? t : []);
          };
        },
        986: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.KECCAK256_RLP = t.KECCAK256_RLP_S = t.KECCAK256_RLP_ARRAY = t.KECCAK256_RLP_ARRAY_S = t.KECCAK256_NULL = t.KECCAK256_NULL_S = t.TWO_POW256 = t.MAX_INTEGER = t.MAX_UINT64 = void 0;
          var n = r(9033),
            i = r(9100);
          t.MAX_UINT64 = new i.BN("ffffffffffffffff", 16), t.MAX_INTEGER = new i.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16), t.TWO_POW256 = new i.BN("10000000000000000000000000000000000000000000000000000000000000000", 16), t.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470", t.KECCAK256_NULL = n.Buffer.from(t.KECCAK256_NULL_S, "hex"), t.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347", t.KECCAK256_RLP_ARRAY = n.Buffer.from(t.KECCAK256_RLP_ARRAY_S, "hex"), t.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421", t.KECCAK256_RLP = n.Buffer.from(t.KECCAK256_RLP_S, "hex");
        },
        9100: function _(e, t, r) {
          "use strict";

          var n = Object.create ? function (e, t, r, n) {
              void 0 === n && (n = r);
              var i = Object.getOwnPropertyDescriptor(t, r);
              i && !("get" in i ? !t.__esModule : i.writable || i.configurable) || (i = {
                enumerable: !0,
                get: function get() {
                  return t[r];
                }
              }), Object.defineProperty(e, n, i);
            } : function (e, t, r, n) {
              void 0 === n && (n = r), e[n] = t[r];
            },
            i = Object.create ? function (e, t) {
              Object.defineProperty(e, "default", {
                enumerable: !0,
                value: t
              });
            } : function (e, t) {
              e.default = t;
            };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.rlp = t.BN = void 0;
          var o,
            a = (o = r(1734)) && o.__esModule ? o : {
              default: o
            };
          t.BN = a.default;
          var s = function (e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e) for (var r in e) "default" !== r && Object.prototype.hasOwnProperty.call(e, r) && n(t, e, r);
            return i(t, e), t;
          }(r(6905));
          t.rlp = s;
        },
        9808: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.rlphash = t.ripemd160FromArray = t.ripemd160FromString = t.ripemd160 = t.sha256FromArray = t.sha256FromString = t.sha256 = t.keccakFromArray = t.keccakFromHexString = t.keccakFromString = t.keccak256 = t.keccak = void 0;
          var i = r(1243),
            o = r(5866),
            a = r(9100),
            s = r(3464),
            u = r(5725);
          t.keccak = function (e, t) {
            switch (void 0 === t && (t = 256), (0, u.assertIsBuffer)(e), t) {
              case 224:
                return (0, i.keccak224)(e);
              case 256:
                return (0, i.keccak256)(e);
              case 384:
                return (0, i.keccak384)(e);
              case 512:
                return (0, i.keccak512)(e);
              default:
                throw new Error("Invald algorithm: keccak".concat(t));
            }
          }, t.keccak256 = function (e) {
            return (0, t.keccak)(e);
          }, t.keccakFromString = function (e, r) {
            void 0 === r && (r = 256), (0, u.assertIsString)(e);
            var i = n.from(e, "utf8");
            return (0, t.keccak)(i, r);
          }, t.keccakFromHexString = function (e, r) {
            return void 0 === r && (r = 256), (0, u.assertIsHexString)(e), (0, t.keccak)((0, s.toBuffer)(e), r);
          }, t.keccakFromArray = function (e, r) {
            return void 0 === r && (r = 256), (0, u.assertIsArray)(e), (0, t.keccak)((0, s.toBuffer)(e), r);
          };
          var c = function c(e) {
            return e = (0, s.toBuffer)(e), o("sha256").update(e).digest();
          };
          t.sha256 = function (e) {
            return (0, u.assertIsBuffer)(e), c(e);
          }, t.sha256FromString = function (e) {
            return (0, u.assertIsString)(e), c(e);
          }, t.sha256FromArray = function (e) {
            return (0, u.assertIsArray)(e), c(e);
          };
          var f = function f(e, t) {
            e = (0, s.toBuffer)(e);
            var r = o("rmd160").update(e).digest();
            return !0 === t ? (0, s.setLengthLeft)(r, 32) : r;
          };
          t.ripemd160 = function (e, t) {
            return (0, u.assertIsBuffer)(e), f(e, t);
          }, t.ripemd160FromString = function (e, t) {
            return (0, u.assertIsString)(e), f(e, t);
          }, t.ripemd160FromArray = function (e, t) {
            return (0, u.assertIsArray)(e), f(e, t);
          }, t.rlphash = function (e) {
            return (0, t.keccak)(a.rlp.encode(e));
          };
        },
        5725: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.assertIsString = t.assertIsArray = t.assertIsBuffer = t.assertIsHexString = void 0;
          var i = r(3271);
          t.assertIsHexString = function (e) {
            if (!(0, i.isHexString)(e)) {
              var t = "This method only supports 0x-prefixed hex strings but input was: ".concat(e);
              throw new Error(t);
            }
          }, t.assertIsBuffer = function (e) {
            if (!n.isBuffer(e)) {
              var t = "This method only supports Buffer but input was: ".concat(e);
              throw new Error(t);
            }
          }, t.assertIsArray = function (e) {
            if (!Array.isArray(e)) {
              var t = "This method only supports number arrays but input was: ".concat(e);
              throw new Error(t);
            }
          }, t.assertIsString = function (e) {
            if ("string" != typeof e) {
              var t = "This method only supports strings but input was: ".concat(e);
              throw new Error(t);
            }
          };
        },
        3062: function _(e, t, r) {
          "use strict";

          var n = Object.create ? function (e, t, r, n) {
              void 0 === n && (n = r);
              var i = Object.getOwnPropertyDescriptor(t, r);
              i && !("get" in i ? !t.__esModule : i.writable || i.configurable) || (i = {
                enumerable: !0,
                get: function get() {
                  return t[r];
                }
              }), Object.defineProperty(e, n, i);
            } : function (e, t, r, n) {
              void 0 === n && (n = r), e[n] = t[r];
            },
            i = function i(e, t) {
              for (var r in e) "default" === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r);
            };
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.isHexString = t.getKeys = t.fromAscii = t.fromUtf8 = t.toAscii = t.arrayContainsArray = t.getBinarySize = t.padToEven = t.stripHexPrefix = t.isHexPrefixed = void 0, i(r(986), t), i(r(1968), t), i(r(1984), t), i(r(9808), t), i(r(6081), t), i(r(3464), t), i(r(1677), t), i(r(9100), t), i(r(5513), t);
          var o = r(3271);
          Object.defineProperty(t, "isHexPrefixed", {
            enumerable: !0,
            get: function get() {
              return o.isHexPrefixed;
            }
          }), Object.defineProperty(t, "stripHexPrefix", {
            enumerable: !0,
            get: function get() {
              return o.stripHexPrefix;
            }
          }), Object.defineProperty(t, "padToEven", {
            enumerable: !0,
            get: function get() {
              return o.padToEven;
            }
          }), Object.defineProperty(t, "getBinarySize", {
            enumerable: !0,
            get: function get() {
              return o.getBinarySize;
            }
          }), Object.defineProperty(t, "arrayContainsArray", {
            enumerable: !0,
            get: function get() {
              return o.arrayContainsArray;
            }
          }), Object.defineProperty(t, "toAscii", {
            enumerable: !0,
            get: function get() {
              return o.toAscii;
            }
          }), Object.defineProperty(t, "fromUtf8", {
            enumerable: !0,
            get: function get() {
              return o.fromUtf8;
            }
          }), Object.defineProperty(t, "fromAscii", {
            enumerable: !0,
            get: function get() {
              return o.fromAscii;
            }
          }), Object.defineProperty(t, "getKeys", {
            enumerable: !0,
            get: function get() {
              return o.getKeys;
            }
          }), Object.defineProperty(t, "isHexString", {
            enumerable: !0,
            get: function get() {
              return o.isHexString;
            }
          });
        },
        3271: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(8847)(r(3355));
          function o(e) {
            if ("string" != typeof e) throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat((0, i.default)(e)));
            return "0" === e[0] && "x" === e[1];
          }
          function a(e) {
            var t = e;
            if ("string" != typeof t) throw new Error("[padToEven] value must be type 'string', received ".concat((0, i.default)(t)));
            return t.length % 2 && (t = "0".concat(t)), t;
          }
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.isHexString = t.getKeys = t.fromAscii = t.fromUtf8 = t.toAscii = t.arrayContainsArray = t.getBinarySize = t.padToEven = t.stripHexPrefix = t.isHexPrefixed = void 0, t.isHexPrefixed = o, t.stripHexPrefix = function (e) {
            if ("string" != typeof e) throw new Error("[stripHexPrefix] input must be type 'string', received ".concat((0, i.default)(e)));
            return o(e) ? e.slice(2) : e;
          }, t.padToEven = a, t.getBinarySize = function (e) {
            if ("string" != typeof e) throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat((0, i.default)(e)));
            return n.byteLength(e, "utf8");
          }, t.arrayContainsArray = function (e, t, r) {
            if (!0 !== Array.isArray(e)) throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat((0, i.default)(e), "'"));
            if (!0 !== Array.isArray(t)) throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat((0, i.default)(t), "'"));
            return t[r ? "some" : "every"](function (t) {
              return e.indexOf(t) >= 0;
            });
          }, t.toAscii = function (e) {
            var t = "",
              r = 0,
              n = e.length;
            for ("0x" === e.substring(0, 2) && (r = 2); r < n; r += 2) {
              var i = parseInt(e.substr(r, 2), 16);
              t += String.fromCharCode(i);
            }
            return t;
          }, t.fromUtf8 = function (e) {
            var t = n.from(e, "utf8");
            return "0x".concat(a(t.toString("hex")).replace(/^0+|0+$/g, ""));
          }, t.fromAscii = function (e) {
            for (var t = "", r = 0; r < e.length; r++) {
              var n = e.charCodeAt(r).toString(16);
              t += n.length < 2 ? "0".concat(n) : n;
            }
            return "0x".concat(t);
          }, t.getKeys = function (e, t, r) {
            if (!Array.isArray(e)) throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat((0, i.default)(e)));
            if ("string" != typeof t) throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat((0, i.default)(e)));
            for (var n = [], o = 0; o < e.length; o++) {
              var a = e[o][t];
              if (r && !a) a = "";else if ("string" != typeof a) throw new Error("invalid abi - expected type 'string', received ".concat((0, i.default)(a)));
              n.push(a);
            }
            return n;
          }, t.isHexString = function (e, t) {
            return !("string" != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/) || t && e.length !== 2 + 2 * t);
          };
        },
        1677: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(8847)(r(3355));
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.defineProperties = void 0;
          var o,
            a = (o = r(3894)) && o.__esModule ? o : {
              default: o
            },
            s = r(3271),
            u = r(9100),
            c = r(3464);
          t.defineProperties = function (e, t, r) {
            if (e.raw = [], e._fields = [], e.toJSON = function (t) {
              if (void 0 === t && (t = !1), t) {
                var r = {};
                return e._fields.forEach(function (t) {
                  r[t] = "0x".concat(e[t].toString("hex"));
                }), r;
              }
              return (0, c.baToJSON)(e.raw);
            }, e.serialize = function () {
              return u.rlp.encode(e.raw);
            }, t.forEach(function (t, r) {
              function i() {
                return e.raw[r];
              }
              function o(i) {
                "00" !== (i = (0, c.toBuffer)(i)).toString("hex") || t.allowZero || (i = n.allocUnsafe(0)), t.allowLess && t.length ? (i = (0, c.unpadBuffer)(i), (0, a.default)(t.length >= i.length, "The field ".concat(t.name, " must not have more ").concat(t.length, " bytes"))) : t.allowZero && 0 === i.length || !t.length || (0, a.default)(t.length === i.length, "The field ".concat(t.name, " must have byte length of ").concat(t.length)), e.raw[r] = i;
              }
              e._fields.push(t.name), Object.defineProperty(e, t.name, {
                enumerable: !0,
                configurable: !0,
                get: i,
                set: o
              }), t.default && (e[t.name] = t.default), t.alias && Object.defineProperty(e, t.alias, {
                enumerable: !1,
                configurable: !0,
                set: o,
                get: i
              });
            }), r) if ("string" == typeof r && (r = n.from((0, s.stripHexPrefix)(r), "hex")), n.isBuffer(r) && (r = u.rlp.decode(r)), Array.isArray(r)) {
              if (r.length > e._fields.length) throw new Error("wrong number of fields in data");
              r.forEach(function (t, r) {
                e[e._fields[r]] = (0, c.toBuffer)(t);
              });
            } else {
              if ("object" !== (0, i.default)(r)) throw new Error("invalid data");
              var o = Object.keys(r);
              t.forEach(function (t) {
                -1 !== o.indexOf(t.name) && (e[t.name] = r[t.name]), -1 !== o.indexOf(t.alias) && (e[t.alias] = r[t.alias]);
              });
            }
          };
        },
        6081: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.hashPersonalMessage = t.isValidSignature = t.fromRpcSig = t.toCompactSig = t.toRpcSig = t.ecrecover = t.ecsign = void 0;
          var i = r(6992),
            o = r(9100),
            a = r(3464),
            s = r(9808),
            u = r(5725),
            c = r(5513);
          function f(e, t) {
            var r = (0, c.toType)(e, c.TypeOutput.BN);
            if (r.eqn(0) || r.eqn(1)) return (0, c.toType)(e, c.TypeOutput.BN);
            if (!t) return r.subn(27);
            var n = (0, c.toType)(t, c.TypeOutput.BN);
            return r.sub(n.muln(2).addn(35));
          }
          function d(e) {
            var t = new o.BN(e);
            return t.eqn(0) || t.eqn(1);
          }
          t.ecsign = function (e, t, r) {
            var o = (0, i.ecdsaSign)(e, t),
              a = o.signature,
              s = o.recid,
              u = n.from(a.slice(0, 32)),
              f = n.from(a.slice(32, 64));
            if (!r || "number" == typeof r) {
              if (r && !Number.isSafeInteger(r)) throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
              return {
                r: u,
                s: f,
                v: r ? s + (2 * r + 35) : s + 27
              };
            }
            return {
              r: u,
              s: f,
              v: (0, c.toType)(r, c.TypeOutput.BN).muln(2).addn(35).addn(s).toArrayLike(n)
            };
          }, t.ecrecover = function (e, t, r, o, s) {
            var u = n.concat([(0, a.setLengthLeft)(r, 32), (0, a.setLengthLeft)(o, 32)], 64),
              c = f(t, s);
            if (!d(c)) throw new Error("Invalid signature v value");
            var l = (0, i.ecdsaRecover)(u, c.toNumber(), e);
            return n.from((0, i.publicKeyConvert)(l, !1).slice(1));
          }, t.toRpcSig = function (e, t, r, i) {
            if (!d(f(e, i))) throw new Error("Invalid signature v value");
            return (0, a.bufferToHex)(n.concat([(0, a.setLengthLeft)(t, 32), (0, a.setLengthLeft)(r, 32), (0, a.toBuffer)(e)]));
          }, t.toCompactSig = function (e, t, r, i) {
            if (!d(f(e, i))) throw new Error("Invalid signature v value");
            var o = (0, c.toType)(e, c.TypeOutput.Number),
              s = r;
            return (o > 28 && o % 2 == 1 || 1 === o || 28 === o) && ((s = n.from(r))[0] |= 128), (0, a.bufferToHex)(n.concat([(0, a.setLengthLeft)(t, 32), (0, a.setLengthLeft)(s, 32)]));
          }, t.fromRpcSig = function (e) {
            var t,
              r,
              n,
              i = (0, a.toBuffer)(e);
            if (i.length >= 65) t = i.slice(0, 32), r = i.slice(32, 64), n = (0, a.bufferToInt)(i.slice(64));else {
              if (64 !== i.length) throw new Error("Invalid signature length");
              t = i.slice(0, 32), r = i.slice(32, 64), n = (0, a.bufferToInt)(i.slice(32, 33)) >> 7, r[0] &= 127;
            }
            return n < 27 && (n += 27), {
              v: n,
              r: t,
              s: r
            };
          }, t.isValidSignature = function (e, t, r, n, i) {
            void 0 === n && (n = !0);
            var a = new o.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16),
              s = new o.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
            if (32 !== t.length || 32 !== r.length) return !1;
            if (!d(f(e, i))) return !1;
            var u = new o.BN(t),
              c = new o.BN(r);
            return !(u.isZero() || u.gt(s) || c.isZero() || c.gt(s) || n && 1 === c.cmp(a));
          }, t.hashPersonalMessage = function (e) {
            (0, u.assertIsBuffer)(e);
            var t = n.from("Ethereum Signed Message:\n".concat(e.length), "utf-8");
            return (0, s.keccak)(n.concat([t, e]));
          };
        },
        5513: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.toType = t.TypeOutput = t.bnToRlp = t.bnToUnpaddedBuffer = t.bnToHex = void 0;
          var i,
            o = r(9100),
            a = r(3271),
            s = r(3464);
          function u(e) {
            return (0, s.unpadBuffer)(e.toArrayLike(n));
          }
          t.bnToHex = function (e) {
            return "0x".concat(e.toString(16));
          }, t.bnToUnpaddedBuffer = u, t.bnToRlp = function (e) {
            return u(e);
          }, function (e) {
            e[e.Number = 0] = "Number", e[e.BN = 1] = "BN", e[e.Buffer = 2] = "Buffer", e[e.PrefixedHexString = 3] = "PrefixedHexString";
          }(i = t.TypeOutput || (t.TypeOutput = {})), t.toType = function (e, t) {
            if (null === e) return null;
            if (void 0 !== e) {
              if ("string" == typeof e && !(0, a.isHexString)(e)) throw new Error("A string must be provided with a 0x-prefix, given: ".concat(e));
              if ("number" == typeof e && !Number.isSafeInteger(e)) throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
              var r = (0, s.toBuffer)(e);
              if (t === i.Buffer) return r;
              if (t === i.BN) return new o.BN(r);
              if (t === i.Number) {
                var n = new o.BN(r),
                  u = new o.BN(Number.MAX_SAFE_INTEGER.toString());
                if (n.gt(u)) throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
                return n.toNumber();
              }
              return "0x".concat(r.toString("hex"));
            }
          };
        },
        7130: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(1734),
            o = r(7277),
            a = new i(0),
            s = new i(-1),
            u = {
              noether: "0",
              wei: "1",
              kwei: "1000",
              Kwei: "1000",
              babbage: "1000",
              femtoether: "1000",
              mwei: "1000000",
              Mwei: "1000000",
              lovelace: "1000000",
              picoether: "1000000",
              gwei: "1000000000",
              Gwei: "1000000000",
              shannon: "1000000000",
              nanoether: "1000000000",
              nano: "1000000000",
              szabo: "1000000000000",
              microether: "1000000000000",
              micro: "1000000000000",
              finney: "1000000000000000",
              milliether: "1000000000000000",
              milli: "1000000000000000",
              ether: "1000000000000000000",
              kether: "1000000000000000000000",
              grand: "1000000000000000000000",
              mether: "1000000000000000000000000",
              gether: "1000000000000000000000000000",
              tether: "1000000000000000000000000000000"
            };
          function c(e) {
            var t = e ? e.toLowerCase() : "ether",
              r = u[t];
            if ("string" != typeof r) throw new Error("[ethjs-unit] the unit provided " + e + " doesn't exists, please use the one of the following units " + JSON.stringify(u, null, 2));
            return new i(r, 10);
          }
          function f(e) {
            if ("string" == typeof e) {
              if (!e.match(/^-?[0-9.]+$/)) throw new Error("while converting number to string, invalid number value '" + e + "', should be a number matching (^-?[0-9.]+).");
              return e;
            }
            if ("number" == typeof e) return String(e);
            if ("object" === (0, n.default)(e) && e.toString && (e.toTwos || e.dividedToIntegerBy)) return e.toPrecision ? String(e.toPrecision()) : e.toString(10);
            throw new Error("while converting number to string, invalid number value '" + e + "' type " + (0, n.default)(e) + ".");
          }
          e.exports = {
            unitMap: u,
            numberToString: f,
            getValueOfUnit: c,
            fromWei: function fromWei(e, t, r) {
              var n = o(e),
                i = n.lt(a),
                f = c(t),
                d = u[t].length - 1 || 1,
                l = r || {};
              i && (n = n.mul(s));
              for (var h = n.mod(f).toString(10); h.length < d;) h = "0" + h;
              l.pad || (h = h.match(/^([0-9]*[1-9]|0)(0*)/)[1]);
              var p = n.div(f).toString(10);
              l.commify && (p = p.replace(/\B(?=(\d{3})+(?!\d))/g, ","));
              var b = p + ("0" == h ? "" : "." + h);
              return i && (b = "-" + b), b;
            },
            toWei: function toWei(e, t) {
              var r = f(e),
                n = c(t),
                o = u[t].length - 1 || 1,
                a = "-" === r.substring(0, 1);
              if (a && (r = r.substring(1)), "." === r) throw new Error("[ethjs-unit] while converting number " + e + " to wei, invalid value");
              var d = r.split(".");
              if (d.length > 2) throw new Error("[ethjs-unit] while converting number " + e + " to wei,  too many decimal points");
              var l = d[0],
                h = d[1];
              if (l || (l = "0"), h || (h = "0"), h.length > o) throw new Error("[ethjs-unit] while converting number " + e + " to wei, too many decimal places");
              for (; h.length < o;) h += "0";
              l = new i(l), h = new i(h);
              var p = l.mul(n).add(h);
              return a && (p = p.mul(s)), new i(p.toString(10), 10);
            }
          };
        },
        8008: function _(e) {
          "use strict";

          var t = Object.prototype.hasOwnProperty,
            r = "~";
          function n() {}
          function i(e, t, r) {
            this.fn = e, this.context = t, this.once = r || !1;
          }
          function o(e, t, n, o, a) {
            if ("function" != typeof n) throw new TypeError("The listener must be a function");
            var s = new i(n, o || e, a),
              u = r ? r + t : t;
            return e._events[u] ? e._events[u].fn ? e._events[u] = [e._events[u], s] : e._events[u].push(s) : (e._events[u] = s, e._eventsCount++), e;
          }
          function a(e, t) {
            0 == --e._eventsCount ? e._events = new n() : delete e._events[t];
          }
          function s() {
            this._events = new n(), this._eventsCount = 0;
          }
          Object.create && (n.prototype = Object.create(null), new n().__proto__ || (r = !1)), s.prototype.eventNames = function () {
            var e,
              n,
              i = [];
            if (0 === this._eventsCount) return i;
            for (n in e = this._events) t.call(e, n) && i.push(r ? n.slice(1) : n);
            return Object.getOwnPropertySymbols ? i.concat(Object.getOwnPropertySymbols(e)) : i;
          }, s.prototype.listeners = function (e) {
            var t = r ? r + e : e,
              n = this._events[t];
            if (!n) return [];
            if (n.fn) return [n.fn];
            for (var i = 0, o = n.length, a = new Array(o); i < o; i++) a[i] = n[i].fn;
            return a;
          }, s.prototype.listenerCount = function (e) {
            var t = r ? r + e : e,
              n = this._events[t];
            return n ? n.fn ? 1 : n.length : 0;
          }, s.prototype.emit = function (e, t, n, i, o, a) {
            var s = r ? r + e : e;
            if (!this._events[s]) return !1;
            var u,
              c,
              f = this._events[s],
              d = arguments.length;
            if (f.fn) {
              switch (f.once && this.removeListener(e, f.fn, void 0, !0), d) {
                case 1:
                  return f.fn.call(f.context), !0;
                case 2:
                  return f.fn.call(f.context, t), !0;
                case 3:
                  return f.fn.call(f.context, t, n), !0;
                case 4:
                  return f.fn.call(f.context, t, n, i), !0;
                case 5:
                  return f.fn.call(f.context, t, n, i, o), !0;
                case 6:
                  return f.fn.call(f.context, t, n, i, o, a), !0;
              }
              for (c = 1, u = new Array(d - 1); c < d; c++) u[c - 1] = arguments[c];
              f.fn.apply(f.context, u);
            } else {
              var l,
                h = f.length;
              for (c = 0; c < h; c++) switch (f[c].once && this.removeListener(e, f[c].fn, void 0, !0), d) {
                case 1:
                  f[c].fn.call(f[c].context);
                  break;
                case 2:
                  f[c].fn.call(f[c].context, t);
                  break;
                case 3:
                  f[c].fn.call(f[c].context, t, n);
                  break;
                case 4:
                  f[c].fn.call(f[c].context, t, n, i);
                  break;
                default:
                  if (!u) for (l = 1, u = new Array(d - 1); l < d; l++) u[l - 1] = arguments[l];
                  f[c].fn.apply(f[c].context, u);
              }
            }
            return !0;
          }, s.prototype.on = function (e, t, r) {
            return o(this, e, t, r, !1);
          }, s.prototype.once = function (e, t, r) {
            return o(this, e, t, r, !0);
          }, s.prototype.removeListener = function (e, t, n, i) {
            var o = r ? r + e : e;
            if (!this._events[o]) return this;
            if (!t) return a(this, o), this;
            var s = this._events[o];
            if (s.fn) s.fn !== t || i && !s.once || n && s.context !== n || a(this, o);else {
              for (var u = 0, c = [], f = s.length; u < f; u++) (s[u].fn !== t || i && !s[u].once || n && s[u].context !== n) && c.push(s[u]);
              c.length ? this._events[o] = 1 === c.length ? c[0] : c : a(this, o);
            }
            return this;
          }, s.prototype.removeAllListeners = function (e) {
            var t;
            return e ? (t = r ? r + e : e, this._events[t] && a(this, t)) : (this._events = new n(), this._eventsCount = 0), this;
          }, s.prototype.off = s.prototype.removeListener, s.prototype.addListener = s.prototype.on, s.prefixed = r, s.EventEmitter = s, e.exports = s;
        },
        8291: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = Object.create || function (e) {
              var t = function t() {};
              return t.prototype = e, new t();
            },
            o = Object.keys || function (e) {
              var t = [];
              for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.push(r);
              return r;
            },
            a = Function.prototype.bind || function (e) {
              var t = this;
              return function () {
                return t.apply(e, arguments);
              };
            };
          function s() {
            this._events && Object.prototype.hasOwnProperty.call(this, "_events") || (this._events = i(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
          }
          e.exports = s, s.EventEmitter = s, s.prototype._events = void 0, s.prototype._maxListeners = void 0;
          var u,
            c = 10;
          try {
            var f = {};
            Object.defineProperty && Object.defineProperty(f, "x", {
              value: 0
            }), u = 0 === f.x;
          } catch (e) {
            u = !1;
          }
          function d(e) {
            return void 0 === e._maxListeners ? s.defaultMaxListeners : e._maxListeners;
          }
          function l(e, t, r, o) {
            var a, s, u;
            if ("function" != typeof r) throw new TypeError('"listener" argument must be a function');
            if ((s = e._events) ? (s.newListener && (e.emit("newListener", t, r.listener ? r.listener : r), s = e._events), u = s[t]) : (s = e._events = i(null), e._eventsCount = 0), u) {
              if ("function" == typeof u ? u = s[t] = o ? [r, u] : [u, r] : o ? u.unshift(r) : u.push(r), !u.warned && (a = d(e)) && a > 0 && u.length > a) {
                u.warned = !0;
                var c = new Error("Possible EventEmitter memory leak detected. " + u.length + ' "' + String(t) + '" listeners added. Use emitter.setMaxListeners() to increase limit.');
                c.name = "MaxListenersExceededWarning", c.emitter = e, c.type = t, c.count = u.length, "object" === ("undefined" == typeof console ? "undefined" : (0, n.default)(console)) && console.warn && console.warn("%s: %s", c.name, c.message);
              }
            } else u = s[t] = r, ++e._eventsCount;
            return e;
          }
          function h() {
            if (!this.fired) switch (this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length) {
              case 0:
                return this.listener.call(this.target);
              case 1:
                return this.listener.call(this.target, arguments[0]);
              case 2:
                return this.listener.call(this.target, arguments[0], arguments[1]);
              case 3:
                return this.listener.call(this.target, arguments[0], arguments[1], arguments[2]);
              default:
                for (var e = new Array(arguments.length), t = 0; t < e.length; ++t) e[t] = arguments[t];
                this.listener.apply(this.target, e);
            }
          }
          function p(e, t, r) {
            var n = {
                fired: !1,
                wrapFn: void 0,
                target: e,
                type: t,
                listener: r
              },
              i = a.call(h, n);
            return i.listener = r, n.wrapFn = i, i;
          }
          function b(e, t, r) {
            var n = e._events;
            if (!n) return [];
            var i = n[t];
            return i ? "function" == typeof i ? r ? [i.listener || i] : [i] : r ? function (e) {
              for (var t = new Array(e.length), r = 0; r < t.length; ++r) t[r] = e[r].listener || e[r];
              return t;
            }(i) : m(i, i.length) : [];
          }
          function y(e) {
            var t = this._events;
            if (t) {
              var r = t[e];
              if ("function" == typeof r) return 1;
              if (r) return r.length;
            }
            return 0;
          }
          function m(e, t) {
            for (var r = new Array(t), n = 0; n < t; ++n) r[n] = e[n];
            return r;
          }
          u ? Object.defineProperty(s, "defaultMaxListeners", {
            enumerable: !0,
            get: function get() {
              return c;
            },
            set: function set(e) {
              if ("number" != typeof e || e < 0 || e != e) throw new TypeError('"defaultMaxListeners" must be a positive number');
              c = e;
            }
          }) : s.defaultMaxListeners = c, s.prototype.setMaxListeners = function (e) {
            if ("number" != typeof e || e < 0 || isNaN(e)) throw new TypeError('"n" argument must be a positive number');
            return this._maxListeners = e, this;
          }, s.prototype.getMaxListeners = function () {
            return d(this);
          }, s.prototype.emit = function (e) {
            var t,
              r,
              n,
              i,
              o,
              a,
              s = "error" === e;
            if (a = this._events) s = s && null == a.error;else if (!s) return !1;
            if (s) {
              if (arguments.length > 1 && (t = arguments[1]), t instanceof Error) throw t;
              var u = new Error('Unhandled "error" event. (' + t + ")");
              throw u.context = t, u;
            }
            if (!(r = a[e])) return !1;
            var c = "function" == typeof r;
            switch (n = arguments.length) {
              case 1:
                !function (e, t, r) {
                  if (t) e.call(r);else for (var n = e.length, i = m(e, n), o = 0; o < n; ++o) i[o].call(r);
                }(r, c, this);
                break;
              case 2:
                !function (e, t, r, n) {
                  if (t) e.call(r, n);else for (var i = e.length, o = m(e, i), a = 0; a < i; ++a) o[a].call(r, n);
                }(r, c, this, arguments[1]);
                break;
              case 3:
                !function (e, t, r, n, i) {
                  if (t) e.call(r, n, i);else for (var o = e.length, a = m(e, o), s = 0; s < o; ++s) a[s].call(r, n, i);
                }(r, c, this, arguments[1], arguments[2]);
                break;
              case 4:
                !function (e, t, r, n, i, o) {
                  if (t) e.call(r, n, i, o);else for (var a = e.length, s = m(e, a), u = 0; u < a; ++u) s[u].call(r, n, i, o);
                }(r, c, this, arguments[1], arguments[2], arguments[3]);
                break;
              default:
                for (i = new Array(n - 1), o = 1; o < n; o++) i[o - 1] = arguments[o];
                !function (e, t, r, n) {
                  if (t) e.apply(r, n);else for (var i = e.length, o = m(e, i), a = 0; a < i; ++a) o[a].apply(r, n);
                }(r, c, this, i);
            }
            return !0;
          }, s.prototype.addListener = function (e, t) {
            return l(this, e, t, !1);
          }, s.prototype.on = s.prototype.addListener, s.prototype.prependListener = function (e, t) {
            return l(this, e, t, !0);
          }, s.prototype.once = function (e, t) {
            if ("function" != typeof t) throw new TypeError('"listener" argument must be a function');
            return this.on(e, p(this, e, t)), this;
          }, s.prototype.prependOnceListener = function (e, t) {
            if ("function" != typeof t) throw new TypeError('"listener" argument must be a function');
            return this.prependListener(e, p(this, e, t)), this;
          }, s.prototype.removeListener = function (e, t) {
            var r, n, o, a, s;
            if ("function" != typeof t) throw new TypeError('"listener" argument must be a function');
            if (!(n = this._events)) return this;
            if (!(r = n[e])) return this;
            if (r === t || r.listener === t) 0 == --this._eventsCount ? this._events = i(null) : (delete n[e], n.removeListener && this.emit("removeListener", e, r.listener || t));else if ("function" != typeof r) {
              for (o = -1, a = r.length - 1; a >= 0; a--) if (r[a] === t || r[a].listener === t) {
                s = r[a].listener, o = a;
                break;
              }
              if (o < 0) return this;
              0 === o ? r.shift() : function (e, t) {
                for (var r = t, n = r + 1, i = e.length; n < i; r += 1, n += 1) e[r] = e[n];
                e.pop();
              }(r, o), 1 === r.length && (n[e] = r[0]), n.removeListener && this.emit("removeListener", e, s || t);
            }
            return this;
          }, s.prototype.removeAllListeners = function (e) {
            var t, r, n;
            if (!(r = this._events)) return this;
            if (!r.removeListener) return 0 === arguments.length ? (this._events = i(null), this._eventsCount = 0) : r[e] && (0 == --this._eventsCount ? this._events = i(null) : delete r[e]), this;
            if (0 === arguments.length) {
              var a,
                s = o(r);
              for (n = 0; n < s.length; ++n) "removeListener" !== (a = s[n]) && this.removeAllListeners(a);
              return this.removeAllListeners("removeListener"), this._events = i(null), this._eventsCount = 0, this;
            }
            if ("function" == typeof (t = r[e])) this.removeListener(e, t);else if (t) for (n = t.length - 1; n >= 0; n--) this.removeListener(e, t[n]);
            return this;
          }, s.prototype.listeners = function (e) {
            return b(this, e, !0);
          }, s.prototype.rawListeners = function (e) {
            return b(this, e, !1);
          }, s.listenerCount = function (e, t) {
            return "function" == typeof e.listenerCount ? e.listenerCount(t) : y.call(e, t);
          }, s.prototype.listenerCount = y, s.prototype.eventNames = function () {
            return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
          };
        },
        7085: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer,
            i = r(807);
          e.exports = function (e, t, r, o) {
            if (n.isBuffer(e) || (e = n.from(e, "binary")), t && (n.isBuffer(t) || (t = n.from(t, "binary")), 8 !== t.length)) throw new RangeError("salt should be Buffer with 8 byte length");
            for (var a = r / 8, s = n.alloc(a), u = n.alloc(o || 0), c = n.alloc(0); a > 0 || o > 0;) {
              var f = new i();
              f.update(c), f.update(e), t && f.update(t), c = f.digest();
              var d = 0;
              if (a > 0) {
                var l = s.length - a;
                d = Math.min(a, c.length), c.copy(s, l, 0, d), a -= d;
              }
              if (d < c.length && o > 0) {
                var h = u.length - o,
                  p = Math.min(o, c.length - d);
                c.copy(u, h, d, d + p), o -= p;
              }
            }
            return c.fill(0), {
              key: s,
              iv: u
            };
          };
        },
        8184: function _(e, t, r) {
          "use strict";

          var n = r(1493),
            i = Object.prototype.toString,
            o = Object.prototype.hasOwnProperty;
          e.exports = function (e, t, r) {
            if (!n(t)) throw new TypeError("iterator must be a function");
            var a;
            arguments.length >= 3 && (a = r), "[object Array]" === i.call(e) ? function (e, t, r) {
              for (var n = 0, i = e.length; n < i; n++) o.call(e, n) && (null == r ? t(e[n], n, e) : t.call(r, e[n], n, e));
            }(e, t, a) : "string" == typeof e ? function (e, t, r) {
              for (var n = 0, i = e.length; n < i; n++) null == r ? t(e.charAt(n), n, e) : t.call(r, e.charAt(n), n, e);
            }(e, t, a) : function (e, t, r) {
              for (var n in e) o.call(e, n) && (null == r ? t(e[n], n, e) : t.call(r, e[n], n, e));
            }(e, t, a);
          };
        },
        3161: function _(e) {
          "use strict";

          var t = Array.prototype.slice,
            r = Object.prototype.toString;
          e.exports = function (e) {
            var n = this;
            if ("function" != typeof n || "[object Function]" !== r.call(n)) throw new TypeError("Function.prototype.bind called on incompatible " + n);
            for (var i, o = t.call(arguments, 1), a = Math.max(0, n.length - o.length), s = [], u = 0; u < a; u++) s.push("$" + u);
            if (i = Function("binder", "return function (" + s.join(",") + "){ return binder.apply(this,arguments); }")(function () {
              if (this instanceof i) {
                var r = n.apply(this, o.concat(t.call(arguments)));
                return Object(r) === r ? r : this;
              }
              return n.apply(e, o.concat(t.call(arguments)));
            }), n.prototype) {
              var c = function c() {};
              c.prototype = n.prototype, i.prototype = new c(), c.prototype = null;
            }
            return i;
          };
        },
        3767: function _(e, t, r) {
          "use strict";

          var n = r(3161);
          e.exports = Function.prototype.bind || n;
        },
        7701: function _(e, t, r) {
          "use strict";

          var n,
            i = r(8847)(r(3355)),
            o = SyntaxError,
            a = Function,
            s = TypeError,
            u = function u(e) {
              try {
                return a('"use strict"; return (' + e + ").constructor;")();
              } catch (e) {}
            },
            c = Object.getOwnPropertyDescriptor;
          if (c) try {
            c({}, "");
          } catch (e) {
            c = null;
          }
          var f = function f() {
              throw new s();
            },
            d = c ? function () {
              try {
                return f;
              } catch (e) {
                try {
                  return c(arguments, "callee").get;
                } catch (e) {
                  return f;
                }
              }
            }() : f,
            l = r(8489)(),
            h = Object.getPrototypeOf || function (e) {
              return e.__proto__;
            },
            p = {},
            b = "undefined" == typeof Uint8Array ? n : h(Uint8Array),
            y = {
              "%AggregateError%": "undefined" == typeof AggregateError ? n : AggregateError,
              "%Array%": Array,
              "%ArrayBuffer%": "undefined" == typeof ArrayBuffer ? n : ArrayBuffer,
              "%ArrayIteratorPrototype%": l ? h([][Symbol.iterator]()) : n,
              "%AsyncFromSyncIteratorPrototype%": n,
              "%AsyncFunction%": p,
              "%AsyncGenerator%": p,
              "%AsyncGeneratorFunction%": p,
              "%AsyncIteratorPrototype%": p,
              "%Atomics%": "undefined" == typeof Atomics ? n : Atomics,
              "%BigInt%": "undefined" == typeof BigInt ? n : BigInt,
              "%Boolean%": Boolean,
              "%DataView%": "undefined" == typeof DataView ? n : DataView,
              "%Date%": Date,
              "%decodeURI%": decodeURI,
              "%decodeURIComponent%": decodeURIComponent,
              "%encodeURI%": encodeURI,
              "%encodeURIComponent%": encodeURIComponent,
              "%Error%": Error,
              "%eval%": eval,
              "%EvalError%": EvalError,
              "%Float32Array%": "undefined" == typeof Float32Array ? n : Float32Array,
              "%Float64Array%": "undefined" == typeof Float64Array ? n : Float64Array,
              "%FinalizationRegistry%": "undefined" == typeof FinalizationRegistry ? n : FinalizationRegistry,
              "%Function%": a,
              "%GeneratorFunction%": p,
              "%Int8Array%": "undefined" == typeof Int8Array ? n : Int8Array,
              "%Int16Array%": "undefined" == typeof Int16Array ? n : Int16Array,
              "%Int32Array%": "undefined" == typeof Int32Array ? n : Int32Array,
              "%isFinite%": isFinite,
              "%isNaN%": isNaN,
              "%IteratorPrototype%": l ? h(h([][Symbol.iterator]())) : n,
              "%JSON%": "object" === ("undefined" == typeof JSON ? "undefined" : (0, i.default)(JSON)) ? JSON : n,
              "%Map%": "undefined" == typeof Map ? n : Map,
              "%MapIteratorPrototype%": "undefined" != typeof Map && l ? h(new Map()[Symbol.iterator]()) : n,
              "%Math%": Math,
              "%Number%": Number,
              "%Object%": Object,
              "%parseFloat%": parseFloat,
              "%parseInt%": parseInt,
              "%Promise%": "undefined" == typeof Promise ? n : Promise,
              "%Proxy%": "undefined" == typeof Proxy ? n : Proxy,
              "%RangeError%": RangeError,
              "%ReferenceError%": ReferenceError,
              "%Reflect%": "undefined" == typeof Reflect ? n : Reflect,
              "%RegExp%": RegExp,
              "%Set%": "undefined" == typeof Set ? n : Set,
              "%SetIteratorPrototype%": "undefined" != typeof Set && l ? h(new Set()[Symbol.iterator]()) : n,
              "%SharedArrayBuffer%": "undefined" == typeof SharedArrayBuffer ? n : SharedArrayBuffer,
              "%String%": String,
              "%StringIteratorPrototype%": l ? h(""[Symbol.iterator]()) : n,
              "%Symbol%": l ? Symbol : n,
              "%SyntaxError%": o,
              "%ThrowTypeError%": d,
              "%TypedArray%": b,
              "%TypeError%": s,
              "%Uint8Array%": "undefined" == typeof Uint8Array ? n : Uint8Array,
              "%Uint8ClampedArray%": "undefined" == typeof Uint8ClampedArray ? n : Uint8ClampedArray,
              "%Uint16Array%": "undefined" == typeof Uint16Array ? n : Uint16Array,
              "%Uint32Array%": "undefined" == typeof Uint32Array ? n : Uint32Array,
              "%URIError%": URIError,
              "%WeakMap%": "undefined" == typeof WeakMap ? n : WeakMap,
              "%WeakRef%": "undefined" == typeof WeakRef ? n : WeakRef,
              "%WeakSet%": "undefined" == typeof WeakSet ? n : WeakSet
            },
            m = function e(t) {
              var r;
              if ("%AsyncFunction%" === t) r = u("async function () {}");else if ("%GeneratorFunction%" === t) r = u("function* () {}");else if ("%AsyncGeneratorFunction%" === t) r = u("async function* () {}");else if ("%AsyncGenerator%" === t) {
                var n = e("%AsyncGeneratorFunction%");
                n && (r = n.prototype);
              } else if ("%AsyncIteratorPrototype%" === t) {
                var i = e("%AsyncGenerator%");
                i && (r = h(i.prototype));
              }
              return y[t] = r, r;
            },
            v = {
              "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
              "%ArrayPrototype%": ["Array", "prototype"],
              "%ArrayProto_entries%": ["Array", "prototype", "entries"],
              "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
              "%ArrayProto_keys%": ["Array", "prototype", "keys"],
              "%ArrayProto_values%": ["Array", "prototype", "values"],
              "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
              "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
              "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
              "%BooleanPrototype%": ["Boolean", "prototype"],
              "%DataViewPrototype%": ["DataView", "prototype"],
              "%DatePrototype%": ["Date", "prototype"],
              "%ErrorPrototype%": ["Error", "prototype"],
              "%EvalErrorPrototype%": ["EvalError", "prototype"],
              "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
              "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
              "%FunctionPrototype%": ["Function", "prototype"],
              "%Generator%": ["GeneratorFunction", "prototype"],
              "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
              "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
              "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
              "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
              "%JSONParse%": ["JSON", "parse"],
              "%JSONStringify%": ["JSON", "stringify"],
              "%MapPrototype%": ["Map", "prototype"],
              "%NumberPrototype%": ["Number", "prototype"],
              "%ObjectPrototype%": ["Object", "prototype"],
              "%ObjProto_toString%": ["Object", "prototype", "toString"],
              "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
              "%PromisePrototype%": ["Promise", "prototype"],
              "%PromiseProto_then%": ["Promise", "prototype", "then"],
              "%Promise_all%": ["Promise", "all"],
              "%Promise_reject%": ["Promise", "reject"],
              "%Promise_resolve%": ["Promise", "resolve"],
              "%RangeErrorPrototype%": ["RangeError", "prototype"],
              "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
              "%RegExpPrototype%": ["RegExp", "prototype"],
              "%SetPrototype%": ["Set", "prototype"],
              "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
              "%StringPrototype%": ["String", "prototype"],
              "%SymbolPrototype%": ["Symbol", "prototype"],
              "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
              "%TypedArrayPrototype%": ["TypedArray", "prototype"],
              "%TypeErrorPrototype%": ["TypeError", "prototype"],
              "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
              "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
              "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
              "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
              "%URIErrorPrototype%": ["URIError", "prototype"],
              "%WeakMapPrototype%": ["WeakMap", "prototype"],
              "%WeakSetPrototype%": ["WeakSet", "prototype"]
            },
            g = r(3767),
            w = r(1888),
            A = g.call(Function.call, Array.prototype.concat),
            k = g.call(Function.apply, Array.prototype.splice),
            _ = g.call(Function.call, String.prototype.replace),
            S = g.call(Function.call, String.prototype.slice),
            E = g.call(Function.call, RegExp.prototype.exec),
            x = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,
            P = /\\(\\)?/g,
            O = function O(e, t) {
              var r,
                n = e;
              if (w(v, n) && (n = "%" + (r = v[n])[0] + "%"), w(y, n)) {
                var i = y[n];
                if (i === p && (i = m(n)), void 0 === i && !t) throw new s("intrinsic " + e + " exists, but is not available. Please file an issue!");
                return {
                  alias: r,
                  name: n,
                  value: i
                };
              }
              throw new o("intrinsic " + e + " does not exist!");
            };
          e.exports = function (e, t) {
            if ("string" != typeof e || 0 === e.length) throw new s("intrinsic name must be a non-empty string");
            if (arguments.length > 1 && "boolean" != typeof t) throw new s('"allowMissing" argument must be a boolean');
            if (null === E(/^%?[^%]*%?$/, e)) throw new o("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
            var r = function (e) {
                var t = S(e, 0, 1),
                  r = S(e, -1);
                if ("%" === t && "%" !== r) throw new o("invalid intrinsic syntax, expected closing `%`");
                if ("%" === r && "%" !== t) throw new o("invalid intrinsic syntax, expected opening `%`");
                var n = [];
                return _(e, x, function (e, t, r, i) {
                  n[n.length] = r ? _(i, P, "$1") : t || e;
                }), n;
              }(e),
              n = r.length > 0 ? r[0] : "",
              i = O("%" + n + "%", t),
              a = i.name,
              u = i.value,
              f = !1,
              d = i.alias;
            d && (n = d[0], k(r, A([0, 1], d)));
            for (var l = 1, h = !0; l < r.length; l += 1) {
              var p = r[l],
                b = S(p, 0, 1),
                m = S(p, -1);
              if (('"' === b || "'" === b || "`" === b || '"' === m || "'" === m || "`" === m) && b !== m) throw new o("property names with quotes must have matching quotes");
              if ("constructor" !== p && h || (f = !0), w(y, a = "%" + (n += "." + p) + "%")) u = y[a];else if (null != u) {
                if (!(p in u)) {
                  if (!t) throw new s("base intrinsic for " + e + " exists, but the property is not available.");
                  return;
                }
                if (c && l + 1 >= r.length) {
                  var v = c(u, p);
                  u = (h = !!v) && "get" in v && !("originalValue" in v.get) ? v.get : u[p];
                } else h = w(u, p), u = u[p];
                h && !f && (y[a] = u);
              }
            }
            return u;
          };
        },
        2948: function _(e, t, r) {
          "use strict";

          var n;
          n = "undefined" != typeof window ? window : void 0 !== r.g ? r.g : "undefined" != typeof self ? self : {}, e.exports = n;
        },
        3820: function _(e, t, r) {
          "use strict";

          var n = r(7701)("%Object.getOwnPropertyDescriptor%", !0);
          if (n) try {
            n([], "length");
          } catch (e) {
            n = null;
          }
          e.exports = n;
        },
        8489: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = "undefined" != typeof Symbol && Symbol,
            o = r(7027);
          e.exports = function () {
            return "function" == typeof i && "function" == typeof Symbol && "symbol" === (0, n.default)(i("foo")) && "symbol" === (0, n.default)(Symbol("bar")) && o();
          };
        },
        7027: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355));
          e.exports = function () {
            if ("function" != typeof Symbol || "function" != typeof Object.getOwnPropertySymbols) return !1;
            if ("symbol" === (0, n.default)(Symbol.iterator)) return !0;
            var e = {},
              t = Symbol("test"),
              r = Object(t);
            if ("string" == typeof t) return !1;
            if ("[object Symbol]" !== Object.prototype.toString.call(t)) return !1;
            if ("[object Symbol]" !== Object.prototype.toString.call(r)) return !1;
            for (t in e[t] = 42, e) return !1;
            if ("function" == typeof Object.keys && 0 !== Object.keys(e).length) return !1;
            if ("function" == typeof Object.getOwnPropertyNames && 0 !== Object.getOwnPropertyNames(e).length) return !1;
            var i = Object.getOwnPropertySymbols(e);
            if (1 !== i.length || i[0] !== t) return !1;
            if (!Object.prototype.propertyIsEnumerable.call(e, t)) return !1;
            if ("function" == typeof Object.getOwnPropertyDescriptor) {
              var o = Object.getOwnPropertyDescriptor(e, t);
              if (42 !== o.value || !0 !== o.enumerable) return !1;
            }
            return !0;
          };
        },
        1191: function _(e, t, r) {
          "use strict";

          var n = r(7027);
          e.exports = function () {
            return n() && !!Symbol.toStringTag;
          };
        },
        1888: function _(e, t, r) {
          "use strict";

          var n = r(3767);
          e.exports = n.call(Function.call, Object.prototype.hasOwnProperty);
        },
        2353: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer,
            i = r(6505).Transform;
          function o(e) {
            i.call(this), this._block = n.allocUnsafe(e), this._blockSize = e, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = !1;
          }
          r(1736)(o, i), o.prototype._transform = function (e, t, r) {
            var n = null;
            try {
              this.update(e, t);
            } catch (e) {
              n = e;
            }
            r(n);
          }, o.prototype._flush = function (e) {
            var t = null;
            try {
              this.push(this.digest());
            } catch (e) {
              t = e;
            }
            e(t);
          }, o.prototype.update = function (e, t) {
            if (function (e, t) {
              if (!n.isBuffer(e) && "string" != typeof e) throw new TypeError("Data must be a string or a buffer");
            }(e), this._finalized) throw new Error("Digest already called");
            n.isBuffer(e) || (e = n.from(e, t));
            for (var r = this._block, i = 0; this._blockOffset + e.length - i >= this._blockSize;) {
              for (var o = this._blockOffset; o < this._blockSize;) r[o++] = e[i++];
              this._update(), this._blockOffset = 0;
            }
            for (; i < e.length;) r[this._blockOffset++] = e[i++];
            for (var a = 0, s = 8 * e.length; s > 0; ++a) this._length[a] += s, (s = this._length[a] / 4294967296 | 0) > 0 && (this._length[a] -= 4294967296 * s);
            return this;
          }, o.prototype._update = function () {
            throw new Error("_update is not implemented");
          }, o.prototype.digest = function (e) {
            if (this._finalized) throw new Error("Digest already called");
            this._finalized = !0;
            var t = this._digest();
            void 0 !== e && (t = t.toString(e)), this._block.fill(0), this._blockOffset = 0;
            for (var r = 0; r < 4; ++r) this._length[r] = 0;
            return t;
          }, o.prototype._digest = function () {
            throw new Error("_digest is not implemented");
          }, e.exports = o;
        },
        7198: function _(e, t, r) {
          "use strict";

          var n = t;
          n.utils = r(4268), n.common = r(4696), n.sha = r(9310), n.ripemd = r(9294), n.hmac = r(3201), n.sha1 = n.sha.sha1, n.sha256 = n.sha.sha256, n.sha224 = n.sha.sha224, n.sha384 = n.sha.sha384, n.sha512 = n.sha.sha512, n.ripemd160 = n.ripemd.ripemd160;
        },
        4696: function _(e, t, r) {
          "use strict";

          var n = r(4268),
            i = r(4504);
          function o() {
            this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
          }
          t.BlockHash = o, o.prototype.update = function (e, t) {
            if (e = n.toArray(e, t), this.pending ? this.pending = this.pending.concat(e) : this.pending = e, this.pendingTotal += e.length, this.pending.length >= this._delta8) {
              var r = (e = this.pending).length % this._delta8;
              this.pending = e.slice(e.length - r, e.length), 0 === this.pending.length && (this.pending = null), e = n.join32(e, 0, e.length - r, this.endian);
              for (var i = 0; i < e.length; i += this._delta32) this._update(e, i, i + this._delta32);
            }
            return this;
          }, o.prototype.digest = function (e) {
            return this.update(this._pad()), i(null === this.pending), this._digest(e);
          }, o.prototype._pad = function () {
            var e = this.pendingTotal,
              t = this._delta8,
              r = t - (e + this.padLength) % t,
              n = new Array(r + this.padLength);
            n[0] = 128;
            for (var i = 1; i < r; i++) n[i] = 0;
            if (e <<= 3, "big" === this.endian) {
              for (var o = 8; o < this.padLength; o++) n[i++] = 0;
              n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = e >>> 24 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 8 & 255, n[i++] = 255 & e;
            } else for (n[i++] = 255 & e, n[i++] = e >>> 8 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 24 & 255, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, o = 8; o < this.padLength; o++) n[i++] = 0;
            return n;
          };
        },
        3201: function _(e, t, r) {
          "use strict";

          var n = r(4268),
            i = r(4504);
          function o(e, t, r) {
            if (!(this instanceof o)) return new o(e, t, r);
            this.Hash = e, this.blockSize = e.blockSize / 8, this.outSize = e.outSize / 8, this.inner = null, this.outer = null, this._init(n.toArray(t, r));
          }
          e.exports = o, o.prototype._init = function (e) {
            e.length > this.blockSize && (e = new this.Hash().update(e).digest()), i(e.length <= this.blockSize);
            for (var t = e.length; t < this.blockSize; t++) e.push(0);
            for (t = 0; t < e.length; t++) e[t] ^= 54;
            for (this.inner = new this.Hash().update(e), t = 0; t < e.length; t++) e[t] ^= 106;
            this.outer = new this.Hash().update(e);
          }, o.prototype.update = function (e, t) {
            return this.inner.update(e, t), this;
          }, o.prototype.digest = function (e) {
            return this.outer.update(this.inner.digest()), this.outer.digest(e);
          };
        },
        9294: function _(e, t, r) {
          "use strict";

          var n = r(4268),
            i = r(4696),
            o = n.rotl32,
            a = n.sum32,
            s = n.sum32_3,
            u = n.sum32_4,
            c = i.BlockHash;
          function f() {
            if (!(this instanceof f)) return new f();
            c.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = "little";
          }
          function d(e, t, r, n) {
            return e <= 15 ? t ^ r ^ n : e <= 31 ? t & r | ~t & n : e <= 47 ? (t | ~r) ^ n : e <= 63 ? t & n | r & ~n : t ^ (r | ~n);
          }
          function l(e) {
            return e <= 15 ? 0 : e <= 31 ? 1518500249 : e <= 47 ? 1859775393 : e <= 63 ? 2400959708 : 2840853838;
          }
          function h(e) {
            return e <= 15 ? 1352829926 : e <= 31 ? 1548603684 : e <= 47 ? 1836072691 : e <= 63 ? 2053994217 : 0;
          }
          n.inherits(f, c), t.ripemd160 = f, f.blockSize = 512, f.outSize = 160, f.hmacStrength = 192, f.padLength = 64, f.prototype._update = function (e, t) {
            for (var r = this.h[0], n = this.h[1], i = this.h[2], c = this.h[3], f = this.h[4], v = r, g = n, w = i, A = c, k = f, _ = 0; _ < 80; _++) {
              var S = a(o(u(r, d(_, n, i, c), e[p[_] + t], l(_)), y[_]), f);
              r = f, f = c, c = o(i, 10), i = n, n = S, S = a(o(u(v, d(79 - _, g, w, A), e[b[_] + t], h(_)), m[_]), k), v = k, k = A, A = o(w, 10), w = g, g = S;
            }
            S = s(this.h[1], i, A), this.h[1] = s(this.h[2], c, k), this.h[2] = s(this.h[3], f, v), this.h[3] = s(this.h[4], r, g), this.h[4] = s(this.h[0], n, w), this.h[0] = S;
          }, f.prototype._digest = function (e) {
            return "hex" === e ? n.toHex32(this.h, "little") : n.split32(this.h, "little");
          };
          var p = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13],
            b = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11],
            y = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6],
            m = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
        },
        9310: function _(e, t, r) {
          "use strict";

          t.sha1 = r(8142), t.sha224 = r(4909), t.sha256 = r(7682), t.sha384 = r(4532), t.sha512 = r(6515);
        },
        8142: function _(e, t, r) {
          "use strict";

          var n = r(4268),
            i = r(4696),
            o = r(70),
            a = n.rotl32,
            s = n.sum32,
            u = n.sum32_5,
            c = o.ft_1,
            f = i.BlockHash,
            d = [1518500249, 1859775393, 2400959708, 3395469782];
          function l() {
            if (!(this instanceof l)) return new l();
            f.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.W = new Array(80);
          }
          n.inherits(l, f), e.exports = l, l.blockSize = 512, l.outSize = 160, l.hmacStrength = 80, l.padLength = 64, l.prototype._update = function (e, t) {
            for (var r = this.W, n = 0; n < 16; n++) r[n] = e[t + n];
            for (; n < r.length; n++) r[n] = a(r[n - 3] ^ r[n - 8] ^ r[n - 14] ^ r[n - 16], 1);
            var i = this.h[0],
              o = this.h[1],
              f = this.h[2],
              l = this.h[3],
              h = this.h[4];
            for (n = 0; n < r.length; n++) {
              var p = ~~(n / 20),
                b = u(a(i, 5), c(p, o, f, l), h, r[n], d[p]);
              h = l, l = f, f = a(o, 30), o = i, i = b;
            }
            this.h[0] = s(this.h[0], i), this.h[1] = s(this.h[1], o), this.h[2] = s(this.h[2], f), this.h[3] = s(this.h[3], l), this.h[4] = s(this.h[4], h);
          }, l.prototype._digest = function (e) {
            return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
          };
        },
        4909: function _(e, t, r) {
          "use strict";

          var n = r(4268),
            i = r(7682);
          function o() {
            if (!(this instanceof o)) return new o();
            i.call(this), this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
          }
          n.inherits(o, i), e.exports = o, o.blockSize = 512, o.outSize = 224, o.hmacStrength = 192, o.padLength = 64, o.prototype._digest = function (e) {
            return "hex" === e ? n.toHex32(this.h.slice(0, 7), "big") : n.split32(this.h.slice(0, 7), "big");
          };
        },
        7682: function _(e, t, r) {
          "use strict";

          var n = r(4268),
            i = r(4696),
            o = r(70),
            a = r(4504),
            s = n.sum32,
            u = n.sum32_4,
            c = n.sum32_5,
            f = o.ch32,
            d = o.maj32,
            l = o.s0_256,
            h = o.s1_256,
            p = o.g0_256,
            b = o.g1_256,
            y = i.BlockHash,
            m = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
          function v() {
            if (!(this instanceof v)) return new v();
            y.call(this), this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], this.k = m, this.W = new Array(64);
          }
          n.inherits(v, y), e.exports = v, v.blockSize = 512, v.outSize = 256, v.hmacStrength = 192, v.padLength = 64, v.prototype._update = function (e, t) {
            for (var r = this.W, n = 0; n < 16; n++) r[n] = e[t + n];
            for (; n < r.length; n++) r[n] = u(b(r[n - 2]), r[n - 7], p(r[n - 15]), r[n - 16]);
            var i = this.h[0],
              o = this.h[1],
              y = this.h[2],
              m = this.h[3],
              v = this.h[4],
              g = this.h[5],
              w = this.h[6],
              A = this.h[7];
            for (a(this.k.length === r.length), n = 0; n < r.length; n++) {
              var k = c(A, h(v), f(v, g, w), this.k[n], r[n]),
                _ = s(l(i), d(i, o, y));
              A = w, w = g, g = v, v = s(m, k), m = y, y = o, o = i, i = s(k, _);
            }
            this.h[0] = s(this.h[0], i), this.h[1] = s(this.h[1], o), this.h[2] = s(this.h[2], y), this.h[3] = s(this.h[3], m), this.h[4] = s(this.h[4], v), this.h[5] = s(this.h[5], g), this.h[6] = s(this.h[6], w), this.h[7] = s(this.h[7], A);
          }, v.prototype._digest = function (e) {
            return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
          };
        },
        4532: function _(e, t, r) {
          "use strict";

          var n = r(4268),
            i = r(6515);
          function o() {
            if (!(this instanceof o)) return new o();
            i.call(this), this.h = [3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428];
          }
          n.inherits(o, i), e.exports = o, o.blockSize = 1024, o.outSize = 384, o.hmacStrength = 192, o.padLength = 128, o.prototype._digest = function (e) {
            return "hex" === e ? n.toHex32(this.h.slice(0, 12), "big") : n.split32(this.h.slice(0, 12), "big");
          };
        },
        6515: function _(e, t, r) {
          "use strict";

          var n = r(4268),
            i = r(4696),
            o = r(4504),
            a = n.rotr64_hi,
            s = n.rotr64_lo,
            u = n.shr64_hi,
            c = n.shr64_lo,
            f = n.sum64,
            d = n.sum64_hi,
            l = n.sum64_lo,
            h = n.sum64_4_hi,
            p = n.sum64_4_lo,
            b = n.sum64_5_hi,
            y = n.sum64_5_lo,
            m = i.BlockHash,
            v = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
          function g() {
            if (!(this instanceof g)) return new g();
            m.call(this), this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], this.k = v, this.W = new Array(160);
          }
          function w(e, t, r, n, i) {
            var o = e & r ^ ~e & i;
            return o < 0 && (o += 4294967296), o;
          }
          function A(e, t, r, n, i, o) {
            var a = t & n ^ ~t & o;
            return a < 0 && (a += 4294967296), a;
          }
          function k(e, t, r, n, i) {
            var o = e & r ^ e & i ^ r & i;
            return o < 0 && (o += 4294967296), o;
          }
          function _(e, t, r, n, i, o) {
            var a = t & n ^ t & o ^ n & o;
            return a < 0 && (a += 4294967296), a;
          }
          function S(e, t) {
            var r = a(e, t, 28) ^ a(t, e, 2) ^ a(t, e, 7);
            return r < 0 && (r += 4294967296), r;
          }
          function E(e, t) {
            var r = s(e, t, 28) ^ s(t, e, 2) ^ s(t, e, 7);
            return r < 0 && (r += 4294967296), r;
          }
          function x(e, t) {
            var r = s(e, t, 14) ^ s(e, t, 18) ^ s(t, e, 9);
            return r < 0 && (r += 4294967296), r;
          }
          function P(e, t) {
            var r = a(e, t, 1) ^ a(e, t, 8) ^ u(e, t, 7);
            return r < 0 && (r += 4294967296), r;
          }
          function O(e, t) {
            var r = s(e, t, 1) ^ s(e, t, 8) ^ c(e, t, 7);
            return r < 0 && (r += 4294967296), r;
          }
          function B(e, t) {
            var r = s(e, t, 19) ^ s(t, e, 29) ^ c(e, t, 6);
            return r < 0 && (r += 4294967296), r;
          }
          n.inherits(g, m), e.exports = g, g.blockSize = 1024, g.outSize = 512, g.hmacStrength = 192, g.padLength = 128, g.prototype._prepareBlock = function (e, t) {
            for (var r = this.W, n = 0; n < 32; n++) r[n] = e[t + n];
            for (; n < r.length; n += 2) {
              var i = (y = r[n - 4], m = r[n - 3], v = void 0, (v = a(y, m, 19) ^ a(m, y, 29) ^ u(y, m, 6)) < 0 && (v += 4294967296), v),
                o = B(r[n - 4], r[n - 3]),
                s = r[n - 14],
                c = r[n - 13],
                f = P(r[n - 30], r[n - 29]),
                d = O(r[n - 30], r[n - 29]),
                l = r[n - 32],
                b = r[n - 31];
              r[n] = h(i, o, s, c, f, d, l, b), r[n + 1] = p(i, o, s, c, f, d, l, b);
            }
            var y, m, v;
          }, g.prototype._update = function (e, t) {
            this._prepareBlock(e, t);
            var r,
              n,
              i,
              s = this.W,
              u = this.h[0],
              c = this.h[1],
              h = this.h[2],
              p = this.h[3],
              m = this.h[4],
              v = this.h[5],
              g = this.h[6],
              P = this.h[7],
              O = this.h[8],
              B = this.h[9],
              T = this.h[10],
              C = this.h[11],
              I = this.h[12],
              M = this.h[13],
              U = this.h[14],
              R = this.h[15];
            o(this.k.length === s.length);
            for (var j = 0; j < s.length; j += 2) {
              var N = U,
                F = R,
                L = (i = void 0, (i = a(r = O, n = B, 14) ^ a(r, n, 18) ^ a(n, r, 9)) < 0 && (i += 4294967296), i),
                D = x(O, B),
                H = w(O, 0, T, 0, I),
                q = A(0, B, 0, C, 0, M),
                z = this.k[j],
                G = this.k[j + 1],
                K = s[j],
                V = s[j + 1],
                J = b(N, F, L, D, H, q, z, G, K, V),
                W = y(N, F, L, D, H, q, z, G, K, V);
              N = S(u, c), F = E(u, c), L = k(u, 0, h, 0, m), D = _(0, c, 0, p, 0, v);
              var Y = d(N, F, L, D),
                X = l(N, F, L, D);
              U = I, R = M, I = T, M = C, T = O, C = B, O = d(g, P, J, W), B = l(P, P, J, W), g = m, P = v, m = h, v = p, h = u, p = c, u = d(J, W, Y, X), c = l(J, W, Y, X);
            }
            f(this.h, 0, u, c), f(this.h, 2, h, p), f(this.h, 4, m, v), f(this.h, 6, g, P), f(this.h, 8, O, B), f(this.h, 10, T, C), f(this.h, 12, I, M), f(this.h, 14, U, R);
          }, g.prototype._digest = function (e) {
            return "hex" === e ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
          };
        },
        70: function _(e, t, r) {
          "use strict";

          var n = r(4268).rotr32;
          function i(e, t, r) {
            return e & t ^ ~e & r;
          }
          function o(e, t, r) {
            return e & t ^ e & r ^ t & r;
          }
          function a(e, t, r) {
            return e ^ t ^ r;
          }
          t.ft_1 = function (e, t, r, n) {
            return 0 === e ? i(t, r, n) : 1 === e || 3 === e ? a(t, r, n) : 2 === e ? o(t, r, n) : void 0;
          }, t.ch32 = i, t.maj32 = o, t.p32 = a, t.s0_256 = function (e) {
            return n(e, 2) ^ n(e, 13) ^ n(e, 22);
          }, t.s1_256 = function (e) {
            return n(e, 6) ^ n(e, 11) ^ n(e, 25);
          }, t.g0_256 = function (e) {
            return n(e, 7) ^ n(e, 18) ^ e >>> 3;
          }, t.g1_256 = function (e) {
            return n(e, 17) ^ n(e, 19) ^ e >>> 10;
          };
        },
        4268: function _(e, t, r) {
          "use strict";

          var n = r(4504),
            i = r(1736);
          function o(e, t) {
            return 55296 == (64512 & e.charCodeAt(t)) && !(t < 0 || t + 1 >= e.length) && 56320 == (64512 & e.charCodeAt(t + 1));
          }
          function a(e) {
            return (e >>> 24 | e >>> 8 & 65280 | e << 8 & 16711680 | (255 & e) << 24) >>> 0;
          }
          function s(e) {
            return 1 === e.length ? "0" + e : e;
          }
          function u(e) {
            return 7 === e.length ? "0" + e : 6 === e.length ? "00" + e : 5 === e.length ? "000" + e : 4 === e.length ? "0000" + e : 3 === e.length ? "00000" + e : 2 === e.length ? "000000" + e : 1 === e.length ? "0000000" + e : e;
          }
          t.inherits = i, t.toArray = function (e, t) {
            if (Array.isArray(e)) return e.slice();
            if (!e) return [];
            var r = [];
            if ("string" == typeof e) {
              if (t) {
                if ("hex" === t) for ((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), i = 0; i < e.length; i += 2) r.push(parseInt(e[i] + e[i + 1], 16));
              } else for (var n = 0, i = 0; i < e.length; i++) {
                var a = e.charCodeAt(i);
                a < 128 ? r[n++] = a : a < 2048 ? (r[n++] = a >> 6 | 192, r[n++] = 63 & a | 128) : o(e, i) ? (a = 65536 + ((1023 & a) << 10) + (1023 & e.charCodeAt(++i)), r[n++] = a >> 18 | 240, r[n++] = a >> 12 & 63 | 128, r[n++] = a >> 6 & 63 | 128, r[n++] = 63 & a | 128) : (r[n++] = a >> 12 | 224, r[n++] = a >> 6 & 63 | 128, r[n++] = 63 & a | 128);
              }
            } else for (i = 0; i < e.length; i++) r[i] = 0 | e[i];
            return r;
          }, t.toHex = function (e) {
            for (var t = "", r = 0; r < e.length; r++) t += s(e[r].toString(16));
            return t;
          }, t.htonl = a, t.toHex32 = function (e, t) {
            for (var r = "", n = 0; n < e.length; n++) {
              var i = e[n];
              "little" === t && (i = a(i)), r += u(i.toString(16));
            }
            return r;
          }, t.zero2 = s, t.zero8 = u, t.join32 = function (e, t, r, i) {
            var o = r - t;
            n(o % 4 == 0);
            for (var a = new Array(o / 4), s = 0, u = t; s < a.length; s++, u += 4) {
              var c;
              c = "big" === i ? e[u] << 24 | e[u + 1] << 16 | e[u + 2] << 8 | e[u + 3] : e[u + 3] << 24 | e[u + 2] << 16 | e[u + 1] << 8 | e[u], a[s] = c >>> 0;
            }
            return a;
          }, t.split32 = function (e, t) {
            for (var r = new Array(4 * e.length), n = 0, i = 0; n < e.length; n++, i += 4) {
              var o = e[n];
              "big" === t ? (r[i] = o >>> 24, r[i + 1] = o >>> 16 & 255, r[i + 2] = o >>> 8 & 255, r[i + 3] = 255 & o) : (r[i + 3] = o >>> 24, r[i + 2] = o >>> 16 & 255, r[i + 1] = o >>> 8 & 255, r[i] = 255 & o);
            }
            return r;
          }, t.rotr32 = function (e, t) {
            return e >>> t | e << 32 - t;
          }, t.rotl32 = function (e, t) {
            return e << t | e >>> 32 - t;
          }, t.sum32 = function (e, t) {
            return e + t >>> 0;
          }, t.sum32_3 = function (e, t, r) {
            return e + t + r >>> 0;
          }, t.sum32_4 = function (e, t, r, n) {
            return e + t + r + n >>> 0;
          }, t.sum32_5 = function (e, t, r, n, i) {
            return e + t + r + n + i >>> 0;
          }, t.sum64 = function (e, t, r, n) {
            var i = e[t],
              o = n + e[t + 1] >>> 0,
              a = (o < n ? 1 : 0) + r + i;
            e[t] = a >>> 0, e[t + 1] = o;
          }, t.sum64_hi = function (e, t, r, n) {
            return (t + n >>> 0 < t ? 1 : 0) + e + r >>> 0;
          }, t.sum64_lo = function (e, t, r, n) {
            return t + n >>> 0;
          }, t.sum64_4_hi = function (e, t, r, n, i, o, a, s) {
            var u = 0,
              c = t;
            return u += (c = c + n >>> 0) < t ? 1 : 0, u += (c = c + o >>> 0) < o ? 1 : 0, e + r + i + a + (u += (c = c + s >>> 0) < s ? 1 : 0) >>> 0;
          }, t.sum64_4_lo = function (e, t, r, n, i, o, a, s) {
            return t + n + o + s >>> 0;
          }, t.sum64_5_hi = function (e, t, r, n, i, o, a, s, u, c) {
            var f = 0,
              d = t;
            return f += (d = d + n >>> 0) < t ? 1 : 0, f += (d = d + o >>> 0) < o ? 1 : 0, f += (d = d + s >>> 0) < s ? 1 : 0, e + r + i + a + u + (f += (d = d + c >>> 0) < c ? 1 : 0) >>> 0;
          }, t.sum64_5_lo = function (e, t, r, n, i, o, a, s, u, c) {
            return t + n + o + s + c >>> 0;
          }, t.rotr64_hi = function (e, t, r) {
            return (t << 32 - r | e >>> r) >>> 0;
          }, t.rotr64_lo = function (e, t, r) {
            return (e << 32 - r | t >>> r) >>> 0;
          }, t.shr64_hi = function (e, t, r) {
            return e >>> r;
          }, t.shr64_lo = function (e, t, r) {
            return (e << 32 - r | t >>> r) >>> 0;
          };
        },
        9410: function _(e, t, r) {
          "use strict";

          var n = r(7198),
            i = r(6580),
            o = r(4504);
          function a(e) {
            if (!(this instanceof a)) return new a(e);
            this.hash = e.hash, this.predResist = !!e.predResist, this.outLen = this.hash.outSize, this.minEntropy = e.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
            var t = i.toArray(e.entropy, e.entropyEnc || "hex"),
              r = i.toArray(e.nonce, e.nonceEnc || "hex"),
              n = i.toArray(e.pers, e.persEnc || "hex");
            o(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t, r, n);
          }
          e.exports = a, a.prototype._init = function (e, t, r) {
            var n = e.concat(t).concat(r);
            this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
            for (var i = 0; i < this.V.length; i++) this.K[i] = 0, this.V[i] = 1;
            this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;
          }, a.prototype._hmac = function () {
            return new n.hmac(this.hash, this.K);
          }, a.prototype._update = function (e) {
            var t = this._hmac().update(this.V).update([0]);
            e && (t = t.update(e)), this.K = t.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([1]).update(e).digest(), this.V = this._hmac().update(this.V).digest());
          }, a.prototype.reseed = function (e, t, r, n) {
            "string" != typeof t && (n = r, r = t, t = null), e = i.toArray(e, t), r = i.toArray(r, n), o(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(e.concat(r || [])), this._reseed = 1;
          }, a.prototype.generate = function (e, t, r, n) {
            if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
            "string" != typeof t && (n = r, r = t, t = null), r && (r = i.toArray(r, n || "hex"), this._update(r));
            for (var o = []; o.length < e;) this.V = this._hmac().update(this.V).digest(), o = o.concat(this.V);
            var a = o.slice(0, e);
            return this._update(r), this._reseed++, i.encode(a, t);
          };
        },
        912: function _(e, t, r) {
          "use strict";

          var n = r(9519),
            i = r(1143),
            o = e.exports;
          for (var a in n) n.hasOwnProperty(a) && (o[a] = n[a]);
          function s(e) {
            if ("string" == typeof e && (e = i.parse(e)), e.protocol || (e.protocol = "https:"), "https:" !== e.protocol) throw new Error('Protocol "' + e.protocol + '" not supported. Expected "https:"');
            return e;
          }
          o.request = function (e, t) {
            return e = s(e), n.request.call(this, e, t);
          }, o.get = function (e, t) {
            return e = s(e), n.get.call(this, e, t);
          };
        },
        2996: function _(e, t, r) {
          "use strict";

          var n;
          r(8847)(r(3355)), void 0 === (n = function () {
            return e = [new Uint32Array([2157250, 2157314, 2157378, 2157442, 2157506, 2157570, 2157634, 0, 2157698, 2157762, 2157826, 2157890, 2157954, 0, 2158018, 0]), new Uint32Array([2179041, 6291456, 2179073, 6291456, 2179105, 6291456, 2179137, 6291456, 2179169, 6291456, 2179201, 6291456, 2179233, 6291456, 2179265, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064, 14680064, 14680064, 14680064]), new Uint32Array([0, 2113729, 2197345, 2197377, 2113825, 2197409, 2197441, 2113921, 2197473, 2114017, 2197505, 2197537, 2197569, 2197601, 2197633, 2197665]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 23068672, 23068672, 23068672, 0, 0, 0, 0, 23068672]), new Uint32Array([14680064, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064]), new Uint32Array([2196001, 2196033, 2196065, 2196097, 2196129, 2196161, 2196193, 2196225, 2196257, 2196289, 2196321, 2196353, 2196385, 2196417, 2196449, 2196481]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 0, 0, 0, 0, 0]), new Uint32Array([2097281, 2105921, 2097729, 2106081, 0, 2097601, 2162337, 2106017, 2133281, 2097505, 2105889, 2097185, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([2177025, 6291456, 2177057, 6291456, 2177089, 6291456, 2177121, 6291456, 2177153, 6291456, 2177185, 6291456, 2177217, 6291456, 2177249, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456]), new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456]), new Uint32Array([2134435, 2134531, 2134627, 2134723, 2134723, 2134819, 2134819, 2134915, 2134915, 2135011, 2105987, 2135107, 2135203, 2135299, 2131587, 2135395]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 6291456, 2168673, 2169249, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2147906, 2147970, 2148034, 2148098, 2148162, 2148226, 2148290, 2148354, 2147906, 2147970, 2148034, 2148098, 2148162, 2148226, 2148290, 2148354]), new Uint32Array([2125219, 2125315, 2152834, 2152898, 2125411, 2152962, 2153026, 2125506, 2125507, 2125603, 2153090, 2153154, 2153218, 2153282, 2153346, 2105348]), new Uint32Array([2203393, 6291456, 2203425, 6291456, 2203457, 6291456, 2203489, 6291456, 6291456, 6291456, 6291456, 2203521, 6291456, 2181281, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 23068672, 6291456, 2145538, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 6291456]), new Uint32Array([2139426, 2160834, 2160898, 2160962, 2134242, 2161026, 2161090, 2161154, 2161218, 2161282, 2161346, 2161410, 2138658, 2161474, 2161538, 2134722]), new Uint32Array([2119939, 2124930, 2125026, 2106658, 2125218, 2128962, 2129058, 2129154, 2129250, 2129346, 2129442, 2108866, 2108770, 2150466, 2150530, 2150594]), new Uint32Array([2201601, 6291456, 2201633, 6291456, 2201665, 6291456, 2201697, 6291456, 2201729, 6291456, 2201761, 6291456, 2201793, 6291456, 2201825, 6291456]), new Uint32Array([2193537, 2193569, 2193601, 2193633, 2193665, 2193697, 2193729, 2193761, 2193793, 2193825, 2193857, 2193889, 2193921, 2193953, 2193985, 2194017]), new Uint32Array([6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2190561, 6291456, 2190593, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2190625, 6291456, 2190657, 6291456, 23068672]), new Uint32Array([2215905, 2215937, 2215969, 2216001, 2216033, 2216065, 2216097, 2216129, 2216161, 2216193, 2216225, 2216257, 2105441, 2216289, 2216321, 2216353]), new Uint32Array([23068672, 18884130, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2191233, 2191265, 2191297, 2191329, 2191361, 2191393, 2191425, 2117377, 2191457, 2191489, 2191521, 2191553, 2191585, 2191617, 2191649, 2117953]), new Uint32Array([2132227, 2132323, 2132419, 2132419, 2132515, 2132515, 2132611, 2132707, 2132707, 2132803, 2132899, 2132899, 2132995, 2132995, 2133091, 2133187]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 0, 0]), new Uint32Array([2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 10609889, 10610785, 10609921, 10610817, 2222241]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0]), new Uint32Array([2219969, 2157121, 2157441, 2157505, 2157889, 2157953, 2220001, 2158465, 2158529, 10575617, 2156994, 2157058, 2129923, 2130019, 2157122, 2157186]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]), new Uint32Array([2185249, 6291456, 2185281, 6291456, 2185313, 6291456, 2185345, 6291456, 2185377, 6291456, 2185409, 6291456, 2185441, 6291456, 2185473, 6291456]), new Uint32Array([0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 6291456, 0]), new Uint32Array([2183361, 6291456, 2183393, 6291456, 2183425, 6291456, 2183457, 6291456, 2183489, 6291456, 2183521, 6291456, 2183553, 6291456, 2183585, 6291456]), new Uint32Array([2192161, 2192193, 2192225, 2192257, 2192289, 2192321, 2192353, 2192385, 2192417, 2192449, 2192481, 2192513, 2192545, 2192577, 2192609, 2192641]), new Uint32Array([2212001, 2212033, 2212065, 2212097, 2212129, 2212161, 2212193, 2212225, 2212257, 2212289, 2212321, 2212353, 2212385, 2212417, 2212449, 2207265]), new Uint32Array([2249825, 2249857, 2249889, 2249921, 2249954, 2250018, 2250082, 2250145, 2250177, 2250209, 2250241, 2250274, 2250337, 2250370, 2250433, 2250465]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2147905, 2147969, 2148033, 2148097, 2148161, 2148225, 2148289, 2148353]), new Uint32Array([10485857, 6291456, 2197217, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 23068672, 23068672]), new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([2180353, 2180385, 2144033, 2180417, 2180449, 2180481, 2180513, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 10610209, 10610465, 10610241, 10610753, 10609857]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0, 0]), new Uint32Array([2223842, 2223906, 2223970, 2224034, 2224098, 2224162, 2224226, 2224290, 2224354, 2224418, 2224482, 2224546, 2224610, 2224674, 2224738, 2224802]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 18923650, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 18923714, 23068672, 23068672]), new Uint32Array([2126179, 2125538, 2126275, 2126371, 2126467, 2125634, 2126563, 2105603, 2105604, 2125346, 2126659, 2126755, 2126851, 2098179, 2098181, 2098182]), new Uint32Array([2227426, 2227490, 2227554, 2227618, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2192353, 2240642, 2240642, 2240705, 2240737, 2240737, 2240769, 2240802, 2240866, 2240929, 2240961, 2240993, 2241025, 2241057, 2241089, 2241121]), new Uint32Array([6291456, 2170881, 2170913, 2170945, 6291456, 2170977, 6291456, 2171009, 2171041, 6291456, 6291456, 6291456, 2171073, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2132226, 2132514, 2163586, 2132610, 2160386, 2133090, 2133186, 2160450, 2160514, 2160578, 2133570, 2106178, 2160642, 2133858, 2160706, 2160770]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10532162, 10532226, 10532290, 10532354, 10532418, 10532482, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672]), new Uint32Array([2098209, 2108353, 2108193, 2108481, 2170241, 2111713, 2105473, 2105569, 2105601, 2112289, 2112481, 2098305, 2108321, 0, 0, 0]), new Uint32Array([2209121, 2209153, 2209185, 2209217, 2209249, 2209281, 2209313, 2209345, 2209377, 2209409, 2209441, 2209473, 2207265, 2209505, 2209537, 2209569]), new Uint32Array([2189025, 6291456, 2189057, 6291456, 2189089, 6291456, 2189121, 6291456, 2189153, 6291456, 2189185, 6291456, 2189217, 6291456, 2189249, 6291456]), new Uint32Array([2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233057]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2165764, 2140004]), new Uint32Array([2215105, 6291456, 2215137, 6291456, 6291456, 2215169, 2215201, 6291456, 6291456, 6291456, 2215233, 2215265, 2215297, 2215329, 2215361, 2215393]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([10505091, 10505187, 10505283, 10505379, 10505475, 10505571, 10505667, 10505763, 10505859, 10505955, 10506051, 10506147, 10506243, 10506339, 10506435, 10506531]), new Uint32Array([2229730, 2229794, 2229858, 2229922, 2229986, 2230050, 2230114, 2230178, 2230242, 2230306, 2230370, 2230434, 2230498, 2230562, 2230626, 2230690]), new Uint32Array([2105505, 2098241, 2108353, 2108417, 2105825, 0, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 10502115, 10502178, 10502211, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]), new Uint32Array([2190305, 6291456, 2190337, 6291456, 2190369, 6291456, 2190401, 6291456, 2190433, 6291456, 2190465, 6291456, 2190497, 6291456, 2190529, 6291456]), new Uint32Array([2173793, 2173985, 2174017, 6291456, 2173761, 2173697, 6291456, 2174689, 6291456, 2174017, 2174721, 6291456, 6291456, 2174753, 2174785, 2174817]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2099521, 2099105, 2120705, 2098369, 2120801, 2103361, 2097985, 2098433, 2121377, 2121473, 2099169, 2099873, 2098401, 2099393, 2152609, 2100033]), new Uint32Array([2132898, 2163842, 2163906, 2133282, 2132034, 2131938, 2137410, 2132802, 2132706, 2164866, 2133282, 2160578, 2165186, 2165186, 6291456, 6291456]), new Uint32Array([10500003, 10500099, 10500195, 10500291, 10500387, 10500483, 10500579, 10500675, 10500771, 10500867, 10500963, 10501059, 10501155, 10501251, 10501347, 10501443]), new Uint32Array([2163458, 2130978, 2131074, 2131266, 2131362, 2163522, 2160130, 2132066, 2131010, 2131106, 2106018, 2131618, 2131298, 2132034, 2131938, 2137410]), new Uint32Array([2212961, 2116993, 2212993, 2213025, 2213057, 2213089, 2213121, 2213153, 2213185, 2213217, 2213249, 2209633, 2213281, 2213313, 2213345, 2213377]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([2113729, 2113825, 2113921, 2114017, 2114113, 2114209, 2114305, 2114401, 2114497, 2114593, 2114689, 2114785, 2114881, 2114977, 2115073, 2115169]), new Uint32Array([2238177, 2238209, 2238241, 2238273, 2238305, 2238337, 2238337, 2217537, 2238369, 2238401, 2238433, 2238465, 2215649, 2238497, 2238529, 2238561]), new Uint32Array([2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905]), new Uint32Array([6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 0]), new Uint32Array([6291456, 0, 6291456, 2145026, 0, 6291456, 2145090, 0, 6291456, 6291456, 0, 0, 23068672, 0, 23068672, 23068672]), new Uint32Array([2099233, 2122017, 2200673, 2098113, 2121537, 2103201, 2200705, 2104033, 2121857, 2121953, 2122401, 2099649, 2099969, 2123009, 2100129, 2100289]), new Uint32Array([6291456, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0]), new Uint32Array([2187681, 2187713, 2187745, 2187777, 2187809, 2187841, 2187873, 2187905, 2187937, 2187969, 2188001, 2188033, 2188065, 2188097, 2188129, 2188161]), new Uint32Array([0, 10554498, 10554562, 10554626, 10554690, 10554754, 10554818, 10554882, 10554946, 10555010, 10555074, 6291456, 6291456, 0, 0, 0]), new Uint32Array([2235170, 2235234, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2181153, 6291456, 2188897, 6291456, 6291456, 2188929, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2111905, 2100865, 2188961, 2188993]), new Uint32Array([2100833, 2100897, 0, 0, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 10575617, 2187041, 10502177, 10489601, 10489697, 2112289]), new Uint32Array([6291456, 2172833, 6291456, 2172865, 2172897, 2172929, 2172961, 6291456, 2172993, 6291456, 2173025, 6291456, 2173057, 6291456, 2173089, 6291456]), new Uint32Array([6291456, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 2190721]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456]), new Uint32Array([2184993, 6291456, 2185025, 6291456, 2185057, 6291456, 2185089, 6291456, 2185121, 6291456, 2185153, 6291456, 2185185, 6291456, 2185217, 6291456]), new Uint32Array([2115265, 2115361, 2115457, 2115553, 2115649, 2115745, 2115841, 2115937, 2116033, 2116129, 2116225, 2116321, 2150658, 2150722, 2200225, 6291456]), new Uint32Array([2168321, 6291456, 2168353, 6291456, 2168385, 6291456, 2168417, 6291456, 2168449, 6291456, 2168481, 6291456, 2168513, 6291456, 2168545, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 2186625, 0, 0, 6291456, 6291456, 2186657, 2186689, 2186721, 2173505, 0, 10496067, 10496163, 10496259]), new Uint32Array([2178785, 6291456, 2178817, 6291456, 2178849, 6291456, 2178881, 6291456, 2178913, 6291456, 2178945, 6291456, 2178977, 6291456, 2179009, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]), new Uint32Array([2097152, 0, 0, 0, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 2197857, 2197889, 2197921, 2197953, 2197985, 2198017, 0, 0, 2198049, 2198081, 2198113, 2198145, 2198177, 2198209]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2098209, 2167297, 2111137, 6291456]), new Uint32Array([2171393, 6291456, 2171425, 6291456, 2171457, 6291456, 2171489, 6291456, 2171521, 6291456, 2171553, 6291456, 2171585, 6291456, 2171617, 6291456]), new Uint32Array([2206753, 2206785, 2195457, 2206817, 2206849, 2206881, 2206913, 2197153, 2197153, 2206945, 2117857, 2206977, 2207009, 2207041, 2207073, 2207105]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 2144834, 2144898, 0, 2144962]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672]), new Uint32Array([2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 0, 2105505, 2098241]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 2202049, 6291456, 2202081, 6291456, 2202113, 6291456, 2202145, 6291456, 2202177, 6291456, 2202209, 6291456, 2202241, 6291456]), new Uint32Array([10501155, 10501251, 10501347, 10501443, 10501539, 10501635, 10501731, 10501827, 10501923, 10502019, 2141731, 2105505, 2098177, 2155586, 2166530, 0]), new Uint32Array([2102081, 2102209, 2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100833, 2100737, 2098337, 2101441]), new Uint32Array([2146882, 2146946, 2147010, 2147074, 2147138, 2147202, 2147266, 2147330, 2146882, 2146946, 2147010, 2147074, 2147138, 2147202, 2147266, 2147330]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([10502307, 10502403, 10502499, 10502595, 10502691, 10502787, 10502883, 10502979, 10503075, 10503171, 10503267, 10503363, 10503459, 10503555, 10503651, 10503747]), new Uint32Array([2179937, 2179969, 2180001, 2180033, 2156545, 2180065, 2156577, 2180097, 2180129, 2180161, 2180193, 2180225, 2180257, 2180289, 2156737, 2180321]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 0, 0, 6291456, 0, 0, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0]), new Uint32Array([2227682, 2227746, 2227810, 2227874, 2227938, 2228002, 2228066, 2228130, 2228194, 2228258, 2228322, 2228386, 2228450, 2228514, 2228578, 2228642]), new Uint32Array([2105601, 2169121, 2108193, 2170049, 2181025, 2181057, 2112481, 2108321, 2108289, 2181089, 2170497, 2100865, 2181121, 2173601, 2173633, 2173665]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2180641, 6291456, 6291456, 6291456]), new Uint32Array([0, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 0, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456]), new Uint32Array([2178273, 6291456, 2178305, 6291456, 2178337, 6291456, 2178369, 6291456, 2178401, 6291456, 2178433, 6291456, 2178465, 6291456, 2178497, 6291456]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456]), new Uint32Array([2237377, 2237409, 2236225, 2237441, 2237473, 2217441, 2215521, 2215553, 2217473, 2237505, 2237537, 2209697, 2237569, 2215585, 2237601, 2237633]), new Uint32Array([2221985, 2165601, 2165601, 2165665, 2165665, 2222017, 2222017, 2165729, 2165729, 2158913, 2158913, 2158913, 2158913, 2097281, 2097281, 2105921]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2149634, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2176897, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 2176929, 6291456, 2176961, 6291456, 2176993, 6291456]), new Uint32Array([2172641, 6291456, 2172673, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2172705, 2172737, 6291456, 2172769, 2172801, 6291456]), new Uint32Array([2099173, 2104196, 2121667, 2099395, 2121763, 2152258, 2152322, 2098946, 2152386, 2121859, 2121955, 2099333, 2122051, 2104324, 2099493, 2122147]), new Uint32Array([6291456, 6291456, 6291456, 2145794, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 2145858, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 0, 0, 6291456, 0]), new Uint32Array([0, 2105921, 2097729, 0, 2097377, 0, 0, 2106017, 0, 2097505, 2105889, 2097185, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2239074, 2239138, 2239201, 2239233, 2239265, 2239297, 2239329, 2239361, 0, 2239393, 2239425, 2239425, 2239458, 2239521, 2239553, 2209569]), new Uint32Array([14680064, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 6291456, 23068672]), new Uint32Array([2108321, 2108289, 2113153, 2098209, 2180897, 2180929, 2180961, 2111137, 2098241, 2108353, 2170241, 2170273, 2180993, 2105825, 6291456, 2105473]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2146114, 6291456, 6291456, 6291456, 0, 0, 0]), new Uint32Array([2105921, 2105921, 2105921, 2222049, 2222049, 2130977, 2130977, 2130977, 2130977, 2160065, 2160065, 2160065, 2160065, 2097729, 2097729, 2097729]), new Uint32Array([2218145, 2214785, 2207937, 2218177, 2218209, 2192993, 2210113, 2212769, 2218241, 2218273, 2216129, 2218305, 2216161, 2218337, 2218369, 2218401]), new Uint32Array([0, 0, 0, 2156546, 2156610, 2156674, 2156738, 2156802, 0, 0, 0, 0, 0, 2156866, 23068672, 2156930]), new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([2213409, 2213441, 2213473, 2213505, 2213537, 2213569, 2213601, 2213633, 2213665, 2195681, 2213697, 2213729, 2213761, 2213793, 2213825, 2213857]), new Uint32Array([2100033, 2099233, 2122017, 2200673, 2098113, 2121537, 2103201, 2200705, 2104033, 2121857, 2121953, 2122401, 2099649, 2099969, 2123009, 2100129]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2201857, 6291456, 2201889, 6291456, 2201921, 6291456, 2201953, 6291456, 2201985, 6291456, 2202017, 6291456, 2176193, 2176257, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2188193, 2188225, 2188257, 2188289, 2188321, 2188353, 2188385, 2188417, 2188449, 2188481, 2188513, 2188545, 2188577, 2188609, 2188641, 0]), new Uint32Array([10554529, 2221089, 0, 10502113, 10562017, 10537921, 10538049, 2221121, 2221153, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2213889, 2213921, 2213953, 2213985, 2214017, 2214049, 2214081, 2194177, 2214113, 2214145, 2214177, 2214209, 2214241, 2214273, 2214305, 2214337]), new Uint32Array([2166978, 2167042, 2099169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2180545, 6291456, 6291456, 6291456]), new Uint32Array([10518915, 10519011, 10519107, 10519203, 2162242, 2162306, 2159554, 2162370, 2159362, 2159618, 2105922, 2162434, 2159746, 2162498, 2159810, 2159874]), new Uint32Array([2161730, 2161794, 2135586, 2161858, 2161922, 2137186, 2131810, 2160290, 2135170, 2161986, 2137954, 2162050, 2162114, 2162178, 10518723, 10518819]), new Uint32Array([10506627, 10506723, 10506819, 10506915, 10507011, 10507107, 10507203, 10507299, 10507395, 10507491, 10507587, 10507683, 10507779, 10507875, 10507971, 10508067]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]), new Uint32Array([2175873, 2175905, 2175937, 2175969, 2176001, 2176033, 2176065, 2176097, 2176129, 2176161, 2176193, 2176225, 2176257, 2176289, 2176321, 2176353]), new Uint32Array([2140006, 2140198, 2140390, 2140582, 2140774, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672]), new Uint32Array([2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241]), new Uint32Array([0, 23068672, 0, 0, 0, 0, 0, 0, 0, 2145154, 2145218, 2145282, 6291456, 0, 2145346, 0]), new Uint32Array([0, 0, 0, 0, 10531458, 10495395, 2148545, 2143201, 2173473, 2148865, 2173505, 0, 2173537, 0, 2173569, 2149121]), new Uint32Array([10537282, 10495683, 2148738, 2148802, 2148866, 0, 6291456, 2148930, 2186593, 2173473, 2148737, 2148865, 2148802, 10495779, 10495875, 10495971]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2215425, 2215457, 2215489, 2215521, 2215553, 2215585, 2215617, 2215649, 2215681, 2215713, 2215745, 2215777, 2192033, 2215809, 2215841, 2215873]), new Uint32Array([2242049, 2242081, 2242113, 2242145, 2242177, 2242209, 2242241, 2242273, 2215937, 2242305, 2242338, 2242401, 2242433, 2242465, 2242497, 2216001]), new Uint32Array([10554529, 2221089, 0, 0, 10562017, 10502113, 10538049, 10537921, 2221185, 10489601, 10489697, 10609889, 10609921, 2141729, 2141793, 10610273]), new Uint32Array([2141923, 2142019, 2142115, 2142211, 2142307, 2142403, 2142499, 2142595, 2142691, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([0, 2221185, 2221217, 10609857, 10609857, 10489601, 10489697, 10609889, 10609921, 2141729, 2141793, 2221345, 2221377, 2221409, 2221441, 2187105]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 18923970, 23068672, 23068672, 23068672, 0, 6291456, 6291456]), new Uint32Array([2183105, 6291456, 2183137, 6291456, 2183169, 6291456, 2183201, 6291456, 2183233, 6291456, 2183265, 6291456, 2183297, 6291456, 2183329, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2134434, 2134818, 2097666, 2097186, 2097474, 2097698, 2105986, 2131586, 2132450, 2131874, 2131778, 2135970, 2135778, 2161602, 2136162, 2161666]), new Uint32Array([2236865, 2236897, 2236930, 2236993, 2237025, 2235681, 2237058, 2237121, 2237153, 2237185, 2237217, 2217281, 2237250, 2191233, 2237313, 2237345]), new Uint32Array([2190049, 6291456, 2190081, 6291456, 2190113, 6291456, 2190145, 6291456, 2190177, 6291456, 2190209, 6291456, 2190241, 6291456, 2190273, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2101922, 2102050, 2102178, 2102306, 10498755, 10498851, 10498947, 10499043, 10499139, 10499235, 10499331, 10499427, 10499523, 10489604, 10489732, 10489860]), new Uint32Array([2166914, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]), new Uint32Array([2181601, 2170561, 2181633, 2181665, 2170753, 2181697, 2172897, 2170881, 2181729, 2170913, 2172929, 2113441, 2181761, 2181793, 2171009, 2173761]), new Uint32Array([0, 2105921, 2097729, 2106081, 0, 2097601, 2162337, 2106017, 2133281, 2097505, 0, 2097185, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([2248001, 2248033, 2248066, 2248130, 2248193, 2248226, 2248289, 2248322, 2248385, 2248417, 2216673, 2248450, 2248514, 2248577, 2248610, 2248673]), new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]), new Uint32Array([2169729, 6291456, 2169761, 6291456, 2169793, 6291456, 2169825, 6291456, 2169857, 2169889, 6291456, 2169921, 6291456, 2143329, 6291456, 2098305]), new Uint32Array([2162178, 2163202, 2163266, 2135170, 2136226, 2161986, 2137954, 2159426, 2159490, 2163330, 2159554, 2163394, 2159682, 2139522, 2136450, 2159746]), new Uint32Array([2173953, 2173985, 0, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2174209, 2174241, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 4271169, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2174273]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 2190785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2189793, 6291456, 2189825, 6291456, 2189857, 6291456, 2189889, 6291456, 2189921, 6291456, 2189953, 6291456, 2189985, 6291456, 2190017, 6291456]), new Uint32Array([2105601, 2112289, 2108193, 2112481, 2112577, 0, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 0, 2098209, 2111137]), new Uint32Array([2172129, 6291456, 2172161, 6291456, 2172193, 6291456, 2172225, 6291456, 2172257, 6291456, 2172289, 6291456, 2172321, 6291456, 2172353, 6291456]), new Uint32Array([2214753, 6291456, 2214785, 6291456, 6291456, 2214817, 2214849, 2214881, 2214913, 2214945, 2214977, 2215009, 2215041, 2215073, 2194401, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([0, 0, 0, 0, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([10610305, 10610337, 10575617, 2221761, 10610401, 10610433, 10502177, 0, 10610465, 10610497, 10610529, 10610561, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 23068672, 0, 0, 0, 0, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2187105, 2187137, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2199393, 2199425, 2199457, 2199489, 2199521, 2199553, 2199585, 2199617, 2199649, 2199681, 2199713, 2199745, 2199777, 2199809, 2199841, 0]), new Uint32Array([2217249, 2217281, 2217313, 2217345, 2217377, 2217409, 2217441, 2217473, 2215617, 2217505, 2217537, 2217569, 2214753, 2217601, 2217633, 2217665]), new Uint32Array([2170273, 2170305, 6291456, 2170337, 2170369, 6291456, 2170401, 2170433, 2170465, 6291456, 6291456, 6291456, 2170497, 2170529, 6291456, 2170561]), new Uint32Array([2188673, 6291456, 2188705, 2188737, 2188769, 6291456, 6291456, 2188801, 6291456, 2188833, 6291456, 2188865, 6291456, 2180929, 2181505, 2180897]), new Uint32Array([10489988, 10490116, 10490244, 10490372, 10490500, 10490628, 10490756, 10490884, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2147393, 2147457, 2147521, 2147585, 2147649, 2147713, 2147777, 2147841]), new Uint32Array([23068672, 23068672, 0, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]), new Uint32Array([2241153, 2241185, 2241217, 2215809, 2241250, 2241313, 2241345, 2241377, 2217921, 2241377, 2241409, 2215873, 2241441, 2241473, 2241505, 2241537]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2220417, 2220417, 2220449, 2220449, 2220481, 2220481, 2220513, 2220513, 2220545, 2220545, 2220577, 2220577, 2220609, 2220609, 2220641, 2220641]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2144002, 0, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([2167105, 2167137, 2167169, 2167201, 2167233, 2167265, 2167297, 2167329, 2167361, 2167393, 2167425, 2167457, 2167489, 2167521, 2167553, 2167585]), new Uint32Array([10575521, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193]), new Uint32Array([2234146, 2234210, 2234274, 2234338, 2234402, 2234466, 2234530, 2234594, 2234658, 2234722, 2234786, 2234850, 2234914, 2234978, 2235042, 2235106]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 2180577, 0, 0, 0, 0, 0, 2180609, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 6291456, 6291456]), new Uint32Array([2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2242529, 2242561, 2242593, 2242625, 2242657, 2242689, 2242721, 2242753, 2207937, 2218177, 2242785, 2242817, 2242849, 2242882, 2242945, 2242977]), new Uint32Array([2118049, 2105345, 2118241, 2105441, 2118433, 2118529, 2118625, 2118721, 2118817, 2200257, 2200289, 2191809, 2200321, 2200353, 2200385, 2200417]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([2185505, 6291456, 2185537, 6291456, 2185569, 6291456, 2185601, 6291456, 2185633, 6291456, 2185665, 6291456, 2185697, 6291456, 2185729, 6291456]), new Uint32Array([2231970, 2232034, 2232098, 2232162, 2232226, 2232290, 2232354, 2232418, 2232482, 2232546, 2232610, 2232674, 2232738, 2232802, 2232866, 2232930]), new Uint32Array([2218625, 2246402, 2246466, 2246530, 2246594, 2246657, 2246689, 2246689, 2218657, 2219681, 2246721, 2246753, 2246785, 2246818, 2246881, 2208481]), new Uint32Array([2197025, 2197057, 2197089, 2197121, 2197153, 2197185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2219137, 2216961, 2219169, 2219201, 2219233, 2219265, 2219297, 2217025, 2215041, 2219329, 2217057, 2219361, 2217089, 2219393, 2197153, 2219426]), new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713]), new Uint32Array([2243522, 2243585, 2243617, 2243649, 2243681, 2210113, 2243713, 2243746, 2243810, 2243874, 2243937, 2243970, 2244033, 2244065, 2244097, 2244129]), new Uint32Array([2178017, 6291456, 2178049, 6291456, 2178081, 6291456, 2178113, 6291456, 2178145, 6291456, 2178177, 6291456, 2178209, 6291456, 2178241, 6291456]), new Uint32Array([10553858, 2165314, 10518722, 6291456, 10518818, 0, 10518914, 2130690, 10519010, 2130786, 10519106, 2130882, 10519202, 2165378, 10554050, 2165506]), new Uint32Array([0, 0, 2135491, 2135587, 2135683, 2135779, 2135875, 2135971, 2135971, 2136067, 2136163, 2136259, 2136355, 2136355, 2136451, 2136547]), new Uint32Array([23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2220033, 2220033, 2220065, 2220065, 2220065, 2220065, 2220097, 2220097, 2220097, 2220097, 2220129, 2220129, 2220129, 2220129, 2220161, 2220161]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2100897, 2100898, 2100899, 2150018, 2100865, 2100866, 2100867, 2100868, 2150082, 2108481, 2109858, 2109859, 2105569, 2105505, 2098241, 2105601]), new Uint32Array([2097217, 2097505, 2097505, 2097505, 2097505, 2165570, 2165570, 2165634, 2165634, 2165698, 2165698, 2097858, 2097858, 0, 0, 2097152]), new Uint32Array([23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([10503843, 10503939, 10504035, 10504131, 10504227, 10504323, 10504419, 10504515, 10504611, 10504707, 10504803, 10504899, 10504995, 10491140, 10491268, 0]), new Uint32Array([2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2173761, 2174017, 2174049]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2134145, 2097153, 2134241, 2105953, 2132705, 2130977, 2160065, 2131297, 2162049, 2133089, 2160577, 2133857, 2235297, 2220769, 2235329, 2235361]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2222401, 2222433, 2222465, 10531394, 2222497, 2222529, 2222561, 0, 2222593, 2222625, 2222657, 2222689, 2222721, 2222753, 2222785, 0]), new Uint32Array([2184481, 6291456, 2184513, 6291456, 2184545, 6291456, 2184577, 6291456, 2184609, 6291456, 2184641, 6291456, 2184673, 6291456, 2184705, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2105570, 2156034, 2126947, 2156098, 2153666, 2127043, 2127139, 2156162, 0, 2127235, 2156226, 2156290, 2156354, 2156418, 2127331, 2127427]), new Uint32Array([2215905, 2207041, 2153185, 2241569, 2241601, 2241633, 2241665, 2241697, 2241730, 2241793, 2241825, 2241857, 2241889, 2241921, 2241954, 2242017]), new Uint32Array([2203777, 6291456, 2203809, 6291456, 2203841, 6291456, 2203873, 6291456, 2203905, 6291456, 2173121, 2180993, 2181249, 2203937, 2181313, 0]), new Uint32Array([2168577, 6291456, 2168609, 6291456, 2168641, 6291456, 2168673, 6291456, 2168705, 6291456, 2168737, 6291456, 2168769, 6291456, 2168801, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 23068672, 23068672, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([2210113, 2195521, 2210145, 2210177, 2210209, 2210241, 2210273, 2210305, 2210337, 2210369, 2210401, 2210433, 2210465, 2210497, 2210529, 2210561]), new Uint32Array([6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([2228706, 2228770, 2228834, 2228898, 2228962, 2229026, 2229090, 2229154, 2229218, 2229282, 2229346, 2229410, 2229474, 2229538, 2229602, 2229666]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 18874368, 18874368, 18874368, 0, 0]), new Uint32Array([2133089, 2133281, 2133281, 2133281, 2133281, 2160577, 2160577, 2160577, 2160577, 2097441, 2097441, 2097441, 2097441, 2133857, 2133857, 2133857]), new Uint32Array([6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2174017, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233089]), new Uint32Array([2178529, 6291456, 2178561, 6291456, 2178593, 6291456, 2178625, 6291456, 2178657, 6291456, 2178689, 6291456, 2178721, 6291456, 2178753, 6291456]), new Uint32Array([2221025, 2221025, 2221057, 2221057, 2159329, 2159329, 2159329, 2159329, 2097217, 2097217, 2158914, 2158914, 2158978, 2158978, 2159042, 2159042]), new Uint32Array([2208161, 2208193, 2208225, 2208257, 2194433, 2208289, 2208321, 2208353, 2208385, 2208417, 2208449, 2208481, 2208513, 2208545, 2208577, 2208609]), new Uint32Array([2169217, 6291456, 2169249, 6291456, 2169281, 6291456, 2169313, 6291456, 2169345, 6291456, 2169377, 6291456, 2169409, 6291456, 2169441, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2133187, 2133283, 2133283, 2133379, 2133475, 2133571, 2133667, 2133667, 2133763, 2133859, 2133955, 2134051, 2134147, 2134147, 2134243, 2134339]), new Uint32Array([2197697, 2114113, 2114209, 2197729, 2197761, 2114305, 2197793, 2114401, 2114497, 2197825, 2114593, 2114689, 2114785, 2114881, 2114977, 0]), new Uint32Array([2193089, 2193121, 2193153, 2193185, 2117665, 2117569, 2193217, 2193249, 2193281, 2193313, 2193345, 2193377, 2193409, 2193441, 2193473, 2193505]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2184225, 6291456, 2184257, 6291456, 2184289, 6291456, 2184321, 6291456, 2184353, 6291456, 2184385, 6291456, 2184417, 6291456, 2184449, 6291456]), new Uint32Array([2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2100833, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2098657, 2098049, 2200737, 2123489, 2123681, 2200769, 2098625, 2100321, 2098145, 2100449, 2098017, 2098753, 2200801, 2200833, 2200865, 0]), new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]), new Uint32Array([2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 0, 2098241, 2108353, 2108417, 2105825, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2181153, 2105505, 2181185, 2167617, 2180993]), new Uint32Array([2160002, 2160066, 2160130, 2160194, 2160258, 2132066, 2131010, 2131106, 2106018, 2131618, 2160322, 2131298, 2132034, 2131938, 2137410, 2132226]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]), new Uint32Array([2183617, 6291456, 2183649, 6291456, 2183681, 6291456, 2183713, 6291456, 2183745, 6291456, 2183777, 6291456, 2183809, 6291456, 2183841, 6291456]), new Uint32Array([0, 6291456, 6291456, 0, 6291456, 0, 0, 6291456, 6291456, 0, 6291456, 0, 0, 6291456, 0, 0]), new Uint32Array([2250977, 2251009, 2251041, 2251073, 2195009, 2251106, 2251169, 2251201, 2251233, 2251265, 2251297, 2251330, 2251394, 2251457, 2251489, 2251521]), new Uint32Array([2205729, 2205761, 2205793, 2205825, 2205857, 2205889, 2205921, 2205953, 2205985, 2206017, 2206049, 2206081, 2206113, 2206145, 2206177, 2206209]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2143170, 2168993, 6291456, 2169025, 6291456, 2169057, 6291456, 2169089, 6291456, 2143234, 2169121, 6291456, 2169153, 6291456, 2169185, 6291456]), new Uint32Array([23068672, 23068672, 2190689, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2248706, 2248769, 2248801, 2248833, 2248865, 2248897, 2248929, 2248962, 2249026, 2249090, 2249154, 2240705, 2249217, 2249249, 2249281, 2249313]), new Uint32Array([10485857, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10495394, 6291456, 2098209, 6291456, 6291456, 2097152, 6291456, 10531394]), new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([14680064, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2173985, 2173953, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889]), new Uint32Array([6291456, 2186977, 6291456, 6291456, 6291456, 6291456, 6291456, 10537858, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2209601, 2209633, 2209665, 2209697, 2209729, 2209761, 2209793, 2209825, 2209857, 2209889, 2209921, 2209953, 2209985, 2210017, 2210049, 2210081]), new Uint32Array([10501539, 10501635, 10501731, 10501827, 10501923, 10502019, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905]), new Uint32Array([2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2174017, 2174017, 2174049]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2194561, 2194593, 2194625, 2119777, 2119873, 2194657, 2194689, 2194721, 2194753, 2194785, 2194817, 2194849, 2194881, 2194913, 2194945, 2194977]), new Uint32Array([2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569]), new Uint32Array([2222818, 2222882, 2222946, 2223010, 2223074, 2223138, 2223202, 2223266, 2223330, 2223394, 2223458, 2223522, 2223586, 2223650, 2223714, 2223778]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672]), new Uint32Array([0, 2179553, 2179585, 2179617, 2179649, 2144001, 2179681, 2179713, 2179745, 2179777, 2179809, 2156705, 2179841, 2156833, 2179873, 2179905]), new Uint32Array([6291456, 23068672, 6291456, 2145602, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 6291456, 0, 0]), new Uint32Array([2196513, 2196545, 2196577, 2196609, 2196641, 2196673, 2196705, 2196737, 2196769, 2196801, 2196833, 2196865, 2196897, 2196929, 2196961, 2196993]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2177281, 6291456, 2177313, 6291456, 2177345, 6291456, 2177377, 6291456, 2177409, 6291456, 2177441, 6291456, 2177473, 6291456, 2177505, 6291456]), new Uint32Array([2187137, 2221473, 2221505, 2221537, 2221569, 6291456, 6291456, 10610209, 10610241, 10537986, 10537986, 10537986, 10537986, 10609857, 10609857, 10609857]), new Uint32Array([2243009, 2243041, 2216033, 2243074, 2243137, 2243169, 2243201, 2219617, 2243233, 2243265, 2243297, 2243329, 2243362, 2243425, 2243457, 2243489]), new Uint32Array([10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 2097152, 4194304, 4194304, 0, 0]), new Uint32Array([2143042, 6291456, 2143106, 2143106, 2168833, 6291456, 2168865, 6291456, 6291456, 2168897, 6291456, 2168929, 6291456, 2168961, 6291456, 2143170]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2204193, 2204225, 2204257, 2204289, 2204321, 2204353, 2204385, 2204417, 2204449, 2204481, 2204513, 2204545, 2204577, 2204609, 2204641, 2204673]), new Uint32Array([2202753, 6291456, 2202785, 6291456, 2202817, 6291456, 2202849, 6291456, 2202881, 6291456, 2202913, 6291456, 2202945, 6291456, 2202977, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321]), new Uint32Array([2147394, 2147458, 2147522, 2147586, 2147650, 2147714, 2147778, 2147842, 2147394, 2147458, 2147522, 2147586, 2147650, 2147714, 2147778, 2147842]), new Uint32Array([2253313, 2253346, 2253409, 2253441, 2253473, 2253505, 2253537, 2253569, 2253601, 2253634, 2219393, 2253697, 2253729, 2253761, 2253793, 2253825]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([2162562, 2162626, 2131362, 2162690, 2159938, 2160002, 2162754, 2162818, 2160130, 2162882, 2160194, 2160258, 2160834, 2160898, 2161026, 2161090]), new Uint32Array([2175361, 2175393, 2175425, 2175457, 2175489, 2175521, 2175553, 2175585, 2175617, 2175649, 2175681, 2175713, 2175745, 2175777, 2175809, 2175841]), new Uint32Array([2253858, 2253921, 2253954, 2254018, 2254082, 2196737, 2254145, 2196865, 2254177, 2254209, 2254241, 2254273, 2197025, 2254306, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2202113, 2204129, 2188705, 2204161]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([2173985, 2174017, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113, 2173985, 2173953]), new Uint32Array([2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209]), new Uint32Array([2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 0, 2108417, 0, 2111713, 2100897, 2111905]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2175425, 2175489, 2175809, 2175905, 2175937, 2175937, 2176193, 2176417, 2180865, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 2143298, 2143298, 2143298, 2143362, 2143362, 2143362, 2143426, 2143426, 2143426, 2171105, 6291456, 2171137]), new Uint32Array([2120162, 2120258, 2151618, 2151682, 2151746, 2151810, 2151874, 2151938, 2152002, 2120035, 2120131, 2120227, 2152066, 2120323, 2152130, 2120419]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2195361, 2142433, 2236065, 2236097, 2236129, 2236161, 2118241, 2117473, 2236193, 2236225, 2236257, 2236289, 0, 0, 0, 0]), new Uint32Array([2189281, 6291456, 2189313, 6291456, 2189345, 6291456, 2189377, 6291456, 2189409, 6291456, 2189441, 6291456, 2189473, 6291456, 2189505, 6291456]), new Uint32Array([6291456, 6291456, 2145922, 6291456, 6291456, 6291456, 6291456, 2145986, 6291456, 6291456, 6291456, 6291456, 2146050, 6291456, 6291456, 6291456]), new Uint32Array([2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 10502113, 10562017, 10610401, 10502177, 10610433, 10538049]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 2186401, 0, 2186433, 0, 2186465, 0, 2186497]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 23068672, 23068672, 23068672]), new Uint32Array([0, 0, 2198241, 2198273, 2198305, 2198337, 2198369, 2198401, 0, 0, 2198433, 2198465, 2198497, 0, 0, 0]), new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]), new Uint32Array([0, 2105921, 2097729, 0, 2097377, 0, 0, 2106017, 2133281, 2097505, 2105889, 0, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([2197889, 2197921, 2197953, 2197985, 2198017, 2198049, 2198081, 2198113, 2198145, 2198177, 2198209, 2198241, 2198273, 2198305, 2198337, 2198369]), new Uint32Array([2132514, 2132610, 2160386, 2133090, 2133186, 2160450, 2160514, 2133282, 2160578, 2133570, 2106178, 2160642, 2133858, 2160706, 2160770, 2134146]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 23068672, 23068672, 6291456, 23068672, 23068672, 6291456, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2184737, 6291456, 2184769, 6291456, 2184801, 6291456, 2184833, 6291456, 2184865, 6291456, 2184897, 6291456, 2184929, 6291456, 2184961, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 6291456]), new Uint32Array([6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 2186753, 6291456, 6291456, 6291456, 6291456, 2186785, 2186817, 2186849, 2173569, 2186881, 10496355, 10495395, 10575521]), new Uint32Array([0, 0, 2097729, 0, 0, 0, 0, 2106017, 0, 2097505, 0, 2097185, 0, 2135777, 2097633, 2097441]), new Uint32Array([2189537, 6291456, 2189569, 6291456, 2189601, 6291456, 2189633, 6291456, 2189665, 6291456, 2189697, 6291456, 2189729, 6291456, 2189761, 6291456]), new Uint32Array([2202497, 6291456, 2202529, 6291456, 2202561, 6291456, 2202593, 6291456, 2202625, 6291456, 2202657, 6291456, 2202689, 6291456, 2202721, 6291456]), new Uint32Array([2245217, 2218369, 2245249, 2245282, 2245345, 2245377, 2245410, 2245474, 2245537, 2245569, 2245601, 2245633, 2245665, 2245665, 2245697, 2245729]), new Uint32Array([6291456, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 23068672, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]), new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2097281, 2105921, 2097729, 2106081, 2097377, 2097601, 2162337, 2106017, 2133281, 2097505, 0, 2097185, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([2176641, 6291456, 2176673, 6291456, 2176705, 6291456, 2176737, 6291456, 2176769, 6291456, 2176801, 6291456, 2176833, 6291456, 2176865, 6291456]), new Uint32Array([2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113, 2173985, 2173953, 2174369, 2174369, 0, 0, 2100833, 2100737]), new Uint32Array([2116513, 2190817, 2190849, 2190881, 2190913, 2190945, 2116609, 2190977, 2191009, 2191041, 2191073, 2117185, 2191105, 2191137, 2191169, 2191201]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456]), new Uint32Array([2167617, 2167649, 2167681, 2167713, 2167745, 2167777, 2167809, 6291456, 2167841, 2167873, 2167905, 2167937, 2167969, 2168001, 2168033, 4240130]), new Uint32Array([2165122, 2163970, 2164034, 2164098, 2164162, 2164226, 2164290, 2164354, 2164418, 2164482, 2164546, 2133122, 2134562, 2132162, 2132834, 2136866]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2186209, 2186241, 2186273, 2186305, 2186337, 2186369, 0, 0]), new Uint32Array([2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 14680064, 14680064, 14680064, 14680064, 14680064]), new Uint32Array([0, 0, 23068672, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]), new Uint32Array([0, 10537921, 10610689, 10610273, 10610497, 10610529, 10610305, 10610721, 10489601, 10489697, 10610337, 10575617, 10554529, 2221761, 2197217, 10496577]), new Uint32Array([2105473, 2105569, 2105601, 2112289, 0, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441]), new Uint32Array([2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481]), new Uint32Array([2125346, 2153410, 2153474, 2127394, 2153538, 2153602, 2153666, 2153730, 2105507, 2105476, 2153794, 2153858, 2153922, 2153986, 2154050, 2105794]), new Uint32Array([2200449, 2119681, 2200481, 2153313, 2199873, 2199905, 2199937, 2200513, 2200545, 2200577, 2200609, 2119105, 2119201, 2119297, 2119393, 2119489]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2175777, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2222273, 2197217, 2221473, 2221505, 2221089, 2222305, 2200865, 2099681, 2104481, 2222337, 2099905, 2120737, 2222369, 2103713, 2100225, 2098785]), new Uint32Array([2201377, 6291456, 2201409, 6291456, 2201441, 6291456, 2201473, 6291456, 2201505, 6291456, 2201537, 6291456, 2201569, 6291456, 6291456, 23068672]), new Uint32Array([2174081, 2174113, 2174145, 2174177, 2149057, 2233057, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793]), new Uint32Array([2200897, 6291456, 2200929, 6291456, 2200961, 6291456, 2200993, 6291456, 2201025, 6291456, 2180865, 6291456, 2201057, 6291456, 2201089, 6291456]), new Uint32Array([0, 0, 0, 0, 0, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]), new Uint32Array([2161154, 2161410, 2138658, 2161474, 2161538, 2097666, 2097186, 2097474, 2162946, 2132450, 2163010, 2163074, 2136162, 2163138, 2161666, 2161730]), new Uint32Array([2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953]), new Uint32Array([0, 0, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 0, 0, 2145410, 2145474, 0, 6291456]), new Uint32Array([2244161, 2216065, 2212769, 2244193, 2244225, 2244257, 2244290, 2244353, 2244385, 2244417, 2244449, 2218273, 2244481, 2244514, 2244577, 2244609]), new Uint32Array([2125730, 2125699, 2125795, 2125891, 2125987, 2154114, 2154178, 2154242, 2154306, 2154370, 2154434, 2154498, 2126082, 2126178, 2126274, 2126083]), new Uint32Array([2237665, 2237697, 2237697, 2237697, 2237730, 2237793, 2237825, 2237857, 2237890, 2237953, 2237985, 2238017, 2238049, 2238081, 2238113, 2238145]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2150146, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([2214369, 2238593, 2238625, 2238657, 2238689, 2238721, 2238753, 2238785, 2238817, 2238850, 2238913, 2238945, 2238977, 2235457, 2239009, 2239041]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([2252066, 2252130, 2252193, 2252225, 2252257, 2252290, 2252353, 2252385, 2252417, 2252449, 2252481, 2252513, 2252545, 2252578, 2252641, 2252673]), new Uint32Array([2197697, 2114113, 2114209, 2197729, 2197761, 2114305, 2197793, 2114401, 2114497, 2197825, 2114593, 2114689, 2114785, 2114881, 2114977, 2197857]), new Uint32Array([2224866, 2224930, 2224994, 2225058, 2225122, 2225186, 2225250, 2225314, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2219490, 2219554, 2219617, 2219649, 2219681, 2219714, 2219778, 2219842, 2219905, 2219937, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]), new Uint32Array([2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289]), new Uint32Array([2174081, 2174113, 2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113, 2173985, 2173953, 2148481, 2173601, 2173633, 2173665]), new Uint32Array([2220161, 2220161, 2220193, 2220193, 2220193, 2220193, 2220225, 2220225, 2220225, 2220225, 2220257, 2220257, 2220257, 2220257, 2220289, 2220289]), new Uint32Array([2192673, 2192705, 2192737, 2192769, 2192801, 2192833, 2192865, 2118049, 2192897, 2117473, 2117761, 2192929, 2192961, 2192993, 2193025, 2193057]), new Uint32Array([2179297, 6291456, 2179329, 6291456, 2179361, 6291456, 2179393, 6291456, 2179425, 6291456, 2179457, 6291456, 2179489, 6291456, 2179521, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2235745, 2235777, 2193633, 2235809, 2235841, 2235873, 2235905, 2235937, 2235969, 2116513, 2116705, 2236001, 2200513, 2199905, 2200545, 2236033]), new Uint32Array([2113153, 2108481, 2113345, 2113441, 2232993, 2233025, 0, 0, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761]), new Uint32Array([2170593, 6291456, 2170625, 6291456, 2170657, 6291456, 2170689, 2170721, 6291456, 2170753, 6291456, 6291456, 2170785, 6291456, 2170817, 2170849]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2166786, 2166850, 0, 0, 0, 0]), new Uint32Array([23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 10575617, 2187041, 10502177, 10489601, 10489697, 0]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2134562, 2132162, 2132834, 2136866, 2136482, 2164610, 2164674, 2164738, 2164802, 2132802, 2132706, 2164866, 2132898, 2164930, 2164994, 2165058]), new Uint32Array([6291456, 6291456, 2098337, 2101441, 10531458, 2153473, 6291456, 6291456, 10531522, 2100737, 2108193, 6291456, 2106499, 2106595, 2106691, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2233122, 2233186, 2233250, 2233314, 2233378, 2233442, 2233506, 2233570, 2233634, 2233698, 2233762, 2233826, 2233890, 2233954, 2234018, 2234082]), new Uint32Array([23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2205217, 2205249, 2205281, 2205313, 2205345, 2205377, 2205409, 2205441, 2205473, 2205505, 2205537, 2205569, 2205601, 2205633, 2205665, 2205697]), new Uint32Array([6291456, 0, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]), new Uint32Array([2173601, 2173761, 2174081, 2173569, 2174241, 2174113, 2173953, 6291456, 2174305, 6291456, 2174337, 6291456, 2174369, 6291456, 2174401, 6291456]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([2152450, 2152514, 2099653, 2104452, 2099813, 2122243, 2099973, 2152578, 2122339, 2122435, 2122531, 2122627, 2122723, 2104580, 2122819, 2152642]), new Uint32Array([2236385, 2236417, 2236449, 2236482, 2236545, 2215425, 2236577, 2236609, 2236641, 2236673, 2215457, 2236705, 2236737, 2236770, 2215489, 2236833]), new Uint32Array([2163394, 2159746, 2163458, 2131362, 2163522, 2160130, 2163778, 2132226, 2163842, 2132898, 2163906, 2161410, 2138658, 2097666, 2136162, 2163650]), new Uint32Array([2218721, 2246913, 2246946, 2216385, 2247010, 2247074, 2215009, 2247137, 2247169, 2216481, 2247201, 2247233, 2247266, 2247330, 2247330, 0]), new Uint32Array([2129730, 2129762, 2129858, 2129731, 2129827, 2156482, 2156482, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 0, 0, 0, 0, 6291456, 0, 0]), new Uint32Array([2203969, 2204001, 2181377, 2204033, 2204065, 6291456, 2204097, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2169473, 6291456, 2169505, 6291456, 2169537, 6291456, 2169569, 6291456, 2169601, 6291456, 2169633, 6291456, 2169665, 6291456, 2169697, 6291456]), new Uint32Array([2141542, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2220801, 2220801, 2220801, 2220801, 2220833, 2220833, 2220865, 2220865, 2220865, 2220865, 2220897, 2220897, 2220897, 2220897, 2139873, 2139873]), new Uint32Array([0, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 6291456, 0]), new Uint32Array([2214849, 2218433, 2218465, 2218497, 2218529, 2218561, 2214881, 2218593, 2218625, 2218657, 2218689, 2218721, 2218753, 2216545, 2218785, 2218817]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]), new Uint32Array([2136482, 2164610, 2164674, 2164738, 2164802, 2132802, 2132706, 2164866, 2132898, 2164930, 2164994, 2165058, 2165122, 2132802, 2132706, 2164866]), new Uint32Array([2207649, 2207681, 2207713, 2207745, 2207777, 2207809, 2207841, 2207873, 2207905, 2207937, 2207969, 2208001, 2208033, 2208065, 2208097, 2208129]), new Uint32Array([2123683, 2105092, 2152706, 2123779, 2105220, 2152770, 2100453, 2098755, 2123906, 2124002, 2124098, 2124194, 2124290, 2124386, 2124482, 2124578]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 0, 0, 0, 0, 0, 0, 0, 10485857]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([10508163, 10508259, 10508355, 10508451, 2200129, 2200161, 2192737, 2200193, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2203553, 6291456, 2203585, 6291456, 6291456, 6291456, 2203617, 6291456, 2203649, 6291456, 2203681, 6291456, 2203713, 6291456, 2203745, 6291456]), new Uint32Array([18884449, 18884065, 23068672, 18884417, 18884034, 18921185, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 18874368]), new Uint32Array([2247393, 2247426, 2247489, 2247521, 2247553, 2247586, 2247649, 2247681, 2247713, 2247745, 2247777, 2247810, 2247873, 2247905, 2247937, 2247969]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672]), new Uint32Array([2134145, 2097153, 2134241, 0, 2132705, 2130977, 2160065, 2131297, 0, 2133089, 2160577, 2133857, 2235297, 0, 2235329, 0]), new Uint32Array([2182593, 6291456, 2182625, 6291456, 2182657, 6291456, 2182689, 6291456, 2182721, 6291456, 2182753, 6291456, 2182785, 6291456, 2182817, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2102402, 2102403, 6291456, 2110050]), new Uint32Array([2149890, 2108323, 2149954, 6291456, 2113441, 6291456, 2149057, 6291456, 2113441, 6291456, 2105473, 2167265, 2111137, 2105505, 6291456, 2108353]), new Uint32Array([2219105, 2219137, 2195233, 2251554, 2251617, 2251649, 2251681, 2251713, 2251746, 2251810, 2251873, 2251905, 2251937, 2251970, 2252033, 2219169]), new Uint32Array([2203009, 6291456, 2203041, 6291456, 2203073, 6291456, 2203105, 6291456, 2203137, 6291456, 2203169, 6291456, 2203201, 6291456, 2203233, 6291456]), new Uint32Array([2128195, 2128291, 2128387, 2128483, 2128579, 2128675, 2128771, 2128867, 2128963, 2129059, 2129155, 2129251, 2129347, 2129443, 2129539, 2129635]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2140964, 2141156, 2140966, 2141158, 2141350]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2225378, 2225442, 2225506, 2225570, 2225634, 2225698, 2225762, 2225826, 2225890, 2225954, 2226018, 2226082, 2226146, 2226210, 2226274, 2226338]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417]), new Uint32Array([2108353, 2108417, 0, 2105601, 2108193, 2157121, 2157313, 2157377, 2157441, 2100897, 6291456, 2108419, 2173953, 2173633, 2173633, 2173953]), new Uint32Array([2111713, 2173121, 2111905, 2098177, 2173153, 2173185, 2173217, 2113153, 2113345, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 2190753]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2197249, 6291456, 2117377, 2197281, 2197313, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]), new Uint32Array([0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 23068672, 23068672]), new Uint32Array([2173281, 6291456, 2173313, 6291456, 2173345, 6291456, 2173377, 6291456, 0, 0, 10532546, 6291456, 6291456, 6291456, 10562017, 2173441]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0]), new Uint32Array([23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2159426, 2159490, 2159554, 2159362, 2159618, 2159682, 2139522, 2136450, 2159746, 2159810, 2159874, 2130978, 2131074, 2131266, 2131362, 2159938]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2203233, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2203265, 6291456, 2203297, 6291456, 2203329, 2203361, 6291456]), new Uint32Array([6291456, 6291456, 2148418, 2148482, 2148546, 0, 6291456, 2148610, 2186529, 2186561, 2148417, 2148545, 2148482, 10495778, 2143969, 10495778]), new Uint32Array([2134146, 2139426, 2160962, 2134242, 2161218, 2161282, 2161346, 2161410, 2138658, 2134722, 2134434, 2134818, 2097666, 2097346, 2097698, 2105986]), new Uint32Array([2198881, 2198913, 2198945, 2198977, 2199009, 2199041, 2199073, 2199105, 2199137, 2199169, 2199201, 2199233, 2199265, 2199297, 2199329, 2199361]), new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]), new Uint32Array([10610561, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193]), new Uint32Array([2183873, 6291456, 2183905, 6291456, 2183937, 6291456, 2183969, 6291456, 2184001, 6291456, 2184033, 6291456, 2184065, 6291456, 2184097, 6291456]), new Uint32Array([2244642, 2244706, 2244769, 2244801, 2218305, 2244833, 2244865, 2244897, 2244929, 2244961, 2244993, 2245026, 2245089, 2245122, 2245185, 0]), new Uint32Array([6291456, 6291456, 2116513, 2116609, 2116705, 2116801, 2199873, 2199905, 2199937, 2199969, 2190913, 2200001, 2200033, 2200065, 2200097, 2191009]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2180673, 2180705, 2180737, 2180769, 2180801, 2180833, 0, 0]), new Uint32Array([2098081, 2099521, 2099105, 2120705, 2098369, 2120801, 2103361, 2097985, 2098433, 2121377, 2121473, 2099169, 2099873, 2098401, 2099393, 2152609]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2150402]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2145666, 2145730, 6291456, 6291456]), new Uint32Array([2173921, 2173953, 2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233057, 2148481, 2173601, 2173633, 2173665]), new Uint32Array([2187073, 6291456, 6291456, 6291456, 6291456, 2098241, 2098241, 2108353, 2100897, 2111905, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2102404, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2100612, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10485857]), new Uint32Array([2149057, 2233057, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889]), new Uint32Array([2217697, 2217729, 2217761, 2217793, 2217825, 2217857, 2217889, 2217921, 2217953, 2215873, 2217985, 2215905, 2218017, 2218049, 2218081, 2218113]), new Uint32Array([2211233, 2218849, 2216673, 2218881, 2218913, 2218945, 2218977, 2219009, 2216833, 2219041, 2215137, 2219073, 2216865, 2209505, 2219105, 2216897]), new Uint32Array([2240097, 2240129, 2240161, 2240193, 2240225, 2240257, 2240289, 2240321, 2240353, 2240386, 2240449, 2240481, 2240513, 2240545, 2207905, 2240578]), new Uint32Array([6291456, 6291456, 2202273, 6291456, 2202305, 6291456, 2202337, 6291456, 2202369, 6291456, 2202401, 6291456, 2202433, 6291456, 2202465, 6291456]), new Uint32Array([0, 23068672, 23068672, 18923394, 23068672, 18923458, 18923522, 18884099, 18923586, 18884195, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2201121, 6291456, 2201153, 6291456, 2201185, 6291456, 2201217, 6291456, 2201249, 6291456, 2201281, 6291456, 2201313, 6291456, 2201345, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]), new Uint32Array([2211041, 2211073, 2211105, 2211137, 2211169, 2211201, 2211233, 2211265, 2211297, 2211329, 2211361, 2211393, 2211425, 2211457, 2211489, 2211521]), new Uint32Array([2181825, 6291456, 2181857, 6291456, 2181889, 6291456, 2181921, 6291456, 2181953, 6291456, 2181985, 6291456, 2182017, 6291456, 2182049, 6291456]), new Uint32Array([2162337, 2097633, 2097633, 2097633, 2097633, 2132705, 2132705, 2132705, 2132705, 2097153, 2097153, 2097153, 2097153, 2133089, 2133089, 2133089]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 2148545, 6291456, 2173473, 6291456, 2148865, 6291456, 2173505, 6291456, 2173537, 6291456, 2173569, 6291456, 2149121, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2174017, 2174017, 2174049, 2174081, 2174113]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2207137, 2207169, 2207201, 2207233, 2207265, 2207297, 2207329, 2207361, 2207393, 2207425, 2207457, 2207489, 2207521, 2207553, 2207585, 2207617]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0]), new Uint32Array([2198401, 2198433, 2198465, 2198497, 0, 2198529, 2198561, 2198593, 2198625, 2198657, 2198689, 2198721, 2198753, 2198785, 2198817, 2198849]), new Uint32Array([2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0, 0]), new Uint32Array([2216385, 2118721, 2216417, 2216449, 2216481, 2216513, 2216545, 2211233, 2216577, 2216609, 2216641, 2216673, 2216705, 2216737, 2216737, 2216769]), new Uint32Array([2216801, 2216833, 2216865, 2216897, 2216929, 2216961, 2216993, 2215169, 2217025, 2217057, 2217089, 2217121, 2217154, 2217217, 0, 0]), new Uint32Array([2210593, 2191809, 2210625, 2210657, 2210689, 2210721, 2210753, 2210785, 2210817, 2210849, 2191297, 2210881, 2210913, 2210945, 2210977, 2211009]), new Uint32Array([0, 0, 2105825, 0, 0, 2111905, 2105473, 0, 0, 2112289, 2108193, 2112481, 2112577, 0, 2098305, 2108321]), new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 2097153, 2134241, 0, 2132705, 0, 0, 2131297, 0, 2133089, 0, 2133857, 0, 2220769, 0, 2235361]), new Uint32Array([14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 6291456, 6291456, 14680064]), new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2171873, 6291456, 2171905, 6291456, 2171937, 6291456, 2171969, 6291456, 2172001, 6291456, 2172033, 6291456, 2172065, 6291456, 2172097, 6291456]), new Uint32Array([2220929, 2220929, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2133857, 2134145, 2134145, 2134145, 2134145, 2134241, 2134241, 2134241, 2134241, 2105889, 2105889, 2105889, 2105889, 2097185, 2097185, 2097185]), new Uint32Array([2173697, 2173761, 2173793, 2174113, 2173985, 2173953, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10499619, 10499715, 10499811, 10499907]), new Uint32Array([0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 2144322, 2144386, 2144450, 2144514, 2144578, 2144642, 2144706, 2144770]), new Uint32Array([23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 0, 2098241, 2108353, 2108417, 2105825, 0, 0, 2111905, 2105473, 2105569]), new Uint32Array([2236321, 2236353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2152194, 2121283, 2103684, 2103812, 2097986, 2098533, 2097990, 2098693, 2098595, 2098853, 2099013, 2103940, 2121379, 2121475, 2121571, 2104068]), new Uint32Array([2206241, 2206273, 2206305, 2206337, 2206369, 2206401, 2206433, 2206465, 2206497, 2206529, 2206561, 2206593, 2206625, 2206657, 2206689, 2206721]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 16777216, 16777216, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 23068672, 10538818, 10538882, 6291456, 6291456, 2150338]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2214369, 2214401, 2214433, 2214465, 2214497, 2214529, 2214561, 2214593, 2194977, 2214625, 2195073, 2214657, 2214689, 2214721, 6291456, 6291456]), new Uint32Array([2097152, 2097152, 2097152, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2182081, 6291456, 2182113, 6291456, 2182145, 6291456, 2182177, 6291456, 2182209, 6291456, 2182241, 6291456, 2182273, 6291456, 2182305, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2146881, 2146945, 2147009, 2147073, 2147137, 2147201, 2147265, 2147329]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 23068672, 23068672]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2122915, 2123011, 2123107, 2104708, 2123203, 2123299, 2123395, 2100133, 2104836, 2100290, 2100293, 2104962, 2104964, 2098052, 2123491, 2123587]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]), new Uint32Array([6291456, 2171169, 6291456, 2171201, 6291456, 2171233, 6291456, 2171265, 6291456, 2171297, 6291456, 2171329, 6291456, 6291456, 2171361, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 2148994, 2149058, 2149122, 0, 6291456, 2149186, 2186945, 2173537, 2148993, 2149121, 2149058, 10531458, 10496066, 0]), new Uint32Array([2195009, 2195041, 2195073, 2195105, 2195137, 2195169, 2195201, 2195233, 2195265, 2195297, 2195329, 2195361, 2195393, 2195425, 2195457, 2195489]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 6291456, 6291456]), new Uint32Array([2182849, 6291456, 2182881, 6291456, 2182913, 6291456, 2182945, 6291456, 2182977, 6291456, 2183009, 6291456, 2183041, 6291456, 2183073, 6291456]), new Uint32Array([2211553, 2210081, 2211585, 2211617, 2211649, 2211681, 2211713, 2211745, 2211777, 2211809, 2209569, 2211841, 2211873, 2211905, 2211937, 2211969]), new Uint32Array([2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2166594, 2127298, 2166658, 2142978, 2141827, 2166722]), new Uint32Array([2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233057, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2185761, 2185793, 2185825, 2185857, 2185889, 2185921, 0, 0]), new Uint32Array([6291456, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456]), new Uint32Array([0, 0, 0, 2220961, 2220961, 2220961, 2220961, 2144193, 2144193, 2159201, 2159201, 2159265, 2159265, 2144194, 2220993, 2220993]), new Uint32Array([2192641, 2235393, 2235425, 2152257, 2116609, 2235457, 2235489, 2200065, 2235521, 2235553, 2235585, 2212449, 2235617, 2235649, 2235681, 2235713]), new Uint32Array([2194049, 2194081, 2194113, 2194145, 2194177, 2194209, 2194241, 2194273, 2194305, 2194337, 2194369, 2194401, 2194433, 2194465, 2194497, 2194529]), new Uint32Array([2196673, 2208641, 2208673, 2208705, 2208737, 2208769, 2208801, 2208833, 2208865, 2208897, 2208929, 2208961, 2208993, 2209025, 2209057, 2209089]), new Uint32Array([2191681, 2191713, 2191745, 2191777, 2153281, 2191809, 2191841, 2191873, 2191905, 2191937, 2191969, 2192001, 2192033, 2192065, 2192097, 2192129]), new Uint32Array([2230946, 2231010, 2231074, 2231138, 2231202, 2231266, 2231330, 2231394, 2231458, 2231522, 2231586, 2231650, 2231714, 2231778, 2231842, 2231906]), new Uint32Array([14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2185953, 2185985, 2186017, 2186049, 2186081, 2186113, 2186145, 2186177]), new Uint32Array([2139811, 2139907, 2097284, 2105860, 2105988, 2106116, 2106244, 2097444, 2097604, 2097155, 10485778, 10486344, 2106372, 6291456, 0, 0]), new Uint32Array([2110051, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2172385, 6291456, 2172417, 6291456, 2172449, 6291456, 2172481, 6291456, 2172513, 6291456, 2172545, 6291456, 2172577, 6291456, 2172609, 6291456]), new Uint32Array([0, 0, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2249345, 2249377, 2249409, 2249441, 2249473, 2249505, 2249537, 2249570, 2210209, 2249633, 2249665, 2249697, 2249729, 2249761, 2249793, 2216769]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2187169, 2187201, 2187233, 2187265, 2187297, 2187329, 2187361, 2187393, 2187425, 2187457, 2187489, 2187521, 2187553, 2187585, 2187617, 2187649]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 0, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]), new Uint32Array([2182337, 6291456, 2182369, 6291456, 2182401, 6291456, 2182433, 6291456, 2182465, 6291456, 2182497, 6291456, 2182529, 6291456, 2182561, 6291456]), new Uint32Array([2138179, 2138275, 2138371, 2138467, 2134243, 2134435, 2138563, 2138659, 2138755, 2138851, 2138947, 2139043, 2138947, 2138755, 2139139, 2139235]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([0, 0, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2250498, 2250562, 2250625, 2250657, 2208321, 2250689, 2250721, 2250753, 2250785, 2250817, 2250849, 2218945, 2250881, 2250913, 2250945, 0]), new Uint32Array([2170369, 2105569, 2098305, 2108481, 2173249, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]), new Uint32Array([2100897, 2111905, 2105473, 2105569, 2105601, 0, 2108193, 0, 0, 0, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481]), new Uint32Array([2100897, 2100897, 2105569, 2105569, 6291456, 2112289, 2149826, 6291456, 6291456, 2112481, 2112577, 2098177, 2098177, 2098177, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 2169953, 2169985, 6291456, 2170017, 6291456, 2170049, 2170081, 6291456, 2170113, 2170145, 2170177, 6291456, 6291456, 2170209, 2170241]), new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2220641, 2220641, 2220673, 2220673, 2220673, 2220673, 2220705, 2220705, 2220705, 2220705, 2220737, 2220737, 2220737, 2220737, 2220769, 2220769]), new Uint32Array([2127650, 2127746, 2127842, 2127938, 2128034, 2128130, 2128226, 2128322, 2128418, 2127523, 2127619, 2127715, 2127811, 2127907, 2128003, 2128099]), new Uint32Array([2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177]), new Uint32Array([0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2204705, 2204737, 2204769, 2204801, 2204833, 2204865, 2204897, 2204929, 2204961, 2204993, 2205025, 2205057, 2205089, 2205121, 2205153, 2205185]), new Uint32Array([2176385, 6291456, 2176417, 6291456, 2176449, 6291456, 2176481, 6291456, 2176513, 6291456, 2176545, 6291456, 2176577, 6291456, 2176609, 6291456]), new Uint32Array([2195521, 2195553, 2195585, 2195617, 2195649, 2195681, 2117857, 2195713, 2195745, 2195777, 2195809, 2195841, 2195873, 2195905, 2195937, 2195969]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456]), new Uint32Array([2173921, 2173953, 2173985, 2174017, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113]), new Uint32Array([2131586, 2132450, 2135970, 2135778, 2161602, 2136162, 2163650, 2161794, 2135586, 2163714, 2137186, 2131810, 2160290, 2135170, 2097506, 2159554]), new Uint32Array([2134145, 2097153, 2134241, 2105953, 2132705, 2130977, 2160065, 2131297, 2162049, 2133089, 2160577, 2133857, 0, 0, 0, 0]), new Uint32Array([2116513, 2116609, 2116705, 2116801, 2116897, 2116993, 2117089, 2117185, 2117281, 2117377, 2117473, 2117569, 2117665, 2117761, 2117857, 2117953]), new Uint32Array([2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100802, 2101154, 2101282, 2101410, 2101538, 2101666, 2101794]), new Uint32Array([2100289, 2098657, 2098049, 2200737, 2123489, 2123681, 2200769, 2098625, 2100321, 2098145, 2100449, 2098017, 2098753, 2098977, 2150241, 2150305]), new Uint32Array([6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 2109955, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 0, 0]), new Uint32Array([2130979, 2131075, 2131075, 2131171, 2131267, 2131363, 2131459, 2131555, 2131651, 2131651, 2131747, 2131843, 2131939, 2132035, 2132131, 2132227]), new Uint32Array([0, 2177793, 6291456, 2177825, 6291456, 2177857, 6291456, 2177889, 6291456, 2177921, 6291456, 2177953, 6291456, 2177985, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2113345, 0, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289]), new Uint32Array([2136643, 2136739, 2136835, 2136931, 2137027, 2137123, 2137219, 2137315, 2137411, 2137507, 2137603, 2137699, 2137795, 2137891, 2137987, 2138083]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([2174433, 6291456, 2174465, 6291456, 2174497, 6291456, 2174529, 6291456, 2174561, 6291456, 2174593, 6291456, 2174625, 6291456, 2174657, 6291456]), new Uint32Array([0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441]), new Uint32Array([10496547, 10496643, 2105505, 2149698, 6291456, 10496739, 10496835, 2170273, 6291456, 2149762, 2105825, 2111713, 2111713, 2111713, 2111713, 2168673]), new Uint32Array([6291456, 2143490, 2143490, 2143490, 2171649, 6291456, 2171681, 2171713, 2171745, 6291456, 2171777, 6291456, 2171809, 6291456, 2171841, 6291456]), new Uint32Array([2159106, 2159106, 2159170, 2159170, 2159234, 2159234, 2159298, 2159298, 2159298, 2159362, 2159362, 2159362, 2106401, 2106401, 2106401, 2106401]), new Uint32Array([2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137]), new Uint32Array([2108417, 2181217, 2181249, 2181281, 2170433, 2170401, 2181313, 2181345, 2181377, 2181409, 2181441, 2181473, 2181505, 2181537, 2170529, 2181569]), new Uint32Array([2218433, 2245761, 2245793, 2245825, 2245857, 2245890, 2245953, 2245986, 2209665, 2246050, 2246113, 2246146, 2246210, 2246274, 2246337, 2246369]), new Uint32Array([2230754, 2230818, 2230882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2184129, 6291456, 2184161, 6291456, 2184193, 6291456, 6291456, 6291456, 6291456, 6291456, 2146818, 2183361, 6291456, 6291456, 2142978, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2135170, 2097506, 2130691, 2130787, 2130883, 2163970, 2164034, 2164098, 2164162, 2164226, 2164290, 2164354, 2164418, 2164482, 2164546, 2133122]), new Uint32Array([2108515, 2108611, 2100740, 2108707, 2108803, 2108899, 2108995, 2109091, 2109187, 2109283, 2109379, 2109475, 2109571, 2109667, 2109763, 2100738]), new Uint32Array([2102788, 2102916, 2103044, 2120515, 2103172, 2120611, 2120707, 2098373, 2103300, 2120803, 2120899, 2120995, 2103428, 2103556, 2121091, 2121187]), new Uint32Array([2158082, 2158146, 0, 2158210, 2158274, 0, 2158338, 2158402, 2158466, 2129922, 2158530, 2158594, 2158658, 2158722, 2158786, 2158850]), new Uint32Array([10499619, 10499715, 10499811, 10499907, 10500003, 10500099, 10500195, 10500291, 10500387, 10500483, 10500579, 10500675, 10500771, 10500867, 10500963, 10501059]), new Uint32Array([2239585, 2239618, 2239681, 2239713, 0, 2191969, 2239745, 2239777, 2192033, 2239809, 2239841, 2239874, 2239937, 2239970, 2240033, 2240065]), new Uint32Array([2252705, 2252738, 2252801, 2252833, 2252865, 2252897, 2252930, 2252994, 2253057, 2253089, 2253121, 2253154, 2253217, 2253250, 2219361, 2219361]), new Uint32Array([2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10538050, 10538114, 10538178, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2226402, 2226466, 2226530, 2226594, 2226658, 2226722, 2226786, 2226850, 2226914, 2226978, 2227042, 2227106, 2227170, 2227234, 2227298, 2227362]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 2144066, 2144130, 2144194, 2144258, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2124674, 2124770, 2123875, 2123971, 2124067, 2124163, 2124259, 2124355, 2124451, 2124547, 2124643, 2124739, 2124835, 2124931, 2125027, 2125123]), new Uint32Array([2168065, 6291456, 2168097, 6291456, 2168129, 6291456, 2168161, 6291456, 2168193, 6291456, 2168225, 6291456, 2168257, 6291456, 2168289, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0]), new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 2100610, 2100611, 6291456, 2107842, 2107843, 6291456, 6291456, 6291456, 6291456, 10537922, 6291456, 10537986, 6291456]), new Uint32Array([2174849, 2174881, 2174913, 2174945, 2174977, 2175009, 2175041, 2175073, 2175105, 2175137, 2175169, 2175201, 2175233, 2175265, 2175297, 2175329]), new Uint32Array([2154562, 2154626, 2154690, 2154754, 2141858, 2154818, 2154882, 2127298, 2154946, 2127298, 2155010, 2155074, 2155138, 2155202, 2155266, 2155202]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0]), new Uint32Array([2200641, 2150786, 2150850, 2150914, 2150978, 2151042, 2106562, 2151106, 2150562, 2151170, 2151234, 2151298, 2151362, 2151426, 2151490, 2151554]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456]), new Uint32Array([2220289, 2220289, 2220321, 2220321, 2220321, 2220321, 2220353, 2220353, 2220353, 2220353, 2220385, 2220385, 2220385, 2220385, 2220417, 2220417]), new Uint32Array([2155330, 2155394, 0, 2155458, 2155522, 2155586, 2105732, 0, 2155650, 2155714, 2155778, 2125314, 2155842, 2155906, 2126274, 2155970]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0]), new Uint32Array([2097729, 2106017, 2106017, 2106017, 2106017, 2131297, 2131297, 2131297, 2131297, 2106081, 2106081, 2162049, 2162049, 2105953, 2105953, 2162337]), new Uint32Array([2097185, 2097697, 2097697, 2097697, 2097697, 2135777, 2135777, 2135777, 2135777, 2097377, 2097377, 2097377, 2097377, 2097601, 2097601, 2097217]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672]), new Uint32Array([2139331, 2139427, 2139523, 2139043, 2133571, 2132611, 2139619, 2139715, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2174113, 2174145, 2100897, 2098177, 2108289, 2100865, 2173601, 2173633, 2173985, 2174113, 2174145, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 18923778, 23068672, 23068672, 23068672, 23068672, 18923842, 23068672, 23068672, 23068672, 23068672, 18923906, 23068672, 23068672, 23068672]), new Uint32Array([2134145, 2097153, 2134241, 0, 2132705, 2130977, 2160065, 2131297, 0, 2133089, 0, 2133857, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2177537, 6291456, 2177569, 6291456, 2177601, 6291456, 2177633, 6291456, 2177665, 6291456, 2177697, 6291456, 2177729, 6291456, 2177761, 6291456]), new Uint32Array([2212481, 2212513, 2212545, 2212577, 2197121, 2212609, 2212641, 2212673, 2212705, 2212737, 2212769, 2212801, 2212833, 2212865, 2212897, 2212929]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2098241, 2108353, 2170209, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 6291456, 2108193, 2172417, 2112481, 2098177]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456])], t = new Uint16Array([616, 616, 565, 147, 161, 411, 330, 2, 131, 131, 328, 454, 241, 408, 86, 86, 696, 113, 285, 350, 325, 301, 473, 214, 639, 232, 447, 64, 369, 598, 124, 672, 567, 223, 621, 154, 107, 86, 86, 86, 86, 86, 86, 505, 86, 68, 634, 86, 218, 218, 218, 218, 486, 218, 218, 513, 188, 608, 216, 86, 217, 463, 668, 85, 700, 360, 184, 86, 86, 86, 647, 402, 153, 10, 346, 718, 662, 260, 145, 298, 117, 1, 443, 342, 138, 54, 563, 86, 240, 572, 218, 70, 387, 86, 118, 460, 641, 602, 86, 86, 306, 218, 86, 692, 86, 86, 86, 86, 86, 162, 707, 86, 458, 26, 86, 218, 638, 86, 86, 86, 86, 86, 65, 449, 86, 86, 306, 183, 86, 58, 391, 667, 86, 157, 131, 131, 131, 131, 86, 433, 131, 406, 31, 218, 247, 86, 86, 693, 218, 581, 351, 86, 438, 295, 69, 462, 45, 126, 173, 650, 14, 295, 69, 97, 168, 187, 641, 78, 523, 390, 69, 108, 287, 664, 173, 219, 83, 295, 69, 108, 431, 426, 173, 694, 412, 115, 628, 52, 257, 398, 641, 118, 501, 121, 69, 579, 151, 423, 173, 620, 464, 121, 69, 382, 151, 476, 173, 27, 53, 121, 86, 594, 578, 226, 173, 86, 632, 130, 86, 96, 228, 268, 641, 622, 563, 86, 86, 21, 148, 650, 131, 131, 321, 43, 144, 343, 381, 531, 131, 131, 178, 20, 86, 399, 156, 375, 164, 541, 30, 60, 715, 198, 92, 118, 131, 131, 86, 86, 306, 407, 86, 280, 457, 196, 488, 358, 131, 131, 244, 86, 86, 143, 86, 86, 86, 86, 86, 667, 563, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 336, 363, 86, 86, 336, 86, 86, 380, 678, 67, 86, 86, 86, 678, 86, 86, 86, 512, 86, 307, 86, 708, 86, 86, 86, 86, 86, 528, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 563, 307, 86, 86, 86, 86, 86, 104, 450, 337, 86, 720, 86, 32, 450, 397, 86, 86, 86, 587, 218, 558, 708, 708, 293, 708, 86, 86, 86, 86, 86, 694, 205, 86, 8, 86, 86, 86, 86, 549, 86, 667, 697, 697, 679, 86, 458, 460, 86, 86, 650, 86, 708, 543, 86, 86, 86, 245, 86, 86, 86, 140, 218, 127, 708, 708, 458, 197, 131, 131, 131, 131, 500, 86, 86, 483, 251, 86, 306, 510, 515, 86, 722, 86, 86, 86, 65, 201, 86, 86, 483, 580, 470, 86, 86, 86, 368, 131, 131, 131, 694, 114, 110, 555, 86, 86, 123, 721, 163, 142, 713, 418, 86, 317, 675, 209, 218, 218, 218, 371, 545, 592, 629, 490, 603, 199, 46, 320, 525, 680, 310, 279, 388, 111, 42, 252, 593, 607, 235, 617, 410, 377, 50, 548, 135, 356, 17, 520, 189, 116, 392, 600, 349, 332, 482, 699, 690, 535, 119, 106, 451, 71, 152, 667, 131, 218, 218, 265, 671, 637, 492, 504, 533, 683, 269, 269, 658, 86, 86, 86, 86, 86, 86, 86, 86, 86, 491, 619, 86, 86, 6, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 229, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 667, 86, 86, 171, 131, 118, 131, 656, 206, 234, 571, 89, 334, 670, 246, 311, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 534, 86, 86, 86, 86, 86, 86, 82, 86, 86, 86, 86, 86, 430, 86, 86, 86, 86, 86, 86, 86, 86, 86, 599, 86, 324, 86, 470, 69, 640, 264, 131, 626, 101, 174, 86, 86, 667, 233, 105, 73, 374, 394, 221, 204, 84, 28, 326, 86, 86, 471, 86, 86, 86, 109, 573, 86, 171, 200, 200, 200, 200, 218, 218, 86, 86, 86, 86, 460, 131, 131, 131, 86, 506, 86, 86, 86, 86, 86, 220, 404, 34, 614, 47, 442, 305, 25, 612, 338, 601, 648, 7, 344, 255, 131, 131, 51, 86, 312, 507, 563, 86, 86, 86, 86, 588, 86, 86, 86, 86, 86, 530, 511, 86, 458, 3, 435, 384, 556, 522, 230, 527, 86, 118, 86, 86, 717, 86, 137, 273, 79, 181, 484, 23, 93, 112, 655, 249, 417, 703, 370, 87, 98, 313, 684, 585, 155, 465, 596, 481, 695, 18, 416, 428, 61, 701, 706, 282, 643, 495, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 549, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 549, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 307, 86, 86, 86, 171, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 650, 131, 422, 542, 420, 263, 24, 172, 86, 86, 86, 86, 86, 566, 86, 86, 132, 540, 395, 353, 494, 519, 19, 485, 284, 472, 131, 131, 131, 16, 714, 86, 211, 708, 86, 86, 86, 694, 698, 86, 86, 483, 704, 708, 218, 272, 86, 86, 120, 86, 159, 478, 86, 307, 247, 86, 86, 663, 597, 459, 627, 667, 86, 86, 277, 455, 39, 302, 86, 250, 86, 86, 86, 271, 99, 452, 306, 281, 329, 400, 200, 86, 86, 362, 549, 352, 646, 461, 323, 586, 86, 86, 4, 708, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 717, 86, 518, 86, 86, 650, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 125, 554, 480, 300, 613, 72, 333, 288, 561, 544, 604, 48, 719, 91, 169, 176, 590, 224, 76, 191, 29, 559, 560, 231, 537, 166, 477, 538, 256, 437, 131, 131, 469, 167, 40, 0, 685, 266, 441, 705, 239, 642, 475, 568, 640, 610, 299, 673, 517, 318, 385, 22, 202, 180, 179, 359, 424, 215, 90, 66, 521, 653, 467, 682, 453, 409, 479, 88, 131, 661, 35, 303, 15, 262, 666, 630, 712, 131, 131, 618, 659, 175, 218, 195, 347, 193, 227, 261, 150, 165, 709, 546, 294, 569, 710, 270, 413, 376, 524, 55, 242, 38, 419, 529, 170, 657, 3, 304, 122, 379, 278, 131, 651, 86, 67, 576, 458, 458, 131, 131, 86, 86, 86, 86, 86, 86, 86, 118, 309, 86, 86, 547, 86, 86, 86, 86, 667, 650, 664, 131, 131, 86, 86, 56, 131, 131, 131, 131, 131, 131, 131, 131, 86, 307, 86, 86, 86, 664, 238, 650, 86, 86, 717, 86, 118, 86, 86, 315, 86, 59, 86, 86, 574, 549, 131, 131, 340, 57, 436, 86, 86, 86, 86, 86, 86, 458, 708, 499, 691, 62, 86, 650, 86, 86, 694, 86, 86, 86, 319, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 171, 86, 549, 694, 131, 131, 131, 131, 131, 131, 131, 131, 131, 77, 86, 86, 139, 86, 502, 86, 86, 86, 667, 595, 131, 131, 131, 86, 12, 86, 13, 86, 609, 131, 131, 131, 131, 86, 86, 86, 625, 86, 669, 86, 86, 182, 129, 86, 5, 694, 104, 86, 86, 86, 86, 131, 131, 86, 86, 386, 171, 86, 86, 86, 345, 86, 324, 86, 589, 86, 213, 36, 131, 131, 131, 131, 131, 86, 86, 86, 86, 104, 131, 131, 131, 141, 290, 80, 677, 86, 86, 86, 267, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 667, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 515, 86, 86, 33, 136, 669, 86, 711, 515, 86, 86, 550, 640, 86, 104, 708, 515, 86, 159, 372, 717, 86, 86, 444, 515, 86, 86, 663, 37, 86, 563, 460, 86, 390, 624, 702, 131, 131, 131, 131, 389, 59, 708, 86, 86, 341, 208, 708, 635, 295, 69, 108, 431, 508, 100, 190, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 649, 516, 660, 131, 131, 86, 86, 86, 218, 631, 708, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 341, 575, 238, 514, 131, 131, 86, 86, 86, 218, 291, 708, 307, 131, 86, 86, 306, 367, 708, 131, 131, 131, 86, 378, 697, 86, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 615, 253, 86, 86, 86, 292, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 104, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 69, 86, 341, 553, 549, 86, 307, 86, 86, 645, 275, 455, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 708, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 667, 460, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 717, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 667, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 171, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 104, 86, 667, 459, 131, 131, 131, 131, 131, 131, 86, 458, 225, 86, 86, 86, 516, 549, 11, 390, 405, 86, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 460, 44, 218, 197, 711, 515, 131, 131, 131, 131, 664, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 307, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 308, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 640, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 118, 307, 104, 286, 591, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 549, 86, 86, 681, 86, 86, 75, 185, 314, 582, 86, 358, 496, 474, 86, 104, 131, 86, 86, 86, 86, 146, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 171, 86, 640, 131, 131, 131, 131, 131, 131, 131, 131, 246, 503, 689, 339, 674, 81, 258, 415, 439, 128, 562, 366, 414, 246, 503, 689, 583, 222, 557, 316, 636, 665, 186, 355, 95, 670, 246, 503, 689, 339, 674, 557, 258, 415, 439, 186, 355, 95, 670, 246, 503, 689, 446, 644, 536, 652, 331, 532, 335, 440, 274, 421, 297, 570, 74, 425, 364, 425, 606, 552, 403, 509, 134, 365, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 218, 218, 218, 498, 218, 218, 577, 627, 551, 497, 572, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 553, 354, 236, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 296, 455, 131, 131, 456, 243, 103, 86, 41, 459, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 9, 276, 158, 716, 393, 564, 383, 489, 401, 654, 210, 654, 131, 131, 131, 640, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 650, 86, 86, 86, 86, 86, 86, 717, 667, 563, 563, 563, 86, 549, 102, 686, 133, 246, 605, 86, 448, 86, 86, 207, 307, 131, 131, 131, 641, 86, 177, 611, 445, 373, 194, 584, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 308, 307, 171, 86, 86, 86, 86, 86, 86, 86, 717, 86, 86, 86, 86, 86, 460, 131, 131, 650, 86, 86, 86, 694, 708, 86, 86, 694, 86, 458, 131, 131, 131, 131, 131, 131, 667, 694, 289, 650, 667, 131, 131, 86, 640, 131, 131, 664, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 171, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 460, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 458, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 640, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 466, 203, 149, 429, 94, 432, 160, 687, 539, 63, 237, 283, 192, 248, 348, 259, 427, 526, 396, 676, 254, 468, 487, 212, 327, 623, 49, 633, 322, 493, 434, 688, 357, 361, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131]), {
              mapStr: "صلى الله عليه وسلمجل جلالهキロメートルrad∕s2エスクードキログラムキロワットグラムトンクルゼイロサンチームパーセントピアストルファラッドブッシェルヘクタールマンションミリバールレントゲン′′′′1⁄10viii(10)(11)(12)(13)(14)(15)(16)(17)(18)(19)(20)∫∫∫∫(오전)(오후)アパートアルファアンペアイニングエーカーカラットカロリーキュリーギルダークローネサイクルシリングバーレルフィートポイントマイクロミクロンメガトンリットルルーブル株式会社kcalm∕s2c∕kgاكبرمحمدصلعمرسولریال1⁄41⁄23⁄4 ̈́ྲཱྀླཱྀ ̈͂ ̓̀ ̓́ ̓͂ ̔̀ ̔́ ̔͂ ̈̀‵‵‵a/ca/sc/oc/utelfax1⁄71⁄91⁄32⁄31⁄52⁄53⁄54⁄51⁄65⁄61⁄83⁄85⁄87⁄8xii0⁄3∮∮∮(1)(2)(3)(4)(5)(6)(7)(8)(9)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)::====(ᄀ)(ᄂ)(ᄃ)(ᄅ)(ᄆ)(ᄇ)(ᄉ)(ᄋ)(ᄌ)(ᄎ)(ᄏ)(ᄐ)(ᄑ)(ᄒ)(가)(나)(다)(라)(마)(바)(사)(아)(자)(차)(카)(타)(파)(하)(주)(一)(二)(三)(四)(五)(六)(七)(八)(九)(十)(月)(火)(水)(木)(金)(土)(日)(株)(有)(社)(名)(特)(財)(祝)(労)(代)(呼)(学)(監)(企)(資)(協)(祭)(休)(自)(至)pte10月11月12月ergltdアールインチウォンオンスオームカイリガロンガンマギニーケースコルナコーポセンチダースノットハイツパーツピクルフランペニヒヘルツペンスページベータボルトポンドホールホーンマイルマッハマルクヤードヤールユアンルピー10点11点12点13点14点15点16点17点18点19点20点21点22点23点24点hpabardm2dm3khzmhzghzthzmm2cm2km2mm3cm3km3kpampagpalogmilmolppmv∕ma∕m10日11日12日13日14日15日16日17日18日19日20日21日22日23日24日25日26日27日28日29日30日31日galffifflשּׁשּׂ ٌّ ٍّ َّ ُّ ِّ ّٰـَّـُّـِّتجمتحجتحمتخمتمجتمحتمخجمححميحمىسحجسجحسجىسمحسمجسممصححصممشحمشجيشمخشممضحىضخمطمحطممطميعجمعممعمىغممغميغمىفخمقمحقمملحملحيلحىلججلخملمحمحجمحيمجحمجممخممجخهمجهممنحمنحىنجمنجىنمينمىيممبخيتجيتجىتخيتخىتميتمىجميجحىجمىسخىصحيشحيضحيلجيلمييحييجييميمميقمينحيعميكمينجحمخيلجمكممجحيحجيمجيفميبحيسخينجيصلےقلے𝅘𝅥𝅮𝅘𝅥𝅯𝅘𝅥𝅰𝅘𝅥𝅱𝅘𝅥𝅲𝆹𝅥𝅮𝆺𝅥𝅮𝆹𝅥𝅯𝆺𝅥𝅯〔s〕ppv〔本〕〔三〕〔二〕〔安〕〔点〕〔打〕〔盗〕〔勝〕〔敗〕 ̄ ́ ̧ssi̇ijl·ʼndžljnjdz ̆ ̇ ̊ ̨ ̃ ̋ ιեւاٴوٴۇٴيٴक़ख़ग़ज़ड़ढ़फ़य़ড়ঢ়য়ਲ਼ਸ਼ਖ਼ਗ਼ਜ਼ਫ਼ଡ଼ଢ଼ําໍາຫນຫມགྷཌྷདྷབྷཛྷཀྵཱཱིུྲྀླྀྒྷྜྷྡྷྦྷྫྷྐྵaʾἀιἁιἂιἃιἄιἅιἆιἇιἠιἡιἢιἣιἤιἥιἦιἧιὠιὡιὢιὣιὤιὥιὦιὧιὰιαιάιᾶι ͂ὴιηιήιῆιὼιωιώιῶι ̳!! ̅???!!?rs°c°fnosmtmivix⫝̸ ゙ ゚よりコト333435참고주의363738394042444546474849503月4月5月6月7月8月9月hgevギガデシドルナノピコビルペソホンリラレムdaauovpciu平成昭和大正明治naμakakbmbgbpfnfμfμgmgμlmldlklfmnmμmpsnsμsmsnvμvkvpwnwμwmwkwkωmωbqcccddbgyhainkkktlnlxphprsrsvwbstմնմեմիվնմխיִײַשׁשׂאַאָאּבּגּדּהּוּזּטּיּךּכּלּמּנּסּףּפּצּקּרּתּוֹבֿכֿפֿאלئائەئوئۇئۆئۈئېئىئجئحئمئيبجبمبىبيتىتيثجثمثىثيخحضجضمطحظمغجفجفحفىفيقحقىقيكاكجكحكخكلكىكينخنىنيهجهىهييىذٰرٰىٰئرئزئنبزبنترتزتنثرثزثنمانرنزننيريزئخئهبهتهصخنههٰثهسهشهطىطيعىعيغىغيسىسيشىشيصىصيضىضيشخشرسرصرضراً ًـًـّ ْـْلآلألإ𝅗𝅥0,1,2,3,4,5,6,7,8,9,wzhvsdwcmcmddjほかココàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįĵķĺļľłńņňŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷÿźżɓƃƅɔƈɖɗƌǝəɛƒɠɣɩɨƙɯɲɵơƣƥʀƨʃƭʈưʊʋƴƶʒƹƽǎǐǒǔǖǘǚǜǟǡǣǥǧǩǫǭǯǵƕƿǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟƞȣȥȧȩȫȭȯȱȳⱥȼƚⱦɂƀʉʌɇɉɋɍɏɦɹɻʁʕͱͳʹͷ;ϳέίόύβγδεζθκλνξοπρστυφχψϊϋϗϙϛϝϟϡϣϥϧϩϫϭϯϸϻͻͼͽѐёђѓєѕіїјљњћќѝўџабвгдежзийклмнопрстуфхцчшщъыьэюяѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣԥԧԩԫԭԯաբգդզէըթժլծկհձղճյշոչպջռստրցփքօֆ་ⴧⴭნᏰᏱᏲᏳᏴᏵꙋɐɑᴂɜᴖᴗᴝᴥɒɕɟɡɥɪᵻʝɭᶅʟɱɰɳɴɸʂƫᴜʐʑḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿἐἑἒἓἔἕἰἱἲἳἴἵἶἷὀὁὂὃὄὅὑὓὕὗᾰᾱὲΐῐῑὶΰῠῡὺῥ`ὸ‐+−∑〈〉ⰰⰱⰲⰳⰴⰵⰶⰷⰸⰹⰺⰻⰼⰽⰾⰿⱀⱁⱂⱃⱄⱅⱆⱇⱈⱉⱊⱋⱌⱍⱎⱏⱐⱑⱒⱓⱔⱕⱖⱗⱘⱙⱚⱛⱜⱝⱞⱡɫᵽɽⱨⱪⱬⱳⱶȿɀⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳬⳮⳳⵡ母龟丨丶丿乙亅亠人儿入冂冖冫几凵刀力勹匕匚匸卜卩厂厶又口囗士夂夊夕女子宀寸小尢尸屮山巛工己巾干幺广廴廾弋弓彐彡彳心戈戶手支攴文斗斤方无曰欠止歹殳毋比毛氏气爪父爻爿片牙牛犬玄玉瓜瓦甘生用田疋疒癶白皮皿目矛矢石示禸禾穴立竹米糸缶网羊羽老而耒耳聿肉臣臼舌舛舟艮色艸虍虫血行衣襾見角言谷豆豕豸貝赤走足身車辛辰辵邑酉釆里長門阜隶隹雨靑非面革韋韭音頁風飛食首香馬骨高髟鬥鬯鬲鬼魚鳥鹵鹿麥麻黃黍黑黹黽鼎鼓鼠鼻齊齒龍龜龠.〒卄卅ᄁᆪᆬᆭᄄᆰᆱᆲᆳᆴᆵᄚᄈᄡᄊ짜ᅢᅣᅤᅥᅦᅧᅨᅩᅪᅫᅬᅭᅮᅯᅰᅱᅲᅳᅴᅵᄔᄕᇇᇈᇌᇎᇓᇗᇙᄜᇝᇟᄝᄞᄠᄢᄣᄧᄩᄫᄬᄭᄮᄯᄲᄶᅀᅇᅌᇱᇲᅗᅘᅙᆄᆅᆈᆑᆒᆔᆞᆡ上中下甲丙丁天地問幼箏우秘男適優印注項写左右医宗夜テヌモヨヰヱヲꙁꙃꙅꙇꙉꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙡꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꚙꚛꜣꜥꜧꜩꜫꜭꜯꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯꝺꝼᵹꝿꞁꞃꞅꞇꞌꞑꞓꞗꞙꞛꞝꞟꞡꞣꞥꞧꞩɬʞʇꭓꞵꞷꬷꭒᎠᎡᎢᎣᎤᎥᎦᎧᎨᎩᎪᎫᎬᎭᎮᎯᎰᎱᎲᎳᎴᎵᎶᎷᎸᎹᎺᎻᎼᎽᎾᎿᏀᏁᏂᏃᏄᏅᏆᏇᏈᏉᏊᏋᏌᏍᏎᏏᏐᏑᏒᏓᏔᏕᏖᏗᏘᏙᏚᏛᏜᏝᏞᏟᏠᏡᏢᏣᏤᏥᏦᏧᏨᏩᏪᏫᏬᏭᏮᏯ豈更賈滑串句契喇奈懶癩羅蘿螺裸邏樂洛烙珞落酪駱亂卵欄爛蘭鸞嵐濫藍襤拉臘蠟廊朗浪狼郎來冷勞擄櫓爐盧蘆虜路露魯鷺碌祿綠菉錄論壟弄籠聾牢磊賂雷壘屢樓淚漏累縷陋勒肋凜凌稜綾菱陵讀拏諾丹寧怒率異北磻便復不泌數索參塞省葉說殺沈拾若掠略亮兩凉梁糧良諒量勵呂廬旅濾礪閭驪麗黎曆歷轢年憐戀撚漣煉璉秊練聯輦蓮連鍊列劣咽烈裂廉念捻殮簾獵令囹嶺怜玲瑩羚聆鈴零靈領例禮醴隸惡了僚寮尿料燎療蓼遼暈阮劉杻柳流溜琉留硫紐類戮陸倫崙淪輪律慄栗隆利吏履易李梨泥理痢罹裏裡離匿溺吝燐璘藺隣鱗麟林淋臨笠粒狀炙識什茶刺切度拓糖宅洞暴輻降廓兀嗀塚晴凞猪益礼神祥福靖精蘒諸逸都飯飼館鶴郞隷侮僧免勉勤卑喝嘆器塀墨層悔慨憎懲敏既暑梅海渚漢煮爫琢碑祉祈祐祖禍禎穀突節縉繁署者臭艹著褐視謁謹賓贈辶難響頻恵𤋮舘並况全侀充冀勇勺啕喙嗢墳奄奔婢嬨廒廙彩徭惘慎愈慠戴揄搜摒敖望杖滛滋瀞瞧爵犯瑱甆画瘝瘟盛直睊着磌窱类絛缾荒華蝹襁覆調請諭變輸遲醙鉶陼韛頋鬒𢡊𢡄𣏕㮝䀘䀹𥉉𥳐𧻓齃龎עםٱٻپڀٺٿٹڤڦڄڃچڇڍڌڎڈژڑکگڳڱںڻۀہھۓڭۋۅۉ、〖〗—–_{}【】《》「」『』[]#&*-<>\\$%@ءؤة\"'^|~⦅⦆・ゥャ¢£¬¦¥₩│←↑→↓■○𐐨𐐩𐐪𐐫𐐬𐐭𐐮𐐯𐐰𐐱𐐲𐐳𐐴𐐵𐐶𐐷𐐸𐐹𐐺𐐻𐐼𐐽𐐾𐐿𐑀𐑁𐑂𐑃𐑄𐑅𐑆𐑇𐑈𐑉𐑊𐑋𐑌𐑍𐑎𐑏𐓘𐓙𐓚𐓛𐓜𐓝𐓞𐓟𐓠𐓡𐓢𐓣𐓤𐓥𐓦𐓧𐓨𐓩𐓪𐓫𐓬𐓭𐓮𐓯𐓰𐓱𐓲𐓳𐓴𐓵𐓶𐓷𐓸𐓹𐓺𐓻𐳀𐳁𐳂𐳃𐳄𐳅𐳆𐳇𐳈𐳉𐳊𐳋𐳌𐳍𐳎𐳏𐳐𐳑𐳒𐳓𐳔𐳕𐳖𐳗𐳘𐳙𐳚𐳛𐳜𐳝𐳞𐳟𐳠𐳡𐳢𐳣𐳤𐳥𐳦𐳧𐳨𐳩𐳪𐳫𐳬𐳭𐳮𐳯𐳰𐳱𐳲𑣀𑣁𑣂𑣃𑣄𑣅𑣆𑣇𑣈𑣉𑣊𑣋𑣌𑣍𑣎𑣏𑣐𑣑𑣒𑣓𑣔𑣕𑣖𑣗𑣘𑣙𑣚𑣛𑣜𑣝𑣞𑣟ıȷ∇∂𞤢𞤣𞤤𞤥𞤦𞤧𞤨𞤩𞤪𞤫𞤬𞤭𞤮𞤯𞤰𞤱𞤲𞤳𞤴𞤵𞤶𞤷𞤸𞤹𞤺𞤻𞤼𞤽𞤾𞤿𞥀𞥁𞥂𞥃ٮڡٯ字双多解交映無前後再新初終販声吹演投捕遊指禁空合満申割営配得可丽丸乁𠄢你侻倂偺備像㒞𠘺兔兤具𠔜㒹內𠕋冗冤仌冬𩇟刃㓟刻剆剷㔕包匆卉博即卽卿𠨬灰及叟𠭣叫叱吆咞吸呈周咢哶唐啓啣善喫喳嗂圖圗噑噴壮城埴堍型堲報墬𡓤売壷夆夢奢𡚨𡛪姬娛娧姘婦㛮嬈嬾𡧈寃寘寳𡬘寿将㞁屠峀岍𡷤嵃𡷦嵮嵫嵼巡巢㠯巽帨帽幩㡢𢆃㡼庰庳庶𪎒𢌱舁弢㣇𣊸𦇚形彫㣣徚忍志忹悁㤺㤜𢛔惇慈慌慺憲憤憯懞戛扝抱拔捐𢬌挽拼捨掃揤𢯱搢揅掩㨮摩摾撝摷㩬敬𣀊旣書晉㬙㬈㫤冒冕最暜肭䏙朡杞杓𣏃㭉柺枅桒𣑭梎栟椔楂榣槪檨𣚣櫛㰘次𣢧歔㱎歲殟殻𣪍𡴋𣫺汎𣲼沿泍汧洖派浩浸涅𣴞洴港湮㴳滇𣻑淹潮𣽞𣾎濆瀹瀛㶖灊災灷炭𠔥煅𤉣熜爨牐𤘈犀犕𤜵𤠔獺王㺬玥㺸瑇瑜璅瓊㼛甤𤰶甾𤲒𢆟瘐𤾡𤾸𥁄㿼䀈𥃳𥃲𥄙𥄳眞真瞋䁆䂖𥐝硎䃣𥘦𥚚𥛅秫䄯穊穏𥥼𥪧䈂𥮫篆築䈧𥲀糒䊠糨糣紀𥾆絣䌁緇縂繅䌴𦈨𦉇䍙𦋙罺𦌾羕翺𦓚𦔣聠𦖨聰𣍟䏕育脃䐋脾媵𦞧𦞵𣎓𣎜舄辞䑫芑芋芝劳花芳芽苦𦬼茝荣莭茣莽菧荓菊菌菜𦰶𦵫𦳕䔫蓱蓳蔖𧏊蕤𦼬䕝䕡𦾱𧃒䕫虐虧虩蚩蚈蜎蛢蜨蝫螆蟡蠁䗹衠𧙧裗裞䘵裺㒻𧢮𧥦䚾䛇誠𧲨貫賁贛起𧼯𠠄跋趼跰𠣞軔𨗒𨗭邔郱鄑𨜮鄛鈸鋗鋘鉼鏹鐕𨯺開䦕閷𨵷䧦雃嶲霣𩅅𩈚䩮䩶韠𩐊䪲𩒖頩𩖶飢䬳餩馧駂駾䯎𩬰鱀鳽䳎䳭鵧𪃎䳸𪄅𪈎𪊑䵖黾鼅鼏鼖𪘀",
              mapChar: function mapChar(r) {
                return r >= 196608 ? r >= 917760 && r <= 917999 ? 18874368 : 0 : e[t[r >> 4]][15 & r];
              }
            };
            var e, t;
          }.apply(t, [])) || (e.exports = n);
        },
        4489: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3106));
          function i(e, t) {
            var r = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
            if (!r) {
              if (Array.isArray(e) || (r = function (e, t) {
                if (e) {
                  if ("string" == typeof e) return o(e, t);
                  var r = Object.prototype.toString.call(e).slice(8, -1);
                  return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? o(e, t) : void 0;
                }
              }(e)) || t && e && "number" == typeof e.length) {
                r && (e = r);
                var _n6 = 0,
                  i = function i() {};
                return {
                  s: i,
                  n: function n() {
                    return _n6 >= e.length ? {
                      done: !0
                    } : {
                      done: !1,
                      value: e[_n6++]
                    };
                  },
                  e: function e(_e4) {
                    throw _e4;
                  },
                  f: i
                };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a,
              s = !0,
              u = !1;
            return {
              s: function s() {
                r = r.call(e);
              },
              n: function n() {
                var e = r.next();
                return s = e.done, e;
              },
              e: function e(_e5) {
                u = !0, a = _e5;
              },
              f: function f() {
                try {
                  s || null == r.return || r.return();
                } finally {
                  if (u) throw a;
                }
              }
            };
          }
          function o(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          var a = 2147483647,
            s = 36,
            u = /^xn--/,
            c = /[^\0-\x7E]/,
            f = /[\x2E\u3002\uFF0E\uFF61]/g,
            d = {
              overflow: "Overflow: input needs wider integers to process",
              "not-basic": "Illegal input >= 0x80 (not a basic code point)",
              "invalid-input": "Invalid input"
            },
            l = Math.floor,
            h = String.fromCharCode;
          function p(e) {
            throw new RangeError(d[e]);
          }
          function b(e, t) {
            var r = e.split("@"),
              n = "";
            r.length > 1 && (n = r[0] + "@", e = r[1]);
            var i = function (e, t) {
              for (var r = [], n = e.length; n--;) r[n] = t(e[n]);
              return r;
            }((e = e.replace(f, ".")).split("."), t).join(".");
            return n + i;
          }
          function y(e) {
            for (var t = [], r = 0, n = e.length; r < n;) {
              var i = e.charCodeAt(r++);
              if (i >= 55296 && i <= 56319 && r < n) {
                var o = e.charCodeAt(r++);
                56320 == (64512 & o) ? t.push(((1023 & i) << 10) + (1023 & o) + 65536) : (t.push(i), r--);
              } else t.push(i);
            }
            return t;
          }
          var m = function m(e, t) {
              return e + 22 + 75 * (e < 26) - ((0 != t) << 5);
            },
            v = function v(e, t, r) {
              var n = 0;
              for (e = r ? l(e / 700) : e >> 1, e += l(e / t); e > 455; n += s) e = l(e / 35);
              return l(n + 36 * e / (e + 38));
            },
            g = function g(e) {
              var t,
                r = [],
                n = e.length,
                i = 0,
                o = 128,
                u = 72,
                c = e.lastIndexOf("-");
              c < 0 && (c = 0);
              for (var f = 0; f < c; ++f) e.charCodeAt(f) >= 128 && p("not-basic"), r.push(e.charCodeAt(f));
              for (var d = c > 0 ? c + 1 : 0; d < n;) {
                for (var h = i, b = 1, y = s;; y += s) {
                  d >= n && p("invalid-input");
                  var m = (t = e.charCodeAt(d++)) - 48 < 10 ? t - 22 : t - 65 < 26 ? t - 65 : t - 97 < 26 ? t - 97 : s;
                  (m >= s || m > l((a - i) / b)) && p("overflow"), i += m * b;
                  var g = y <= u ? 1 : y >= u + 26 ? 26 : y - u;
                  if (m < g) break;
                  var w = s - g;
                  b > l(a / w) && p("overflow"), b *= w;
                }
                var A = r.length + 1;
                u = v(i - h, A, 0 == h), l(i / A) > a - o && p("overflow"), o += l(i / A), i %= A, r.splice(i++, 0, o);
              }
              return String.fromCodePoint.apply(String, r);
            },
            w = function w(e) {
              var t,
                r = [],
                n = (e = y(e)).length,
                o = 128,
                u = 0,
                c = 72,
                f = i(e);
              try {
                for (f.s(); !(t = f.n()).done;) {
                  var d = t.value;
                  d < 128 && r.push(h(d));
                }
              } catch (e) {
                f.e(e);
              } finally {
                f.f();
              }
              var b = r.length,
                g = b;
              for (b && r.push("-"); g < n;) {
                var w,
                  A = a,
                  k = i(e);
                try {
                  for (k.s(); !(w = k.n()).done;) {
                    var _ = w.value;
                    _ >= o && _ < A && (A = _);
                  }
                } catch (e) {
                  k.e(e);
                } finally {
                  k.f();
                }
                var S = g + 1;
                A - o > l((a - u) / S) && p("overflow"), u += (A - o) * S, o = A;
                var E,
                  x = i(e);
                try {
                  for (x.s(); !(E = x.n()).done;) {
                    var P = E.value;
                    if (P < o && ++u > a && p("overflow"), P == o) {
                      for (var O = u, B = s;; B += s) {
                        var T = B <= c ? 1 : B >= c + 26 ? 26 : B - c;
                        if (O < T) break;
                        var C = O - T,
                          I = s - T;
                        r.push(h(m(T + C % I, 0))), O = l(C / I);
                      }
                      r.push(h(m(O, 0))), c = v(u, S, g == b), u = 0, ++g;
                    }
                  }
                } catch (e) {
                  x.e(e);
                } finally {
                  x.f();
                }
                ++u, ++o;
              }
              return r.join("");
            },
            A = {
              version: "2.1.0",
              ucs2: {
                decode: y,
                encode: function encode(e) {
                  return String.fromCodePoint.apply(String, (0, n.default)(e));
                }
              },
              decode: g,
              encode: w,
              toASCII: function toASCII(e) {
                return b(e, function (e) {
                  return c.test(e) ? "xn--" + w(e) : e;
                });
              },
              toUnicode: function toUnicode(e) {
                return b(e, function (e) {
                  return u.test(e) ? g(e.slice(4).toLowerCase()) : e;
                });
              }
            };
          e.exports = A;
        },
        3956: function _(e, t, r) {
          "use strict";

          var n, i;
          r(8847)(r(3355)), n = [r(4489), r(2996)], void 0 === (i = function (e, t) {
            return function (e, t) {
              function r(r, n, i) {
                for (var o = [], a = e.ucs2.decode(r), s = 0; s < a.length; s++) {
                  var u = a[s],
                    c = e.ucs2.encode([a[s]]),
                    f = t.mapChar(u),
                    d = f >> 23,
                    l = f >> 21 & 3,
                    h = f >> 5 & 65535,
                    p = 31 & f,
                    b = t.mapStr.substr(h, p);
                  if (0 === l || n && 1 & d) throw new Error("Illegal char " + c);
                  1 === l ? o.push(b) : 2 === l ? o.push(i ? b : c) : 3 === l && o.push(c);
                }
                return o.join("").normalize("NFC");
              }
              function n(t, n, o) {
                void 0 === o && (o = !1);
                var a = r(t, o, n).split(".");
                return (a = a.map(function (t) {
                  return t.startsWith("xn--") ? i(t = e.decode(t.substring(4)), o, !1) : i(t, o, n), t;
                })).join(".");
              }
              function i(e, n, i) {
                if ("-" === e[2] && "-" === e[3]) throw new Error("Failed to validate " + e);
                if (e.startsWith("-") || e.endsWith("-")) throw new Error("Failed to validate " + e);
                if (e.includes(".")) throw new Error("Failed to validate " + e);
                if (r(e, n, i) !== e) throw new Error("Failed to validate " + e);
                var o = e.codePointAt(0);
                if (t.mapChar(o) & 2 << 23) throw new Error("Label contains illegal character: " + o);
              }
              return {
                toUnicode: function toUnicode(e, t) {
                  return void 0 === t && (t = {}), n(e, !1, "useStd3ASCII" in t && t.useStd3ASCII);
                },
                toAscii: function toAscii(t, r) {
                  void 0 === r && (r = {});
                  var i,
                    o = !("transitional" in r) || r.transitional,
                    a = "useStd3ASCII" in r && r.useStd3ASCII,
                    s = "verifyDnsLength" in r && r.verifyDnsLength,
                    u = n(t, o, a).split(".").map(e.toASCII),
                    c = u.join(".");
                  if (s) {
                    if (c.length < 1 || c.length > 253) throw new Error("DNS name has wrong length: " + c);
                    for (i = 0; i < u.length; i++) {
                      var f = u[i];
                      if (f.length < 1 || f.length > 63) throw new Error("DNS label has wrong length: " + f);
                    }
                  }
                  return c;
                }
              };
            }(e, t);
          }.apply(t, n)) || (e.exports = i);
        },
        3226: function _(e, t) {
          "use strict";

          t.read = function (e, t, r, n, i) {
            var o,
              a,
              s = 8 * i - n - 1,
              u = (1 << s) - 1,
              c = u >> 1,
              f = -7,
              d = r ? i - 1 : 0,
              l = r ? -1 : 1,
              h = e[t + d];
            for (d += l, o = h & (1 << -f) - 1, h >>= -f, f += s; f > 0; o = 256 * o + e[t + d], d += l, f -= 8);
            for (a = o & (1 << -f) - 1, o >>= -f, f += n; f > 0; a = 256 * a + e[t + d], d += l, f -= 8);
            if (0 === o) o = 1 - c;else {
              if (o === u) return a ? NaN : 1 / 0 * (h ? -1 : 1);
              a += Math.pow(2, n), o -= c;
            }
            return (h ? -1 : 1) * a * Math.pow(2, o - n);
          }, t.write = function (e, t, r, n, i, o) {
            var a,
              s,
              u,
              c = 8 * o - i - 1,
              f = (1 << c) - 1,
              d = f >> 1,
              l = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
              h = n ? 0 : o - 1,
              p = n ? 1 : -1,
              b = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;
            for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (s = isNaN(t) ? 1 : 0, a = f) : (a = Math.floor(Math.log(t) / Math.LN2), t * (u = Math.pow(2, -a)) < 1 && (a--, u *= 2), (t += a + d >= 1 ? l / u : l * Math.pow(2, 1 - d)) * u >= 2 && (a++, u /= 2), a + d >= f ? (s = 0, a = f) : a + d >= 1 ? (s = (t * u - 1) * Math.pow(2, i), a += d) : (s = t * Math.pow(2, d - 1) * Math.pow(2, i), a = 0)); i >= 8; e[r + h] = 255 & s, h += p, s /= 256, i -= 8);
            for (a = a << i | s, c += i; c > 0; e[r + h] = 255 & a, h += p, a /= 256, c -= 8);
            e[r + h - p] |= 128 * b;
          };
        },
        1736: function _(e) {
          "use strict";

          "function" == typeof Object.create ? e.exports = function (e, t) {
            t && (e.super_ = t, e.prototype = Object.create(t.prototype, {
              constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
              }
            }));
          } : e.exports = function (e, t) {
            if (t) {
              e.super_ = t;
              var r = function r() {};
              r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e;
            }
          };
        },
        9446: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(1191)(),
            o = r(593)("Object.prototype.toString"),
            a = function a(e) {
              return !(i && e && "object" === (0, n.default)(e) && Symbol.toStringTag in e) && "[object Arguments]" === o(e);
            },
            s = function s(e) {
              return !!a(e) || null !== e && "object" === (0, n.default)(e) && "number" == typeof e.length && e.length >= 0 && "[object Array]" !== o(e) && "[object Function]" === o(e.callee);
            },
            u = function () {
              return a(arguments);
            }();
          a.isLegacyArguments = s, e.exports = u ? a : s;
        },
        1493: function _(e, t, r) {
          "use strict";

          var n,
            i,
            o = r(8847)(r(3355)),
            a = Function.prototype.toString,
            s = "object" === ("undefined" == typeof Reflect ? "undefined" : (0, o.default)(Reflect)) && null !== Reflect && Reflect.apply;
          if ("function" == typeof s && "function" == typeof Object.defineProperty) try {
            n = Object.defineProperty({}, "length", {
              get: function get() {
                throw i;
              }
            }), i = {}, s(function () {
              throw 42;
            }, null, n);
          } catch (e) {
            e !== i && (s = null);
          } else s = null;
          var u = /^\s*class\b/,
            c = function c(e) {
              try {
                var t = a.call(e);
                return u.test(t);
              } catch (e) {
                return !1;
              }
            },
            f = function f(e) {
              try {
                return !c(e) && (a.call(e), !0);
              } catch (e) {
                return !1;
              }
            },
            d = Object.prototype.toString,
            l = "function" == typeof Symbol && !!Symbol.toStringTag,
            h = !(0 in [,]),
            p = function p() {
              return !1;
            };
          if ("object" === ("undefined" == typeof document ? "undefined" : (0, o.default)(document))) {
            var b = document.all;
            d.call(b) === d.call(document.all) && (p = function p(e) {
              if ((h || !e) && (void 0 === e || "object" === (0, o.default)(e))) try {
                var t = d.call(e);
                return ("[object HTMLAllCollection]" === t || "[object HTML document.all class]" === t || "[object HTMLCollection]" === t || "[object Object]" === t) && null == e("");
              } catch (e) {}
              return !1;
            });
          }
          e.exports = s ? function (e) {
            if (p(e)) return !0;
            if (!e) return !1;
            if ("function" != typeof e && "object" !== (0, o.default)(e)) return !1;
            try {
              s(e, null, n);
            } catch (e) {
              if (e !== i) return !1;
            }
            return !c(e) && f(e);
          } : function (e) {
            if (p(e)) return !0;
            if (!e) return !1;
            if ("function" != typeof e && "object" !== (0, o.default)(e)) return !1;
            if (l) return f(e);
            if (c(e)) return !1;
            var t = d.call(e);
            return !("[object Function]" !== t && "[object GeneratorFunction]" !== t && !/^\[object HTML/.test(t)) && f(e);
          };
        },
        4339: function _(e) {
          "use strict";

          e.exports = function (e) {
            if (!e) return !1;
            var r = t.call(e);
            return "[object Function]" === r || "function" == typeof e && "[object RegExp]" !== r || "undefined" != typeof window && (e === window.setTimeout || e === window.alert || e === window.confirm || e === window.prompt);
          };
          var t = Object.prototype.toString;
        },
        4477: function _(e, t, r) {
          "use strict";

          var n,
            i = Object.prototype.toString,
            o = Function.prototype.toString,
            a = /^\s*(?:function)?\*/,
            s = r(1191)(),
            u = Object.getPrototypeOf;
          e.exports = function (e) {
            if ("function" != typeof e) return !1;
            if (a.test(o.call(e))) return !0;
            if (!s) return "[object GeneratorFunction]" === i.call(e);
            if (!u) return !1;
            if (void 0 === n) {
              var t = function () {
                if (!s) return !1;
                try {
                  return Function("return function*() {}")();
                } catch (e) {}
              }();
              n = !!t && u(t);
            }
            return u(e) === n;
          };
        },
        8619: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355));
          e.exports = function (e) {
            if ("string" != typeof e) throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (0, n.default)(e) + ", while checking isHexPrefixed.");
            return "0x" === e.slice(0, 2);
          };
        },
        8915: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(8184),
            o = r(3604),
            a = r(593),
            s = a("Object.prototype.toString"),
            u = r(1191)(),
            c = r(3820),
            f = "undefined" == typeof globalThis ? r.g : globalThis,
            d = o(),
            l = a("Array.prototype.indexOf", !0) || function (e, t) {
              for (var r = 0; r < e.length; r += 1) if (e[r] === t) return r;
              return -1;
            },
            h = a("String.prototype.slice"),
            p = {},
            b = Object.getPrototypeOf;
          u && c && b && i(d, function (e) {
            var t = new f[e]();
            if (Symbol.toStringTag in t) {
              var r = b(t),
                n = c(r, Symbol.toStringTag);
              if (!n) {
                var i = b(r);
                n = c(i, Symbol.toStringTag);
              }
              p[e] = n.get;
            }
          }), e.exports = function (e) {
            if (!e || "object" !== (0, n.default)(e)) return !1;
            if (!u || !(Symbol.toStringTag in e)) {
              var t = h(s(e), 8, -1);
              return l(d, t) > -1;
            }
            return !!c && function (e) {
              var t = !1;
              return i(p, function (r, n) {
                if (!t) try {
                  t = r.call(e) === n;
                } catch (e) {}
              }), t;
            }(e);
          };
        },
        9484: function _(e) {
          "use strict";

          var t = {}.toString;
          e.exports = Array.isArray || function (e) {
            return "[object Array]" == t.call(e);
          };
        },
        4858: function _(e, t, r) {
          "use strict";

          e = r.nmd(e);
          var n = r(9142),
            i = r(8847)(r(3355));
          !function () {
            var t = "object" === ("undefined" == typeof window ? "undefined" : (0, i.default)(window)) ? window : {};
            !t.JS_SHA3_NO_NODE_JS && "object" === (void 0 === n ? "undefined" : (0, i.default)(n)) && n.versions && n.versions.node && (t = r.g);
            for (var o = !t.JS_SHA3_NO_COMMON_JS && "object" === (0, i.default)(e) && e.exports, a = "0123456789abcdef".split(""), s = [0, 8, 16, 24], u = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648], c = [224, 256, 384, 512], f = ["hex", "buffer", "arrayBuffer", "array"], d = function d(e, t, r) {
                return function (n) {
                  return new k(e, t, e).update(n)[r]();
                };
              }, l = function l(e, t, r) {
                return function (n, i) {
                  return new k(e, t, i).update(n)[r]();
                };
              }, h = function h(e, t) {
                var r = d(e, t, "hex");
                r.create = function () {
                  return new k(e, t, e);
                }, r.update = function (e) {
                  return r.create().update(e);
                };
                for (var n = 0; n < f.length; ++n) {
                  var i = f[n];
                  r[i] = d(e, t, i);
                }
                return r;
              }, p = [{
                name: "keccak",
                padding: [1, 256, 65536, 16777216],
                bits: c,
                createMethod: h
              }, {
                name: "sha3",
                padding: [6, 1536, 393216, 100663296],
                bits: c,
                createMethod: h
              }, {
                name: "shake",
                padding: [31, 7936, 2031616, 520093696],
                bits: [128, 256],
                createMethod: function createMethod(e, t) {
                  var r = l(e, t, "hex");
                  r.create = function (r) {
                    return new k(e, t, r);
                  }, r.update = function (e, t) {
                    return r.create(t).update(e);
                  };
                  for (var n = 0; n < f.length; ++n) {
                    var i = f[n];
                    r[i] = l(e, t, i);
                  }
                  return r;
                }
              }], b = {}, y = [], m = 0; m < p.length; ++m) for (var v = p[m], g = v.bits, w = 0; w < g.length; ++w) {
              var A = v.name + "_" + g[w];
              y.push(A), b[A] = v.createMethod(g[w], v.padding);
            }
            function k(e, t, r) {
              this.blocks = [], this.s = [], this.padding = t, this.outputBits = r, this.reset = !0, this.block = 0, this.start = 0, this.blockCount = 1600 - (e << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r >> 5, this.extraBytes = (31 & r) >> 3;
              for (var n = 0; n < 50; ++n) this.s[n] = 0;
            }
            k.prototype.update = function (e) {
              var t = "string" != typeof e;
              t && e.constructor === ArrayBuffer && (e = new Uint8Array(e));
              for (var r, n, i = e.length, o = this.blocks, a = this.byteCount, u = this.blockCount, c = 0, f = this.s; c < i;) {
                if (this.reset) for (this.reset = !1, o[0] = this.block, r = 1; r < u + 1; ++r) o[r] = 0;
                if (t) for (r = this.start; c < i && r < a; ++c) o[r >> 2] |= e[c] << s[3 & r++];else for (r = this.start; c < i && r < a; ++c) (n = e.charCodeAt(c)) < 128 ? o[r >> 2] |= n << s[3 & r++] : n < 2048 ? (o[r >> 2] |= (192 | n >> 6) << s[3 & r++], o[r >> 2] |= (128 | 63 & n) << s[3 & r++]) : n < 55296 || n >= 57344 ? (o[r >> 2] |= (224 | n >> 12) << s[3 & r++], o[r >> 2] |= (128 | n >> 6 & 63) << s[3 & r++], o[r >> 2] |= (128 | 63 & n) << s[3 & r++]) : (n = 65536 + ((1023 & n) << 10 | 1023 & e.charCodeAt(++c)), o[r >> 2] |= (240 | n >> 18) << s[3 & r++], o[r >> 2] |= (128 | n >> 12 & 63) << s[3 & r++], o[r >> 2] |= (128 | n >> 6 & 63) << s[3 & r++], o[r >> 2] |= (128 | 63 & n) << s[3 & r++]);
                if (this.lastByteIndex = r, r >= a) {
                  for (this.start = r - a, this.block = o[u], r = 0; r < u; ++r) f[r] ^= o[r];
                  _(f), this.reset = !0;
                } else this.start = r;
              }
              return this;
            }, k.prototype.finalize = function () {
              var e = this.blocks,
                t = this.lastByteIndex,
                r = this.blockCount,
                n = this.s;
              if (e[t >> 2] |= this.padding[3 & t], this.lastByteIndex === this.byteCount) for (e[0] = e[r], t = 1; t < r + 1; ++t) e[t] = 0;
              for (e[r - 1] |= 2147483648, t = 0; t < r; ++t) n[t] ^= e[t];
              _(n);
            }, k.prototype.toString = k.prototype.hex = function () {
              this.finalize();
              for (var e, t = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, s = 0, u = ""; s < n;) {
                for (o = 0; o < t && s < n; ++o, ++s) e = r[o], u += a[e >> 4 & 15] + a[15 & e] + a[e >> 12 & 15] + a[e >> 8 & 15] + a[e >> 20 & 15] + a[e >> 16 & 15] + a[e >> 28 & 15] + a[e >> 24 & 15];
                s % t == 0 && (_(r), o = 0);
              }
              return i && (e = r[o], i > 0 && (u += a[e >> 4 & 15] + a[15 & e]), i > 1 && (u += a[e >> 12 & 15] + a[e >> 8 & 15]), i > 2 && (u += a[e >> 20 & 15] + a[e >> 16 & 15])), u;
            }, k.prototype.arrayBuffer = function () {
              this.finalize();
              var e,
                t = this.blockCount,
                r = this.s,
                n = this.outputBlocks,
                i = this.extraBytes,
                o = 0,
                a = 0,
                s = this.outputBits >> 3;
              e = i ? new ArrayBuffer(n + 1 << 2) : new ArrayBuffer(s);
              for (var u = new Uint32Array(e); a < n;) {
                for (o = 0; o < t && a < n; ++o, ++a) u[a] = r[o];
                a % t == 0 && _(r);
              }
              return i && (u[o] = r[o], e = e.slice(0, s)), e;
            }, k.prototype.buffer = k.prototype.arrayBuffer, k.prototype.digest = k.prototype.array = function () {
              this.finalize();
              for (var e, t, r = this.blockCount, n = this.s, i = this.outputBlocks, o = this.extraBytes, a = 0, s = 0, u = []; s < i;) {
                for (a = 0; a < r && s < i; ++a, ++s) e = s << 2, t = n[a], u[e] = 255 & t, u[e + 1] = t >> 8 & 255, u[e + 2] = t >> 16 & 255, u[e + 3] = t >> 24 & 255;
                s % r == 0 && _(n);
              }
              return o && (e = s << 2, t = n[a], o > 0 && (u[e] = 255 & t), o > 1 && (u[e + 1] = t >> 8 & 255), o > 2 && (u[e + 2] = t >> 16 & 255)), u;
            };
            var _ = function _(e) {
              var t, r, n, i, o, a, s, c, f, d, l, h, p, b, y, m, v, g, w, A, k, _, S, E, x, P, O, B, T, C, I, M, U, R, j, N, F, L, D, H, q, z, G, K, V, J, W, Y, X, Q, Z, $, ee, te, re, ne, ie, oe, ae, se, ue, ce, fe;
              for (n = 0; n < 48; n += 2) i = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], o = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], a = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], s = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], c = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], f = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], d = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], l = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], t = (h = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48]) ^ (a << 1 | s >>> 31), r = (p = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (s << 1 | a >>> 31), e[0] ^= t, e[1] ^= r, e[10] ^= t, e[11] ^= r, e[20] ^= t, e[21] ^= r, e[30] ^= t, e[31] ^= r, e[40] ^= t, e[41] ^= r, t = i ^ (c << 1 | f >>> 31), r = o ^ (f << 1 | c >>> 31), e[2] ^= t, e[3] ^= r, e[12] ^= t, e[13] ^= r, e[22] ^= t, e[23] ^= r, e[32] ^= t, e[33] ^= r, e[42] ^= t, e[43] ^= r, t = a ^ (d << 1 | l >>> 31), r = s ^ (l << 1 | d >>> 31), e[4] ^= t, e[5] ^= r, e[14] ^= t, e[15] ^= r, e[24] ^= t, e[25] ^= r, e[34] ^= t, e[35] ^= r, e[44] ^= t, e[45] ^= r, t = c ^ (h << 1 | p >>> 31), r = f ^ (p << 1 | h >>> 31), e[6] ^= t, e[7] ^= r, e[16] ^= t, e[17] ^= r, e[26] ^= t, e[27] ^= r, e[36] ^= t, e[37] ^= r, e[46] ^= t, e[47] ^= r, t = d ^ (i << 1 | o >>> 31), r = l ^ (o << 1 | i >>> 31), e[8] ^= t, e[9] ^= r, e[18] ^= t, e[19] ^= r, e[28] ^= t, e[29] ^= r, e[38] ^= t, e[39] ^= r, e[48] ^= t, e[49] ^= r, b = e[0], y = e[1], J = e[11] << 4 | e[10] >>> 28, W = e[10] << 4 | e[11] >>> 28, B = e[20] << 3 | e[21] >>> 29, T = e[21] << 3 | e[20] >>> 29, se = e[31] << 9 | e[30] >>> 23, ue = e[30] << 9 | e[31] >>> 23, z = e[40] << 18 | e[41] >>> 14, G = e[41] << 18 | e[40] >>> 14, R = e[2] << 1 | e[3] >>> 31, j = e[3] << 1 | e[2] >>> 31, m = e[13] << 12 | e[12] >>> 20, v = e[12] << 12 | e[13] >>> 20, Y = e[22] << 10 | e[23] >>> 22, X = e[23] << 10 | e[22] >>> 22, C = e[33] << 13 | e[32] >>> 19, I = e[32] << 13 | e[33] >>> 19, ce = e[42] << 2 | e[43] >>> 30, fe = e[43] << 2 | e[42] >>> 30, te = e[5] << 30 | e[4] >>> 2, re = e[4] << 30 | e[5] >>> 2, N = e[14] << 6 | e[15] >>> 26, F = e[15] << 6 | e[14] >>> 26, g = e[25] << 11 | e[24] >>> 21, w = e[24] << 11 | e[25] >>> 21, Q = e[34] << 15 | e[35] >>> 17, Z = e[35] << 15 | e[34] >>> 17, M = e[45] << 29 | e[44] >>> 3, U = e[44] << 29 | e[45] >>> 3, E = e[6] << 28 | e[7] >>> 4, x = e[7] << 28 | e[6] >>> 4, ne = e[17] << 23 | e[16] >>> 9, ie = e[16] << 23 | e[17] >>> 9, L = e[26] << 25 | e[27] >>> 7, D = e[27] << 25 | e[26] >>> 7, A = e[36] << 21 | e[37] >>> 11, k = e[37] << 21 | e[36] >>> 11, $ = e[47] << 24 | e[46] >>> 8, ee = e[46] << 24 | e[47] >>> 8, K = e[8] << 27 | e[9] >>> 5, V = e[9] << 27 | e[8] >>> 5, P = e[18] << 20 | e[19] >>> 12, O = e[19] << 20 | e[18] >>> 12, oe = e[29] << 7 | e[28] >>> 25, ae = e[28] << 7 | e[29] >>> 25, H = e[38] << 8 | e[39] >>> 24, q = e[39] << 8 | e[38] >>> 24, _ = e[48] << 14 | e[49] >>> 18, S = e[49] << 14 | e[48] >>> 18, e[0] = b ^ ~m & g, e[1] = y ^ ~v & w, e[10] = E ^ ~P & B, e[11] = x ^ ~O & T, e[20] = R ^ ~N & L, e[21] = j ^ ~F & D, e[30] = K ^ ~J & Y, e[31] = V ^ ~W & X, e[40] = te ^ ~ne & oe, e[41] = re ^ ~ie & ae, e[2] = m ^ ~g & A, e[3] = v ^ ~w & k, e[12] = P ^ ~B & C, e[13] = O ^ ~T & I, e[22] = N ^ ~L & H, e[23] = F ^ ~D & q, e[32] = J ^ ~Y & Q, e[33] = W ^ ~X & Z, e[42] = ne ^ ~oe & se, e[43] = ie ^ ~ae & ue, e[4] = g ^ ~A & _, e[5] = w ^ ~k & S, e[14] = B ^ ~C & M, e[15] = T ^ ~I & U, e[24] = L ^ ~H & z, e[25] = D ^ ~q & G, e[34] = Y ^ ~Q & $, e[35] = X ^ ~Z & ee, e[44] = oe ^ ~se & ce, e[45] = ae ^ ~ue & fe, e[6] = A ^ ~_ & b, e[7] = k ^ ~S & y, e[16] = C ^ ~M & E, e[17] = I ^ ~U & x, e[26] = H ^ ~z & R, e[27] = q ^ ~G & j, e[36] = Q ^ ~$ & K, e[37] = Z ^ ~ee & V, e[46] = se ^ ~ce & te, e[47] = ue ^ ~fe & re, e[8] = _ ^ ~b & m, e[9] = S ^ ~y & v, e[18] = M ^ ~E & P, e[19] = U ^ ~x & O, e[28] = z ^ ~R & N, e[29] = G ^ ~j & F, e[38] = $ ^ ~K & J, e[39] = ee ^ ~V & W, e[48] = ce ^ ~te & ne, e[49] = fe ^ ~re & ie, e[0] ^= u[n], e[1] ^= u[n + 1];
            };
            if (o) e.exports = b;else for (m = 0; m < y.length; ++m) t[y[m]] = b[y[m]];
          }();
        },
        3135: function _(e, t, r) {
          "use strict";

          e.exports = r(2109)(r(801));
        },
        2109: function _(e, t, r) {
          "use strict";

          var n = r(6543),
            i = r(274);
          e.exports = function (e) {
            var t = n(e),
              r = i(e);
            return function (e, n) {
              switch ("string" == typeof e ? e.toLowerCase() : e) {
                case "keccak224":
                  return new t(1152, 448, null, 224, n);
                case "keccak256":
                  return new t(1088, 512, null, 256, n);
                case "keccak384":
                  return new t(832, 768, null, 384, n);
                case "keccak512":
                  return new t(576, 1024, null, 512, n);
                case "sha3-224":
                  return new t(1152, 448, 6, 224, n);
                case "sha3-256":
                  return new t(1088, 512, 6, 256, n);
                case "sha3-384":
                  return new t(832, 768, 6, 384, n);
                case "sha3-512":
                  return new t(576, 1024, 6, 512, n);
                case "shake128":
                  return new r(1344, 256, 31, n);
                case "shake256":
                  return new r(1088, 512, 31, n);
                default:
                  throw new Error("Invald algorithm: " + e);
              }
            };
          };
        },
        6543: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(8847),
            o = i(r(9721)),
            a = i(r(8985)),
            s = i(r(5163)),
            u = i(r(4650)),
            c = i(r(1949));
          var f = r(6505).Transform;
          e.exports = function (e) {
            return function (t) {
              (0, s.default)(d, t);
              var r,
                i,
                f = (r = d, i = function () {
                  if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                  if (Reflect.construct.sham) return !1;
                  if ("function" == typeof Proxy) return !0;
                  try {
                    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                  } catch (e) {
                    return !1;
                  }
                }(), function () {
                  var e,
                    t = (0, c.default)(r);
                  if (i) {
                    var n = (0, c.default)(this).constructor;
                    e = Reflect.construct(t, arguments, n);
                  } else e = t.apply(this, arguments);
                  return (0, u.default)(this, e);
                });
              function d(t, r, n, i, a) {
                var s;
                return (0, o.default)(this, d), (s = f.call(this, a))._rate = t, s._capacity = r, s._delimitedSuffix = n, s._hashBitLength = i, s._options = a, s._state = new e(), s._state.initialize(t, r), s._finalized = !1, s;
              }
              return (0, a.default)(d, [{
                key: "_transform",
                value: function value(e, t, r) {
                  var n = null;
                  try {
                    this.update(e, t);
                  } catch (e) {
                    n = e;
                  }
                  r(n);
                }
              }, {
                key: "_flush",
                value: function value(e) {
                  var t = null;
                  try {
                    this.push(this.digest());
                  } catch (e) {
                    t = e;
                  }
                  e(t);
                }
              }, {
                key: "update",
                value: function value(e, t) {
                  if (!n.isBuffer(e) && "string" != typeof e) throw new TypeError("Data must be a string or a buffer");
                  if (this._finalized) throw new Error("Digest already called");
                  return n.isBuffer(e) || (e = n.from(e, t)), this._state.absorb(e), this;
                }
              }, {
                key: "digest",
                value: function value(e) {
                  if (this._finalized) throw new Error("Digest already called");
                  this._finalized = !0, this._delimitedSuffix && this._state.absorbLastFewBits(this._delimitedSuffix);
                  var t = this._state.squeeze(this._hashBitLength / 8);
                  return void 0 !== e && (t = t.toString(e)), this._resetState(), t;
                }
              }, {
                key: "_resetState",
                value: function value() {
                  return this._state.initialize(this._rate, this._capacity), this;
                }
              }, {
                key: "_clone",
                value: function value() {
                  var e = new d(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
                  return this._state.copy(e._state), e._finalized = this._finalized, e;
                }
              }]), d;
            }(f);
          };
        },
        274: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(8847),
            o = i(r(9721)),
            a = i(r(8985)),
            s = i(r(5163)),
            u = i(r(4650)),
            c = i(r(1949));
          var f = r(6505).Transform;
          e.exports = function (e) {
            return function (t) {
              (0, s.default)(d, t);
              var r,
                i,
                f = (r = d, i = function () {
                  if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                  if (Reflect.construct.sham) return !1;
                  if ("function" == typeof Proxy) return !0;
                  try {
                    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                  } catch (e) {
                    return !1;
                  }
                }(), function () {
                  var e,
                    t = (0, c.default)(r);
                  if (i) {
                    var n = (0, c.default)(this).constructor;
                    e = Reflect.construct(t, arguments, n);
                  } else e = t.apply(this, arguments);
                  return (0, u.default)(this, e);
                });
              function d(t, r, n, i) {
                var a;
                return (0, o.default)(this, d), (a = f.call(this, i))._rate = t, a._capacity = r, a._delimitedSuffix = n, a._options = i, a._state = new e(), a._state.initialize(t, r), a._finalized = !1, a;
              }
              return (0, a.default)(d, [{
                key: "_transform",
                value: function value(e, t, r) {
                  var n = null;
                  try {
                    this.update(e, t);
                  } catch (e) {
                    n = e;
                  }
                  r(n);
                }
              }, {
                key: "_flush",
                value: function value() {}
              }, {
                key: "_read",
                value: function value(e) {
                  this.push(this.squeeze(e));
                }
              }, {
                key: "update",
                value: function value(e, t) {
                  if (!n.isBuffer(e) && "string" != typeof e) throw new TypeError("Data must be a string or a buffer");
                  if (this._finalized) throw new Error("Squeeze already called");
                  return n.isBuffer(e) || (e = n.from(e, t)), this._state.absorb(e), this;
                }
              }, {
                key: "squeeze",
                value: function value(e, t) {
                  this._finalized || (this._finalized = !0, this._state.absorbLastFewBits(this._delimitedSuffix));
                  var r = this._state.squeeze(e);
                  return void 0 !== t && (r = r.toString(t)), r;
                }
              }, {
                key: "_resetState",
                value: function value() {
                  return this._state.initialize(this._rate, this._capacity), this;
                }
              }, {
                key: "_clone",
                value: function value() {
                  var e = new d(this._rate, this._capacity, this._delimitedSuffix, this._options);
                  return this._state.copy(e._state), e._finalized = this._finalized, e;
                }
              }]), d;
            }(f);
          };
        },
        5612: function _(e, t) {
          "use strict";

          var r = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
          t.p1600 = function (e) {
            for (var t = 0; t < 24; ++t) {
              var n = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40],
                i = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41],
                o = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42],
                a = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43],
                s = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44],
                u = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45],
                c = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46],
                f = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47],
                d = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48],
                l = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49],
                h = d ^ (o << 1 | a >>> 31),
                p = l ^ (a << 1 | o >>> 31),
                b = e[0] ^ h,
                y = e[1] ^ p,
                m = e[10] ^ h,
                v = e[11] ^ p,
                g = e[20] ^ h,
                w = e[21] ^ p,
                A = e[30] ^ h,
                k = e[31] ^ p,
                _ = e[40] ^ h,
                S = e[41] ^ p;
              h = n ^ (s << 1 | u >>> 31), p = i ^ (u << 1 | s >>> 31);
              var E = e[2] ^ h,
                x = e[3] ^ p,
                P = e[12] ^ h,
                O = e[13] ^ p,
                B = e[22] ^ h,
                T = e[23] ^ p,
                C = e[32] ^ h,
                I = e[33] ^ p,
                M = e[42] ^ h,
                U = e[43] ^ p;
              h = o ^ (c << 1 | f >>> 31), p = a ^ (f << 1 | c >>> 31);
              var R = e[4] ^ h,
                j = e[5] ^ p,
                N = e[14] ^ h,
                F = e[15] ^ p,
                L = e[24] ^ h,
                D = e[25] ^ p,
                H = e[34] ^ h,
                q = e[35] ^ p,
                z = e[44] ^ h,
                G = e[45] ^ p;
              h = s ^ (d << 1 | l >>> 31), p = u ^ (l << 1 | d >>> 31);
              var K = e[6] ^ h,
                V = e[7] ^ p,
                J = e[16] ^ h,
                W = e[17] ^ p,
                Y = e[26] ^ h,
                X = e[27] ^ p,
                Q = e[36] ^ h,
                Z = e[37] ^ p,
                $ = e[46] ^ h,
                ee = e[47] ^ p;
              h = c ^ (n << 1 | i >>> 31), p = f ^ (i << 1 | n >>> 31);
              var te = e[8] ^ h,
                re = e[9] ^ p,
                ne = e[18] ^ h,
                ie = e[19] ^ p,
                oe = e[28] ^ h,
                ae = e[29] ^ p,
                se = e[38] ^ h,
                ue = e[39] ^ p,
                ce = e[48] ^ h,
                fe = e[49] ^ p,
                de = b,
                le = y,
                he = v << 4 | m >>> 28,
                pe = m << 4 | v >>> 28,
                be = g << 3 | w >>> 29,
                ye = w << 3 | g >>> 29,
                me = k << 9 | A >>> 23,
                ve = A << 9 | k >>> 23,
                ge = _ << 18 | S >>> 14,
                we = S << 18 | _ >>> 14,
                Ae = E << 1 | x >>> 31,
                ke = x << 1 | E >>> 31,
                _e = O << 12 | P >>> 20,
                Se = P << 12 | O >>> 20,
                Ee = B << 10 | T >>> 22,
                xe = T << 10 | B >>> 22,
                Pe = I << 13 | C >>> 19,
                Oe = C << 13 | I >>> 19,
                Be = M << 2 | U >>> 30,
                Te = U << 2 | M >>> 30,
                Ce = j << 30 | R >>> 2,
                Ie = R << 30 | j >>> 2,
                Me = N << 6 | F >>> 26,
                Ue = F << 6 | N >>> 26,
                Re = D << 11 | L >>> 21,
                je = L << 11 | D >>> 21,
                Ne = H << 15 | q >>> 17,
                Fe = q << 15 | H >>> 17,
                Le = G << 29 | z >>> 3,
                De = z << 29 | G >>> 3,
                He = K << 28 | V >>> 4,
                qe = V << 28 | K >>> 4,
                ze = W << 23 | J >>> 9,
                Ge = J << 23 | W >>> 9,
                Ke = Y << 25 | X >>> 7,
                Ve = X << 25 | Y >>> 7,
                Je = Q << 21 | Z >>> 11,
                We = Z << 21 | Q >>> 11,
                Ye = ee << 24 | $ >>> 8,
                Xe = $ << 24 | ee >>> 8,
                Qe = te << 27 | re >>> 5,
                Ze = re << 27 | te >>> 5,
                $e = ne << 20 | ie >>> 12,
                et = ie << 20 | ne >>> 12,
                tt = ae << 7 | oe >>> 25,
                rt = oe << 7 | ae >>> 25,
                nt = se << 8 | ue >>> 24,
                it = ue << 8 | se >>> 24,
                ot = ce << 14 | fe >>> 18,
                at = fe << 14 | ce >>> 18;
              e[0] = de ^ ~_e & Re, e[1] = le ^ ~Se & je, e[10] = He ^ ~$e & be, e[11] = qe ^ ~et & ye, e[20] = Ae ^ ~Me & Ke, e[21] = ke ^ ~Ue & Ve, e[30] = Qe ^ ~he & Ee, e[31] = Ze ^ ~pe & xe, e[40] = Ce ^ ~ze & tt, e[41] = Ie ^ ~Ge & rt, e[2] = _e ^ ~Re & Je, e[3] = Se ^ ~je & We, e[12] = $e ^ ~be & Pe, e[13] = et ^ ~ye & Oe, e[22] = Me ^ ~Ke & nt, e[23] = Ue ^ ~Ve & it, e[32] = he ^ ~Ee & Ne, e[33] = pe ^ ~xe & Fe, e[42] = ze ^ ~tt & me, e[43] = Ge ^ ~rt & ve, e[4] = Re ^ ~Je & ot, e[5] = je ^ ~We & at, e[14] = be ^ ~Pe & Le, e[15] = ye ^ ~Oe & De, e[24] = Ke ^ ~nt & ge, e[25] = Ve ^ ~it & we, e[34] = Ee ^ ~Ne & Ye, e[35] = xe ^ ~Fe & Xe, e[44] = tt ^ ~me & Be, e[45] = rt ^ ~ve & Te, e[6] = Je ^ ~ot & de, e[7] = We ^ ~at & le, e[16] = Pe ^ ~Le & He, e[17] = Oe ^ ~De & qe, e[26] = nt ^ ~ge & Ae, e[27] = it ^ ~we & ke, e[36] = Ne ^ ~Ye & Qe, e[37] = Fe ^ ~Xe & Ze, e[46] = me ^ ~Be & Ce, e[47] = ve ^ ~Te & Ie, e[8] = ot ^ ~de & _e, e[9] = at ^ ~le & Se, e[18] = Le ^ ~He & $e, e[19] = De ^ ~qe & et, e[28] = ge ^ ~Ae & Me, e[29] = we ^ ~ke & Ue, e[38] = Ye ^ ~Qe & he, e[39] = Xe ^ ~Ze & pe, e[48] = Be ^ ~Ce & ze, e[49] = Te ^ ~Ie & Ge, e[0] ^= r[2 * t], e[1] ^= r[2 * t + 1];
            }
          };
        },
        801: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(5612);
          function o() {
            this.state = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], this.blockSize = null, this.count = 0, this.squeezing = !1;
          }
          o.prototype.initialize = function (e, t) {
            for (var r = 0; r < 50; ++r) this.state[r] = 0;
            this.blockSize = e / 8, this.count = 0, this.squeezing = !1;
          }, o.prototype.absorb = function (e) {
            for (var t = 0; t < e.length; ++t) this.state[~~(this.count / 4)] ^= e[t] << this.count % 4 * 8, this.count += 1, this.count === this.blockSize && (i.p1600(this.state), this.count = 0);
          }, o.prototype.absorbLastFewBits = function (e) {
            this.state[~~(this.count / 4)] ^= e << this.count % 4 * 8, 0 != (128 & e) && this.count === this.blockSize - 1 && i.p1600(this.state), this.state[~~((this.blockSize - 1) / 4)] ^= 128 << (this.blockSize - 1) % 4 * 8, i.p1600(this.state), this.count = 0, this.squeezing = !0;
          }, o.prototype.squeeze = function (e) {
            this.squeezing || this.absorbLastFewBits(1);
            for (var t = n.alloc(e), r = 0; r < e; ++r) t[r] = this.state[~~(this.count / 4)] >>> this.count % 4 * 8 & 255, this.count += 1, this.count === this.blockSize && (i.p1600(this.state), this.count = 0);
            return t;
          }, o.prototype.copy = function (e) {
            for (var t = 0; t < 50; ++t) e.state[t] = this.state[t];
            e.blockSize = this.blockSize, e.count = this.count, e.squeezing = this.squeezing;
          }, e.exports = o;
        },
        807: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(2353),
            o = r(8850).Buffer,
            a = new Array(16);
          function s() {
            i.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
          }
          function u(e, t) {
            return e << t | e >>> 32 - t;
          }
          function c(e, t, r, n, i, o, a) {
            return u(e + (t & r | ~t & n) + i + o | 0, a) + t | 0;
          }
          function f(e, t, r, n, i, o, a) {
            return u(e + (t & n | r & ~n) + i + o | 0, a) + t | 0;
          }
          function d(e, t, r, n, i, o, a) {
            return u(e + (t ^ r ^ n) + i + o | 0, a) + t | 0;
          }
          function l(e, t, r, n, i, o, a) {
            return u(e + (r ^ (t | ~n)) + i + o | 0, a) + t | 0;
          }
          n(s, i), s.prototype._update = function () {
            for (var e = a, t = 0; t < 16; ++t) e[t] = this._block.readInt32LE(4 * t);
            var r = this._a,
              n = this._b,
              i = this._c,
              o = this._d;
            r = c(r, n, i, o, e[0], 3614090360, 7), o = c(o, r, n, i, e[1], 3905402710, 12), i = c(i, o, r, n, e[2], 606105819, 17), n = c(n, i, o, r, e[3], 3250441966, 22), r = c(r, n, i, o, e[4], 4118548399, 7), o = c(o, r, n, i, e[5], 1200080426, 12), i = c(i, o, r, n, e[6], 2821735955, 17), n = c(n, i, o, r, e[7], 4249261313, 22), r = c(r, n, i, o, e[8], 1770035416, 7), o = c(o, r, n, i, e[9], 2336552879, 12), i = c(i, o, r, n, e[10], 4294925233, 17), n = c(n, i, o, r, e[11], 2304563134, 22), r = c(r, n, i, o, e[12], 1804603682, 7), o = c(o, r, n, i, e[13], 4254626195, 12), i = c(i, o, r, n, e[14], 2792965006, 17), r = f(r, n = c(n, i, o, r, e[15], 1236535329, 22), i, o, e[1], 4129170786, 5), o = f(o, r, n, i, e[6], 3225465664, 9), i = f(i, o, r, n, e[11], 643717713, 14), n = f(n, i, o, r, e[0], 3921069994, 20), r = f(r, n, i, o, e[5], 3593408605, 5), o = f(o, r, n, i, e[10], 38016083, 9), i = f(i, o, r, n, e[15], 3634488961, 14), n = f(n, i, o, r, e[4], 3889429448, 20), r = f(r, n, i, o, e[9], 568446438, 5), o = f(o, r, n, i, e[14], 3275163606, 9), i = f(i, o, r, n, e[3], 4107603335, 14), n = f(n, i, o, r, e[8], 1163531501, 20), r = f(r, n, i, o, e[13], 2850285829, 5), o = f(o, r, n, i, e[2], 4243563512, 9), i = f(i, o, r, n, e[7], 1735328473, 14), r = d(r, n = f(n, i, o, r, e[12], 2368359562, 20), i, o, e[5], 4294588738, 4), o = d(o, r, n, i, e[8], 2272392833, 11), i = d(i, o, r, n, e[11], 1839030562, 16), n = d(n, i, o, r, e[14], 4259657740, 23), r = d(r, n, i, o, e[1], 2763975236, 4), o = d(o, r, n, i, e[4], 1272893353, 11), i = d(i, o, r, n, e[7], 4139469664, 16), n = d(n, i, o, r, e[10], 3200236656, 23), r = d(r, n, i, o, e[13], 681279174, 4), o = d(o, r, n, i, e[0], 3936430074, 11), i = d(i, o, r, n, e[3], 3572445317, 16), n = d(n, i, o, r, e[6], 76029189, 23), r = d(r, n, i, o, e[9], 3654602809, 4), o = d(o, r, n, i, e[12], 3873151461, 11), i = d(i, o, r, n, e[15], 530742520, 16), r = l(r, n = d(n, i, o, r, e[2], 3299628645, 23), i, o, e[0], 4096336452, 6), o = l(o, r, n, i, e[7], 1126891415, 10), i = l(i, o, r, n, e[14], 2878612391, 15), n = l(n, i, o, r, e[5], 4237533241, 21), r = l(r, n, i, o, e[12], 1700485571, 6), o = l(o, r, n, i, e[3], 2399980690, 10), i = l(i, o, r, n, e[10], 4293915773, 15), n = l(n, i, o, r, e[1], 2240044497, 21), r = l(r, n, i, o, e[8], 1873313359, 6), o = l(o, r, n, i, e[15], 4264355552, 10), i = l(i, o, r, n, e[6], 2734768916, 15), n = l(n, i, o, r, e[13], 1309151649, 21), r = l(r, n, i, o, e[4], 4149444226, 6), o = l(o, r, n, i, e[11], 3174756917, 10), i = l(i, o, r, n, e[2], 718787259, 15), n = l(n, i, o, r, e[9], 3951481745, 21), this._a = this._a + r | 0, this._b = this._b + n | 0, this._c = this._c + i | 0, this._d = this._d + o | 0;
          }, s.prototype._digest = function () {
            this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
            var e = o.allocUnsafe(16);
            return e.writeInt32LE(this._a, 0), e.writeInt32LE(this._b, 4), e.writeInt32LE(this._c, 8), e.writeInt32LE(this._d, 12), e;
          }, e.exports = s;
        },
        137: function _(e, t, r) {
          "use strict";

          var n = r(1734),
            i = r(2202);
          function o(e) {
            this.rand = e || new i.Rand();
          }
          e.exports = o, o.create = function (e) {
            return new o(e);
          }, o.prototype._randbelow = function (e) {
            var t = e.bitLength(),
              r = Math.ceil(t / 8);
            do {
              var i = new n(this.rand.generate(r));
            } while (i.cmp(e) >= 0);
            return i;
          }, o.prototype._randrange = function (e, t) {
            var r = t.sub(e);
            return e.add(this._randbelow(r));
          }, o.prototype.test = function (e, t, r) {
            var i = e.bitLength(),
              o = n.mont(e),
              a = new n(1).toRed(o);
            t || (t = Math.max(1, i / 48 | 0));
            for (var s = e.subn(1), u = 0; !s.testn(u); u++);
            for (var c = e.shrn(u), f = s.toRed(o); t > 0; t--) {
              var d = this._randrange(new n(2), s);
              r && r(d);
              var l = d.toRed(o).redPow(c);
              if (0 !== l.cmp(a) && 0 !== l.cmp(f)) {
                for (var h = 1; h < u; h++) {
                  if (0 === (l = l.redSqr()).cmp(a)) return !1;
                  if (0 === l.cmp(f)) break;
                }
                if (h === u) return !1;
              }
            }
            return !0;
          }, o.prototype.getDivisor = function (e, t) {
            var r = e.bitLength(),
              i = n.mont(e),
              o = new n(1).toRed(i);
            t || (t = Math.max(1, r / 48 | 0));
            for (var a = e.subn(1), s = 0; !a.testn(s); s++);
            for (var u = e.shrn(s), c = a.toRed(i); t > 0; t--) {
              var f = this._randrange(new n(2), a),
                d = e.gcd(f);
              if (0 !== d.cmpn(1)) return d;
              var l = f.toRed(i).redPow(u);
              if (0 !== l.cmp(o) && 0 !== l.cmp(c)) {
                for (var h = 1; h < s; h++) {
                  if (0 === (l = l.redSqr()).cmp(o)) return l.fromRed().subn(1).gcd(e);
                  if (0 === l.cmp(c)) break;
                }
                if (h === s) return (l = l.redSqr()).fromRed().subn(1).gcd(e);
              }
            }
            return !1;
          };
        },
        4504: function _(e) {
          "use strict";

          function t(e, t) {
            if (!e) throw new Error(t || "Assertion failed");
          }
          e.exports = t, t.equal = function (e, t, r) {
            if (e != t) throw new Error(r || "Assertion failed: " + e + " != " + t);
          };
        },
        6580: function _(e, t) {
          "use strict";

          var r = t;
          function n(e) {
            return 1 === e.length ? "0" + e : e;
          }
          function i(e) {
            for (var t = "", r = 0; r < e.length; r++) t += n(e[r].toString(16));
            return t;
          }
          r.toArray = function (e, t) {
            if (Array.isArray(e)) return e.slice();
            if (!e) return [];
            var r = [];
            if ("string" != typeof e) {
              for (var n = 0; n < e.length; n++) r[n] = 0 | e[n];
              return r;
            }
            if ("hex" === t) for ((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), n = 0; n < e.length; n += 2) r.push(parseInt(e[n] + e[n + 1], 16));else for (n = 0; n < e.length; n++) {
              var i = e.charCodeAt(n),
                o = i >> 8,
                a = 255 & i;
              o ? r.push(o, a) : r.push(a);
            }
            return r;
          }, r.zero2 = n, r.toHex = i, r.encode = function (e, t) {
            return "hex" === t ? i(e) : e;
          };
        },
        6565: function _(e, t, r) {
          "use strict";

          var n = r(8847),
            i = n(r(9721)),
            o = n(r(8985)),
            a = function () {
              function e(t, r, n, o) {
                (0, i.default)(this, e), this.name = t, this.code = r, this.alphabet = o, n && o && (this.engine = n(o));
              }
              return (0, o.default)(e, [{
                key: "encode",
                value: function value(e) {
                  return this.engine.encode(e);
                }
              }, {
                key: "decode",
                value: function value(e) {
                  return this.engine.decode(e);
                }
              }, {
                key: "isImplemented",
                value: function value() {
                  return this.engine;
                }
              }]), e;
            }();
          e.exports = a;
        },
        2642: function _(e, t, r) {
          "use strict";

          function n(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          var i = r(9033).Buffer;
          e.exports = function (e) {
            return {
              encode: function encode(e) {
                return "string" == typeof e ? i.from(e).toString("hex") : e.toString("hex");
              },
              decode: function decode(t) {
                var r,
                  o = function (e, t) {
                    var r = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                    if (!r) {
                      if (Array.isArray(e) || (r = function (e, t) {
                        if (e) {
                          if ("string" == typeof e) return n(e, t);
                          var r = Object.prototype.toString.call(e).slice(8, -1);
                          return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? n(e, t) : void 0;
                        }
                      }(e)) || t && e && "number" == typeof e.length) {
                        r && (e = r);
                        var i = 0,
                          o = function o() {};
                        return {
                          s: o,
                          n: function n() {
                            return i >= e.length ? {
                              done: !0
                            } : {
                              done: !1,
                              value: e[i++]
                            };
                          },
                          e: function e(_e6) {
                            throw _e6;
                          },
                          f: o
                        };
                      }
                      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a,
                      s = !0,
                      u = !1;
                    return {
                      s: function s() {
                        r = r.call(e);
                      },
                      n: function n() {
                        var e = r.next();
                        return s = e.done, e;
                      },
                      e: function e(_e7) {
                        u = !0, a = _e7;
                      },
                      f: function f() {
                        try {
                          s || null == r.return || r.return();
                        } finally {
                          if (u) throw a;
                        }
                      }
                    };
                  }(t);
                try {
                  for (o.s(); !(r = o.n()).done;) {
                    var a = r.value;
                    if (e.indexOf(a) < 0) throw new Error("invalid base16 character");
                  }
                } catch (e) {
                  o.e(e);
                } finally {
                  o.f();
                }
                return i.from(t, "hex");
              }
            };
          };
        },
        6494: function _(e) {
          "use strict";

          function t(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          e.exports = function (e) {
            return {
              encode: function encode(t) {
                return function (e, t) {
                  var r = e.byteLength,
                    n = new Uint8Array(e),
                    i = t.indexOf("=") === t.length - 1;
                  i && (t = t.substring(0, t.length - 1));
                  for (var o = 0, a = 0, s = "", u = 0; u < r; u++) for (a = a << 8 | n[u], o += 8; o >= 5;) s += t[a >>> o - 5 & 31], o -= 5;
                  if (o > 0 && (s += t[a << 5 - o & 31]), i) for (; s.length % 8 != 0;) s += "=";
                  return s;
                }("string" == typeof t ? Uint8Array.from(t) : t, e);
              },
              decode: function decode(r) {
                var n,
                  i = function (e, r) {
                    var _n7 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                    if (!_n7) {
                      if (Array.isArray(e) || (_n7 = function (e, r) {
                        if (e) {
                          if ("string" == typeof e) return t(e, r);
                          var n = Object.prototype.toString.call(e).slice(8, -1);
                          return "Object" === n && e.constructor && (n = e.constructor.name), "Map" === n || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? t(e, r) : void 0;
                        }
                      }(e)) || r && e && "number" == typeof e.length) {
                        _n7 && (e = _n7);
                        var i = 0,
                          o = function o() {};
                        return {
                          s: o,
                          n: function n() {
                            return i >= e.length ? {
                              done: !0
                            } : {
                              done: !1,
                              value: e[i++]
                            };
                          },
                          e: function e(_e8) {
                            throw _e8;
                          },
                          f: o
                        };
                      }
                      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a,
                      s = !0,
                      u = !1;
                    return {
                      s: function s() {
                        _n7 = _n7.call(e);
                      },
                      n: function n() {
                        var e = _n7.next();
                        return s = e.done, e;
                      },
                      e: function e(_e9) {
                        u = !0, a = _e9;
                      },
                      f: function f() {
                        try {
                          s || null == _n7.return || _n7.return();
                        } finally {
                          if (u) throw a;
                        }
                      }
                    };
                  }(r);
                try {
                  for (i.s(); !(n = i.n()).done;) {
                    var o = n.value;
                    if (e.indexOf(o) < 0) throw new Error("invalid base32 character");
                  }
                } catch (e) {
                  i.e(e);
                } finally {
                  i.f();
                }
                return function (e, t) {
                  for (var r = (e = e.replace(new RegExp("=", "g"), "")).length, n = 0, i = 0, o = 0, a = new Uint8Array(5 * r / 8 | 0), s = 0; s < r; s++) i = i << 5 | t.indexOf(e[s]), (n += 5) >= 8 && (a[o++] = i >>> n - 8 & 255, n -= 8);
                  return a.buffer;
                }(r, e);
              }
            };
          };
        },
        6627: function _(e, t, r) {
          "use strict";

          function n(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          var i = r(9033).Buffer;
          e.exports = function (e) {
            var t = e.indexOf("=") > -1,
              r = e.indexOf("-") > -1 && e.indexOf("_") > -1;
            return {
              encode: function encode(e) {
                var n = "";
                n = "string" == typeof e ? i.from(e).toString("base64") : e.toString("base64"), r && (n = n.replace(/\+/g, "-").replace(/\//g, "_"));
                var o = n.indexOf("=");
                return o > 0 && !t && (n = n.substring(0, o)), n;
              },
              decode: function decode(t) {
                var r,
                  o = function (e, t) {
                    var r = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                    if (!r) {
                      if (Array.isArray(e) || (r = function (e, t) {
                        if (e) {
                          if ("string" == typeof e) return n(e, t);
                          var r = Object.prototype.toString.call(e).slice(8, -1);
                          return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? n(e, t) : void 0;
                        }
                      }(e)) || t && e && "number" == typeof e.length) {
                        r && (e = r);
                        var i = 0,
                          o = function o() {};
                        return {
                          s: o,
                          n: function n() {
                            return i >= e.length ? {
                              done: !0
                            } : {
                              done: !1,
                              value: e[i++]
                            };
                          },
                          e: function e(_e10) {
                            throw _e10;
                          },
                          f: o
                        };
                      }
                      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a,
                      s = !0,
                      u = !1;
                    return {
                      s: function s() {
                        r = r.call(e);
                      },
                      n: function n() {
                        var e = r.next();
                        return s = e.done, e;
                      },
                      e: function e(_e11) {
                        u = !0, a = _e11;
                      },
                      f: function f() {
                        try {
                          s || null == r.return || r.return();
                        } finally {
                          if (u) throw a;
                        }
                      }
                    };
                  }(t);
                try {
                  for (o.s(); !(r = o.n()).done;) {
                    var a = r.value;
                    if (e.indexOf(a) < 0) throw new Error("invalid base64 character");
                  }
                } catch (e) {
                  o.e(e);
                } finally {
                  o.f();
                }
                return i.from(t, "base64");
              }
            };
          };
        },
        7905: function _(e, t, r) {
          "use strict";

          var n = r(6565),
            i = r(7548),
            o = r(2642),
            a = r(6494),
            s = r(6627),
            u = [["base1", "1", "", "1"], ["base2", "0", i, "01"], ["base8", "7", i, "01234567"], ["base10", "9", i, "0123456789"], ["base16", "f", o, "0123456789abcdef"], ["base32", "b", a, "abcdefghijklmnopqrstuvwxyz234567"], ["base32pad", "c", a, "abcdefghijklmnopqrstuvwxyz234567="], ["base32hex", "v", a, "0123456789abcdefghijklmnopqrstuv"], ["base32hexpad", "t", a, "0123456789abcdefghijklmnopqrstuv="], ["base32z", "h", a, "ybndrfg8ejkmcpqxot1uwisza345h769"], ["base58flickr", "Z", i, "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"], ["base58btc", "z", i, "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"], ["base64", "m", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"], ["base64pad", "M", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="], ["base64url", "u", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"], ["base64urlpad", "U", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_="]],
            c = u.reduce(function (e, t) {
              return e[t[0]] = new n(t[0], t[1], t[2], t[3]), e;
            }, {}),
            f = u.reduce(function (e, t) {
              return e[t[1]] = c[t[0]], e;
            }, {});
          e.exports = {
            names: c,
            codes: f
          };
        },
        6086: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(7905);
          (t = e.exports = a).encode = function (e, t) {
            var r = s(e);
            return a(r.name, n.from(r.encode(t)));
          }, t.decode = function (e) {
            n.isBuffer(e) && (e = e.toString());
            var t = e.substring(0, 1);
            "string" == typeof (e = e.substring(1, e.length)) && (e = n.from(e));
            var r = s(t);
            return n.from(r.decode(e.toString()));
          }, t.isEncoded = function (e) {
            if (n.isBuffer(e) && (e = e.toString()), "[object String]" !== Object.prototype.toString.call(e)) return !1;
            var t = e.substring(0, 1);
            try {
              return s(t).name;
            } catch (e) {
              return !1;
            }
          }, t.names = Object.freeze(Object.keys(i.names)), t.codes = Object.freeze(Object.keys(i.codes));
          var o = new Error("Unsupported encoding");
          function a(e, t) {
            if (!t) throw new Error("requires an encoded buffer");
            var r = s(e),
              i = n.from(r.code);
            return function (e, t) {
              s(e).decode(t.toString());
            }(r.name, t), n.concat([i, t]);
          }
          function s(e) {
            var t;
            if (i.names[e]) t = i.names[e];else {
              if (!i.codes[e]) throw o;
              t = i.codes[e];
            }
            if (!t.isImplemented()) throw new Error("Base " + e + " is not implemented yet");
            return t;
          }
        },
        4093: function _(e, t, r) {
          "use strict";

          for (var n = r(8847)(r(4519)), i = r(4070), o = {}, a = 0, s = Object.entries(i); a < s.length; a++) {
            var u = (0, n.default)(s[a], 2),
              c = u[0],
              f = u[1];
            o[c.toUpperCase().replace(/-/g, "_")] = f;
          }
          e.exports = Object.freeze(o);
        },
        9206: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(6657),
            o = r(7054),
            a = r(6002),
            s = r(5576);
          (t = e.exports).addPrefix = function (e, t) {
            var r;
            if (n.isBuffer(e)) r = s.varintBufferEncode(e);else {
              if (!a[e]) throw new Error("multicodec not recognized");
              r = a[e];
            }
            return n.concat([r, t]);
          }, t.rmPrefix = function (e) {
            return i.decode(e), e.slice(i.decode.bytes);
          }, t.getCodec = function (e) {
            var t = i.decode(e),
              r = o.get(t);
            if (void 0 === r) throw new Error("Code ".concat(t, " not found"));
            return r;
          }, t.getName = function (e) {
            return o.get(e);
          }, t.getNumber = function (e) {
            var t = a[e];
            if (void 0 === t) throw new Error("Codec `" + e + "` not found");
            return s.varintBufferDecode(t)[0];
          }, t.getCode = function (e) {
            return i.decode(e);
          }, t.getCodeVarint = function (e) {
            var t = a[e];
            if (void 0 === t) throw new Error("Codec `" + e + "` not found");
            return t;
          }, t.getVarint = function (e) {
            return i.encode(e);
          };
          var u = r(4093);
          Object.assign(t, u), t.print = r(1032);
        },
        7054: function _(e, t, r) {
          "use strict";

          var n = r(4070),
            i = new Map();
          for (var o in n) {
            var a = n[o];
            i.set(a, o);
          }
          e.exports = Object.freeze(i);
        },
        1032: function _(e, t, r) {
          "use strict";

          for (var n = r(8847)(r(4519)), i = r(4070), o = {}, a = 0, s = Object.entries(i); a < s.length; a++) {
            var u = (0, n.default)(s[a], 2),
              c = u[0],
              f = u[1];
            void 0 === o[f] && (o[f] = c);
          }
          e.exports = Object.freeze(o);
        },
        5576: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(6657);
          function o(e) {
            return parseInt(e.toString("hex"), 16);
          }
          function a(e) {
            var t = e.toString(16);
            return t.length % 2 == 1 && (t = "0" + t), n.from(t, "hex");
          }
          e.exports = {
            numberToBuffer: a,
            bufferToNumber: o,
            varintBufferEncode: function varintBufferEncode(e) {
              return n.from(i.encode(o(e)));
            },
            varintBufferDecode: function varintBufferDecode(e) {
              return a(i.decode(e));
            },
            varintEncode: function varintEncode(e) {
              return n.from(i.encode(e));
            }
          };
        },
        6002: function _(e, t, r) {
          "use strict";

          var n = r(4070),
            i = r(5576).varintEncode,
            o = {};
          for (var a in n) {
            var s = n[a];
            o[a] = i(s);
          }
          e.exports = Object.freeze(o);
        },
        1786: function _(e, t, r) {
          "use strict";

          var n = r(8847),
            i = n(r(9721)),
            o = n(r(8985)),
            a = function () {
              function e(t, r, n, o) {
                (0, i.default)(this, e), this.name = t, this.code = r, this.alphabet = o, n && o && (this.engine = n(o));
              }
              return (0, o.default)(e, [{
                key: "encode",
                value: function value(e) {
                  return this.engine.encode(e);
                }
              }, {
                key: "decode",
                value: function value(e) {
                  return this.engine.decode(e);
                }
              }, {
                key: "isImplemented",
                value: function value() {
                  return this.engine;
                }
              }]), e;
            }();
          e.exports = a;
        },
        7739: function _(e, t, r) {
          "use strict";

          function n(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          var i = r(9033).Buffer;
          e.exports = function (e) {
            return {
              encode: function encode(e) {
                return "string" == typeof e ? i.from(e).toString("hex") : e.toString("hex");
              },
              decode: function decode(t) {
                var r,
                  o = function (e, t) {
                    var r = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                    if (!r) {
                      if (Array.isArray(e) || (r = function (e, t) {
                        if (e) {
                          if ("string" == typeof e) return n(e, t);
                          var r = Object.prototype.toString.call(e).slice(8, -1);
                          return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? n(e, t) : void 0;
                        }
                      }(e)) || t && e && "number" == typeof e.length) {
                        r && (e = r);
                        var i = 0,
                          o = function o() {};
                        return {
                          s: o,
                          n: function n() {
                            return i >= e.length ? {
                              done: !0
                            } : {
                              done: !1,
                              value: e[i++]
                            };
                          },
                          e: function e(_e12) {
                            throw _e12;
                          },
                          f: o
                        };
                      }
                      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a,
                      s = !0,
                      u = !1;
                    return {
                      s: function s() {
                        r = r.call(e);
                      },
                      n: function n() {
                        var e = r.next();
                        return s = e.done, e;
                      },
                      e: function e(_e13) {
                        u = !0, a = _e13;
                      },
                      f: function f() {
                        try {
                          s || null == r.return || r.return();
                        } finally {
                          if (u) throw a;
                        }
                      }
                    };
                  }(t);
                try {
                  for (o.s(); !(r = o.n()).done;) {
                    var a = r.value;
                    if (e.indexOf(a) < 0) throw new Error("invalid base16 character");
                  }
                } catch (e) {
                  o.e(e);
                } finally {
                  o.f();
                }
                return i.from(t, "hex");
              }
            };
          };
        },
        976: function _(e) {
          "use strict";

          function t(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          e.exports = function (e) {
            return {
              encode: function encode(t) {
                return function (e, t) {
                  var r = e.byteLength,
                    n = new Uint8Array(e),
                    i = t.indexOf("=") === t.length - 1;
                  i && (t = t.substring(0, t.length - 1));
                  for (var o = 0, a = 0, s = "", u = 0; u < r; u++) for (a = a << 8 | n[u], o += 8; o >= 5;) s += t[a >>> o - 5 & 31], o -= 5;
                  if (o > 0 && (s += t[a << 5 - o & 31]), i) for (; s.length % 8 != 0;) s += "=";
                  return s;
                }("string" == typeof t ? Uint8Array.from(t) : t, e);
              },
              decode: function decode(r) {
                var n,
                  i = function (e, r) {
                    var _n8 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                    if (!_n8) {
                      if (Array.isArray(e) || (_n8 = function (e, r) {
                        if (e) {
                          if ("string" == typeof e) return t(e, r);
                          var n = Object.prototype.toString.call(e).slice(8, -1);
                          return "Object" === n && e.constructor && (n = e.constructor.name), "Map" === n || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? t(e, r) : void 0;
                        }
                      }(e)) || r && e && "number" == typeof e.length) {
                        _n8 && (e = _n8);
                        var i = 0,
                          o = function o() {};
                        return {
                          s: o,
                          n: function n() {
                            return i >= e.length ? {
                              done: !0
                            } : {
                              done: !1,
                              value: e[i++]
                            };
                          },
                          e: function e(_e14) {
                            throw _e14;
                          },
                          f: o
                        };
                      }
                      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a,
                      s = !0,
                      u = !1;
                    return {
                      s: function s() {
                        _n8 = _n8.call(e);
                      },
                      n: function n() {
                        var e = _n8.next();
                        return s = e.done, e;
                      },
                      e: function e(_e15) {
                        u = !0, a = _e15;
                      },
                      f: function f() {
                        try {
                          s || null == _n8.return || _n8.return();
                        } finally {
                          if (u) throw a;
                        }
                      }
                    };
                  }(r);
                try {
                  for (i.s(); !(n = i.n()).done;) {
                    var o = n.value;
                    if (e.indexOf(o) < 0) throw new Error("invalid base32 character");
                  }
                } catch (e) {
                  i.e(e);
                } finally {
                  i.f();
                }
                return function (e, t) {
                  for (var r = (e = e.replace(new RegExp("=", "g"), "")).length, n = 0, i = 0, o = 0, a = new Uint8Array(5 * r / 8 | 0), s = 0; s < r; s++) i = i << 5 | t.indexOf(e[s]), (n += 5) >= 8 && (a[o++] = i >>> n - 8 & 255, n -= 8);
                  return a.buffer;
                }(r, e);
              }
            };
          };
        },
        8504: function _(e, t, r) {
          "use strict";

          function n(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          var i = r(9033).Buffer;
          e.exports = function (e) {
            var t = e.indexOf("=") > -1,
              r = e.indexOf("-") > -1 && e.indexOf("_") > -1;
            return {
              encode: function encode(e) {
                var n = "";
                n = "string" == typeof e ? i.from(e).toString("base64") : e.toString("base64"), r && (n = n.replace(/\+/g, "-").replace(/\//g, "_"));
                var o = n.indexOf("=");
                return o > 0 && !t && (n = n.substring(0, o)), n;
              },
              decode: function decode(t) {
                var r,
                  o = function (e, t) {
                    var r = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                    if (!r) {
                      if (Array.isArray(e) || (r = function (e, t) {
                        if (e) {
                          if ("string" == typeof e) return n(e, t);
                          var r = Object.prototype.toString.call(e).slice(8, -1);
                          return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? n(e, t) : void 0;
                        }
                      }(e)) || t && e && "number" == typeof e.length) {
                        r && (e = r);
                        var i = 0,
                          o = function o() {};
                        return {
                          s: o,
                          n: function n() {
                            return i >= e.length ? {
                              done: !0
                            } : {
                              done: !1,
                              value: e[i++]
                            };
                          },
                          e: function e(_e16) {
                            throw _e16;
                          },
                          f: o
                        };
                      }
                      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a,
                      s = !0,
                      u = !1;
                    return {
                      s: function s() {
                        r = r.call(e);
                      },
                      n: function n() {
                        var e = r.next();
                        return s = e.done, e;
                      },
                      e: function e(_e17) {
                        u = !0, a = _e17;
                      },
                      f: function f() {
                        try {
                          s || null == r.return || r.return();
                        } finally {
                          if (u) throw a;
                        }
                      }
                    };
                  }(t);
                try {
                  for (o.s(); !(r = o.n()).done;) {
                    var a = r.value;
                    if (e.indexOf(a) < 0) throw new Error("invalid base64 character");
                  }
                } catch (e) {
                  o.e(e);
                } finally {
                  o.f();
                }
                return i.from(t, "base64");
              }
            };
          };
        },
        2263: function _(e, t, r) {
          "use strict";

          var n = r(1786),
            i = r(7548),
            o = r(7739),
            a = r(976),
            s = r(8504),
            u = [["base1", "1", "", "1"], ["base2", "0", i, "01"], ["base8", "7", i, "01234567"], ["base10", "9", i, "0123456789"], ["base16", "f", o, "0123456789abcdef"], ["base32", "b", a, "abcdefghijklmnopqrstuvwxyz234567"], ["base32pad", "c", a, "abcdefghijklmnopqrstuvwxyz234567="], ["base32hex", "v", a, "0123456789abcdefghijklmnopqrstuv"], ["base32hexpad", "t", a, "0123456789abcdefghijklmnopqrstuv="], ["base32z", "h", a, "ybndrfg8ejkmcpqxot1uwisza345h769"], ["base58flickr", "Z", i, "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"], ["base58btc", "z", i, "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"], ["base64", "m", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"], ["base64pad", "M", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="], ["base64url", "u", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"], ["base64urlpad", "U", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_="]],
            c = u.reduce(function (e, t) {
              return e[t[0]] = new n(t[0], t[1], t[2], t[3]), e;
            }, {}),
            f = u.reduce(function (e, t) {
              return e[t[1]] = c[t[0]], e;
            }, {});
          e.exports = {
            names: c,
            codes: f
          };
        },
        2592: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(2263);
          function o(e, t) {
            if (!t) throw new Error("requires an encoded buffer");
            var r = a(e),
              i = n.from(r.code);
            return function (e, t) {
              a(e).decode(t.toString());
            }(r.name, t), n.concat([i, t]);
          }
          function a(e) {
            var t;
            if (i.names[e]) t = i.names[e];else {
              if (!i.codes[e]) throw new Error("Unsupported encoding");
              t = i.codes[e];
            }
            if (!t.isImplemented()) throw new Error("Base " + e + " is not implemented yet");
            return t;
          }
          (t = e.exports = o).encode = function (e, t) {
            var r = a(e);
            return o(r.name, n.from(r.encode(t)));
          }, t.decode = function (e) {
            n.isBuffer(e) && (e = e.toString());
            var t = e.substring(0, 1);
            "string" == typeof (e = e.substring(1, e.length)) && (e = n.from(e));
            var r = a(t);
            return n.from(r.decode(e.toString()));
          }, t.isEncoded = function (e) {
            if (n.isBuffer(e) && (e = e.toString()), "[object String]" !== Object.prototype.toString.call(e)) return !1;
            var t = e.substring(0, 1);
            try {
              return a(t).name;
            } catch (e) {
              return !1;
            }
          }, t.names = Object.freeze(Object.keys(i.names)), t.codes = Object.freeze(Object.keys(i.codes));
        },
        1269: function _(e, t) {
          "use strict";

          t.names = Object.freeze({
            identity: 0,
            sha1: 17,
            "sha2-256": 18,
            "sha2-512": 19,
            "dbl-sha2-256": 86,
            "sha3-224": 23,
            "sha3-256": 22,
            "sha3-384": 21,
            "sha3-512": 20,
            "shake-128": 24,
            "shake-256": 25,
            "keccak-224": 26,
            "keccak-256": 27,
            "keccak-384": 28,
            "keccak-512": 29,
            "murmur3-128": 34,
            "murmur3-32": 35,
            md4: 212,
            md5: 213,
            "blake2b-8": 45569,
            "blake2b-16": 45570,
            "blake2b-24": 45571,
            "blake2b-32": 45572,
            "blake2b-40": 45573,
            "blake2b-48": 45574,
            "blake2b-56": 45575,
            "blake2b-64": 45576,
            "blake2b-72": 45577,
            "blake2b-80": 45578,
            "blake2b-88": 45579,
            "blake2b-96": 45580,
            "blake2b-104": 45581,
            "blake2b-112": 45582,
            "blake2b-120": 45583,
            "blake2b-128": 45584,
            "blake2b-136": 45585,
            "blake2b-144": 45586,
            "blake2b-152": 45587,
            "blake2b-160": 45588,
            "blake2b-168": 45589,
            "blake2b-176": 45590,
            "blake2b-184": 45591,
            "blake2b-192": 45592,
            "blake2b-200": 45593,
            "blake2b-208": 45594,
            "blake2b-216": 45595,
            "blake2b-224": 45596,
            "blake2b-232": 45597,
            "blake2b-240": 45598,
            "blake2b-248": 45599,
            "blake2b-256": 45600,
            "blake2b-264": 45601,
            "blake2b-272": 45602,
            "blake2b-280": 45603,
            "blake2b-288": 45604,
            "blake2b-296": 45605,
            "blake2b-304": 45606,
            "blake2b-312": 45607,
            "blake2b-320": 45608,
            "blake2b-328": 45609,
            "blake2b-336": 45610,
            "blake2b-344": 45611,
            "blake2b-352": 45612,
            "blake2b-360": 45613,
            "blake2b-368": 45614,
            "blake2b-376": 45615,
            "blake2b-384": 45616,
            "blake2b-392": 45617,
            "blake2b-400": 45618,
            "blake2b-408": 45619,
            "blake2b-416": 45620,
            "blake2b-424": 45621,
            "blake2b-432": 45622,
            "blake2b-440": 45623,
            "blake2b-448": 45624,
            "blake2b-456": 45625,
            "blake2b-464": 45626,
            "blake2b-472": 45627,
            "blake2b-480": 45628,
            "blake2b-488": 45629,
            "blake2b-496": 45630,
            "blake2b-504": 45631,
            "blake2b-512": 45632,
            "blake2s-8": 45633,
            "blake2s-16": 45634,
            "blake2s-24": 45635,
            "blake2s-32": 45636,
            "blake2s-40": 45637,
            "blake2s-48": 45638,
            "blake2s-56": 45639,
            "blake2s-64": 45640,
            "blake2s-72": 45641,
            "blake2s-80": 45642,
            "blake2s-88": 45643,
            "blake2s-96": 45644,
            "blake2s-104": 45645,
            "blake2s-112": 45646,
            "blake2s-120": 45647,
            "blake2s-128": 45648,
            "blake2s-136": 45649,
            "blake2s-144": 45650,
            "blake2s-152": 45651,
            "blake2s-160": 45652,
            "blake2s-168": 45653,
            "blake2s-176": 45654,
            "blake2s-184": 45655,
            "blake2s-192": 45656,
            "blake2s-200": 45657,
            "blake2s-208": 45658,
            "blake2s-216": 45659,
            "blake2s-224": 45660,
            "blake2s-232": 45661,
            "blake2s-240": 45662,
            "blake2s-248": 45663,
            "blake2s-256": 45664,
            "Skein256-8": 45825,
            "Skein256-16": 45826,
            "Skein256-24": 45827,
            "Skein256-32": 45828,
            "Skein256-40": 45829,
            "Skein256-48": 45830,
            "Skein256-56": 45831,
            "Skein256-64": 45832,
            "Skein256-72": 45833,
            "Skein256-80": 45834,
            "Skein256-88": 45835,
            "Skein256-96": 45836,
            "Skein256-104": 45837,
            "Skein256-112": 45838,
            "Skein256-120": 45839,
            "Skein256-128": 45840,
            "Skein256-136": 45841,
            "Skein256-144": 45842,
            "Skein256-152": 45843,
            "Skein256-160": 45844,
            "Skein256-168": 45845,
            "Skein256-176": 45846,
            "Skein256-184": 45847,
            "Skein256-192": 45848,
            "Skein256-200": 45849,
            "Skein256-208": 45850,
            "Skein256-216": 45851,
            "Skein256-224": 45852,
            "Skein256-232": 45853,
            "Skein256-240": 45854,
            "Skein256-248": 45855,
            "Skein256-256": 45856,
            "Skein512-8": 45857,
            "Skein512-16": 45858,
            "Skein512-24": 45859,
            "Skein512-32": 45860,
            "Skein512-40": 45861,
            "Skein512-48": 45862,
            "Skein512-56": 45863,
            "Skein512-64": 45864,
            "Skein512-72": 45865,
            "Skein512-80": 45866,
            "Skein512-88": 45867,
            "Skein512-96": 45868,
            "Skein512-104": 45869,
            "Skein512-112": 45870,
            "Skein512-120": 45871,
            "Skein512-128": 45872,
            "Skein512-136": 45873,
            "Skein512-144": 45874,
            "Skein512-152": 45875,
            "Skein512-160": 45876,
            "Skein512-168": 45877,
            "Skein512-176": 45878,
            "Skein512-184": 45879,
            "Skein512-192": 45880,
            "Skein512-200": 45881,
            "Skein512-208": 45882,
            "Skein512-216": 45883,
            "Skein512-224": 45884,
            "Skein512-232": 45885,
            "Skein512-240": 45886,
            "Skein512-248": 45887,
            "Skein512-256": 45888,
            "Skein512-264": 45889,
            "Skein512-272": 45890,
            "Skein512-280": 45891,
            "Skein512-288": 45892,
            "Skein512-296": 45893,
            "Skein512-304": 45894,
            "Skein512-312": 45895,
            "Skein512-320": 45896,
            "Skein512-328": 45897,
            "Skein512-336": 45898,
            "Skein512-344": 45899,
            "Skein512-352": 45900,
            "Skein512-360": 45901,
            "Skein512-368": 45902,
            "Skein512-376": 45903,
            "Skein512-384": 45904,
            "Skein512-392": 45905,
            "Skein512-400": 45906,
            "Skein512-408": 45907,
            "Skein512-416": 45908,
            "Skein512-424": 45909,
            "Skein512-432": 45910,
            "Skein512-440": 45911,
            "Skein512-448": 45912,
            "Skein512-456": 45913,
            "Skein512-464": 45914,
            "Skein512-472": 45915,
            "Skein512-480": 45916,
            "Skein512-488": 45917,
            "Skein512-496": 45918,
            "Skein512-504": 45919,
            "Skein512-512": 45920,
            "Skein1024-8": 45921,
            "Skein1024-16": 45922,
            "Skein1024-24": 45923,
            "Skein1024-32": 45924,
            "Skein1024-40": 45925,
            "Skein1024-48": 45926,
            "Skein1024-56": 45927,
            "Skein1024-64": 45928,
            "Skein1024-72": 45929,
            "Skein1024-80": 45930,
            "Skein1024-88": 45931,
            "Skein1024-96": 45932,
            "Skein1024-104": 45933,
            "Skein1024-112": 45934,
            "Skein1024-120": 45935,
            "Skein1024-128": 45936,
            "Skein1024-136": 45937,
            "Skein1024-144": 45938,
            "Skein1024-152": 45939,
            "Skein1024-160": 45940,
            "Skein1024-168": 45941,
            "Skein1024-176": 45942,
            "Skein1024-184": 45943,
            "Skein1024-192": 45944,
            "Skein1024-200": 45945,
            "Skein1024-208": 45946,
            "Skein1024-216": 45947,
            "Skein1024-224": 45948,
            "Skein1024-232": 45949,
            "Skein1024-240": 45950,
            "Skein1024-248": 45951,
            "Skein1024-256": 45952,
            "Skein1024-264": 45953,
            "Skein1024-272": 45954,
            "Skein1024-280": 45955,
            "Skein1024-288": 45956,
            "Skein1024-296": 45957,
            "Skein1024-304": 45958,
            "Skein1024-312": 45959,
            "Skein1024-320": 45960,
            "Skein1024-328": 45961,
            "Skein1024-336": 45962,
            "Skein1024-344": 45963,
            "Skein1024-352": 45964,
            "Skein1024-360": 45965,
            "Skein1024-368": 45966,
            "Skein1024-376": 45967,
            "Skein1024-384": 45968,
            "Skein1024-392": 45969,
            "Skein1024-400": 45970,
            "Skein1024-408": 45971,
            "Skein1024-416": 45972,
            "Skein1024-424": 45973,
            "Skein1024-432": 45974,
            "Skein1024-440": 45975,
            "Skein1024-448": 45976,
            "Skein1024-456": 45977,
            "Skein1024-464": 45978,
            "Skein1024-472": 45979,
            "Skein1024-480": 45980,
            "Skein1024-488": 45981,
            "Skein1024-496": 45982,
            "Skein1024-504": 45983,
            "Skein1024-512": 45984,
            "Skein1024-520": 45985,
            "Skein1024-528": 45986,
            "Skein1024-536": 45987,
            "Skein1024-544": 45988,
            "Skein1024-552": 45989,
            "Skein1024-560": 45990,
            "Skein1024-568": 45991,
            "Skein1024-576": 45992,
            "Skein1024-584": 45993,
            "Skein1024-592": 45994,
            "Skein1024-600": 45995,
            "Skein1024-608": 45996,
            "Skein1024-616": 45997,
            "Skein1024-624": 45998,
            "Skein1024-632": 45999,
            "Skein1024-640": 46e3,
            "Skein1024-648": 46001,
            "Skein1024-656": 46002,
            "Skein1024-664": 46003,
            "Skein1024-672": 46004,
            "Skein1024-680": 46005,
            "Skein1024-688": 46006,
            "Skein1024-696": 46007,
            "Skein1024-704": 46008,
            "Skein1024-712": 46009,
            "Skein1024-720": 46010,
            "Skein1024-728": 46011,
            "Skein1024-736": 46012,
            "Skein1024-744": 46013,
            "Skein1024-752": 46014,
            "Skein1024-760": 46015,
            "Skein1024-768": 46016,
            "Skein1024-776": 46017,
            "Skein1024-784": 46018,
            "Skein1024-792": 46019,
            "Skein1024-800": 46020,
            "Skein1024-808": 46021,
            "Skein1024-816": 46022,
            "Skein1024-824": 46023,
            "Skein1024-832": 46024,
            "Skein1024-840": 46025,
            "Skein1024-848": 46026,
            "Skein1024-856": 46027,
            "Skein1024-864": 46028,
            "Skein1024-872": 46029,
            "Skein1024-880": 46030,
            "Skein1024-888": 46031,
            "Skein1024-896": 46032,
            "Skein1024-904": 46033,
            "Skein1024-912": 46034,
            "Skein1024-920": 46035,
            "Skein1024-928": 46036,
            "Skein1024-936": 46037,
            "Skein1024-944": 46038,
            "Skein1024-952": 46039,
            "Skein1024-960": 46040,
            "Skein1024-968": 46041,
            "Skein1024-976": 46042,
            "Skein1024-984": 46043,
            "Skein1024-992": 46044,
            "Skein1024-1000": 46045,
            "Skein1024-1008": 46046,
            "Skein1024-1016": 46047,
            "Skein1024-1024": 46048
          }), t.codes = Object.freeze({
            0: "identity",
            17: "sha1",
            18: "sha2-256",
            19: "sha2-512",
            86: "dbl-sha2-256",
            23: "sha3-224",
            22: "sha3-256",
            21: "sha3-384",
            20: "sha3-512",
            24: "shake-128",
            25: "shake-256",
            26: "keccak-224",
            27: "keccak-256",
            28: "keccak-384",
            29: "keccak-512",
            34: "murmur3-128",
            35: "murmur3-32",
            212: "md4",
            213: "md5",
            45569: "blake2b-8",
            45570: "blake2b-16",
            45571: "blake2b-24",
            45572: "blake2b-32",
            45573: "blake2b-40",
            45574: "blake2b-48",
            45575: "blake2b-56",
            45576: "blake2b-64",
            45577: "blake2b-72",
            45578: "blake2b-80",
            45579: "blake2b-88",
            45580: "blake2b-96",
            45581: "blake2b-104",
            45582: "blake2b-112",
            45583: "blake2b-120",
            45584: "blake2b-128",
            45585: "blake2b-136",
            45586: "blake2b-144",
            45587: "blake2b-152",
            45588: "blake2b-160",
            45589: "blake2b-168",
            45590: "blake2b-176",
            45591: "blake2b-184",
            45592: "blake2b-192",
            45593: "blake2b-200",
            45594: "blake2b-208",
            45595: "blake2b-216",
            45596: "blake2b-224",
            45597: "blake2b-232",
            45598: "blake2b-240",
            45599: "blake2b-248",
            45600: "blake2b-256",
            45601: "blake2b-264",
            45602: "blake2b-272",
            45603: "blake2b-280",
            45604: "blake2b-288",
            45605: "blake2b-296",
            45606: "blake2b-304",
            45607: "blake2b-312",
            45608: "blake2b-320",
            45609: "blake2b-328",
            45610: "blake2b-336",
            45611: "blake2b-344",
            45612: "blake2b-352",
            45613: "blake2b-360",
            45614: "blake2b-368",
            45615: "blake2b-376",
            45616: "blake2b-384",
            45617: "blake2b-392",
            45618: "blake2b-400",
            45619: "blake2b-408",
            45620: "blake2b-416",
            45621: "blake2b-424",
            45622: "blake2b-432",
            45623: "blake2b-440",
            45624: "blake2b-448",
            45625: "blake2b-456",
            45626: "blake2b-464",
            45627: "blake2b-472",
            45628: "blake2b-480",
            45629: "blake2b-488",
            45630: "blake2b-496",
            45631: "blake2b-504",
            45632: "blake2b-512",
            45633: "blake2s-8",
            45634: "blake2s-16",
            45635: "blake2s-24",
            45636: "blake2s-32",
            45637: "blake2s-40",
            45638: "blake2s-48",
            45639: "blake2s-56",
            45640: "blake2s-64",
            45641: "blake2s-72",
            45642: "blake2s-80",
            45643: "blake2s-88",
            45644: "blake2s-96",
            45645: "blake2s-104",
            45646: "blake2s-112",
            45647: "blake2s-120",
            45648: "blake2s-128",
            45649: "blake2s-136",
            45650: "blake2s-144",
            45651: "blake2s-152",
            45652: "blake2s-160",
            45653: "blake2s-168",
            45654: "blake2s-176",
            45655: "blake2s-184",
            45656: "blake2s-192",
            45657: "blake2s-200",
            45658: "blake2s-208",
            45659: "blake2s-216",
            45660: "blake2s-224",
            45661: "blake2s-232",
            45662: "blake2s-240",
            45663: "blake2s-248",
            45664: "blake2s-256",
            45825: "Skein256-8",
            45826: "Skein256-16",
            45827: "Skein256-24",
            45828: "Skein256-32",
            45829: "Skein256-40",
            45830: "Skein256-48",
            45831: "Skein256-56",
            45832: "Skein256-64",
            45833: "Skein256-72",
            45834: "Skein256-80",
            45835: "Skein256-88",
            45836: "Skein256-96",
            45837: "Skein256-104",
            45838: "Skein256-112",
            45839: "Skein256-120",
            45840: "Skein256-128",
            45841: "Skein256-136",
            45842: "Skein256-144",
            45843: "Skein256-152",
            45844: "Skein256-160",
            45845: "Skein256-168",
            45846: "Skein256-176",
            45847: "Skein256-184",
            45848: "Skein256-192",
            45849: "Skein256-200",
            45850: "Skein256-208",
            45851: "Skein256-216",
            45852: "Skein256-224",
            45853: "Skein256-232",
            45854: "Skein256-240",
            45855: "Skein256-248",
            45856: "Skein256-256",
            45857: "Skein512-8",
            45858: "Skein512-16",
            45859: "Skein512-24",
            45860: "Skein512-32",
            45861: "Skein512-40",
            45862: "Skein512-48",
            45863: "Skein512-56",
            45864: "Skein512-64",
            45865: "Skein512-72",
            45866: "Skein512-80",
            45867: "Skein512-88",
            45868: "Skein512-96",
            45869: "Skein512-104",
            45870: "Skein512-112",
            45871: "Skein512-120",
            45872: "Skein512-128",
            45873: "Skein512-136",
            45874: "Skein512-144",
            45875: "Skein512-152",
            45876: "Skein512-160",
            45877: "Skein512-168",
            45878: "Skein512-176",
            45879: "Skein512-184",
            45880: "Skein512-192",
            45881: "Skein512-200",
            45882: "Skein512-208",
            45883: "Skein512-216",
            45884: "Skein512-224",
            45885: "Skein512-232",
            45886: "Skein512-240",
            45887: "Skein512-248",
            45888: "Skein512-256",
            45889: "Skein512-264",
            45890: "Skein512-272",
            45891: "Skein512-280",
            45892: "Skein512-288",
            45893: "Skein512-296",
            45894: "Skein512-304",
            45895: "Skein512-312",
            45896: "Skein512-320",
            45897: "Skein512-328",
            45898: "Skein512-336",
            45899: "Skein512-344",
            45900: "Skein512-352",
            45901: "Skein512-360",
            45902: "Skein512-368",
            45903: "Skein512-376",
            45904: "Skein512-384",
            45905: "Skein512-392",
            45906: "Skein512-400",
            45907: "Skein512-408",
            45908: "Skein512-416",
            45909: "Skein512-424",
            45910: "Skein512-432",
            45911: "Skein512-440",
            45912: "Skein512-448",
            45913: "Skein512-456",
            45914: "Skein512-464",
            45915: "Skein512-472",
            45916: "Skein512-480",
            45917: "Skein512-488",
            45918: "Skein512-496",
            45919: "Skein512-504",
            45920: "Skein512-512",
            45921: "Skein1024-8",
            45922: "Skein1024-16",
            45923: "Skein1024-24",
            45924: "Skein1024-32",
            45925: "Skein1024-40",
            45926: "Skein1024-48",
            45927: "Skein1024-56",
            45928: "Skein1024-64",
            45929: "Skein1024-72",
            45930: "Skein1024-80",
            45931: "Skein1024-88",
            45932: "Skein1024-96",
            45933: "Skein1024-104",
            45934: "Skein1024-112",
            45935: "Skein1024-120",
            45936: "Skein1024-128",
            45937: "Skein1024-136",
            45938: "Skein1024-144",
            45939: "Skein1024-152",
            45940: "Skein1024-160",
            45941: "Skein1024-168",
            45942: "Skein1024-176",
            45943: "Skein1024-184",
            45944: "Skein1024-192",
            45945: "Skein1024-200",
            45946: "Skein1024-208",
            45947: "Skein1024-216",
            45948: "Skein1024-224",
            45949: "Skein1024-232",
            45950: "Skein1024-240",
            45951: "Skein1024-248",
            45952: "Skein1024-256",
            45953: "Skein1024-264",
            45954: "Skein1024-272",
            45955: "Skein1024-280",
            45956: "Skein1024-288",
            45957: "Skein1024-296",
            45958: "Skein1024-304",
            45959: "Skein1024-312",
            45960: "Skein1024-320",
            45961: "Skein1024-328",
            45962: "Skein1024-336",
            45963: "Skein1024-344",
            45964: "Skein1024-352",
            45965: "Skein1024-360",
            45966: "Skein1024-368",
            45967: "Skein1024-376",
            45968: "Skein1024-384",
            45969: "Skein1024-392",
            45970: "Skein1024-400",
            45971: "Skein1024-408",
            45972: "Skein1024-416",
            45973: "Skein1024-424",
            45974: "Skein1024-432",
            45975: "Skein1024-440",
            45976: "Skein1024-448",
            45977: "Skein1024-456",
            45978: "Skein1024-464",
            45979: "Skein1024-472",
            45980: "Skein1024-480",
            45981: "Skein1024-488",
            45982: "Skein1024-496",
            45983: "Skein1024-504",
            45984: "Skein1024-512",
            45985: "Skein1024-520",
            45986: "Skein1024-528",
            45987: "Skein1024-536",
            45988: "Skein1024-544",
            45989: "Skein1024-552",
            45990: "Skein1024-560",
            45991: "Skein1024-568",
            45992: "Skein1024-576",
            45993: "Skein1024-584",
            45994: "Skein1024-592",
            45995: "Skein1024-600",
            45996: "Skein1024-608",
            45997: "Skein1024-616",
            45998: "Skein1024-624",
            45999: "Skein1024-632",
            46e3: "Skein1024-640",
            46001: "Skein1024-648",
            46002: "Skein1024-656",
            46003: "Skein1024-664",
            46004: "Skein1024-672",
            46005: "Skein1024-680",
            46006: "Skein1024-688",
            46007: "Skein1024-696",
            46008: "Skein1024-704",
            46009: "Skein1024-712",
            46010: "Skein1024-720",
            46011: "Skein1024-728",
            46012: "Skein1024-736",
            46013: "Skein1024-744",
            46014: "Skein1024-752",
            46015: "Skein1024-760",
            46016: "Skein1024-768",
            46017: "Skein1024-776",
            46018: "Skein1024-784",
            46019: "Skein1024-792",
            46020: "Skein1024-800",
            46021: "Skein1024-808",
            46022: "Skein1024-816",
            46023: "Skein1024-824",
            46024: "Skein1024-832",
            46025: "Skein1024-840",
            46026: "Skein1024-848",
            46027: "Skein1024-856",
            46028: "Skein1024-864",
            46029: "Skein1024-872",
            46030: "Skein1024-880",
            46031: "Skein1024-888",
            46032: "Skein1024-896",
            46033: "Skein1024-904",
            46034: "Skein1024-912",
            46035: "Skein1024-920",
            46036: "Skein1024-928",
            46037: "Skein1024-936",
            46038: "Skein1024-944",
            46039: "Skein1024-952",
            46040: "Skein1024-960",
            46041: "Skein1024-968",
            46042: "Skein1024-976",
            46043: "Skein1024-984",
            46044: "Skein1024-992",
            46045: "Skein1024-1000",
            46046: "Skein1024-1008",
            46047: "Skein1024-1016",
            46048: "Skein1024-1024"
          }), t.defaultLengths = Object.freeze({
            17: 20,
            18: 32,
            19: 64,
            86: 32,
            23: 28,
            22: 32,
            21: 48,
            20: 64,
            24: 32,
            25: 64,
            26: 28,
            27: 32,
            28: 48,
            29: 64,
            34: 32,
            45569: 1,
            45570: 2,
            45571: 3,
            45572: 4,
            45573: 5,
            45574: 6,
            45575: 7,
            45576: 8,
            45577: 9,
            45578: 10,
            45579: 11,
            45580: 12,
            45581: 13,
            45582: 14,
            45583: 15,
            45584: 16,
            45585: 17,
            45586: 18,
            45587: 19,
            45588: 20,
            45589: 21,
            45590: 22,
            45591: 23,
            45592: 24,
            45593: 25,
            45594: 26,
            45595: 27,
            45596: 28,
            45597: 29,
            45598: 30,
            45599: 31,
            45600: 32,
            45601: 33,
            45602: 34,
            45603: 35,
            45604: 36,
            45605: 37,
            45606: 38,
            45607: 39,
            45608: 40,
            45609: 41,
            45610: 42,
            45611: 43,
            45612: 44,
            45613: 45,
            45614: 46,
            45615: 47,
            45616: 48,
            45617: 49,
            45618: 50,
            45619: 51,
            45620: 52,
            45621: 53,
            45622: 54,
            45623: 55,
            45624: 56,
            45625: 57,
            45626: 58,
            45627: 59,
            45628: 60,
            45629: 61,
            45630: 62,
            45631: 63,
            45632: 64,
            45633: 1,
            45634: 2,
            45635: 3,
            45636: 4,
            45637: 5,
            45638: 6,
            45639: 7,
            45640: 8,
            45641: 9,
            45642: 10,
            45643: 11,
            45644: 12,
            45645: 13,
            45646: 14,
            45647: 15,
            45648: 16,
            45649: 17,
            45650: 18,
            45651: 19,
            45652: 20,
            45653: 21,
            45654: 22,
            45655: 23,
            45656: 24,
            45657: 25,
            45658: 26,
            45659: 27,
            45660: 28,
            45661: 29,
            45662: 30,
            45663: 31,
            45664: 32,
            45825: 1,
            45826: 2,
            45827: 3,
            45828: 4,
            45829: 5,
            45830: 6,
            45831: 7,
            45832: 8,
            45833: 9,
            45834: 10,
            45835: 11,
            45836: 12,
            45837: 13,
            45838: 14,
            45839: 15,
            45840: 16,
            45841: 17,
            45842: 18,
            45843: 19,
            45844: 20,
            45845: 21,
            45846: 22,
            45847: 23,
            45848: 24,
            45849: 25,
            45850: 26,
            45851: 27,
            45852: 28,
            45853: 29,
            45854: 30,
            45855: 31,
            45856: 32,
            45857: 1,
            45858: 2,
            45859: 3,
            45860: 4,
            45861: 5,
            45862: 6,
            45863: 7,
            45864: 8,
            45865: 9,
            45866: 10,
            45867: 11,
            45868: 12,
            45869: 13,
            45870: 14,
            45871: 15,
            45872: 16,
            45873: 17,
            45874: 18,
            45875: 19,
            45876: 20,
            45877: 21,
            45878: 22,
            45879: 23,
            45880: 24,
            45881: 25,
            45882: 26,
            45883: 27,
            45884: 28,
            45885: 29,
            45886: 30,
            45887: 31,
            45888: 32,
            45889: 33,
            45890: 34,
            45891: 35,
            45892: 36,
            45893: 37,
            45894: 38,
            45895: 39,
            45896: 40,
            45897: 41,
            45898: 42,
            45899: 43,
            45900: 44,
            45901: 45,
            45902: 46,
            45903: 47,
            45904: 48,
            45905: 49,
            45906: 50,
            45907: 51,
            45908: 52,
            45909: 53,
            45910: 54,
            45911: 55,
            45912: 56,
            45913: 57,
            45914: 58,
            45915: 59,
            45916: 60,
            45917: 61,
            45918: 62,
            45919: 63,
            45920: 64,
            45921: 1,
            45922: 2,
            45923: 3,
            45924: 4,
            45925: 5,
            45926: 6,
            45927: 7,
            45928: 8,
            45929: 9,
            45930: 10,
            45931: 11,
            45932: 12,
            45933: 13,
            45934: 14,
            45935: 15,
            45936: 16,
            45937: 17,
            45938: 18,
            45939: 19,
            45940: 20,
            45941: 21,
            45942: 22,
            45943: 23,
            45944: 24,
            45945: 25,
            45946: 26,
            45947: 27,
            45948: 28,
            45949: 29,
            45950: 30,
            45951: 31,
            45952: 32,
            45953: 33,
            45954: 34,
            45955: 35,
            45956: 36,
            45957: 37,
            45958: 38,
            45959: 39,
            45960: 40,
            45961: 41,
            45962: 42,
            45963: 43,
            45964: 44,
            45965: 45,
            45966: 46,
            45967: 47,
            45968: 48,
            45969: 49,
            45970: 50,
            45971: 51,
            45972: 52,
            45973: 53,
            45974: 54,
            45975: 55,
            45976: 56,
            45977: 57,
            45978: 58,
            45979: 59,
            45980: 60,
            45981: 61,
            45982: 62,
            45983: 63,
            45984: 64,
            45985: 65,
            45986: 66,
            45987: 67,
            45988: 68,
            45989: 69,
            45990: 70,
            45991: 71,
            45992: 72,
            45993: 73,
            45994: 74,
            45995: 75,
            45996: 76,
            45997: 77,
            45998: 78,
            45999: 79,
            46e3: 80,
            46001: 81,
            46002: 82,
            46003: 83,
            46004: 84,
            46005: 85,
            46006: 86,
            46007: 87,
            46008: 88,
            46009: 89,
            46010: 90,
            46011: 91,
            46012: 92,
            46013: 93,
            46014: 94,
            46015: 95,
            46016: 96,
            46017: 97,
            46018: 98,
            46019: 99,
            46020: 100,
            46021: 101,
            46022: 102,
            46023: 103,
            46024: 104,
            46025: 105,
            46026: 106,
            46027: 107,
            46028: 108,
            46029: 109,
            46030: 110,
            46031: 111,
            46032: 112,
            46033: 113,
            46034: 114,
            46035: 115,
            46036: 116,
            46037: 117,
            46038: 118,
            46039: 119,
            46040: 120,
            46041: 121,
            46042: 122,
            46043: 123,
            46044: 124,
            46045: 125,
            46046: 126,
            46047: 127,
            46048: 128
          });
        },
        7748: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(2592),
            o = r(6657),
            a = r(1269);
          function s(e) {
            t.decode(e);
          }
          t.names = a.names, t.codes = a.codes, t.defaultLengths = a.defaultLengths, t.toHexString = function (e) {
            if (!n.isBuffer(e)) throw new Error("must be passed a buffer");
            return e.toString("hex");
          }, t.fromHexString = function (e) {
            return n.from(e, "hex");
          }, t.toB58String = function (e) {
            if (!n.isBuffer(e)) throw new Error("must be passed a buffer");
            return i.encode("base58btc", e).toString().slice(1);
          }, t.fromB58String = function (e) {
            var t = e;
            return n.isBuffer(e) && (t = e.toString()), i.decode("z" + t);
          }, t.decode = function (e) {
            if (!n.isBuffer(e)) throw new Error("multihash must be a Buffer");
            if (e.length < 2) throw new Error("multihash too short. must be > 2 bytes.");
            var r = o.decode(e);
            if (!t.isValidCode(r)) throw new Error("multihash unknown function code: 0x".concat(r.toString(16)));
            e = e.slice(o.decode.bytes);
            var i = o.decode(e);
            if (i < 0) throw new Error("multihash invalid length: ".concat(i));
            if ((e = e.slice(o.decode.bytes)).length !== i) throw new Error("multihash length inconsistent: 0x".concat(e.toString("hex")));
            return {
              code: r,
              name: a.codes[r],
              length: i,
              digest: e
            };
          }, t.encode = function (e, r, i) {
            if (!e || void 0 === r) throw new Error("multihash encode requires at least two args: digest, code");
            var a = t.coerceCode(r);
            if (!n.isBuffer(e)) throw new Error("digest should be a Buffer");
            if (null == i && (i = e.length), i && e.length !== i) throw new Error("digest length should be equal to specified length.");
            return n.concat([n.from(o.encode(a)), n.from(o.encode(i)), e]);
          }, t.coerceCode = function (e) {
            var r = e;
            if ("string" == typeof e) {
              if (void 0 === a.names[e]) throw new Error("Unrecognized hash function named: ".concat(e));
              r = a.names[e];
            }
            if ("number" != typeof r) throw new Error("Hash function code should be a number. Got: ".concat(r));
            if (void 0 === a.codes[r] && !t.isAppCode(r)) throw new Error("Unrecognized function code: ".concat(r));
            return r;
          }, t.isAppCode = function (e) {
            return e > 0 && e < 16;
          }, t.isValidCode = function (e) {
            return !!t.isAppCode(e) || !!a.codes[e];
          }, t.validate = s, t.prefix = function (e) {
            return s(e), e.slice(0, 2);
          };
        },
        7277: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(1734),
            o = r(6931);
          e.exports = function (e) {
            if ("string" == typeof e || "number" == typeof e) {
              var t = new i(1),
                r = String(e).toLowerCase().trim(),
                a = "0x" === r.substr(0, 2) || "-0x" === r.substr(0, 3),
                s = o(r);
              if ("-" === s.substr(0, 1) && (s = o(s.slice(1)), t = new i(-1, 10)), !(s = "" === s ? "0" : s).match(/^-?[0-9]+$/) && s.match(/^[0-9A-Fa-f]+$/) || s.match(/^[a-fA-F]+$/) || !0 === a && s.match(/^[0-9A-Fa-f]+$/)) return new i(s, 16).mul(t);
              if ((s.match(/^-?[0-9]+$/) || "" === s) && !1 === a) return new i(s, 10).mul(t);
            } else if ("object" === (0, n.default)(e) && e.toString && !e.pop && !e.push && e.toString(10).match(/^-?[0-9]+$/) && (e.mul || e.dividedToIntegerBy)) return new i(e.toString(10), 10);
            throw new Error("[number-to-bn] while converting number " + JSON.stringify(e) + " to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.");
          };
        },
        3103: function _(e) {
          "use strict";

          var t = Object.getOwnPropertySymbols,
            r = Object.prototype.hasOwnProperty,
            n = Object.prototype.propertyIsEnumerable;
          e.exports = function () {
            try {
              if (!Object.assign) return !1;
              var e = new String("abc");
              if (e[5] = "de", "5" === Object.getOwnPropertyNames(e)[0]) return !1;
              for (var t = {}, r = 0; r < 10; r++) t["_" + String.fromCharCode(r)] = r;
              if ("0123456789" !== Object.getOwnPropertyNames(t).map(function (e) {
                return t[e];
              }).join("")) return !1;
              var n = {};
              return "abcdefghijklmnopqrst".split("").forEach(function (e) {
                n[e] = e;
              }), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, n)).join("");
            } catch (e) {
              return !1;
            }
          }() ? Object.assign : function (e, i) {
            for (var o, a, s = function (e) {
                if (null == e) throw new TypeError("Object.assign cannot be called with null or undefined");
                return Object(e);
              }(e), u = 1; u < arguments.length; u++) {
              for (var c in o = Object(arguments[u])) r.call(o, c) && (s[c] = o[c]);
              if (t) {
                a = t(o);
                for (var f = 0; f < a.length; f++) n.call(o, a[f]) && (s[a[f]] = o[a[f]]);
              }
            }
            return s;
          };
        },
        3150: function _(e, t, r) {
          "use strict";

          var n, i, o;
          e = r.nmd(e);
          var a,
            s = r(8847)(r(3355));
          "undefined" != typeof self && self, a = function a() {
            return function (e) {
              var t = {};
              function r(n) {
                if (t[n]) return t[n].exports;
                var i = t[n] = {
                  i: n,
                  l: !1,
                  exports: {}
                };
                return e[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
              }
              return r.m = e, r.c = t, r.d = function (e, t, n) {
                r.o(e, t) || Object.defineProperty(e, t, {
                  configurable: !1,
                  enumerable: !0,
                  get: n
                });
              }, r.n = function (e) {
                var t = e && e.__esModule ? function () {
                  return e.default;
                } : function () {
                  return e;
                };
                return r.d(t, "a", t), t;
              }, r.o = function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
              }, r.p = "", r(r.s = 7);
            }([function (e, t, r) {
              r.d(t, "j", function () {
                return i;
              }), r.d(t, "d", function () {
                return o;
              }), r.d(t, "c", function () {
                return a;
              }), r.d(t, "h", function () {
                return s;
              }), r.d(t, "b", function () {
                return u;
              }), r.d(t, "k", function () {
                return c;
              }), r.d(t, "e", function () {
                return f;
              }), r.d(t, "g", function () {
                return d;
              }), r.d(t, "i", function () {
                return l;
              }), r.d(t, "a", function () {
                return h;
              }), r.d(t, "f", function () {
                return p;
              });
              var n = r(1),
                i = c(function (e, t) {
                  var r = t.length;
                  return c(function (n) {
                    for (var i = 0; i < n.length; i++) t[r + i] = n[i];
                    return t.length = r + n.length, e.apply(this, t);
                  });
                });
              function o(e, t) {
                return function () {
                  return e.call(this, t.apply(this, arguments));
                };
              }
              function a(e) {
                return function (t) {
                  return t[e];
                };
              }
              c(function (e) {
                var t = Object(n.c)(e);
                function r(e, t) {
                  return [u(e, t)];
                }
                return c(function (e) {
                  return Object(n.f)(r, e, t)[0];
                });
              });
              var s = c(function (e) {
                return c(function (t) {
                  for (var r, n = 0; n < a("length")(e); n++) if (r = u(t, e[n])) return r;
                });
              });
              function u(e, t) {
                return t.apply(void 0, e);
              }
              function c(e) {
                var t = e.length - 1,
                  r = Array.prototype.slice;
                if (0 === t) return function () {
                  return e.call(this, r.call(arguments));
                };
                if (1 === t) return function () {
                  return e.call(this, arguments[0], r.call(arguments, 1));
                };
                var n = Array(e.length);
                return function () {
                  for (var i = 0; i < t; i++) n[i] = arguments[i];
                  return n[t] = r.call(arguments, t), e.apply(this, n);
                };
              }
              function f(e) {
                return function (t, r) {
                  return e(r, t);
                };
              }
              function d(e, t) {
                return function (r) {
                  return e(r) && t(r);
                };
              }
              function l() {}
              function h() {
                return !0;
              }
              function p(e) {
                return function () {
                  return e;
                };
              }
            }, function (e, t, r) {
              r.d(t, "d", function () {
                return i;
              }), r.d(t, "g", function () {
                return a;
              }), r.d(t, "l", function () {
                return s;
              }), r.d(t, "c", function () {
                return u;
              }), r.d(t, "h", function () {
                return c;
              }), r.d(t, "i", function () {
                return f;
              }), r.d(t, "j", function () {
                return d;
              }), r.d(t, "f", function () {
                return l;
              }), r.d(t, "m", function () {
                return h;
              }), r.d(t, "a", function () {
                return p;
              }), r.d(t, "b", function () {
                return b;
              }), r.d(t, "k", function () {
                return y;
              }), r.d(t, "e", function () {
                return m;
              });
              var n = r(0);
              function i(e, t) {
                return [e, t];
              }
              var o = null,
                a = Object(n.c)(0),
                s = Object(n.c)(1);
              function u(e) {
                return y(e.reduce(Object(n.e)(i), o));
              }
              var c = Object(n.k)(u);
              function f(e) {
                return l(function (e, t) {
                  return e.unshift(t), e;
                }, [], e);
              }
              function d(e, t) {
                return t ? i(e(a(t)), d(e, s(t))) : o;
              }
              function l(e, t, r) {
                return r ? e(l(e, t, s(r)), a(r)) : t;
              }
              function h(e, t, r) {
                return function e(r, n) {
                  return r ? t(a(r)) ? (n(a(r)), s(r)) : i(a(r), e(s(r), n)) : o;
                }(e, r || n.i);
              }
              function p(e, t) {
                return !t || e(a(t)) && p(e, s(t));
              }
              function b(e, t) {
                e && (a(e).apply(null, t), b(s(e), t));
              }
              function y(e) {
                return function e(t, r) {
                  return t ? e(s(t), i(a(t), r)) : r;
                }(e, o);
              }
              function m(e, t) {
                return t && (e(a(t)) ? a(t) : m(e, s(t)));
              }
            }, function (e, t, r) {
              r.d(t, "c", function () {
                return o;
              }), r.d(t, "e", function () {
                return a;
              }), r.d(t, "d", function () {
                return s;
              }), r.d(t, "a", function () {
                return u;
              }), r.d(t, "b", function () {
                return c;
              });
              var n = r(1),
                i = r(0);
              function o(e, t) {
                return t && t.constructor === e;
              }
              var a = Object(i.c)("length"),
                s = Object(i.j)(o, String);
              function u(e) {
                return void 0 !== e;
              }
              function c(e, t) {
                return t instanceof Object && Object(n.a)(function (e) {
                  return e in t;
                }, e);
              }
            }, function (e, t, r) {
              r.d(t, "f", function () {
                return i;
              }), r.d(t, "d", function () {
                return o;
              }), r.d(t, "g", function () {
                return a;
              }), r.d(t, "e", function () {
                return s;
              }), r.d(t, "b", function () {
                return u;
              }), r.d(t, "h", function () {
                return c;
              }), r.d(t, "i", function () {
                return f;
              }), r.d(t, "c", function () {
                return d;
              }), r.d(t, "m", function () {
                return l;
              }), r.d(t, "n", function () {
                return h;
              }), r.d(t, "a", function () {
                return p;
              }), r.d(t, "j", function () {
                return b;
              }), r.d(t, "l", function () {
                return y;
              }), r.d(t, "k", function () {
                return m;
              }), r.d(t, "o", function () {
                return v;
              });
              var n = 1,
                i = n++,
                o = n++,
                a = n++,
                s = n++,
                u = "fail",
                c = n++,
                f = n++,
                d = "start",
                l = "data",
                h = "end",
                p = n++,
                b = n++,
                y = n++,
                m = n++;
              function v(e, t, r) {
                try {
                  var n = JSON.parse(t);
                } catch (e) {}
                return {
                  statusCode: e,
                  body: t,
                  jsonBody: n,
                  thrown: r
                };
              }
            }, function (e, t, r) {
              r.d(t, "b", function () {
                return i;
              }), r.d(t, "a", function () {
                return o;
              }), r.d(t, "c", function () {
                return a;
              });
              var n = r(0);
              function i(e, t) {
                return {
                  key: e,
                  node: t
                };
              }
              var o = Object(n.c)("key"),
                a = Object(n.c)("node");
            }, function (e, t, r) {
              r.d(t, "a", function () {
                return u;
              });
              var n = r(1),
                i = r(0),
                o = r(2),
                a = r(8),
                s = r(9);
              function u(e) {
                var t = Object(n.h)("resume", "pause", "pipe"),
                  r = Object(i.j)(o.b, t);
                return e ? r(e) || Object(o.d)(e) ? Object(a.a)(s.a, e) : Object(a.a)(s.a, e.url, e.method, e.body, e.headers, e.withCredentials, e.cached) : Object(s.a)();
              }
              u.drop = function () {
                return u.drop;
              };
            }, function (e, t, r) {
              r.d(t, "b", function () {
                return u;
              }), r.d(t, "a", function () {
                return s;
              });
              var n = r(3),
                i = r(4),
                o = r(2),
                a = r(1),
                s = {};
              function u(e) {
                var t = e(n.f).emit,
                  r = e(n.d).emit,
                  u = e(n.i).emit,
                  c = e(n.h).emit;
                function f(e, t, r) {
                  Object(i.c)(Object(a.g)(e))[t] = r;
                }
                function d(e, r, n) {
                  e && f(e, r, n);
                  var o = Object(a.d)(Object(i.b)(r, n), e);
                  return t(o), o;
                }
                var l = {};
                return l[n.l] = function (e, t) {
                  if (!e) return u(t), d(e, s, t);
                  var r = function (e, t) {
                      var r = Object(i.c)(Object(a.g)(e));
                      return Object(o.c)(Array, r) ? d(e, Object(o.e)(r), t) : e;
                    }(e, t),
                    n = Object(a.l)(r),
                    c = Object(i.a)(Object(a.g)(r));
                  return f(n, c, t), Object(a.d)(Object(i.b)(c, t), n);
                }, l[n.k] = function (e) {
                  return r(e), Object(a.l)(e) || c(Object(i.c)(Object(a.g)(e)));
                }, l[n.j] = d, l;
              }
            }, function (e, t, r) {
              Object.defineProperty(t, "__esModule", {
                value: !0
              });
              var n = r(5);
              t.default = n.a;
            }, function (e, t, r) {
              r.d(t, "a", function () {
                return i;
              });
              var n = r(2);
              function i(e, t, r, i, o, a, s) {
                return o = o ? JSON.parse(JSON.stringify(o)) : {}, i ? (Object(n.d)(i) || (i = JSON.stringify(i), o["Content-Type"] = o["Content-Type"] || "application/json"), o["Content-Length"] = o["Content-Length"] || i.length) : i = null, e(r || "GET", function (e, t) {
                  return !1 === t && (-1 === e.indexOf("?") ? e += "?" : e += "&", e += "_=" + new Date().getTime()), e;
                }(t, s), i, o, a || !1);
              }
            }, function (e, t, r) {
              r.d(t, "a", function () {
                return d;
              });
              var n = r(10),
                i = r(12),
                o = r(6),
                a = r(13),
                s = r(14),
                u = r(16),
                c = r(17),
                f = r(18);
              function d(e, t, r, d, l) {
                var h = Object(n.a)();
                return t && Object(f.b)(h, Object(f.a)(), e, t, r, d, l), Object(c.a)(h), Object(i.a)(h, Object(o.b)(h)), Object(a.a)(h, s.a), Object(u.a)(h, t);
              }
            }, function (e, t, r) {
              r.d(t, "a", function () {
                return o;
              });
              var n = r(11),
                i = r(0);
              function o() {
                var e = {},
                  t = o("newListener"),
                  r = o("removeListener");
                function o(i) {
                  return e[i] = Object(n.a)(i, t, r), e[i];
                }
                function a(t) {
                  return e[t] || o(t);
                }
                return ["emit", "on", "un"].forEach(function (e) {
                  a[e] = Object(i.k)(function (t, r) {
                    Object(i.b)(r, a(t)[e]);
                  });
                }), a;
              }
            }, function (e, t, r) {
              r.d(t, "a", function () {
                return a;
              });
              var n = r(1),
                i = r(2),
                o = r(0);
              function a(e, t, r) {
                var a, s;
                function u(e) {
                  return function (t) {
                    return t.id === e;
                  };
                }
                return {
                  on: function on(r, i) {
                    var o = {
                      listener: r,
                      id: i || r
                    };
                    return t && t.emit(e, r, o.id), a = Object(n.d)(o, a), s = Object(n.d)(r, s), this;
                  },
                  emit: function emit() {
                    Object(n.b)(s, arguments);
                  },
                  un: function un(t) {
                    var i;
                    a = Object(n.m)(a, u(t), function (e) {
                      i = e;
                    }), i && (s = Object(n.m)(s, function (e) {
                      return e === i.listener;
                    }), r && r.emit(e, i.listener, i.id));
                  },
                  listeners: function listeners() {
                    return s;
                  },
                  hasListener: function hasListener(e) {
                    var t = e ? u(e) : o.a;
                    return Object(i.a)(Object(n.e)(t, a));
                  }
                };
              }
            }, function (e, t, r) {
              r.d(t, "a", function () {
                return a;
              });
              var n = r(4),
                i = r(3),
                o = r(1);
              function a(e, t) {
                var r,
                  a = {};
                function s(e) {
                  return function (t) {
                    r = e(r, t);
                  };
                }
                for (var u in t) e(u).on(s(t[u]), a);
                e(i.g).on(function (e) {
                  var t = Object(o.g)(r),
                    i = Object(n.a)(t),
                    a = Object(o.l)(r);
                  a && (Object(n.c)(Object(o.g)(a))[i] = e);
                }), e(i.e).on(function () {
                  var e = Object(o.g)(r),
                    t = Object(n.a)(e),
                    i = Object(o.l)(r);
                  i && delete Object(n.c)(Object(o.g)(i))[t];
                }), e(i.a).on(function () {
                  for (var r in t) e(r).un(a);
                });
              }
            }, function (e, t, r) {
              r.d(t, "a", function () {
                return a;
              });
              var n = r(3),
                i = r(1),
                o = r(4);
              function a(e, t) {
                var r = {
                  node: e(n.d),
                  path: e(n.f)
                };
                e("newListener").on(function (n) {
                  var a = /(node|path):(.*)/.exec(n);
                  if (a) {
                    var s = r[a[1]];
                    s.hasListener(n) || function (t, r, n) {
                      var a = e(t).emit;
                      r.on(function (e) {
                        var t = n(e);
                        !1 !== t && function (e, t, r) {
                          var n = Object(i.k)(r);
                          e(t, Object(i.i)(Object(i.l)(Object(i.j)(o.a, n))), Object(i.i)(Object(i.j)(o.c, n)));
                        }(a, Object(o.c)(t), e);
                      }, t), e("removeListener").on(function (n) {
                        n === t && (e(n).listeners() || r.un(t));
                      });
                    }(n, s, t(a[2]));
                  }
                });
              }
            }, function (e, t, r) {
              r.d(t, "a", function () {
                return c;
              });
              var n = r(0),
                i = r(1),
                o = r(4),
                a = r(2),
                s = r(6),
                u = r(15),
                c = Object(u.a)(function (e, t, r, u, c) {
                  var f = 1,
                    d = Object(n.d)(o.a, i.g),
                    l = Object(n.d)(o.c, i.g);
                  function h(e, t) {
                    return t[f] ? Object(n.g)(e, i.g) : e;
                  }
                  function p(e) {
                    return e === n.a ? n.a : Object(n.g)(function (e) {
                      return d(e) !== s.a;
                    }, Object(n.d)(e, i.l));
                  }
                  function b() {
                    return function (e) {
                      return d(e) === s.a;
                    };
                  }
                  function y(e, t, r, n, o) {
                    var s = e(r);
                    if (s) {
                      var u = function (e, t, r) {
                        return Object(i.f)(function (e, t) {
                          return t(e, r);
                        }, t, e);
                      }(t, n, s);
                      return o(r.substr(Object(a.e)(s[0])), u);
                    }
                  }
                  function m(e, t) {
                    return Object(n.j)(y, e, t);
                  }
                  var v = Object(n.h)(m(e, Object(i.h)(h, function (e, t) {
                    var r = t[3];
                    if (!r) return e;
                    var o = Object(n.j)(a.b, Object(i.c)(r.split(/\W+/))),
                      s = Object(n.d)(o, l);
                    return Object(n.g)(s, e);
                  }, function (e, t) {
                    var r = t[2],
                      i = r && "*" !== r ? function (e) {
                        return String(d(e)) === r;
                      } : n.a;
                    return Object(n.g)(i, e);
                  }, p)), m(t, Object(i.h)(function (e) {
                    if (e === n.a) return n.a;
                    var t = b(),
                      r = e,
                      i = p(function (e) {
                        return o(e);
                      }),
                      o = Object(n.h)(t, r, i);
                    return o;
                  })), m(r, Object(i.h)()), m(u, Object(i.h)(h, b)), m(c, Object(i.h)(function (e) {
                    return function (t) {
                      var r = e(t);
                      return !0 === r ? Object(i.g)(t) : r;
                    };
                  })), function (e) {
                    throw Error('"' + e + '" could not be tokenised');
                  });
                  function g(e, t) {
                    return t;
                  }
                  function w(e, t) {
                    return v(e, t, e ? w : g);
                  }
                  return function (e) {
                    try {
                      return w(e, n.a);
                    } catch (t) {
                      throw Error('Could not compile "' + e + '" because ' + t.message);
                    }
                  };
                });
            }, function (e, t, r) {
              r.d(t, "a", function () {
                return b;
              });
              var n,
                i,
                o,
                a,
                s,
                u,
                c,
                f,
                d,
                l,
                h,
                p = r(0),
                b = (n = Object(p.k)(function (e) {
                  return e.unshift(/^/), (t = RegExp(e.map(Object(p.c)("source")).join(""))).exec.bind(t);
                  var t;
                }), a = n(i = /(\$?)/, /([\w-_]+|\*)/, o = /(?:{([\w ]*?)})?/), s = n(i, /\["([^"]+)"\]/, o), u = n(i, /\[(\d+|\*)\]/, o), c = n(i, /()/, /{([\w ]*?)}/), f = n(/\.\./), d = n(/\./), l = n(i, /!/), h = n(/$/), function (e) {
                  return e(Object(p.h)(a, s, u, c), f, d, l, h);
                });
            }, function (e, t, r) {
              r.d(t, "a", function () {
                return s;
              });
              var n = r(3),
                i = r(0),
                o = r(2),
                a = r(5);
              function s(e, t) {
                var r,
                  s = /^(node|path):./,
                  u = e(n.h),
                  c = e(n.e).emit,
                  f = e(n.g).emit,
                  d = Object(i.k)(function (t, n) {
                    if (r[t]) Object(i.b)(n, r[t]);else {
                      var o = e(t),
                        a = n[0];
                      s.test(t) ? l(o, p(a)) : o.on(a);
                    }
                    return r;
                  });
                function l(e, t, n) {
                  n = n || t;
                  var o = h(t);
                  return e.on(function () {
                    var t = !1;
                    r.forget = function () {
                      t = !0;
                    }, Object(i.b)(arguments, o), delete r.forget, t && e.un(n);
                  }, n), r;
                }
                function h(e) {
                  return function () {
                    try {
                      return e.apply(r, arguments);
                    } catch (e) {
                      setTimeout(function () {
                        throw new Error(e.message);
                      });
                    }
                  };
                }
                function p(e) {
                  return function () {
                    var t = e.apply(this, arguments);
                    Object(o.a)(t) && (t === a.a.drop ? c() : f(t));
                  };
                }
                function b(t, r, n) {
                  var i;
                  i = "node" === t ? p(n) : n, l(function (t, r) {
                    return e(t + ":" + r);
                  }(t, r), i, n);
                }
                function y(e, t, n) {
                  return Object(o.d)(t) ? b(e, t, n) : function (e, t) {
                    for (var r in t) b(e, r, t[r]);
                  }(e, t), r;
                }
                return e(n.i).on(function (e) {
                  r.root = Object(i.f)(e);
                }), e(n.c).on(function (e, t) {
                  r.header = function (e) {
                    return e ? t[e] : t;
                  };
                }), r = {
                  on: d,
                  addListener: d,
                  removeListener: function removeListener(t, n, i) {
                    if ("done" === t) u.un(n);else if ("node" === t || "path" === t) e.un(t + ":" + n, i);else {
                      var o = n;
                      e(t).un(o);
                    }
                    return r;
                  },
                  emit: e.emit,
                  node: Object(i.j)(y, "node"),
                  path: Object(i.j)(y, "path"),
                  done: Object(i.j)(l, u),
                  start: Object(i.j)(function (t, n) {
                    return e(t).on(h(n), n), r;
                  }, n.c),
                  fail: e(n.b).on,
                  abort: e(n.a).emit,
                  header: i.i,
                  root: i.i,
                  source: t
                };
              }
            }, function (e, t, r) {
              r.d(t, "a", function () {
                return i;
              });
              var n = r(3);
              function i(e) {
                var t,
                  r,
                  i,
                  o,
                  a = e(n.j).emit,
                  s = e(n.l).emit,
                  u = e(n.k).emit,
                  c = e(n.b).emit,
                  f = 65536,
                  d = /[\\"\n]/g,
                  l = 0,
                  h = l++,
                  p = l++,
                  b = l++,
                  y = l++,
                  m = l++,
                  v = l++,
                  g = l++,
                  w = l++,
                  A = l++,
                  k = l++,
                  _ = l++,
                  S = l++,
                  E = l++,
                  x = l++,
                  P = l++,
                  O = l++,
                  B = l++,
                  T = l++,
                  C = l++,
                  I = l++,
                  M = f,
                  U = "",
                  R = !1,
                  j = !1,
                  N = h,
                  F = [],
                  L = null,
                  D = 0,
                  H = 0,
                  q = 0,
                  z = 0,
                  G = 1;
                function K(e) {
                  void 0 !== o && (s(o), u(), o = void 0), t = Error(e + "\nLn: " + G + "\nCol: " + z + "\nChr: " + r), c(Object(n.o)(void 0, void 0, t));
                }
                function V(e) {
                  return "\r" === e || "\n" === e || " " === e || "\t" === e;
                }
                e(n.m).on(function (e) {
                  if (!t) {
                    if (j) return K("Cannot write after close");
                    var n,
                      c = 0;
                    for (r = e[0]; r && (c > 0 && (i = r), r = e[c++]);) switch (q++, "\n" === r ? (G++, z = 0) : z++, N) {
                      case h:
                        if ("{" === r) N = b;else if ("[" === r) N = m;else if (!V(r)) return K("Non-whitespace before {[.");
                        continue;
                      case w:
                      case b:
                        if (V(r)) continue;
                        if (N === w) F.push(A);else {
                          if ("}" === r) {
                            s({}), u(), N = F.pop() || p;
                            continue;
                          }
                          F.push(y);
                        }
                        if ('"' !== r) return K('Malformed object key should start with " ');
                        N = g;
                        continue;
                      case A:
                      case y:
                        if (V(r)) continue;
                        if (":" === r) N === y ? (F.push(y), void 0 !== o && (s({}), a(o), o = void 0), H++) : void 0 !== o && (a(o), o = void 0), N = p;else if ("}" === r) void 0 !== o && (s(o), u(), o = void 0), u(), H--, N = F.pop() || p;else {
                          if ("," !== r) return K("Bad object");
                          N === y && F.push(y), void 0 !== o && (s(o), u(), o = void 0), N = w;
                        }
                        continue;
                      case m:
                      case p:
                        if (V(r)) continue;
                        if (N === m) {
                          if (s([]), H++, N = p, "]" === r) {
                            u(), H--, N = F.pop() || p;
                            continue;
                          }
                          F.push(v);
                        }
                        if ('"' === r) N = g;else if ("{" === r) N = b;else if ("[" === r) N = m;else if ("t" === r) N = k;else if ("f" === r) N = E;else if ("n" === r) N = B;else if ("-" === r) U += r;else if ("0" === r) U += r, N = 20;else {
                          if (-1 === "123456789".indexOf(r)) return K("Bad value");
                          U += r, N = 20;
                        }
                        continue;
                      case v:
                        if ("," === r) F.push(v), void 0 !== o && (s(o), u(), o = void 0), N = p;else {
                          if ("]" !== r) {
                            if (V(r)) continue;
                            return K("Bad array");
                          }
                          void 0 !== o && (s(o), u(), o = void 0), u(), H--, N = F.pop() || p;
                        }
                        continue;
                      case g:
                        void 0 === o && (o = "");
                        var l = c - 1;
                        e: for (;;) {
                          for (; D > 0;) if (L += r, r = e.charAt(c++), 4 === D ? (o += String.fromCharCode(parseInt(L, 16)), D = 0, l = c - 1) : D++, !r) break e;
                          if ('"' === r && !R) {
                            N = F.pop() || p, o += e.substring(l, c - 1);
                            break;
                          }
                          if (!("\\" !== r || R || (R = !0, o += e.substring(l, c - 1), r = e.charAt(c++)))) break;
                          if (R) {
                            if (R = !1, "n" === r ? o += "\n" : "r" === r ? o += "\r" : "t" === r ? o += "\t" : "f" === r ? o += "\f" : "b" === r ? o += "\b" : "u" === r ? (D = 1, L = "") : o += r, r = e.charAt(c++), l = c - 1, r) continue;
                            break;
                          }
                          d.lastIndex = c;
                          var J = d.exec(e);
                          if (!J) {
                            c = e.length + 1, o += e.substring(l, c - 1);
                            break;
                          }
                          if (c = J.index + 1, !(r = e.charAt(J.index))) {
                            o += e.substring(l, c - 1);
                            break;
                          }
                        }
                        continue;
                      case k:
                        if (!r) continue;
                        if ("r" !== r) return K("Invalid true started with t" + r);
                        N = _;
                        continue;
                      case _:
                        if (!r) continue;
                        if ("u" !== r) return K("Invalid true started with tr" + r);
                        N = S;
                        continue;
                      case S:
                        if (!r) continue;
                        if ("e" !== r) return K("Invalid true started with tru" + r);
                        s(!0), u(), N = F.pop() || p;
                        continue;
                      case E:
                        if (!r) continue;
                        if ("a" !== r) return K("Invalid false started with f" + r);
                        N = x;
                        continue;
                      case x:
                        if (!r) continue;
                        if ("l" !== r) return K("Invalid false started with fa" + r);
                        N = P;
                        continue;
                      case P:
                        if (!r) continue;
                        if ("s" !== r) return K("Invalid false started with fal" + r);
                        N = O;
                        continue;
                      case O:
                        if (!r) continue;
                        if ("e" !== r) return K("Invalid false started with fals" + r);
                        s(!1), u(), N = F.pop() || p;
                        continue;
                      case B:
                        if (!r) continue;
                        if ("u" !== r) return K("Invalid null started with n" + r);
                        N = T;
                        continue;
                      case T:
                        if (!r) continue;
                        if ("l" !== r) return K("Invalid null started with nu" + r);
                        N = C;
                        continue;
                      case C:
                        if (!r) continue;
                        if ("l" !== r) return K("Invalid null started with nul" + r);
                        s(null), u(), N = F.pop() || p;
                        continue;
                      case I:
                        if ("." !== r) return K("Leading zero not followed by .");
                        U += r, N = 20;
                        continue;
                      case 20:
                        if (-1 !== "0123456789".indexOf(r)) U += r;else if ("." === r) {
                          if (-1 !== U.indexOf(".")) return K("Invalid number has two dots");
                          U += r;
                        } else if ("e" === r || "E" === r) {
                          if (-1 !== U.indexOf("e") || -1 !== U.indexOf("E")) return K("Invalid number has two exponential");
                          U += r;
                        } else if ("+" === r || "-" === r) {
                          if ("e" !== i && "E" !== i) return K("Invalid symbol in number");
                          U += r;
                        } else U && (s(parseFloat(U)), u(), U = ""), c--, N = F.pop() || p;
                        continue;
                      default:
                        return K("Unknown state: " + N);
                    }
                    q >= M && (n = 0, void 0 !== o && o.length > f && (K("Max buffer length exceeded: textNode"), n = Math.max(n, o.length)), U.length > f && (K("Max buffer length exceeded: numberNode"), n = Math.max(n, U.length)), M = f - n + q);
                  }
                }), e(n.n).on(function () {
                  if (N === h) return s({}), u(), void (j = !0);
                  N === p && 0 === H || K("Unexpected end"), void 0 !== o && (s(o), u(), o = void 0), j = !0;
                });
              }
            }, function (e, t, r) {
              r.d(t, "a", function () {
                return u;
              }), r.d(t, "b", function () {
                return c;
              });
              var n = r(19),
                i = r(3),
                o = r(2),
                a = r(20),
                s = r(0);
              function u() {
                return new XMLHttpRequest();
              }
              function c(e, t, r, u, c, f, d) {
                var l = e(i.m).emit,
                  h = e(i.b).emit,
                  p = 0,
                  b = !0;
                function y() {
                  if ("2" === String(t.status)[0]) {
                    var e = t.responseText,
                      r = (" " + e.substr(p)).substr(1);
                    r && l(r), p = Object(o.e)(e);
                  }
                }
                function m(t) {
                  try {
                    b && e(i.c).emit(t.status, Object(a.a)(t.getAllResponseHeaders())), b = !1;
                  } catch (e) {}
                }
                e(i.a).on(function () {
                  t.onreadystatechange = null, t.abort();
                }), "onprogress" in t && (t.onprogress = y), t.onreadystatechange = function () {
                  switch (t.readyState) {
                    case 2:
                    case 3:
                      return m(t);
                    case 4:
                      m(t), "2" === String(t.status)[0] ? (y(), e(i.n).emit()) : h(Object(i.o)(t.status, t.responseText));
                  }
                };
                try {
                  for (var v in t.open(r, u, !0), f) t.setRequestHeader(v, f[v]);
                  Object(n.a)(window.location, Object(n.b)(u)) || t.setRequestHeader("X-Requested-With", "XMLHttpRequest"), t.withCredentials = d, t.send(c);
                } catch (e) {
                  window.setTimeout(Object(s.j)(h, Object(i.o)(void 0, void 0, e)), 0);
                }
              }
            }, function (e, t, r) {
              function n(e, t) {
                function r(t) {
                  return String(t.port || {
                    "http:": 80,
                    "https:": 443
                  }[t.protocol || e.protocol]);
                }
                return !!(t.protocol && t.protocol !== e.protocol || t.host && t.host !== e.host || t.host && r(t) !== r(e));
              }
              function i(e) {
                var t = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/.exec(e) || [];
                return {
                  protocol: t[1] || "",
                  host: t[2] || "",
                  port: t[3] || ""
                };
              }
              r.d(t, "a", function () {
                return n;
              }), r.d(t, "b", function () {
                return i;
              });
            }, function (e, t, r) {
              function n(e) {
                var t = {};
                return e && e.split("\r\n").forEach(function (e) {
                  var r = e.indexOf(": ");
                  t[e.substring(0, r)] = e.substring(r + 2);
                }), t;
              }
              r.d(t, "a", function () {
                return n;
              });
            }]).default;
          }, "object" === (0, s.default)(t) && "object" === (0, s.default)(e) ? e.exports = a() : (i = [], void 0 === (o = "function" == typeof (n = a) ? n.apply(t, i) : n) || (e.exports = o));
        },
        1823: function _(e, t, r) {
          "use strict";

          var n = r(8357);
          t.certificate = r(1320);
          var i = n.define("RSAPrivateKey", function () {
            this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
          });
          t.RSAPrivateKey = i;
          var o = n.define("RSAPublicKey", function () {
            this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
          });
          t.RSAPublicKey = o;
          var a = n.define("SubjectPublicKeyInfo", function () {
            this.seq().obj(this.key("algorithm").use(s), this.key("subjectPublicKey").bitstr());
          });
          t.PublicKey = a;
          var s = n.define("AlgorithmIdentifier", function () {
              this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
            }),
            u = n.define("PrivateKeyInfo", function () {
              this.seq().obj(this.key("version").int(), this.key("algorithm").use(s), this.key("subjectPrivateKey").octstr());
            });
          t.PrivateKey = u;
          var c = n.define("EncryptedPrivateKeyInfo", function () {
            this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
          });
          t.EncryptedPrivateKey = c;
          var f = n.define("DSAPrivateKey", function () {
            this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
          });
          t.DSAPrivateKey = f, t.DSAparam = n.define("DSAparam", function () {
            this.int();
          });
          var d = n.define("ECPrivateKey", function () {
            this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(l), this.key("publicKey").optional().explicit(1).bitstr());
          });
          t.ECPrivateKey = d;
          var l = n.define("ECParameters", function () {
            this.choice({
              namedCurve: this.objid()
            });
          });
          t.signature = n.define("signature", function () {
            this.seq().obj(this.key("r").int(), this.key("s").int());
          });
        },
        1320: function _(e, t, r) {
          "use strict";

          var n = r(8357),
            i = n.define("Time", function () {
              this.choice({
                utcTime: this.utctime(),
                generalTime: this.gentime()
              });
            }),
            o = n.define("AttributeTypeValue", function () {
              this.seq().obj(this.key("type").objid(), this.key("value").any());
            }),
            a = n.define("AlgorithmIdentifier", function () {
              this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
            }),
            s = n.define("SubjectPublicKeyInfo", function () {
              this.seq().obj(this.key("algorithm").use(a), this.key("subjectPublicKey").bitstr());
            }),
            u = n.define("RelativeDistinguishedName", function () {
              this.setof(o);
            }),
            c = n.define("RDNSequence", function () {
              this.seqof(u);
            }),
            f = n.define("Name", function () {
              this.choice({
                rdnSequence: this.use(c)
              });
            }),
            d = n.define("Validity", function () {
              this.seq().obj(this.key("notBefore").use(i), this.key("notAfter").use(i));
            }),
            l = n.define("Extension", function () {
              this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(!1), this.key("extnValue").octstr());
            }),
            h = n.define("TBSCertificate", function () {
              this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(a), this.key("issuer").use(f), this.key("validity").use(d), this.key("subject").use(f), this.key("subjectPublicKeyInfo").use(s), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(l).optional());
            }),
            p = n.define("X509Certificate", function () {
              this.seq().obj(this.key("tbsCertificate").use(h), this.key("signatureAlgorithm").use(a), this.key("signatureValue").bitstr());
            });
          e.exports = p;
        },
        4988: function _(e, t, r) {
          "use strict";

          var n = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m,
            i = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m,
            o = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m,
            a = r(7085),
            s = r(8073),
            u = r(8850).Buffer;
          e.exports = function (e, t) {
            var r,
              c = e.toString(),
              f = c.match(n);
            if (f) {
              var d = "aes" + f[1],
                l = u.from(f[2], "hex"),
                h = u.from(f[3].replace(/[\r\n]/g, ""), "base64"),
                p = a(t, l.slice(0, 8), parseInt(f[1], 10)).key,
                b = [],
                y = s.createDecipheriv(d, p, l);
              b.push(y.update(h)), b.push(y.final()), r = u.concat(b);
            } else {
              var m = c.match(o);
              r = u.from(m[2].replace(/[\r\n]/g, ""), "base64");
            }
            return {
              tag: c.match(i)[1],
              data: r
            };
          };
        },
        7552: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(1823),
            o = r(2562),
            a = r(4988),
            s = r(8073),
            u = r(4192),
            c = r(8850).Buffer;
          function f(e) {
            var t;
            "object" !== (0, n.default)(e) || c.isBuffer(e) || (t = e.passphrase, e = e.key), "string" == typeof e && (e = c.from(e));
            var r,
              f,
              d = a(e, t),
              l = d.tag,
              h = d.data;
            switch (l) {
              case "CERTIFICATE":
                f = i.certificate.decode(h, "der").tbsCertificate.subjectPublicKeyInfo;
              case "PUBLIC KEY":
                switch (f || (f = i.PublicKey.decode(h, "der")), r = f.algorithm.algorithm.join(".")) {
                  case "1.2.840.113549.1.1.1":
                    return i.RSAPublicKey.decode(f.subjectPublicKey.data, "der");
                  case "1.2.840.10045.2.1":
                    return f.subjectPrivateKey = f.subjectPublicKey, {
                      type: "ec",
                      data: f
                    };
                  case "1.2.840.10040.4.1":
                    return f.algorithm.params.pub_key = i.DSAparam.decode(f.subjectPublicKey.data, "der"), {
                      type: "dsa",
                      data: f.algorithm.params
                    };
                  default:
                    throw new Error("unknown key id " + r);
                }
              case "ENCRYPTED PRIVATE KEY":
                h = function (e, t) {
                  var r = e.algorithm.decrypt.kde.kdeparams.salt,
                    n = parseInt(e.algorithm.decrypt.kde.kdeparams.iters.toString(), 10),
                    i = o[e.algorithm.decrypt.cipher.algo.join(".")],
                    a = e.algorithm.decrypt.cipher.iv,
                    f = e.subjectPrivateKey,
                    d = parseInt(i.split("-")[1], 10) / 8,
                    l = u.pbkdf2Sync(t, r, n, d, "sha1"),
                    h = s.createDecipheriv(i, l, a),
                    p = [];
                  return p.push(h.update(f)), p.push(h.final()), c.concat(p);
                }(h = i.EncryptedPrivateKey.decode(h, "der"), t);
              case "PRIVATE KEY":
                switch (r = (f = i.PrivateKey.decode(h, "der")).algorithm.algorithm.join(".")) {
                  case "1.2.840.113549.1.1.1":
                    return i.RSAPrivateKey.decode(f.subjectPrivateKey, "der");
                  case "1.2.840.10045.2.1":
                    return {
                      curve: f.algorithm.curve,
                      privateKey: i.ECPrivateKey.decode(f.subjectPrivateKey, "der").privateKey
                    };
                  case "1.2.840.10040.4.1":
                    return f.algorithm.params.priv_key = i.DSAparam.decode(f.subjectPrivateKey, "der"), {
                      type: "dsa",
                      params: f.algorithm.params
                    };
                  default:
                    throw new Error("unknown key id " + r);
                }
              case "RSA PUBLIC KEY":
                return i.RSAPublicKey.decode(h, "der");
              case "RSA PRIVATE KEY":
                return i.RSAPrivateKey.decode(h, "der");
              case "DSA PRIVATE KEY":
                return {
                  type: "dsa",
                  params: i.DSAPrivateKey.decode(h, "der")
                };
              case "EC PRIVATE KEY":
                return {
                  curve: (h = i.ECPrivateKey.decode(h, "der")).parameters.value,
                  privateKey: h.privateKey
                };
              default:
                throw new Error("unknown key type " + l);
            }
          }
          e.exports = f, f.signature = i.signature;
        },
        8209: function _(e) {
          "use strict";

          var t = function t(e) {
            return e.replace(/^\s+|\s+$/g, "");
          };
          e.exports = function (e) {
            if (!e) return {};
            for (var r, n = {}, i = t(e).split("\n"), o = 0; o < i.length; o++) {
              var a = i[o],
                s = a.indexOf(":"),
                u = t(a.slice(0, s)).toLowerCase(),
                c = t(a.slice(s + 1));
              void 0 === n[u] ? n[u] = c : (r = n[u], "[object Array]" === Object.prototype.toString.call(r) ? n[u].push(c) : n[u] = [n[u], c]);
            }
            return n;
          };
        },
        4192: function _(e, t, r) {
          "use strict";

          t.pbkdf2 = r(1882), t.pbkdf2Sync = r(1658);
        },
        1882: function _(e, t, r) {
          "use strict";

          var n,
            i,
            o = r(8850).Buffer,
            a = r(3127),
            s = r(7401),
            u = r(1658),
            c = r(8398),
            f = r.g.crypto && r.g.crypto.subtle,
            d = {
              sha: "SHA-1",
              "sha-1": "SHA-1",
              sha1: "SHA-1",
              sha256: "SHA-256",
              "sha-256": "SHA-256",
              sha384: "SHA-384",
              "sha-384": "SHA-384",
              "sha-512": "SHA-512",
              sha512: "SHA-512"
            },
            l = [];
          function h() {
            return i || (i = r.g.process && r.g.process.nextTick ? r.g.process.nextTick : r.g.queueMicrotask ? r.g.queueMicrotask : r.g.setImmediate ? r.g.setImmediate : r.g.setTimeout);
          }
          function p(e, t, r, n, i) {
            return f.importKey("raw", e, {
              name: "PBKDF2"
            }, !1, ["deriveBits"]).then(function (e) {
              return f.deriveBits({
                name: "PBKDF2",
                salt: t,
                iterations: r,
                hash: {
                  name: i
                }
              }, e, n << 3);
            }).then(function (e) {
              return o.from(e);
            });
          }
          e.exports = function (e, t, i, b, y, m) {
            "function" == typeof y && (m = y, y = void 0);
            var v = d[(y = y || "sha1").toLowerCase()];
            if (v && "function" == typeof r.g.Promise) {
              if (a(i, b), e = c(e, s, "Password"), t = c(t, s, "Salt"), "function" != typeof m) throw new Error("No callback provided to pbkdf2");
              !function (e, t) {
                e.then(function (e) {
                  h()(function () {
                    t(null, e);
                  });
                }, function (e) {
                  h()(function () {
                    t(e);
                  });
                });
              }(function (e) {
                if (r.g.process && !r.g.process.browser) return Promise.resolve(!1);
                if (!f || !f.importKey || !f.deriveBits) return Promise.resolve(!1);
                if (void 0 !== l[e]) return l[e];
                var t = p(n = n || o.alloc(8), n, 10, 128, e).then(function () {
                  return !0;
                }).catch(function () {
                  return !1;
                });
                return l[e] = t, t;
              }(v).then(function (r) {
                return r ? p(e, t, i, b, v) : u(e, t, i, b, y);
              }), m);
            } else h()(function () {
              var r;
              try {
                r = u(e, t, i, b, y);
              } catch (e) {
                return m(e);
              }
              m(null, r);
            });
          };
        },
        7401: function _(e, t, r) {
          "use strict";

          var n,
            i = r(9142);
          n = r.g.process && r.g.process.browser ? "utf-8" : r.g.process && r.g.process.version ? parseInt(i.version.split(".")[0].slice(1), 10) >= 6 ? "utf-8" : "binary" : "utf-8", e.exports = n;
        },
        3127: function _(e) {
          "use strict";

          var t = Math.pow(2, 30) - 1;
          e.exports = function (e, r) {
            if ("number" != typeof e) throw new TypeError("Iterations not a number");
            if (e < 0) throw new TypeError("Bad iterations");
            if ("number" != typeof r) throw new TypeError("Key length not a number");
            if (r < 0 || r > t || r != r) throw new TypeError("Bad key length");
          };
        },
        1658: function _(e, t, r) {
          "use strict";

          var n = r(5349),
            i = r(6707),
            o = r(1708),
            a = r(8850).Buffer,
            s = r(3127),
            u = r(7401),
            c = r(8398),
            f = a.alloc(128),
            d = {
              md5: 16,
              sha1: 20,
              sha224: 28,
              sha256: 32,
              sha384: 48,
              sha512: 64,
              rmd160: 20,
              ripemd160: 20
            };
          function l(e, t, r) {
            var s = function (e) {
                return "rmd160" === e || "ripemd160" === e ? function (e) {
                  return new i().update(e).digest();
                } : "md5" === e ? n : function (t) {
                  return o(e).update(t).digest();
                };
              }(e),
              u = "sha512" === e || "sha384" === e ? 128 : 64;
            t.length > u ? t = s(t) : t.length < u && (t = a.concat([t, f], u));
            for (var c = a.allocUnsafe(u + d[e]), l = a.allocUnsafe(u + d[e]), h = 0; h < u; h++) c[h] = 54 ^ t[h], l[h] = 92 ^ t[h];
            var p = a.allocUnsafe(u + r + 4);
            c.copy(p, 0, 0, u), this.ipad1 = p, this.ipad2 = c, this.opad = l, this.alg = e, this.blocksize = u, this.hash = s, this.size = d[e];
          }
          l.prototype.run = function (e, t) {
            return e.copy(t, this.blocksize), this.hash(t).copy(this.opad, this.blocksize), this.hash(this.opad);
          }, e.exports = function (e, t, r, n, i) {
            s(r, n);
            var o = new l(i = i || "sha1", e = c(e, u, "Password"), (t = c(t, u, "Salt")).length),
              f = a.allocUnsafe(n),
              h = a.allocUnsafe(t.length + 4);
            t.copy(h, 0, 0, t.length);
            for (var p = 0, b = d[i], y = Math.ceil(n / b), m = 1; m <= y; m++) {
              h.writeUInt32BE(m, t.length);
              for (var v = o.run(h, o.ipad1), g = v, w = 1; w < r; w++) {
                g = o.run(g, o.ipad2);
                for (var A = 0; A < b; A++) v[A] ^= g[A];
              }
              v.copy(f, p), p += b;
            }
            return f;
          };
        },
        8398: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer;
          e.exports = function (e, t, r) {
            if (n.isBuffer(e)) return e;
            if ("string" == typeof e) return n.from(e, t);
            if (ArrayBuffer.isView(e)) return n.from(e.buffer);
            throw new TypeError(r + " must be a string, a Buffer, a typed array or a DataView");
          };
        },
        9142: function _(e) {
          "use strict";

          var t,
            r,
            n = e.exports = {};
          function i() {
            throw new Error("setTimeout has not been defined");
          }
          function o() {
            throw new Error("clearTimeout has not been defined");
          }
          function a(e) {
            if (t === setTimeout) return setTimeout(e, 0);
            if ((t === i || !t) && setTimeout) return t = setTimeout, setTimeout(e, 0);
            try {
              return t(e, 0);
            } catch (r) {
              try {
                return t.call(null, e, 0);
              } catch (r) {
                return t.call(this, e, 0);
              }
            }
          }
          !function () {
            try {
              t = "function" == typeof setTimeout ? setTimeout : i;
            } catch (e) {
              t = i;
            }
            try {
              r = "function" == typeof clearTimeout ? clearTimeout : o;
            } catch (e) {
              r = o;
            }
          }();
          var s,
            u = [],
            c = !1,
            f = -1;
          function d() {
            c && s && (c = !1, s.length ? u = s.concat(u) : f = -1, u.length && l());
          }
          function l() {
            if (!c) {
              var e = a(d);
              c = !0;
              for (var t = u.length; t;) {
                for (s = u, u = []; ++f < t;) s && s[f].run();
                f = -1, t = u.length;
              }
              s = null, c = !1, function (e) {
                if (r === clearTimeout) return clearTimeout(e);
                if ((r === o || !r) && clearTimeout) return r = clearTimeout, clearTimeout(e);
                try {
                  return r(e);
                } catch (t) {
                  try {
                    return r.call(null, e);
                  } catch (t) {
                    return r.call(this, e);
                  }
                }
              }(e);
            }
          }
          function h(e, t) {
            this.fun = e, this.array = t;
          }
          function p() {}
          n.nextTick = function (e) {
            var t = new Array(arguments.length - 1);
            if (arguments.length > 1) for (var r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];
            u.push(new h(e, t)), 1 !== u.length || c || a(l);
          }, h.prototype.run = function () {
            this.fun.apply(null, this.array);
          }, n.title = "browser", n.browser = !0, n.env = {}, n.argv = [], n.version = "", n.versions = {}, n.on = p, n.addListener = p, n.once = p, n.off = p, n.removeListener = p, n.removeAllListeners = p, n.emit = p, n.prependListener = p, n.prependOnceListener = p, n.listeners = function (e) {
            return [];
          }, n.binding = function (e) {
            throw new Error("process.binding is not supported");
          }, n.cwd = function () {
            return "/";
          }, n.chdir = function (e) {
            throw new Error("process.chdir is not supported");
          }, n.umask = function () {
            return 0;
          };
        },
        6991: function _(e, t, r) {
          "use strict";

          t.publicEncrypt = r(2466), t.privateDecrypt = r(3144), t.privateEncrypt = function (e, r) {
            return t.publicEncrypt(e, r, !0);
          }, t.publicDecrypt = function (e, r) {
            return t.privateDecrypt(e, r, !0);
          };
        },
        6873: function _(e, t, r) {
          "use strict";

          var n = r(5866),
            i = r(8850).Buffer;
          function o(e) {
            var t = i.allocUnsafe(4);
            return t.writeUInt32BE(e, 0), t;
          }
          e.exports = function (e, t) {
            for (var r, a = i.alloc(0), s = 0; a.length < t;) r = o(s++), a = i.concat([a, n("sha1").update(e).update(r).digest()]);
            return a.slice(0, t);
          };
        },
        3144: function _(e, t, r) {
          "use strict";

          var n = r(7552),
            i = r(6873),
            o = r(817),
            a = r(1734),
            s = r(9782),
            u = r(5866),
            c = r(2561),
            f = r(8850).Buffer;
          e.exports = function (e, t, r) {
            var d;
            d = e.padding ? e.padding : r ? 1 : 4;
            var l,
              h = n(e),
              p = h.modulus.byteLength();
            if (t.length > p || new a(t).cmp(h.modulus) >= 0) throw new Error("decryption error");
            l = r ? c(new a(t), h) : s(t, h);
            var b = f.alloc(p - l.length);
            if (l = f.concat([b, l], p), 4 === d) return function (e, t) {
              var r = e.modulus.byteLength(),
                n = u("sha1").update(f.alloc(0)).digest(),
                a = n.length;
              if (0 !== t[0]) throw new Error("decryption error");
              var s = t.slice(1, a + 1),
                c = t.slice(a + 1),
                d = o(s, i(c, a)),
                l = o(c, i(d, r - a - 1));
              if (function (e, t) {
                e = f.from(e), t = f.from(t);
                var r = 0,
                  n = e.length;
                e.length !== t.length && (r++, n = Math.min(e.length, t.length));
                for (var i = -1; ++i < n;) r += e[i] ^ t[i];
                return r;
              }(n, l.slice(0, a))) throw new Error("decryption error");
              for (var h = a; 0 === l[h];) h++;
              if (1 !== l[h++]) throw new Error("decryption error");
              return l.slice(h);
            }(h, l);
            if (1 === d) return function (e, t, r) {
              for (var n = t.slice(0, 2), i = 2, o = 0; 0 !== t[i++];) if (i >= t.length) {
                o++;
                break;
              }
              var a = t.slice(2, i - 1);
              if (("0002" !== n.toString("hex") && !r || "0001" !== n.toString("hex") && r) && o++, a.length < 8 && o++, o) throw new Error("decryption error");
              return t.slice(i);
            }(0, l, r);
            if (3 === d) return l;
            throw new Error("unknown padding");
          };
        },
        2466: function _(e, t, r) {
          "use strict";

          var n = r(7552),
            i = r(5010),
            o = r(5866),
            a = r(6873),
            s = r(817),
            u = r(1734),
            c = r(2561),
            f = r(9782),
            d = r(8850).Buffer;
          e.exports = function (e, t, r) {
            var l;
            l = e.padding ? e.padding : r ? 1 : 4;
            var h,
              p = n(e);
            if (4 === l) h = function (e, t) {
              var r = e.modulus.byteLength(),
                n = t.length,
                c = o("sha1").update(d.alloc(0)).digest(),
                f = c.length,
                l = 2 * f;
              if (n > r - l - 2) throw new Error("message too long");
              var h = d.alloc(r - n - l - 2),
                p = r - f - 1,
                b = i(f),
                y = s(d.concat([c, h, d.alloc(1, 1), t], p), a(b, p)),
                m = s(b, a(y, f));
              return new u(d.concat([d.alloc(1), m, y], r));
            }(p, t);else if (1 === l) h = function (e, t, r) {
              var n,
                o = t.length,
                a = e.modulus.byteLength();
              if (o > a - 11) throw new Error("message too long");
              return n = r ? d.alloc(a - o - 3, 255) : function (e) {
                for (var t, r = d.allocUnsafe(e), n = 0, o = i(2 * e), a = 0; n < e;) a === o.length && (o = i(2 * e), a = 0), (t = o[a++]) && (r[n++] = t);
                return r;
              }(a - o - 3), new u(d.concat([d.from([0, r ? 1 : 2]), n, d.alloc(1), t], a));
            }(p, t, r);else {
              if (3 !== l) throw new Error("unknown padding");
              if ((h = new u(t)).cmp(p.modulus) >= 0) throw new Error("data too long for modulus");
            }
            return r ? f(h, p) : c(h, p);
          };
        },
        2561: function _(e, t, r) {
          "use strict";

          var n = r(1734),
            i = r(8850).Buffer;
          e.exports = function (e, t) {
            return i.from(e.toRed(n.mont(t.modulus)).redPow(new n(t.publicExponent)).fromRed().toArray());
          };
        },
        817: function _(e) {
          "use strict";

          e.exports = function (e, t) {
            for (var r = e.length, n = -1; ++n < r;) e[n] ^= t[n];
            return e;
          };
        },
        1296: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(10),
            o = r(3103),
            a = r(34);
          function s(e, t) {
            return t.encode ? t.strict ? i(e) : encodeURIComponent(e) : e;
          }
          function u(e) {
            return Array.isArray(e) ? e.sort() : "object" === (0, n.default)(e) ? u(Object.keys(e)).sort(function (e, t) {
              return Number(e) - Number(t);
            }).map(function (t) {
              return e[t];
            }) : e;
          }
          function c(e) {
            var t = e.indexOf("?");
            return -1 === t ? "" : e.slice(t + 1);
          }
          function f(e, t) {
            var r = function (e) {
                var t;
                switch (e.arrayFormat) {
                  case "index":
                    return function (e, r, n) {
                      t = /\[(\d*)\]$/.exec(e), e = e.replace(/\[\d*\]$/, ""), t ? (void 0 === n[e] && (n[e] = {}), n[e][t[1]] = r) : n[e] = r;
                    };
                  case "bracket":
                    return function (e, r, n) {
                      t = /(\[\])$/.exec(e), e = e.replace(/\[\]$/, ""), t ? void 0 !== n[e] ? n[e] = [].concat(n[e], r) : n[e] = [r] : n[e] = r;
                    };
                  default:
                    return function (e, t, r) {
                      void 0 !== r[e] ? r[e] = [].concat(r[e], t) : r[e] = t;
                    };
                }
              }(t = o({
                arrayFormat: "none"
              }, t)),
              i = Object.create(null);
            return "string" != typeof e ? i : (e = e.trim().replace(/^[?#&]/, "")) ? (e.split("&").forEach(function (e) {
              var t = e.replace(/\+/g, " ").split("="),
                n = t.shift(),
                o = t.length > 0 ? t.join("=") : void 0;
              o = void 0 === o ? null : a(o), r(a(n), o, i);
            }), Object.keys(i).sort().reduce(function (e, t) {
              var r = i[t];
              return Boolean(r) && "object" === (0, n.default)(r) && !Array.isArray(r) ? e[t] = u(r) : e[t] = r, e;
            }, Object.create(null))) : i;
          }
          t.extract = c, t.parse = f, t.stringify = function (e, t) {
            !1 === (t = o({
              encode: !0,
              strict: !0,
              arrayFormat: "none"
            }, t)).sort && (t.sort = function () {});
            var r = function (e) {
              switch (e.arrayFormat) {
                case "index":
                  return function (t, r, n) {
                    return null === r ? [s(t, e), "[", n, "]"].join("") : [s(t, e), "[", s(n, e), "]=", s(r, e)].join("");
                  };
                case "bracket":
                  return function (t, r) {
                    return null === r ? s(t, e) : [s(t, e), "[]=", s(r, e)].join("");
                  };
                default:
                  return function (t, r) {
                    return null === r ? s(t, e) : [s(t, e), "=", s(r, e)].join("");
                  };
              }
            }(t);
            return e ? Object.keys(e).sort(t.sort).map(function (n) {
              var i = e[n];
              if (void 0 === i) return "";
              if (null === i) return s(n, t);
              if (Array.isArray(i)) {
                var o = [];
                return i.slice().forEach(function (e) {
                  void 0 !== e && o.push(r(n, e, o.length));
                }), o.join("&");
              }
              return s(n, t) + "=" + s(i, t);
            }).filter(function (e) {
              return e.length > 0;
            }).join("&") : "";
          }, t.parseUrl = function (e, t) {
            return {
              url: e.split("?")[0] || "",
              query: f(c(e), t)
            };
          };
        },
        5010: function _(e, t, r) {
          "use strict";

          var n = r(9142),
            i = 65536,
            o = r(8850).Buffer,
            a = r.g.crypto || r.g.msCrypto;
          a && a.getRandomValues ? e.exports = function (e, t) {
            if (e > 4294967295) throw new RangeError("requested too many random bytes");
            var r = o.allocUnsafe(e);
            if (e > 0) if (e > i) for (var s = 0; s < e; s += i) a.getRandomValues(r.slice(s, s + i));else a.getRandomValues(r);
            return "function" == typeof t ? n.nextTick(function () {
              t(null, r);
            }) : r;
          } : e.exports = function () {
            throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
          };
        },
        6509: function _(e, t, r) {
          "use strict";

          var n = r(9142);
          function i() {
            throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
          }
          var o = r(8850),
            a = r(5010),
            s = o.Buffer,
            u = o.kMaxLength,
            c = r.g.crypto || r.g.msCrypto,
            f = Math.pow(2, 32) - 1;
          function d(e, t) {
            if ("number" != typeof e || e != e) throw new TypeError("offset must be a number");
            if (e > f || e < 0) throw new TypeError("offset must be a uint32");
            if (e > u || e > t) throw new RangeError("offset out of range");
          }
          function l(e, t, r) {
            if ("number" != typeof e || e != e) throw new TypeError("size must be a number");
            if (e > f || e < 0) throw new TypeError("size must be a uint32");
            if (e + t > r || e > u) throw new RangeError("buffer too small");
          }
          function h(e, t, r, i) {
            if (n.browser) {
              var o = e.buffer,
                s = new Uint8Array(o, t, r);
              return c.getRandomValues(s), i ? void n.nextTick(function () {
                i(null, e);
              }) : e;
            }
            if (!i) return a(r).copy(e, t), e;
            a(r, function (r, n) {
              if (r) return i(r);
              n.copy(e, t), i(null, e);
            });
          }
          c && c.getRandomValues || !n.browser ? (t.randomFill = function (e, t, n, i) {
            if (!(s.isBuffer(e) || e instanceof r.g.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
            if ("function" == typeof t) i = t, t = 0, n = e.length;else if ("function" == typeof n) i = n, n = e.length - t;else if ("function" != typeof i) throw new TypeError('"cb" argument must be a function');
            return d(t, e.length), l(n, t, e.length), h(e, t, n, i);
          }, t.randomFillSync = function (e, t, n) {
            if (void 0 === t && (t = 0), !(s.isBuffer(e) || e instanceof r.g.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
            return d(t, e.length), void 0 === n && (n = e.length - t), l(n, t, e.length), h(e, t, n);
          }) : (t.randomFill = i, t.randomFillSync = i);
        },
        9024: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = {};
          function o(e, t, r) {
            r || (r = Error);
            var n = function (e) {
              var r, n;
              function i(r, n, i) {
                return e.call(this, function (e, r, n) {
                  return "string" == typeof t ? t : t(e, r, n);
                }(r, n, i)) || this;
              }
              return n = e, (r = i).prototype = Object.create(n.prototype), r.prototype.constructor = r, r.__proto__ = n, i;
            }(r);
            n.prototype.name = r.name, n.prototype.code = e, i[e] = n;
          }
          function a(e, t) {
            if (Array.isArray(e)) {
              var r = e.length;
              return e = e.map(function (e) {
                return String(e);
              }), r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : 2 === r ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0]);
            }
            return "of ".concat(t, " ").concat(String(e));
          }
          o("ERR_INVALID_OPT_VALUE", function (e, t) {
            return 'The value "' + t + '" is invalid for option "' + e + '"';
          }, TypeError), o("ERR_INVALID_ARG_TYPE", function (e, t, r) {
            var i, o, s, u, c;
            if ("string" == typeof t && (o = "not ", t.substr(0, o.length) === o) ? (i = "must not be", t = t.replace(/^not /, "")) : i = "must be", function (e, t, r) {
              return (void 0 === r || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;
            }(e, " argument")) s = "The ".concat(e, " ").concat(i, " ").concat(a(t, "type"));else {
              var f = ("number" != typeof c && (c = 0), c + ".".length > (u = e).length || -1 === u.indexOf(".", c) ? "argument" : "property");
              s = 'The "'.concat(e, '" ').concat(f, " ").concat(i, " ").concat(a(t, "type"));
            }
            return s + ". Received type ".concat((0, n.default)(r));
          }, TypeError), o("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"), o("ERR_METHOD_NOT_IMPLEMENTED", function (e) {
            return "The " + e + " method is not implemented";
          }), o("ERR_STREAM_PREMATURE_CLOSE", "Premature close"), o("ERR_STREAM_DESTROYED", function (e) {
            return "Cannot call " + e + " after a stream was destroyed";
          }), o("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"), o("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"), o("ERR_STREAM_WRITE_AFTER_END", "write after end"), o("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError), o("ERR_UNKNOWN_ENCODING", function (e) {
            return "Unknown encoding: " + e;
          }, TypeError), o("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"), e.exports.q = i;
        },
        6884: function _(e, t, r) {
          "use strict";

          var n = r(9142),
            i = Object.keys || function (e) {
              var t = [];
              for (var r in e) t.push(r);
              return t;
            };
          e.exports = f;
          var o = r(6297),
            a = r(1471);
          r(1736)(f, o);
          for (var s = i(a.prototype), u = 0; u < s.length; u++) {
            var c = s[u];
            f.prototype[c] || (f.prototype[c] = a.prototype[c]);
          }
          function f(e) {
            if (!(this instanceof f)) return new f(e);
            o.call(this, e), a.call(this, e), this.allowHalfOpen = !0, e && (!1 === e.readable && (this.readable = !1), !1 === e.writable && (this.writable = !1), !1 === e.allowHalfOpen && (this.allowHalfOpen = !1, this.once("end", d)));
          }
          function d() {
            this._writableState.ended || n.nextTick(l, this);
          }
          function l(e) {
            e.end();
          }
          Object.defineProperty(f.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function get() {
              return this._writableState.highWaterMark;
            }
          }), Object.defineProperty(f.prototype, "writableBuffer", {
            enumerable: !1,
            get: function get() {
              return this._writableState && this._writableState.getBuffer();
            }
          }), Object.defineProperty(f.prototype, "writableLength", {
            enumerable: !1,
            get: function get() {
              return this._writableState.length;
            }
          }), Object.defineProperty(f.prototype, "destroyed", {
            enumerable: !1,
            get: function get() {
              return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
            },
            set: function set(e) {
              void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e, this._writableState.destroyed = e);
            }
          });
        },
        3582: function _(e, t, r) {
          "use strict";

          e.exports = i;
          var n = r(9154);
          function i(e) {
            if (!(this instanceof i)) return new i(e);
            n.call(this, e);
          }
          r(1736)(i, n), i.prototype._transform = function (e, t, r) {
            r(null, e);
          };
        },
        6297: function _(e, t, r) {
          "use strict";

          var n,
            i = r(9142);
          e.exports = E, E.ReadableState = S, r(8291).EventEmitter;
          var o,
            a = function a(e, t) {
              return e.listeners(t).length;
            },
            s = r(7144),
            u = r(9033).Buffer,
            c = r.g.Uint8Array || function () {},
            f = r(4616);
          o = f && f.debuglog ? f.debuglog("stream") : function () {};
          var d,
            l,
            h,
            p = r(5392),
            b = r(7572),
            y = r(6756).getHighWaterMark,
            m = r(9024).q,
            v = m.ERR_INVALID_ARG_TYPE,
            g = m.ERR_STREAM_PUSH_AFTER_EOF,
            w = m.ERR_METHOD_NOT_IMPLEMENTED,
            A = m.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
          r(1736)(E, s);
          var k = b.errorOrDestroy,
            _ = ["error", "close", "destroy", "pause", "resume"];
          function S(e, t, i) {
            n = n || r(6884), e = e || {}, "boolean" != typeof i && (i = t instanceof n), this.objectMode = !!e.objectMode, i && (this.objectMode = this.objectMode || !!e.readableObjectMode), this.highWaterMark = y(this, e, "readableHighWaterMark", i), this.buffer = new p(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = !1 !== e.emitClose, this.autoDestroy = !!e.autoDestroy, this.destroyed = !1, this.defaultEncoding = e.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, e.encoding && (d || (d = r(3462).s), this.decoder = new d(e.encoding), this.encoding = e.encoding);
          }
          function E(e) {
            if (n = n || r(6884), !(this instanceof E)) return new E(e);
            var t = this instanceof n;
            this._readableState = new S(e, this, t), this.readable = !0, e && ("function" == typeof e.read && (this._read = e.read), "function" == typeof e.destroy && (this._destroy = e.destroy)), s.call(this);
          }
          function x(e, t, r, n, i) {
            o("readableAddChunk", t);
            var a,
              s = e._readableState;
            if (null === t) s.reading = !1, function (e, t) {
              if (o("onEofChunk"), !t.ended) {
                if (t.decoder) {
                  var r = t.decoder.end();
                  r && r.length && (t.buffer.push(r), t.length += t.objectMode ? 1 : r.length);
                }
                t.ended = !0, t.sync ? T(e) : (t.needReadable = !1, t.emittedReadable || (t.emittedReadable = !0, C(e)));
              }
            }(e, s);else if (i || (a = function (e, t) {
              var r, n;
              return n = t, u.isBuffer(n) || n instanceof c || "string" == typeof t || void 0 === t || e.objectMode || (r = new v("chunk", ["string", "Buffer", "Uint8Array"], t)), r;
            }(s, t)), a) k(e, a);else if (s.objectMode || t && t.length > 0) {
              if ("string" == typeof t || s.objectMode || Object.getPrototypeOf(t) === u.prototype || (t = function (e) {
                return u.from(e);
              }(t)), n) s.endEmitted ? k(e, new A()) : P(e, s, t, !0);else if (s.ended) k(e, new g());else {
                if (s.destroyed) return !1;
                s.reading = !1, s.decoder && !r ? (t = s.decoder.write(t), s.objectMode || 0 !== t.length ? P(e, s, t, !1) : I(e, s)) : P(e, s, t, !1);
              }
            } else n || (s.reading = !1, I(e, s));
            return !s.ended && (s.length < s.highWaterMark || 0 === s.length);
          }
          function P(e, t, r, n) {
            t.flowing && 0 === t.length && !t.sync ? (t.awaitDrain = 0, e.emit("data", r)) : (t.length += t.objectMode ? 1 : r.length, n ? t.buffer.unshift(r) : t.buffer.push(r), t.needReadable && T(e)), I(e, t);
          }
          Object.defineProperty(E.prototype, "destroyed", {
            enumerable: !1,
            get: function get() {
              return void 0 !== this._readableState && this._readableState.destroyed;
            },
            set: function set(e) {
              this._readableState && (this._readableState.destroyed = e);
            }
          }), E.prototype.destroy = b.destroy, E.prototype._undestroy = b.undestroy, E.prototype._destroy = function (e, t) {
            t(e);
          }, E.prototype.push = function (e, t) {
            var r,
              n = this._readableState;
            return n.objectMode ? r = !0 : "string" == typeof e && ((t = t || n.defaultEncoding) !== n.encoding && (e = u.from(e, t), t = ""), r = !0), x(this, e, t, !1, r);
          }, E.prototype.unshift = function (e) {
            return x(this, e, null, !0, !1);
          }, E.prototype.isPaused = function () {
            return !1 === this._readableState.flowing;
          }, E.prototype.setEncoding = function (e) {
            d || (d = r(3462).s);
            var t = new d(e);
            this._readableState.decoder = t, this._readableState.encoding = this._readableState.decoder.encoding;
            for (var n = this._readableState.buffer.head, i = ""; null !== n;) i += t.write(n.data), n = n.next;
            return this._readableState.buffer.clear(), "" !== i && this._readableState.buffer.push(i), this._readableState.length = i.length, this;
          };
          var O = 1073741824;
          function B(e, t) {
            return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function (e) {
              return e >= O ? e = O : (e--, e |= e >>> 1, e |= e >>> 2, e |= e >>> 4, e |= e >>> 8, e |= e >>> 16, e++), e;
            }(e)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0, 0));
          }
          function T(e) {
            var t = e._readableState;
            o("emitReadable", t.needReadable, t.emittedReadable), t.needReadable = !1, t.emittedReadable || (o("emitReadable", t.flowing), t.emittedReadable = !0, i.nextTick(C, e));
          }
          function C(e) {
            var t = e._readableState;
            o("emitReadable_", t.destroyed, t.length, t.ended), t.destroyed || !t.length && !t.ended || (e.emit("readable"), t.emittedReadable = !1), t.needReadable = !t.flowing && !t.ended && t.length <= t.highWaterMark, N(e);
          }
          function I(e, t) {
            t.readingMore || (t.readingMore = !0, i.nextTick(M, e, t));
          }
          function M(e, t) {
            for (; !t.reading && !t.ended && (t.length < t.highWaterMark || t.flowing && 0 === t.length);) {
              var r = t.length;
              if (o("maybeReadMore read 0"), e.read(0), r === t.length) break;
            }
            t.readingMore = !1;
          }
          function U(e) {
            var t = e._readableState;
            t.readableListening = e.listenerCount("readable") > 0, t.resumeScheduled && !t.paused ? t.flowing = !0 : e.listenerCount("data") > 0 && e.resume();
          }
          function R(e) {
            o("readable nexttick read 0"), e.read(0);
          }
          function j(e, t) {
            o("resume", t.reading), t.reading || e.read(0), t.resumeScheduled = !1, e.emit("resume"), N(e), t.flowing && !t.reading && e.read(0);
          }
          function N(e) {
            var t = e._readableState;
            for (o("flow", t.flowing); t.flowing && null !== e.read(););
          }
          function F(e, t) {
            return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.first() : t.buffer.concat(t.length), t.buffer.clear()) : r = t.buffer.consume(e, t.decoder), r);
            var r;
          }
          function L(e) {
            var t = e._readableState;
            o("endReadable", t.endEmitted), t.endEmitted || (t.ended = !0, i.nextTick(D, t, e));
          }
          function D(e, t) {
            if (o("endReadableNT", e.endEmitted, e.length), !e.endEmitted && 0 === e.length && (e.endEmitted = !0, t.readable = !1, t.emit("end"), e.autoDestroy)) {
              var r = t._writableState;
              (!r || r.autoDestroy && r.finished) && t.destroy();
            }
          }
          function H(e, t) {
            for (var r = 0, n = e.length; r < n; r++) if (e[r] === t) return r;
            return -1;
          }
          E.prototype.read = function (e) {
            o("read", e), e = parseInt(e, 10);
            var t = this._readableState,
              r = e;
            if (0 !== e && (t.emittedReadable = !1), 0 === e && t.needReadable && ((0 !== t.highWaterMark ? t.length >= t.highWaterMark : t.length > 0) || t.ended)) return o("read: emitReadable", t.length, t.ended), 0 === t.length && t.ended ? L(this) : T(this), null;
            if (0 === (e = B(e, t)) && t.ended) return 0 === t.length && L(this), null;
            var n,
              i = t.needReadable;
            return o("need readable", i), (0 === t.length || t.length - e < t.highWaterMark) && o("length less than watermark", i = !0), t.ended || t.reading ? o("reading or ended", i = !1) : i && (o("do read"), t.reading = !0, t.sync = !0, 0 === t.length && (t.needReadable = !0), this._read(t.highWaterMark), t.sync = !1, t.reading || (e = B(r, t))), null === (n = e > 0 ? F(e, t) : null) ? (t.needReadable = t.length <= t.highWaterMark, e = 0) : (t.length -= e, t.awaitDrain = 0), 0 === t.length && (t.ended || (t.needReadable = !0), r !== e && t.ended && L(this)), null !== n && this.emit("data", n), n;
          }, E.prototype._read = function (e) {
            k(this, new w("_read()"));
          }, E.prototype.pipe = function (e, t) {
            var r = this,
              n = this._readableState;
            switch (n.pipesCount) {
              case 0:
                n.pipes = e;
                break;
              case 1:
                n.pipes = [n.pipes, e];
                break;
              default:
                n.pipes.push(e);
            }
            n.pipesCount += 1, o("pipe count=%d opts=%j", n.pipesCount, t);
            var s = t && !1 === t.end || e === i.stdout || e === i.stderr ? b : u;
            function u() {
              o("onend"), e.end();
            }
            n.endEmitted ? i.nextTick(s) : r.once("end", s), e.on("unpipe", function t(i, a) {
              o("onunpipe"), i === r && a && !1 === a.hasUnpiped && (a.hasUnpiped = !0, o("cleanup"), e.removeListener("close", h), e.removeListener("finish", p), e.removeListener("drain", c), e.removeListener("error", l), e.removeListener("unpipe", t), r.removeListener("end", u), r.removeListener("end", b), r.removeListener("data", d), f = !0, !n.awaitDrain || e._writableState && !e._writableState.needDrain || c());
            });
            var c = function (e) {
              return function () {
                var t = e._readableState;
                o("pipeOnDrain", t.awaitDrain), t.awaitDrain && t.awaitDrain--, 0 === t.awaitDrain && a(e, "data") && (t.flowing = !0, N(e));
              };
            }(r);
            e.on("drain", c);
            var f = !1;
            function d(t) {
              o("ondata");
              var i = e.write(t);
              o("dest.write", i), !1 === i && ((1 === n.pipesCount && n.pipes === e || n.pipesCount > 1 && -1 !== H(n.pipes, e)) && !f && (o("false write response, pause", n.awaitDrain), n.awaitDrain++), r.pause());
            }
            function l(t) {
              o("onerror", t), b(), e.removeListener("error", l), 0 === a(e, "error") && k(e, t);
            }
            function h() {
              e.removeListener("finish", p), b();
            }
            function p() {
              o("onfinish"), e.removeListener("close", h), b();
            }
            function b() {
              o("unpipe"), r.unpipe(e);
            }
            return r.on("data", d), function (e, t, r) {
              if ("function" == typeof e.prependListener) return e.prependListener(t, r);
              e._events && e._events[t] ? Array.isArray(e._events[t]) ? e._events[t].unshift(r) : e._events[t] = [r, e._events[t]] : e.on(t, r);
            }(e, "error", l), e.once("close", h), e.once("finish", p), e.emit("pipe", r), n.flowing || (o("pipe resume"), r.resume()), e;
          }, E.prototype.unpipe = function (e) {
            var t = this._readableState,
              r = {
                hasUnpiped: !1
              };
            if (0 === t.pipesCount) return this;
            if (1 === t.pipesCount) return e && e !== t.pipes || (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = !1, e && e.emit("unpipe", this, r)), this;
            if (!e) {
              var n = t.pipes,
                i = t.pipesCount;
              t.pipes = null, t.pipesCount = 0, t.flowing = !1;
              for (var o = 0; o < i; o++) n[o].emit("unpipe", this, {
                hasUnpiped: !1
              });
              return this;
            }
            var a = H(t.pipes, e);
            return -1 === a || (t.pipes.splice(a, 1), t.pipesCount -= 1, 1 === t.pipesCount && (t.pipes = t.pipes[0]), e.emit("unpipe", this, r)), this;
          }, E.prototype.on = function (e, t) {
            var r = s.prototype.on.call(this, e, t),
              n = this._readableState;
            return "data" === e ? (n.readableListening = this.listenerCount("readable") > 0, !1 !== n.flowing && this.resume()) : "readable" === e && (n.endEmitted || n.readableListening || (n.readableListening = n.needReadable = !0, n.flowing = !1, n.emittedReadable = !1, o("on readable", n.length, n.reading), n.length ? T(this) : n.reading || i.nextTick(R, this))), r;
          }, E.prototype.addListener = E.prototype.on, E.prototype.removeListener = function (e, t) {
            var r = s.prototype.removeListener.call(this, e, t);
            return "readable" === e && i.nextTick(U, this), r;
          }, E.prototype.removeAllListeners = function (e) {
            var t = s.prototype.removeAllListeners.apply(this, arguments);
            return "readable" !== e && void 0 !== e || i.nextTick(U, this), t;
          }, E.prototype.resume = function () {
            var e = this._readableState;
            return e.flowing || (o("resume"), e.flowing = !e.readableListening, function (e, t) {
              t.resumeScheduled || (t.resumeScheduled = !0, i.nextTick(j, e, t));
            }(this, e)), e.paused = !1, this;
          }, E.prototype.pause = function () {
            return o("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (o("pause"), this._readableState.flowing = !1, this.emit("pause")), this._readableState.paused = !0, this;
          }, E.prototype.wrap = function (e) {
            var t = this,
              r = this._readableState,
              n = !1;
            for (var i in e.on("end", function () {
              if (o("wrapped end"), r.decoder && !r.ended) {
                var e = r.decoder.end();
                e && e.length && t.push(e);
              }
              t.push(null);
            }), e.on("data", function (i) {
              o("wrapped data"), r.decoder && (i = r.decoder.write(i)), r.objectMode && null == i || (r.objectMode || i && i.length) && (t.push(i) || (n = !0, e.pause()));
            }), e) void 0 === this[i] && "function" == typeof e[i] && (this[i] = function (t) {
              return function () {
                return e[t].apply(e, arguments);
              };
            }(i));
            for (var a = 0; a < _.length; a++) e.on(_[a], this.emit.bind(this, _[a]));
            return this._read = function (t) {
              o("wrapped _read", t), n && (n = !1, e.resume());
            }, this;
          }, "function" == typeof Symbol && (E.prototype[Symbol.asyncIterator] = function () {
            return void 0 === l && (l = r(2317)), l(this);
          }), Object.defineProperty(E.prototype, "readableHighWaterMark", {
            enumerable: !1,
            get: function get() {
              return this._readableState.highWaterMark;
            }
          }), Object.defineProperty(E.prototype, "readableBuffer", {
            enumerable: !1,
            get: function get() {
              return this._readableState && this._readableState.buffer;
            }
          }), Object.defineProperty(E.prototype, "readableFlowing", {
            enumerable: !1,
            get: function get() {
              return this._readableState.flowing;
            },
            set: function set(e) {
              this._readableState && (this._readableState.flowing = e);
            }
          }), E._fromList = F, Object.defineProperty(E.prototype, "readableLength", {
            enumerable: !1,
            get: function get() {
              return this._readableState.length;
            }
          }), "function" == typeof Symbol && (E.from = function (e, t) {
            return void 0 === h && (h = r(6218)), h(E, e, t);
          });
        },
        9154: function _(e, t, r) {
          "use strict";

          e.exports = f;
          var n = r(9024).q,
            i = n.ERR_METHOD_NOT_IMPLEMENTED,
            o = n.ERR_MULTIPLE_CALLBACK,
            a = n.ERR_TRANSFORM_ALREADY_TRANSFORMING,
            s = n.ERR_TRANSFORM_WITH_LENGTH_0,
            u = r(6884);
          function c(e, t) {
            var r = this._transformState;
            r.transforming = !1;
            var n = r.writecb;
            if (null === n) return this.emit("error", new o());
            r.writechunk = null, r.writecb = null, null != t && this.push(t), n(e);
            var i = this._readableState;
            i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
          }
          function f(e) {
            if (!(this instanceof f)) return new f(e);
            u.call(this, e), this._transformState = {
              afterTransform: c.bind(this),
              needTransform: !1,
              transforming: !1,
              writecb: null,
              writechunk: null,
              writeencoding: null
            }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && ("function" == typeof e.transform && (this._transform = e.transform), "function" == typeof e.flush && (this._flush = e.flush)), this.on("prefinish", d);
          }
          function d() {
            var e = this;
            "function" != typeof this._flush || this._readableState.destroyed ? l(this, null, null) : this._flush(function (t, r) {
              l(e, t, r);
            });
          }
          function l(e, t, r) {
            if (t) return e.emit("error", t);
            if (null != r && e.push(r), e._writableState.length) throw new s();
            if (e._transformState.transforming) throw new a();
            return e.push(null);
          }
          r(1736)(f, u), f.prototype.push = function (e, t) {
            return this._transformState.needTransform = !1, u.prototype.push.call(this, e, t);
          }, f.prototype._transform = function (e, t, r) {
            r(new i("_transform()"));
          }, f.prototype._write = function (e, t, r) {
            var n = this._transformState;
            if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {
              var i = this._readableState;
              (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
            }
          }, f.prototype._read = function (e) {
            var t = this._transformState;
            null === t.writechunk || t.transforming ? t.needTransform = !0 : (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform));
          }, f.prototype._destroy = function (e, t) {
            u.prototype._destroy.call(this, e, function (e) {
              t(e);
            });
          };
        },
        1471: function _(e, t, r) {
          "use strict";

          var n,
            i = r(9142);
          function o(e) {
            var t = this;
            this.next = null, this.entry = null, this.finish = function () {
              !function (e, t, r) {
                var n = e.entry;
                for (e.entry = null; n;) {
                  var i = n.callback;
                  t.pendingcb--, i(undefined), n = n.next;
                }
                t.corkedRequestsFree.next = e;
              }(t, e);
            };
          }
          e.exports = E, E.WritableState = S;
          var a,
            s = {
              deprecate: r(6219)
            },
            u = r(7144),
            c = r(9033).Buffer,
            f = r.g.Uint8Array || function () {},
            d = r(7572),
            l = r(6756).getHighWaterMark,
            h = r(9024).q,
            p = h.ERR_INVALID_ARG_TYPE,
            b = h.ERR_METHOD_NOT_IMPLEMENTED,
            y = h.ERR_MULTIPLE_CALLBACK,
            m = h.ERR_STREAM_CANNOT_PIPE,
            v = h.ERR_STREAM_DESTROYED,
            g = h.ERR_STREAM_NULL_VALUES,
            w = h.ERR_STREAM_WRITE_AFTER_END,
            A = h.ERR_UNKNOWN_ENCODING,
            k = d.errorOrDestroy;
          function _() {}
          function S(e, t, a) {
            n = n || r(6884), e = e || {}, "boolean" != typeof a && (a = t instanceof n), this.objectMode = !!e.objectMode, a && (this.objectMode = this.objectMode || !!e.writableObjectMode), this.highWaterMark = l(this, e, "writableHighWaterMark", a), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
            var s = !1 === e.decodeStrings;
            this.decodeStrings = !s, this.defaultEncoding = e.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function (e) {
              !function (e, t) {
                var r = e._writableState,
                  n = r.sync,
                  o = r.writecb;
                if ("function" != typeof o) throw new y();
                if (function (e) {
                  e.writing = !1, e.writecb = null, e.length -= e.writelen, e.writelen = 0;
                }(r), t) !function (e, t, r, n, o) {
                  --t.pendingcb, r ? (i.nextTick(o, n), i.nextTick(C, e, t), e._writableState.errorEmitted = !0, k(e, n)) : (o(n), e._writableState.errorEmitted = !0, k(e, n), C(e, t));
                }(e, r, n, t, o);else {
                  var a = B(r) || e.destroyed;
                  a || r.corked || r.bufferProcessing || !r.bufferedRequest || O(e, r), n ? i.nextTick(P, e, r, a, o) : P(e, r, a, o);
                }
              }(t, e);
            }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = !1 !== e.emitClose, this.autoDestroy = !!e.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new o(this);
          }
          function E(e) {
            var t = this instanceof (n = n || r(6884));
            if (!t && !a.call(E, this)) return new E(e);
            this._writableState = new S(e, this, t), this.writable = !0, e && ("function" == typeof e.write && (this._write = e.write), "function" == typeof e.writev && (this._writev = e.writev), "function" == typeof e.destroy && (this._destroy = e.destroy), "function" == typeof e.final && (this._final = e.final)), u.call(this);
          }
          function x(e, t, r, n, i, o, a) {
            t.writelen = n, t.writecb = a, t.writing = !0, t.sync = !0, t.destroyed ? t.onwrite(new v("write")) : r ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), t.sync = !1;
          }
          function P(e, t, r, n) {
            r || function (e, t) {
              0 === t.length && t.needDrain && (t.needDrain = !1, e.emit("drain"));
            }(e, t), t.pendingcb--, n(), C(e, t);
          }
          function O(e, t) {
            t.bufferProcessing = !0;
            var r = t.bufferedRequest;
            if (e._writev && r && r.next) {
              var n = t.bufferedRequestCount,
                i = new Array(n),
                a = t.corkedRequestsFree;
              a.entry = r;
              for (var s = 0, u = !0; r;) i[s] = r, r.isBuf || (u = !1), r = r.next, s += 1;
              i.allBuffers = u, x(e, t, !0, t.length, i, "", a.finish), t.pendingcb++, t.lastBufferedRequest = null, a.next ? (t.corkedRequestsFree = a.next, a.next = null) : t.corkedRequestsFree = new o(t), t.bufferedRequestCount = 0;
            } else {
              for (; r;) {
                var c = r.chunk,
                  f = r.encoding,
                  d = r.callback;
                if (x(e, t, !1, t.objectMode ? 1 : c.length, c, f, d), r = r.next, t.bufferedRequestCount--, t.writing) break;
              }
              null === r && (t.lastBufferedRequest = null);
            }
            t.bufferedRequest = r, t.bufferProcessing = !1;
          }
          function B(e) {
            return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing;
          }
          function T(e, t) {
            e._final(function (r) {
              t.pendingcb--, r && k(e, r), t.prefinished = !0, e.emit("prefinish"), C(e, t);
            });
          }
          function C(e, t) {
            var r = B(t);
            if (r && (function (e, t) {
              t.prefinished || t.finalCalled || ("function" != typeof e._final || t.destroyed ? (t.prefinished = !0, e.emit("prefinish")) : (t.pendingcb++, t.finalCalled = !0, i.nextTick(T, e, t)));
            }(e, t), 0 === t.pendingcb && (t.finished = !0, e.emit("finish"), t.autoDestroy))) {
              var n = e._readableState;
              (!n || n.autoDestroy && n.endEmitted) && e.destroy();
            }
            return r;
          }
          r(1736)(E, u), S.prototype.getBuffer = function () {
            for (var e = this.bufferedRequest, t = []; e;) t.push(e), e = e.next;
            return t;
          }, function () {
            try {
              Object.defineProperty(S.prototype, "buffer", {
                get: s.deprecate(function () {
                  return this.getBuffer();
                }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
              });
            } catch (e) {}
          }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (a = Function.prototype[Symbol.hasInstance], Object.defineProperty(E, Symbol.hasInstance, {
            value: function value(e) {
              return !!a.call(this, e) || this === E && e && e._writableState instanceof S;
            }
          })) : a = function a(e) {
            return e instanceof this;
          }, E.prototype.pipe = function () {
            k(this, new m());
          }, E.prototype.write = function (e, t, r) {
            var n,
              o = this._writableState,
              a = !1,
              s = !o.objectMode && (n = e, c.isBuffer(n) || n instanceof f);
            return s && !c.isBuffer(e) && (e = function (e) {
              return c.from(e);
            }(e)), "function" == typeof t && (r = t, t = null), s ? t = "buffer" : t || (t = o.defaultEncoding), "function" != typeof r && (r = _), o.ending ? function (e, t) {
              var r = new w();
              k(e, r), i.nextTick(t, r);
            }(this, r) : (s || function (e, t, r, n) {
              var o;
              return null === r ? o = new g() : "string" == typeof r || t.objectMode || (o = new p("chunk", ["string", "Buffer"], r)), !o || (k(e, o), i.nextTick(n, o), !1);
            }(this, o, e, r)) && (o.pendingcb++, a = function (e, t, r, n, i, o) {
              if (!r) {
                var a = function (e, t, r) {
                  return e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = c.from(t, r)), t;
                }(t, n, i);
                n !== a && (r = !0, i = "buffer", n = a);
              }
              var s = t.objectMode ? 1 : n.length;
              t.length += s;
              var u = t.length < t.highWaterMark;
              if (u || (t.needDrain = !0), t.writing || t.corked) {
                var f = t.lastBufferedRequest;
                t.lastBufferedRequest = {
                  chunk: n,
                  encoding: i,
                  isBuf: r,
                  callback: o,
                  next: null
                }, f ? f.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;
              } else x(e, t, !1, s, n, i, o);
              return u;
            }(this, o, s, e, t, r)), a;
          }, E.prototype.cork = function () {
            this._writableState.corked++;
          }, E.prototype.uncork = function () {
            var e = this._writableState;
            e.corked && (e.corked--, e.writing || e.corked || e.bufferProcessing || !e.bufferedRequest || O(this, e));
          }, E.prototype.setDefaultEncoding = function (e) {
            if ("string" == typeof e && (e = e.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()) > -1)) throw new A(e);
            return this._writableState.defaultEncoding = e, this;
          }, Object.defineProperty(E.prototype, "writableBuffer", {
            enumerable: !1,
            get: function get() {
              return this._writableState && this._writableState.getBuffer();
            }
          }), Object.defineProperty(E.prototype, "writableHighWaterMark", {
            enumerable: !1,
            get: function get() {
              return this._writableState.highWaterMark;
            }
          }), E.prototype._write = function (e, t, r) {
            r(new b("_write()"));
          }, E.prototype._writev = null, E.prototype.end = function (e, t, r) {
            var n = this._writableState;
            return "function" == typeof e ? (r = e, e = null, t = null) : "function" == typeof t && (r = t, t = null), null != e && this.write(e, t), n.corked && (n.corked = 1, this.uncork()), n.ending || function (e, t, r) {
              t.ending = !0, C(e, t), r && (t.finished ? i.nextTick(r) : e.once("finish", r)), t.ended = !0, e.writable = !1;
            }(this, n, r), this;
          }, Object.defineProperty(E.prototype, "writableLength", {
            enumerable: !1,
            get: function get() {
              return this._writableState.length;
            }
          }), Object.defineProperty(E.prototype, "destroyed", {
            enumerable: !1,
            get: function get() {
              return void 0 !== this._writableState && this._writableState.destroyed;
            },
            set: function set(e) {
              this._writableState && (this._writableState.destroyed = e);
            }
          }), E.prototype.destroy = d.destroy, E.prototype._undestroy = d.undestroy, E.prototype._destroy = function (e, t) {
            t(e);
          };
        },
        2317: function _(e, t, r) {
          "use strict";

          var n,
            i = r(9142);
          function o(e, t, r) {
            return t in e ? Object.defineProperty(e, t, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[t] = r, e;
          }
          var a = r(5831),
            s = Symbol("lastResolve"),
            u = Symbol("lastReject"),
            c = Symbol("error"),
            f = Symbol("ended"),
            d = Symbol("lastPromise"),
            l = Symbol("handlePromise"),
            h = Symbol("stream");
          function p(e, t) {
            return {
              value: e,
              done: t
            };
          }
          function b(e) {
            var t = e[s];
            if (null !== t) {
              var r = e[h].read();
              null !== r && (e[d] = null, e[s] = null, e[u] = null, t(p(r, !1)));
            }
          }
          function y(e) {
            i.nextTick(b, e);
          }
          var m = Object.getPrototypeOf(function () {}),
            v = Object.setPrototypeOf((o(n = {
              get stream() {
                return this[h];
              },
              next: function next() {
                var e = this,
                  t = this[c];
                if (null !== t) return Promise.reject(t);
                if (this[f]) return Promise.resolve(p(void 0, !0));
                if (this[h].destroyed) return new Promise(function (t, r) {
                  i.nextTick(function () {
                    e[c] ? r(e[c]) : t(p(void 0, !0));
                  });
                });
                var r,
                  n = this[d];
                if (n) r = new Promise(function (e, t) {
                  return function (r, n) {
                    e.then(function () {
                      t[f] ? r(p(void 0, !0)) : t[l](r, n);
                    }, n);
                  };
                }(n, this));else {
                  var o = this[h].read();
                  if (null !== o) return Promise.resolve(p(o, !1));
                  r = new Promise(this[l]);
                }
                return this[d] = r, r;
              }
            }, Symbol.asyncIterator, function () {
              return this;
            }), o(n, "return", function () {
              var e = this;
              return new Promise(function (t, r) {
                e[h].destroy(null, function (e) {
                  e ? r(e) : t(p(void 0, !0));
                });
              });
            }), n), m);
          e.exports = function (e) {
            var t,
              r = Object.create(v, (o(t = {}, h, {
                value: e,
                writable: !0
              }), o(t, s, {
                value: null,
                writable: !0
              }), o(t, u, {
                value: null,
                writable: !0
              }), o(t, c, {
                value: null,
                writable: !0
              }), o(t, f, {
                value: e._readableState.endEmitted,
                writable: !0
              }), o(t, l, {
                value: function value(e, t) {
                  var n = r[h].read();
                  n ? (r[d] = null, r[s] = null, r[u] = null, e(p(n, !1))) : (r[s] = e, r[u] = t);
                },
                writable: !0
              }), t));
            return r[d] = null, a(e, function (e) {
              if (e && "ERR_STREAM_PREMATURE_CLOSE" !== e.code) {
                var t = r[u];
                return null !== t && (r[d] = null, r[s] = null, r[u] = null, t(e)), void (r[c] = e);
              }
              var n = r[s];
              null !== n && (r[d] = null, r[s] = null, r[u] = null, n(p(void 0, !0))), r[f] = !0;
            }), e.on("readable", y.bind(null, r)), r;
          };
        },
        5392: function _(e, t, r) {
          "use strict";

          function n(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t && (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })), r.push.apply(r, n);
            }
            return r;
          }
          function i(e, t, r) {
            return t in e ? Object.defineProperty(e, t, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[t] = r, e;
          }
          function o(e, t) {
            for (var r = 0; r < t.length; r++) {
              var n = t[r];
              n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
            }
          }
          var a = r(9033).Buffer,
            s = r(2361).inspect,
            u = s && s.custom || "inspect";
          e.exports = function () {
            function e() {
              !function (e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
              }(this, e), this.head = null, this.tail = null, this.length = 0;
            }
            var t, r;
            return t = e, r = [{
              key: "push",
              value: function value(e) {
                var t = {
                  data: e,
                  next: null
                };
                this.length > 0 ? this.tail.next = t : this.head = t, this.tail = t, ++this.length;
              }
            }, {
              key: "unshift",
              value: function value(e) {
                var t = {
                  data: e,
                  next: this.head
                };
                0 === this.length && (this.tail = t), this.head = t, ++this.length;
              }
            }, {
              key: "shift",
              value: function value() {
                if (0 !== this.length) {
                  var e = this.head.data;
                  return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e;
                }
              }
            }, {
              key: "clear",
              value: function value() {
                this.head = this.tail = null, this.length = 0;
              }
            }, {
              key: "join",
              value: function value(e) {
                if (0 === this.length) return "";
                for (var t = this.head, r = "" + t.data; t = t.next;) r += e + t.data;
                return r;
              }
            }, {
              key: "concat",
              value: function value(e) {
                if (0 === this.length) return a.alloc(0);
                for (var t, r, n, i = a.allocUnsafe(e >>> 0), o = this.head, s = 0; o;) t = o.data, r = i, n = s, a.prototype.copy.call(t, r, n), s += o.data.length, o = o.next;
                return i;
              }
            }, {
              key: "consume",
              value: function value(e, t) {
                var r;
                return e < this.head.data.length ? (r = this.head.data.slice(0, e), this.head.data = this.head.data.slice(e)) : r = e === this.head.data.length ? this.shift() : t ? this._getString(e) : this._getBuffer(e), r;
              }
            }, {
              key: "first",
              value: function value() {
                return this.head.data;
              }
            }, {
              key: "_getString",
              value: function value(e) {
                var t = this.head,
                  r = 1,
                  n = t.data;
                for (e -= n.length; t = t.next;) {
                  var i = t.data,
                    o = e > i.length ? i.length : e;
                  if (o === i.length ? n += i : n += i.slice(0, e), 0 == (e -= o)) {
                    o === i.length ? (++r, t.next ? this.head = t.next : this.head = this.tail = null) : (this.head = t, t.data = i.slice(o));
                    break;
                  }
                  ++r;
                }
                return this.length -= r, n;
              }
            }, {
              key: "_getBuffer",
              value: function value(e) {
                var t = a.allocUnsafe(e),
                  r = this.head,
                  n = 1;
                for (r.data.copy(t), e -= r.data.length; r = r.next;) {
                  var i = r.data,
                    o = e > i.length ? i.length : e;
                  if (i.copy(t, t.length - e, 0, o), 0 == (e -= o)) {
                    o === i.length ? (++n, r.next ? this.head = r.next : this.head = this.tail = null) : (this.head = r, r.data = i.slice(o));
                    break;
                  }
                  ++n;
                }
                return this.length -= n, t;
              }
            }, {
              key: u,
              value: function value(e, t) {
                return s(this, function (e) {
                  for (var t = 1; t < arguments.length; t++) {
                    var r = null != arguments[t] ? arguments[t] : {};
                    t % 2 ? n(Object(r), !0).forEach(function (t) {
                      i(e, t, r[t]);
                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach(function (t) {
                      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
                    });
                  }
                  return e;
                }({}, t, {
                  depth: 0,
                  customInspect: !1
                }));
              }
            }], r && o(t.prototype, r), e;
          }();
        },
        7572: function _(e, t, r) {
          "use strict";

          var n = r(9142);
          function i(e, t) {
            a(e, t), o(e);
          }
          function o(e) {
            e._writableState && !e._writableState.emitClose || e._readableState && !e._readableState.emitClose || e.emit("close");
          }
          function a(e, t) {
            e.emit("error", t);
          }
          e.exports = {
            destroy: function destroy(e, t) {
              var r = this,
                s = this._readableState && this._readableState.destroyed,
                u = this._writableState && this._writableState.destroyed;
              return s || u ? (t ? t(e) : e && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, n.nextTick(a, this, e)) : n.nextTick(a, this, e)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(e || null, function (e) {
                !t && e ? r._writableState ? r._writableState.errorEmitted ? n.nextTick(o, r) : (r._writableState.errorEmitted = !0, n.nextTick(i, r, e)) : n.nextTick(i, r, e) : t ? (n.nextTick(o, r), t(e)) : n.nextTick(o, r);
              }), this);
            },
            undestroy: function undestroy() {
              this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
            },
            errorOrDestroy: function errorOrDestroy(e, t) {
              var r = e._readableState,
                n = e._writableState;
              r && r.autoDestroy || n && n.autoDestroy ? e.destroy(t) : e.emit("error", t);
            }
          };
        },
        5831: function _(e, t, r) {
          "use strict";

          var n = r(9024).q.ERR_STREAM_PREMATURE_CLOSE;
          function i() {}
          e.exports = function e(t, r, o) {
            if ("function" == typeof r) return e(t, null, r);
            r || (r = {}), o = function (e) {
              var t = !1;
              return function () {
                if (!t) {
                  t = !0;
                  for (var r = arguments.length, n = new Array(r), i = 0; i < r; i++) n[i] = arguments[i];
                  e.apply(this, n);
                }
              };
            }(o || i);
            var a = r.readable || !1 !== r.readable && t.readable,
              s = r.writable || !1 !== r.writable && t.writable,
              u = function u() {
                t.writable || f();
              },
              c = t._writableState && t._writableState.finished,
              f = function f() {
                s = !1, c = !0, a || o.call(t);
              },
              d = t._readableState && t._readableState.endEmitted,
              l = function l() {
                a = !1, d = !0, s || o.call(t);
              },
              h = function h(e) {
                o.call(t, e);
              },
              p = function p() {
                var e;
                return a && !d ? (t._readableState && t._readableState.ended || (e = new n()), o.call(t, e)) : s && !c ? (t._writableState && t._writableState.ended || (e = new n()), o.call(t, e)) : void 0;
              },
              b = function b() {
                t.req.on("finish", f);
              };
            return function (e) {
              return e.setHeader && "function" == typeof e.abort;
            }(t) ? (t.on("complete", f), t.on("abort", p), t.req ? b() : t.on("request", b)) : s && !t._writableState && (t.on("end", u), t.on("close", u)), t.on("end", l), t.on("finish", f), !1 !== r.error && t.on("error", h), t.on("close", p), function () {
              t.removeListener("complete", f), t.removeListener("abort", p), t.removeListener("request", b), t.req && t.req.removeListener("finish", f), t.removeListener("end", u), t.removeListener("close", u), t.removeListener("finish", f), t.removeListener("end", l), t.removeListener("error", h), t.removeListener("close", p);
            };
          };
        },
        6218: function _(e) {
          "use strict";

          e.exports = function () {
            throw new Error("Readable.from is not available in the browser");
          };
        },
        384: function _(e, t, r) {
          "use strict";

          var n,
            i = r(9024).q,
            o = i.ERR_MISSING_ARGS,
            a = i.ERR_STREAM_DESTROYED;
          function s(e) {
            if (e) throw e;
          }
          function u(e) {
            e();
          }
          function c(e, t) {
            return e.pipe(t);
          }
          e.exports = function () {
            for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) t[i] = arguments[i];
            var f,
              d = function (e) {
                return e.length ? "function" != typeof e[e.length - 1] ? s : e.pop() : s;
              }(t);
            if (Array.isArray(t[0]) && (t = t[0]), t.length < 2) throw new o("streams");
            var l = t.map(function (e, i) {
              var o = i < t.length - 1;
              return function (e, t, i, o) {
                o = function (e) {
                  var t = !1;
                  return function () {
                    t || (t = !0, e.apply(void 0, arguments));
                  };
                }(o);
                var s = !1;
                e.on("close", function () {
                  s = !0;
                }), void 0 === n && (n = r(5831)), n(e, {
                  readable: t,
                  writable: i
                }, function (e) {
                  if (e) return o(e);
                  s = !0, o();
                });
                var u = !1;
                return function (t) {
                  if (!s && !u) return u = !0, function (e) {
                    return e.setHeader && "function" == typeof e.abort;
                  }(e) ? e.abort() : "function" == typeof e.destroy ? e.destroy() : void o(t || new a("pipe"));
                };
              }(e, o, i > 0, function (e) {
                f || (f = e), e && l.forEach(u), o || (l.forEach(u), d(f));
              });
            });
            return t.reduce(c);
          };
        },
        6756: function _(e, t, r) {
          "use strict";

          var n = r(9024).q.ERR_INVALID_OPT_VALUE;
          e.exports = {
            getHighWaterMark: function getHighWaterMark(e, t, r, i) {
              var o = function (e, t, r) {
                return null != e.highWaterMark ? e.highWaterMark : t ? e[r] : null;
              }(t, i, r);
              if (null != o) {
                if (!isFinite(o) || Math.floor(o) !== o || o < 0) throw new n(i ? r : "highWaterMark", o);
                return Math.floor(o);
              }
              return e.objectMode ? 16 : 16384;
            }
          };
        },
        7144: function _(e, t, r) {
          "use strict";

          e.exports = r(8291).EventEmitter;
        },
        6505: function _(e, t, r) {
          "use strict";

          (t = e.exports = r(6297)).Stream = t, t.Readable = t, t.Writable = r(1471), t.Duplex = r(6884), t.Transform = r(9154), t.PassThrough = r(3582), t.finished = r(5831), t.pipeline = r(384);
        },
        6707: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(1736),
            o = r(2353),
            a = new Array(16),
            s = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13],
            u = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11],
            c = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6],
            f = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11],
            d = [0, 1518500249, 1859775393, 2400959708, 2840853838],
            l = [1352829926, 1548603684, 1836072691, 2053994217, 0];
          function h() {
            o.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
          }
          function p(e, t) {
            return e << t | e >>> 32 - t;
          }
          function b(e, t, r, n, i, o, a, s) {
            return p(e + (t ^ r ^ n) + o + a | 0, s) + i | 0;
          }
          function y(e, t, r, n, i, o, a, s) {
            return p(e + (t & r | ~t & n) + o + a | 0, s) + i | 0;
          }
          function m(e, t, r, n, i, o, a, s) {
            return p(e + ((t | ~r) ^ n) + o + a | 0, s) + i | 0;
          }
          function v(e, t, r, n, i, o, a, s) {
            return p(e + (t & n | r & ~n) + o + a | 0, s) + i | 0;
          }
          function g(e, t, r, n, i, o, a, s) {
            return p(e + (t ^ (r | ~n)) + o + a | 0, s) + i | 0;
          }
          i(h, o), h.prototype._update = function () {
            for (var e = a, t = 0; t < 16; ++t) e[t] = this._block.readInt32LE(4 * t);
            for (var r = 0 | this._a, n = 0 | this._b, i = 0 | this._c, o = 0 | this._d, h = 0 | this._e, w = 0 | this._a, A = 0 | this._b, k = 0 | this._c, _ = 0 | this._d, S = 0 | this._e, E = 0; E < 80; E += 1) {
              var x, P;
              E < 16 ? (x = b(r, n, i, o, h, e[s[E]], d[0], c[E]), P = g(w, A, k, _, S, e[u[E]], l[0], f[E])) : E < 32 ? (x = y(r, n, i, o, h, e[s[E]], d[1], c[E]), P = v(w, A, k, _, S, e[u[E]], l[1], f[E])) : E < 48 ? (x = m(r, n, i, o, h, e[s[E]], d[2], c[E]), P = m(w, A, k, _, S, e[u[E]], l[2], f[E])) : E < 64 ? (x = v(r, n, i, o, h, e[s[E]], d[3], c[E]), P = y(w, A, k, _, S, e[u[E]], l[3], f[E])) : (x = g(r, n, i, o, h, e[s[E]], d[4], c[E]), P = b(w, A, k, _, S, e[u[E]], l[4], f[E])), r = h, h = o, o = p(i, 10), i = n, n = x, w = S, S = _, _ = p(k, 10), k = A, A = P;
            }
            var O = this._b + i + _ | 0;
            this._b = this._c + o + S | 0, this._c = this._d + h + w | 0, this._d = this._e + r + A | 0, this._e = this._a + n + k | 0, this._a = O;
          }, h.prototype._digest = function () {
            this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
            var e = n.alloc ? n.alloc(20) : new n(20);
            return e.writeInt32LE(this._a, 0), e.writeInt32LE(this._b, 4), e.writeInt32LE(this._c, 8), e.writeInt32LE(this._d, 12), e.writeInt32LE(this._e, 16), e;
          }, e.exports = h;
        },
        6905: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.getLength = t.decode = t.encode = void 0;
          var i,
            o = (i = r(1734)) && i.__esModule ? i : {
              default: i
            };
          function a(e, t) {
            if ("0" === e[0] && "0" === e[1]) throw new Error("invalid RLP: extra zeros");
            return parseInt(e, t);
          }
          function s(e, t) {
            if (e < 56) return n.from([e + t]);
            var r = f(e),
              i = f(t + 55 + r.length / 2);
            return n.from(i + r, "hex");
          }
          function u(e) {
            var t,
              r,
              i,
              o,
              s,
              c = [],
              f = e[0];
            if (f <= 127) return {
              data: e.slice(0, 1),
              remainder: e.slice(1)
            };
            if (f <= 183) {
              if (t = f - 127, i = 128 === f ? n.from([]) : e.slice(1, t), 2 === t && i[0] < 128) throw new Error("invalid rlp encoding: byte must be less 0x80");
              return {
                data: i,
                remainder: e.slice(t)
              };
            }
            if (f <= 191) {
              if (r = f - 182, e.length - 1 < r) throw new Error("invalid RLP: not enough bytes for string length");
              if ((t = a(e.slice(1, r).toString("hex"), 16)) <= 55) throw new Error("invalid RLP: expected string length to be greater than 55");
              if ((i = e.slice(r, t + r)).length < t) throw new Error("invalid RLP: not enough bytes for string");
              return {
                data: i,
                remainder: e.slice(t + r)
              };
            }
            if (f <= 247) {
              for (t = f - 191, o = e.slice(1, t); o.length;) s = u(o), c.push(s.data), o = s.remainder;
              return {
                data: c,
                remainder: e.slice(t)
              };
            }
            var d = (r = f - 246) + (t = a(e.slice(1, r).toString("hex"), 16));
            if (d > e.length) throw new Error("invalid rlp: total length is larger than the data");
            if (0 === (o = e.slice(r, d)).length) throw new Error("invalid rlp, List has a invalid length");
            for (; o.length;) s = u(o), c.push(s.data), o = s.remainder;
            return {
              data: c,
              remainder: e.slice(d)
            };
          }
          function c(e) {
            return "0x" === e.slice(0, 2);
          }
          function f(e) {
            if (e < 0) throw new Error("Invalid integer as argument, must be unsigned!");
            var t = e.toString(16);
            return t.length % 2 ? "0" + t : t;
          }
          function d(e) {
            if (!n.isBuffer(e)) {
              if ("string" == typeof e) return c(e) ? n.from((r = "string" != typeof (i = e) ? i : c(i) ? i.slice(2) : i).length % 2 ? "0" + r : r, "hex") : n.from(e);
              if ("number" == typeof e || "bigint" == typeof e) return e ? (t = f(e), n.from(t, "hex")) : n.from([]);
              if (null == e) return n.from([]);
              if (e instanceof Uint8Array) return n.from(e);
              if (o.default.isBN(e)) return n.from(e.toArray());
              throw new Error("invalid type");
            }
            var t, r, i;
            return e;
          }
          t.encode = function e(t) {
            if (Array.isArray(t)) {
              for (var r = [], i = 0; i < t.length; i++) r.push(e(t[i]));
              var o = n.concat(r);
              return n.concat([s(o.length, 192), o]);
            }
            var a = d(t);
            return 1 === a.length && a[0] < 128 ? a : n.concat([s(a.length, 128), a]);
          }, t.decode = function (e, t) {
            if (void 0 === t && (t = !1), !e || 0 === e.length) return n.from([]);
            var r = u(d(e));
            if (t) return r;
            if (0 !== r.remainder.length) throw new Error("invalid remainder");
            return r.data;
          }, t.getLength = function (e) {
            if (!e || 0 === e.length) return n.from([]);
            var t = d(e),
              r = t[0];
            if (r <= 127) return t.length;
            if (r <= 183) return r - 127;
            if (r <= 191) return r - 182;
            if (r <= 247) return r - 191;
            var i = r - 246;
            return i + a(t.slice(1, i).toString("hex"), 16);
          };
        },
        8850: function _(e, t, r) {
          "use strict";

          var n = r(9033),
            i = n.Buffer;
          function o(e, t) {
            for (var r in e) t[r] = e[r];
          }
          function a(e, t, r) {
            return i(e, t, r);
          }
          i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? e.exports = n : (o(n, t), t.Buffer = a), a.prototype = Object.create(i.prototype), o(i, a), a.from = function (e, t, r) {
            if ("number" == typeof e) throw new TypeError("Argument must not be a number");
            return i(e, t, r);
          }, a.alloc = function (e, t, r) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            var n = i(e);
            return void 0 !== t ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;
          }, a.allocUnsafe = function (e) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            return i(e);
          }, a.allocUnsafeSlow = function (e) {
            if ("number" != typeof e) throw new TypeError("Argument must be a number");
            return n.SlowBuffer(e);
          };
        },
        1755: function _(e, t, r) {
          "use strict";

          var n,
            i = r(9142),
            o = r(8847)(r(3355)),
            a = r(9033),
            s = a.Buffer,
            u = {};
          for (n in a) a.hasOwnProperty(n) && "SlowBuffer" !== n && "Buffer" !== n && (u[n] = a[n]);
          var c = u.Buffer = {};
          for (n in s) s.hasOwnProperty(n) && "allocUnsafe" !== n && "allocUnsafeSlow" !== n && (c[n] = s[n]);
          if (u.Buffer.prototype = s.prototype, c.from && c.from !== Uint8Array.from || (c.from = function (e, t, r) {
            if ("number" == typeof e) throw new TypeError('The "value" argument must not be of type number. Received type ' + (0, o.default)(e));
            if (e && void 0 === e.length) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + (0, o.default)(e));
            return s(e, t, r);
          }), c.alloc || (c.alloc = function (e, t, r) {
            if ("number" != typeof e) throw new TypeError('The "size" argument must be of type number. Received type ' + (0, o.default)(e));
            if (e < 0 || e >= 2 * (1 << 30)) throw new RangeError('The value "' + e + '" is invalid for option "size"');
            var n = s(e);
            return t && 0 !== t.length ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;
          }), !u.kStringMaxLength) try {
            u.kStringMaxLength = i.binding("buffer").kStringMaxLength;
          } catch (e) {}
          u.constants || (u.constants = {
            MAX_LENGTH: u.kMaxLength
          }, u.kStringMaxLength && (u.constants.MAX_STRING_LENGTH = u.kStringMaxLength)), e.exports = u;
        },
        7799: function _(e) {
          "use strict";

          !function (t) {
            var r = 2147483647;
            function n(e) {
              var t = new Uint32Array([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]),
                r = 1779033703,
                n = 3144134277,
                i = 1013904242,
                o = 2773480762,
                a = 1359893119,
                s = 2600822924,
                u = 528734635,
                c = 1541459225,
                f = new Uint32Array(64);
              function d(e) {
                for (var d = 0, l = e.length; l >= 64;) {
                  var h = r,
                    p = n,
                    b = i,
                    y = o,
                    m = a,
                    v = s,
                    g = u,
                    w = c,
                    A = void 0,
                    k = void 0,
                    _ = void 0,
                    S = void 0,
                    E = void 0;
                  for (k = 0; k < 16; k++) _ = d + 4 * k, f[k] = (255 & e[_]) << 24 | (255 & e[_ + 1]) << 16 | (255 & e[_ + 2]) << 8 | 255 & e[_ + 3];
                  for (k = 16; k < 64; k++) S = ((A = f[k - 2]) >>> 17 | A << 15) ^ (A >>> 19 | A << 13) ^ A >>> 10, E = ((A = f[k - 15]) >>> 7 | A << 25) ^ (A >>> 18 | A << 14) ^ A >>> 3, f[k] = (S + f[k - 7] | 0) + (E + f[k - 16] | 0) | 0;
                  for (k = 0; k < 64; k++) S = (((m >>> 6 | m << 26) ^ (m >>> 11 | m << 21) ^ (m >>> 25 | m << 7)) + (m & v ^ ~m & g) | 0) + (w + (t[k] + f[k] | 0) | 0) | 0, E = ((h >>> 2 | h << 30) ^ (h >>> 13 | h << 19) ^ (h >>> 22 | h << 10)) + (h & p ^ h & b ^ p & b) | 0, w = g, g = v, v = m, m = y + S | 0, y = b, b = p, p = h, h = S + E | 0;
                  r = r + h | 0, n = n + p | 0, i = i + b | 0, o = o + y | 0, a = a + m | 0, s = s + v | 0, u = u + g | 0, c = c + w | 0, d += 64, l -= 64;
                }
              }
              d(e);
              var l,
                h = e.length % 64,
                p = e.length / 536870912 | 0,
                b = e.length << 3,
                y = h < 56 ? 56 : 120,
                m = e.slice(e.length - h, e.length);
              for (m.push(128), l = h + 1; l < y; l++) m.push(0);
              return m.push(p >>> 24 & 255), m.push(p >>> 16 & 255), m.push(p >>> 8 & 255), m.push(p >>> 0 & 255), m.push(b >>> 24 & 255), m.push(b >>> 16 & 255), m.push(b >>> 8 & 255), m.push(b >>> 0 & 255), d(m), [r >>> 24 & 255, r >>> 16 & 255, r >>> 8 & 255, r >>> 0 & 255, n >>> 24 & 255, n >>> 16 & 255, n >>> 8 & 255, n >>> 0 & 255, i >>> 24 & 255, i >>> 16 & 255, i >>> 8 & 255, i >>> 0 & 255, o >>> 24 & 255, o >>> 16 & 255, o >>> 8 & 255, o >>> 0 & 255, a >>> 24 & 255, a >>> 16 & 255, a >>> 8 & 255, a >>> 0 & 255, s >>> 24 & 255, s >>> 16 & 255, s >>> 8 & 255, s >>> 0 & 255, u >>> 24 & 255, u >>> 16 & 255, u >>> 8 & 255, u >>> 0 & 255, c >>> 24 & 255, c >>> 16 & 255, c >>> 8 & 255, c >>> 0 & 255];
            }
            function i(e, t, r) {
              e = e.length <= 64 ? e : n(e);
              var i,
                o = 64 + t.length + 4,
                a = new Array(o),
                s = new Array(64),
                u = [];
              for (i = 0; i < 64; i++) a[i] = 54;
              for (i = 0; i < e.length; i++) a[i] ^= e[i];
              for (i = 0; i < t.length; i++) a[64 + i] = t[i];
              for (i = o - 4; i < o; i++) a[i] = 0;
              for (i = 0; i < 64; i++) s[i] = 92;
              for (i = 0; i < e.length; i++) s[i] ^= e[i];
              function c() {
                for (var e = o - 1; e >= o - 4; e--) {
                  if (a[e]++, a[e] <= 255) return;
                  a[e] = 0;
                }
              }
              for (; r >= 32;) c(), u = u.concat(n(s.concat(n(a)))), r -= 32;
              return r > 0 && (c(), u = u.concat(n(s.concat(n(a))).slice(0, r))), u;
            }
            function o(e, t, r, n, i) {
              var o;
              for (c(e, 16 * (2 * r - 1), i, 0, 16), o = 0; o < 2 * r; o++) u(e, 16 * o, i, 16), s(i, n), c(i, 0, e, t + 16 * o, 16);
              for (o = 0; o < r; o++) c(e, t + 2 * o * 16, e, 16 * o, 16);
              for (o = 0; o < r; o++) c(e, t + 16 * (2 * o + 1), e, 16 * (o + r), 16);
            }
            function a(e, t) {
              return e << t | e >>> 32 - t;
            }
            function s(e, t) {
              c(e, 0, t, 0, 16);
              for (var r = 8; r > 0; r -= 2) t[4] ^= a(t[0] + t[12], 7), t[8] ^= a(t[4] + t[0], 9), t[12] ^= a(t[8] + t[4], 13), t[0] ^= a(t[12] + t[8], 18), t[9] ^= a(t[5] + t[1], 7), t[13] ^= a(t[9] + t[5], 9), t[1] ^= a(t[13] + t[9], 13), t[5] ^= a(t[1] + t[13], 18), t[14] ^= a(t[10] + t[6], 7), t[2] ^= a(t[14] + t[10], 9), t[6] ^= a(t[2] + t[14], 13), t[10] ^= a(t[6] + t[2], 18), t[3] ^= a(t[15] + t[11], 7), t[7] ^= a(t[3] + t[15], 9), t[11] ^= a(t[7] + t[3], 13), t[15] ^= a(t[11] + t[7], 18), t[1] ^= a(t[0] + t[3], 7), t[2] ^= a(t[1] + t[0], 9), t[3] ^= a(t[2] + t[1], 13), t[0] ^= a(t[3] + t[2], 18), t[6] ^= a(t[5] + t[4], 7), t[7] ^= a(t[6] + t[5], 9), t[4] ^= a(t[7] + t[6], 13), t[5] ^= a(t[4] + t[7], 18), t[11] ^= a(t[10] + t[9], 7), t[8] ^= a(t[11] + t[10], 9), t[9] ^= a(t[8] + t[11], 13), t[10] ^= a(t[9] + t[8], 18), t[12] ^= a(t[15] + t[14], 7), t[13] ^= a(t[12] + t[15], 9), t[14] ^= a(t[13] + t[12], 13), t[15] ^= a(t[14] + t[13], 18);
              for (var n = 0; n < 16; ++n) e[n] += t[n];
            }
            function u(e, t, r, n) {
              for (var i = 0; i < n; i++) r[i] ^= e[t + i];
            }
            function c(e, t, r, n, i) {
              for (; i--;) r[n++] = e[t++];
            }
            function f(e) {
              if (!e || "number" != typeof e.length) return !1;
              for (var t = 0; t < e.length; t++) {
                var r = e[t];
                if ("number" != typeof r || r % 1 || r < 0 || r >= 256) return !1;
              }
              return !0;
            }
            function d(e, t) {
              if ("number" != typeof e || e % 1) throw new Error("invalid " + t);
              return e;
            }
            function l(e, t, n, a, s, l, h) {
              if (n = d(n, "N"), a = d(a, "r"), s = d(s, "p"), l = d(l, "dkLen"), 0 === n || 0 != (n & n - 1)) throw new Error("N must be power of 2");
              if (n > r / 128 / a) throw new Error("N too large");
              if (a > r / 128 / s) throw new Error("r too large");
              if (!f(e)) throw new Error("password must be an array or buffer");
              if (e = Array.prototype.slice.call(e), !f(t)) throw new Error("salt must be an array or buffer");
              t = Array.prototype.slice.call(t);
              for (var p = i(e, t, 128 * s * a), b = new Uint32Array(32 * s * a), y = 0; y < b.length; y++) {
                var m = 4 * y;
                b[y] = (255 & p[m + 3]) << 24 | (255 & p[m + 2]) << 16 | (255 & p[m + 1]) << 8 | (255 & p[m + 0]) << 0;
              }
              var v,
                g,
                w = new Uint32Array(64 * a),
                A = new Uint32Array(32 * a * n),
                k = 32 * a,
                _ = new Uint32Array(16),
                S = new Uint32Array(16),
                E = s * n * 2,
                x = 0,
                P = null,
                O = !1,
                B = 0,
                T = 0,
                C = h ? parseInt(1e3 / a) : 4294967295,
                I = "undefined" != typeof setImmediate ? setImmediate : setTimeout,
                M = function t() {
                  if (O) return h(new Error("cancelled"), x / E);
                  var r;
                  switch (B) {
                    case 0:
                      c(b, g = 32 * T * a, w, 0, k), B = 1, v = 0;
                    case 1:
                      (r = n - v) > C && (r = C);
                      for (var f = 0; f < r; f++) c(w, 0, A, (v + f) * k, k), o(w, k, a, _, S);
                      if (v += r, x += r, h) {
                        var d = parseInt(1e3 * x / E);
                        if (d !== P) {
                          if (O = h(null, x / E)) break;
                          P = d;
                        }
                      }
                      if (v < n) break;
                      v = 0, B = 2;
                    case 2:
                      (r = n - v) > C && (r = C);
                      for (var y = 0; y < r; y++) {
                        var m = w[16 * (2 * a - 1)] & n - 1;
                        u(A, m * k, w, k), o(w, k, a, _, S);
                      }
                      if (v += r, x += r, h) {
                        var M = parseInt(1e3 * x / E);
                        if (M !== P) {
                          if (O = h(null, x / E)) break;
                          P = M;
                        }
                      }
                      if (v < n) break;
                      if (c(w, 0, b, g, k), ++T < s) {
                        B = 0;
                        break;
                      }
                      p = [];
                      for (var U = 0; U < b.length; U++) p.push(b[U] >> 0 & 255), p.push(b[U] >> 8 & 255), p.push(b[U] >> 16 & 255), p.push(b[U] >> 24 & 255);
                      var R = i(e, p, l);
                      return h && h(null, 1, R), R;
                  }
                  h && I(t);
                };
              if (!h) for (;;) {
                var U = M();
                if (null != U) return U;
              }
              M();
            }
            var h = {
              scrypt: function scrypt(e, t, r, n, i, o, a) {
                return new Promise(function (s, u) {
                  var c = 0;
                  a && a(0), l(e, t, r, n, i, o, function (e, t, r) {
                    if (e) u(e);else if (r) a && 1 !== c && a(1), s(new Uint8Array(r));else if (a && t !== c) return c = t, a(t);
                  });
                });
              },
              syncScrypt: function syncScrypt(e, t, r, n, i, o) {
                return new Uint8Array(l(e, t, r, n, i, o));
              }
            };
            e.exports = h;
          }();
        },
        7902: function _(e, t, r) {
          "use strict";

          e.exports = r(6922)(r(8123));
        },
        8123: function _(e, t, r) {
          "use strict";

          var n = new (0, r(6597).ec)("secp256k1"),
            i = n.curve,
            o = i.n.constructor;
          function a(e) {
            var t = e[0];
            switch (t) {
              case 2:
              case 3:
                return 33 !== e.length ? null : function (e, t) {
                  var r = new o(t);
                  if (r.cmp(i.p) >= 0) return null;
                  var a = (r = r.toRed(i.red)).redSqr().redIMul(r).redIAdd(i.b).redSqrt();
                  return 3 === e !== a.isOdd() && (a = a.redNeg()), n.keyPair({
                    pub: {
                      x: r,
                      y: a
                    }
                  });
                }(t, e.subarray(1, 33));
              case 4:
              case 6:
              case 7:
                return 65 !== e.length ? null : function (e, t, r) {
                  var a = new o(t),
                    s = new o(r);
                  if (a.cmp(i.p) >= 0 || s.cmp(i.p) >= 0) return null;
                  if (a = a.toRed(i.red), s = s.toRed(i.red), (6 === e || 7 === e) && s.isOdd() !== (7 === e)) return null;
                  var u = a.redSqr().redIMul(a);
                  return s.redSqr().redISub(u.redIAdd(i.b)).isZero() ? n.keyPair({
                    pub: {
                      x: a,
                      y: s
                    }
                  }) : null;
                }(t, e.subarray(1, 33), e.subarray(33, 65));
              default:
                return null;
            }
          }
          function s(e, t) {
            for (var r = t.encode(null, 33 === e.length), n = 0; n < e.length; ++n) e[n] = r[n];
          }
          e.exports = {
            contextRandomize: function contextRandomize() {
              return 0;
            },
            privateKeyVerify: function privateKeyVerify(e) {
              var t = new o(e);
              return t.cmp(i.n) < 0 && !t.isZero() ? 0 : 1;
            },
            privateKeyNegate: function privateKeyNegate(e) {
              var t = new o(e),
                r = i.n.sub(t).umod(i.n).toArrayLike(Uint8Array, "be", 32);
              return e.set(r), 0;
            },
            privateKeyTweakAdd: function privateKeyTweakAdd(e, t) {
              var r = new o(t);
              if (r.cmp(i.n) >= 0) return 1;
              if (r.iadd(new o(e)), r.cmp(i.n) >= 0 && r.isub(i.n), r.isZero()) return 1;
              var n = r.toArrayLike(Uint8Array, "be", 32);
              return e.set(n), 0;
            },
            privateKeyTweakMul: function privateKeyTweakMul(e, t) {
              var r = new o(t);
              if (r.cmp(i.n) >= 0 || r.isZero()) return 1;
              r.imul(new o(e)), r.cmp(i.n) >= 0 && (r = r.umod(i.n));
              var n = r.toArrayLike(Uint8Array, "be", 32);
              return e.set(n), 0;
            },
            publicKeyVerify: function publicKeyVerify(e) {
              return null === a(e) ? 1 : 0;
            },
            publicKeyCreate: function publicKeyCreate(e, t) {
              var r = new o(t);
              return r.cmp(i.n) >= 0 || r.isZero() ? 1 : (s(e, n.keyFromPrivate(t).getPublic()), 0);
            },
            publicKeyConvert: function publicKeyConvert(e, t) {
              var r = a(t);
              return null === r ? 1 : (s(e, r.getPublic()), 0);
            },
            publicKeyNegate: function publicKeyNegate(e, t) {
              var r = a(t);
              if (null === r) return 1;
              var n = r.getPublic();
              return n.y = n.y.redNeg(), s(e, n), 0;
            },
            publicKeyCombine: function publicKeyCombine(e, t) {
              for (var r = new Array(t.length), n = 0; n < t.length; ++n) if (r[n] = a(t[n]), null === r[n]) return 1;
              for (var i = r[0].getPublic(), o = 1; o < r.length; ++o) i = i.add(r[o].pub);
              return i.isInfinity() ? 2 : (s(e, i), 0);
            },
            publicKeyTweakAdd: function publicKeyTweakAdd(e, t, r) {
              var n = a(t);
              if (null === n) return 1;
              if ((r = new o(r)).cmp(i.n) >= 0) return 2;
              var u = n.getPublic().add(i.g.mul(r));
              return u.isInfinity() ? 2 : (s(e, u), 0);
            },
            publicKeyTweakMul: function publicKeyTweakMul(e, t, r) {
              var n = a(t);
              return null === n ? 1 : (r = new o(r)).cmp(i.n) >= 0 || r.isZero() ? 2 : (s(e, n.getPublic().mul(r)), 0);
            },
            signatureNormalize: function signatureNormalize(e) {
              var t = new o(e.subarray(0, 32)),
                r = new o(e.subarray(32, 64));
              return t.cmp(i.n) >= 0 || r.cmp(i.n) >= 0 ? 1 : (1 === r.cmp(n.nh) && e.set(i.n.sub(r).toArrayLike(Uint8Array, "be", 32), 32), 0);
            },
            signatureExport: function signatureExport(e, t) {
              var r = t.subarray(0, 32),
                n = t.subarray(32, 64);
              if (new o(r).cmp(i.n) >= 0) return 1;
              if (new o(n).cmp(i.n) >= 0) return 1;
              var a = e.output,
                s = a.subarray(4, 37);
              s[0] = 0, s.set(r, 1);
              for (var u = 33, c = 0; u > 1 && 0 === s[c] && !(128 & s[c + 1]); --u, ++c);
              if (128 & (s = s.subarray(c))[0]) return 1;
              if (u > 1 && 0 === s[0] && !(128 & s[1])) return 1;
              var f = a.subarray(39, 72);
              f[0] = 0, f.set(n, 1);
              for (var d = 33, l = 0; d > 1 && 0 === f[l] && !(128 & f[l + 1]); --d, ++l);
              return 128 & (f = f.subarray(l))[0] || d > 1 && 0 === f[0] && !(128 & f[1]) ? 1 : (e.outputlen = 6 + u + d, a[0] = 48, a[1] = e.outputlen - 2, a[2] = 2, a[3] = s.length, a.set(s, 4), a[4 + u] = 2, a[5 + u] = f.length, a.set(f, 6 + u), 0);
            },
            signatureImport: function signatureImport(e, t) {
              if (t.length < 8) return 1;
              if (t.length > 72) return 1;
              if (48 !== t[0]) return 1;
              if (t[1] !== t.length - 2) return 1;
              if (2 !== t[2]) return 1;
              var r = t[3];
              if (0 === r) return 1;
              if (5 + r >= t.length) return 1;
              if (2 !== t[4 + r]) return 1;
              var n = t[5 + r];
              if (0 === n) return 1;
              if (6 + r + n !== t.length) return 1;
              if (128 & t[4]) return 1;
              if (r > 1 && 0 === t[4] && !(128 & t[5])) return 1;
              if (128 & t[r + 6]) return 1;
              if (n > 1 && 0 === t[r + 6] && !(128 & t[r + 7])) return 1;
              var a = t.subarray(4, 4 + r);
              if (33 === a.length && 0 === a[0] && (a = a.subarray(1)), a.length > 32) return 1;
              var s = t.subarray(6 + r);
              if (33 === s.length && 0 === s[0] && (s = s.slice(1)), s.length > 32) throw new Error("S length is too long");
              var u = new o(a);
              u.cmp(i.n) >= 0 && (u = new o(0));
              var c = new o(t.subarray(6 + r));
              return c.cmp(i.n) >= 0 && (c = new o(0)), e.set(u.toArrayLike(Uint8Array, "be", 32), 0), e.set(c.toArrayLike(Uint8Array, "be", 32), 32), 0;
            },
            ecdsaSign: function ecdsaSign(e, t, r, a, s) {
              if (s) {
                var u = s;
                s = function s(e) {
                  var n = u(t, r, null, a, e);
                  if (!(n instanceof Uint8Array && 32 === n.length)) throw new Error("This is the way");
                  return new o(n);
                };
              }
              var c,
                f = new o(r);
              if (f.cmp(i.n) >= 0 || f.isZero()) return 1;
              try {
                c = n.sign(t, r, {
                  canonical: !0,
                  k: s,
                  pers: a
                });
              } catch (e) {
                return 1;
              }
              return e.signature.set(c.r.toArrayLike(Uint8Array, "be", 32), 0), e.signature.set(c.s.toArrayLike(Uint8Array, "be", 32), 32), e.recid = c.recoveryParam, 0;
            },
            ecdsaVerify: function ecdsaVerify(e, t, r) {
              var s = {
                  r: e.subarray(0, 32),
                  s: e.subarray(32, 64)
                },
                u = new o(s.r),
                c = new o(s.s);
              if (u.cmp(i.n) >= 0 || c.cmp(i.n) >= 0) return 1;
              if (1 === c.cmp(n.nh) || u.isZero() || c.isZero()) return 3;
              var f = a(r);
              if (null === f) return 2;
              var d = f.getPublic();
              return n.verify(t, s, d) ? 0 : 3;
            },
            ecdsaRecover: function ecdsaRecover(e, t, r, a) {
              var u,
                c = {
                  r: t.slice(0, 32),
                  s: t.slice(32, 64)
                },
                f = new o(c.r),
                d = new o(c.s);
              if (f.cmp(i.n) >= 0 || d.cmp(i.n) >= 0) return 1;
              if (f.isZero() || d.isZero()) return 2;
              try {
                u = n.recoverPubKey(a, c, r);
              } catch (e) {
                return 2;
              }
              return s(e, u), 0;
            },
            ecdh: function ecdh(e, t, r, s, u, c, f) {
              var d = a(t);
              if (null === d) return 1;
              var l = new o(r);
              if (l.cmp(i.n) >= 0 || l.isZero()) return 2;
              var h = d.getPublic().mul(l);
              if (void 0 === u) for (var p = h.encode(null, !0), b = n.hash().update(p).digest(), y = 0; y < 32; ++y) e[y] = b[y];else {
                c || (c = new Uint8Array(32));
                for (var m = h.getX().toArray("be", 32), v = 0; v < 32; ++v) c[v] = m[v];
                f || (f = new Uint8Array(32));
                for (var g = h.getY().toArray("be", 32), w = 0; w < 32; ++w) f[w] = g[w];
                var A = u(c, f, s);
                if (!(A instanceof Uint8Array && A.length === e.length)) return 2;
                e.set(A);
              }
              return 0;
            }
          };
        },
        6922: function _(e) {
          "use strict";

          function t(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          var r = "Impossible case. Please create issue.",
            n = "The tweak was out of range or the resulted private key is invalid",
            i = "The tweak was out of range or equal to zero",
            o = "Public Key could not be parsed",
            a = "Public Key serialization error",
            s = "Signature could not be parsed";
          function u(e, t) {
            if (!e) throw new Error(t);
          }
          function c(e, t, r) {
            if (u(t instanceof Uint8Array, "Expected ".concat(e, " to be an Uint8Array")), void 0 !== r) if (Array.isArray(r)) {
              var n = r.join(", "),
                i = "Expected ".concat(e, " to be an Uint8Array with length [").concat(n, "]");
              u(r.includes(t.length), i);
            } else {
              var o = "Expected ".concat(e, " to be an Uint8Array with length ").concat(r);
              u(t.length === r, o);
            }
          }
          function f(e) {
            u("Boolean" === l(e), "Expected compressed to be a Boolean");
          }
          function d() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : function (e) {
                return new Uint8Array(e);
              },
              t = arguments.length > 1 ? arguments[1] : void 0;
            return "function" == typeof e && (e = e(t)), c("output", e, t), e;
          }
          function l(e) {
            return Object.prototype.toString.call(e).slice(8, -1);
          }
          e.exports = function (e) {
            return {
              contextRandomize: function contextRandomize(t) {
                if (u(null === t || t instanceof Uint8Array, "Expected seed to be an Uint8Array or null"), null !== t && c("seed", t, 32), 1 === e.contextRandomize(t)) throw new Error("Unknow error on context randomization");
              },
              privateKeyVerify: function privateKeyVerify(t) {
                return c("private key", t, 32), 0 === e.privateKeyVerify(t);
              },
              privateKeyNegate: function privateKeyNegate(t) {
                switch (c("private key", t, 32), e.privateKeyNegate(t)) {
                  case 0:
                    return t;
                  case 1:
                    throw new Error(r);
                }
              },
              privateKeyTweakAdd: function privateKeyTweakAdd(t, r) {
                switch (c("private key", t, 32), c("tweak", r, 32), e.privateKeyTweakAdd(t, r)) {
                  case 0:
                    return t;
                  case 1:
                    throw new Error(n);
                }
              },
              privateKeyTweakMul: function privateKeyTweakMul(t, r) {
                switch (c("private key", t, 32), c("tweak", r, 32), e.privateKeyTweakMul(t, r)) {
                  case 0:
                    return t;
                  case 1:
                    throw new Error(i);
                }
              },
              publicKeyVerify: function publicKeyVerify(t) {
                return c("public key", t, [33, 65]), 0 === e.publicKeyVerify(t);
              },
              publicKeyCreate: function publicKeyCreate(t) {
                var r = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                  n = arguments.length > 2 ? arguments[2] : void 0;
                switch (c("private key", t, 32), f(r), n = d(n, r ? 33 : 65), e.publicKeyCreate(n, t)) {
                  case 0:
                    return n;
                  case 1:
                    throw new Error("Private Key is invalid");
                  case 2:
                    throw new Error(a);
                }
              },
              publicKeyConvert: function publicKeyConvert(t) {
                var r = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                  n = arguments.length > 2 ? arguments[2] : void 0;
                switch (c("public key", t, [33, 65]), f(r), n = d(n, r ? 33 : 65), e.publicKeyConvert(n, t)) {
                  case 0:
                    return n;
                  case 1:
                    throw new Error(o);
                  case 2:
                    throw new Error(a);
                }
              },
              publicKeyNegate: function publicKeyNegate(t) {
                var n = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                  i = arguments.length > 2 ? arguments[2] : void 0;
                switch (c("public key", t, [33, 65]), f(n), i = d(i, n ? 33 : 65), e.publicKeyNegate(i, t)) {
                  case 0:
                    return i;
                  case 1:
                    throw new Error(o);
                  case 2:
                    throw new Error(r);
                  case 3:
                    throw new Error(a);
                }
              },
              publicKeyCombine: function publicKeyCombine(r) {
                var n = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                  i = arguments.length > 2 ? arguments[2] : void 0;
                u(Array.isArray(r), "Expected public keys to be an Array"), u(r.length > 0, "Expected public keys array will have more than zero items");
                var s,
                  l = function (e, r) {
                    var _n9 = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                    if (!_n9) {
                      if (Array.isArray(e) || (_n9 = function (e, r) {
                        if (e) {
                          if ("string" == typeof e) return t(e, r);
                          var n = Object.prototype.toString.call(e).slice(8, -1);
                          return "Object" === n && e.constructor && (n = e.constructor.name), "Map" === n || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? t(e, r) : void 0;
                        }
                      }(e)) || r && e && "number" == typeof e.length) {
                        _n9 && (e = _n9);
                        var i = 0,
                          o = function o() {};
                        return {
                          s: o,
                          n: function n() {
                            return i >= e.length ? {
                              done: !0
                            } : {
                              done: !1,
                              value: e[i++]
                            };
                          },
                          e: function e(_e18) {
                            throw _e18;
                          },
                          f: o
                        };
                      }
                      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    }
                    var a,
                      s = !0,
                      u = !1;
                    return {
                      s: function s() {
                        _n9 = _n9.call(e);
                      },
                      n: function n() {
                        var e = _n9.next();
                        return s = e.done, e;
                      },
                      e: function e(_e19) {
                        u = !0, a = _e19;
                      },
                      f: function f() {
                        try {
                          s || null == _n9.return || _n9.return();
                        } finally {
                          if (u) throw a;
                        }
                      }
                    };
                  }(r);
                try {
                  for (l.s(); !(s = l.n()).done;) c("public key", s.value, [33, 65]);
                } catch (e) {
                  l.e(e);
                } finally {
                  l.f();
                }
                switch (f(n), i = d(i, n ? 33 : 65), e.publicKeyCombine(i, r)) {
                  case 0:
                    return i;
                  case 1:
                    throw new Error(o);
                  case 2:
                    throw new Error("The sum of the public keys is not valid");
                  case 3:
                    throw new Error(a);
                }
              },
              publicKeyTweakAdd: function publicKeyTweakAdd(t, r) {
                var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
                  a = arguments.length > 3 ? arguments[3] : void 0;
                switch (c("public key", t, [33, 65]), c("tweak", r, 32), f(i), a = d(a, i ? 33 : 65), e.publicKeyTweakAdd(a, t, r)) {
                  case 0:
                    return a;
                  case 1:
                    throw new Error(o);
                  case 2:
                    throw new Error(n);
                }
              },
              publicKeyTweakMul: function publicKeyTweakMul(t, r) {
                var n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
                  a = arguments.length > 3 ? arguments[3] : void 0;
                switch (c("public key", t, [33, 65]), c("tweak", r, 32), f(n), a = d(a, n ? 33 : 65), e.publicKeyTweakMul(a, t, r)) {
                  case 0:
                    return a;
                  case 1:
                    throw new Error(o);
                  case 2:
                    throw new Error(i);
                }
              },
              signatureNormalize: function signatureNormalize(t) {
                switch (c("signature", t, 64), e.signatureNormalize(t)) {
                  case 0:
                    return t;
                  case 1:
                    throw new Error(s);
                }
              },
              signatureExport: function signatureExport(t, n) {
                c("signature", t, 64);
                var i = {
                  output: n = d(n, 72),
                  outputlen: 72
                };
                switch (e.signatureExport(i, t)) {
                  case 0:
                    return n.slice(0, i.outputlen);
                  case 1:
                    throw new Error(s);
                  case 2:
                    throw new Error(r);
                }
              },
              signatureImport: function signatureImport(t, n) {
                switch (c("signature", t), n = d(n, 64), e.signatureImport(n, t)) {
                  case 0:
                    return n;
                  case 1:
                    throw new Error(s);
                  case 2:
                    throw new Error(r);
                }
              },
              ecdsaSign: function ecdsaSign(t, n) {
                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
                  o = arguments.length > 3 ? arguments[3] : void 0;
                c("message", t, 32), c("private key", n, 32), u("Object" === l(i), "Expected options to be an Object"), void 0 !== i.data && c("options.data", i.data), void 0 !== i.noncefn && u("Function" === l(i.noncefn), "Expected options.noncefn to be a Function");
                var a = {
                  signature: o = d(o, 64),
                  recid: null
                };
                switch (e.ecdsaSign(a, t, n, i.data, i.noncefn)) {
                  case 0:
                    return a;
                  case 1:
                    throw new Error("The nonce generation function failed, or the private key was invalid");
                  case 2:
                    throw new Error(r);
                }
              },
              ecdsaVerify: function ecdsaVerify(t, r, n) {
                switch (c("signature", t, 64), c("message", r, 32), c("public key", n, [33, 65]), e.ecdsaVerify(t, r, n)) {
                  case 0:
                    return !0;
                  case 3:
                    return !1;
                  case 1:
                    throw new Error(s);
                  case 2:
                    throw new Error(o);
                }
              },
              ecdsaRecover: function ecdsaRecover(t, n, i) {
                var o = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
                  a = arguments.length > 4 ? arguments[4] : void 0;
                switch (c("signature", t, 64), u("Number" === l(n) && n >= 0 && n <= 3, "Expected recovery id to be a Number within interval [0, 3]"), c("message", i, 32), f(o), a = d(a, o ? 33 : 65), e.ecdsaRecover(a, t, n, i)) {
                  case 0:
                    return a;
                  case 1:
                    throw new Error(s);
                  case 2:
                    throw new Error("Public key could not be recover");
                  case 3:
                    throw new Error(r);
                }
              },
              ecdh: function ecdh(t, r) {
                var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
                  i = arguments.length > 3 ? arguments[3] : void 0;
                switch (c("public key", t, [33, 65]), c("private key", r, 32), u("Object" === l(n), "Expected options to be an Object"), void 0 !== n.data && c("options.data", n.data), void 0 !== n.hashfn ? (u("Function" === l(n.hashfn), "Expected options.hashfn to be a Function"), void 0 !== n.xbuf && c("options.xbuf", n.xbuf, 32), void 0 !== n.ybuf && c("options.ybuf", n.ybuf, 32), c("output", i)) : i = d(i, 32), e.ecdh(i, t, r, n.data, n.hashfn, n.xbuf, n.ybuf)) {
                  case 0:
                    return i;
                  case 1:
                    throw new Error(o);
                  case 2:
                    throw new Error("Scalar was invalid (zero or overflow)");
                }
              }
            };
          };
        },
        6003: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer;
          function i(e, t) {
            this._block = n.alloc(e), this._finalSize = t, this._blockSize = e, this._len = 0;
          }
          i.prototype.update = function (e, t) {
            "string" == typeof e && (t = t || "utf8", e = n.from(e, t));
            for (var r = this._block, i = this._blockSize, o = e.length, a = this._len, s = 0; s < o;) {
              for (var u = a % i, c = Math.min(o - s, i - u), f = 0; f < c; f++) r[u + f] = e[s + f];
              s += c, (a += c) % i == 0 && this._update(r);
            }
            return this._len += o, this;
          }, i.prototype.digest = function (e) {
            var t = this._len % this._blockSize;
            this._block[t] = 128, this._block.fill(0, t + 1), t >= this._finalSize && (this._update(this._block), this._block.fill(0));
            var r = 8 * this._len;
            if (r <= 4294967295) this._block.writeUInt32BE(r, this._blockSize - 4);else {
              var n = (4294967295 & r) >>> 0,
                i = (r - n) / 4294967296;
              this._block.writeUInt32BE(i, this._blockSize - 8), this._block.writeUInt32BE(n, this._blockSize - 4);
            }
            this._update(this._block);
            var o = this._hash();
            return e ? o.toString(e) : o;
          }, i.prototype._update = function () {
            throw new Error("_update must be implemented by subclass");
          }, e.exports = i;
        },
        1708: function _(e, t, r) {
          "use strict";

          var n = e.exports = function (e) {
            e = e.toLowerCase();
            var t = n[e];
            if (!t) throw new Error(e + " is not supported (we accept pull requests)");
            return new t();
          };
          n.sha = r(8210), n.sha1 = r(544), n.sha224 = r(6288), n.sha256 = r(4571), n.sha384 = r(6959), n.sha512 = r(4515);
        },
        8210: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(6003),
            o = r(8850).Buffer,
            a = [1518500249, 1859775393, -1894007588, -899497514],
            s = new Array(80);
          function u() {
            this.init(), this._w = s, i.call(this, 64, 56);
          }
          function c(e) {
            return e << 30 | e >>> 2;
          }
          function f(e, t, r, n) {
            return 0 === e ? t & r | ~t & n : 2 === e ? t & r | t & n | r & n : t ^ r ^ n;
          }
          n(u, i), u.prototype.init = function () {
            return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
          }, u.prototype._update = function (e) {
            for (var t, r = this._w, n = 0 | this._a, i = 0 | this._b, o = 0 | this._c, s = 0 | this._d, u = 0 | this._e, d = 0; d < 16; ++d) r[d] = e.readInt32BE(4 * d);
            for (; d < 80; ++d) r[d] = r[d - 3] ^ r[d - 8] ^ r[d - 14] ^ r[d - 16];
            for (var l = 0; l < 80; ++l) {
              var h = ~~(l / 20),
                p = 0 | ((t = n) << 5 | t >>> 27) + f(h, i, o, s) + u + r[l] + a[h];
              u = s, s = o, o = c(i), i = n, n = p;
            }
            this._a = n + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = s + this._d | 0, this._e = u + this._e | 0;
          }, u.prototype._hash = function () {
            var e = o.allocUnsafe(20);
            return e.writeInt32BE(0 | this._a, 0), e.writeInt32BE(0 | this._b, 4), e.writeInt32BE(0 | this._c, 8), e.writeInt32BE(0 | this._d, 12), e.writeInt32BE(0 | this._e, 16), e;
          }, e.exports = u;
        },
        544: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(6003),
            o = r(8850).Buffer,
            a = [1518500249, 1859775393, -1894007588, -899497514],
            s = new Array(80);
          function u() {
            this.init(), this._w = s, i.call(this, 64, 56);
          }
          function c(e) {
            return e << 5 | e >>> 27;
          }
          function f(e) {
            return e << 30 | e >>> 2;
          }
          function d(e, t, r, n) {
            return 0 === e ? t & r | ~t & n : 2 === e ? t & r | t & n | r & n : t ^ r ^ n;
          }
          n(u, i), u.prototype.init = function () {
            return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
          }, u.prototype._update = function (e) {
            for (var t, r = this._w, n = 0 | this._a, i = 0 | this._b, o = 0 | this._c, s = 0 | this._d, u = 0 | this._e, l = 0; l < 16; ++l) r[l] = e.readInt32BE(4 * l);
            for (; l < 80; ++l) r[l] = (t = r[l - 3] ^ r[l - 8] ^ r[l - 14] ^ r[l - 16]) << 1 | t >>> 31;
            for (var h = 0; h < 80; ++h) {
              var p = ~~(h / 20),
                b = c(n) + d(p, i, o, s) + u + r[h] + a[p] | 0;
              u = s, s = o, o = f(i), i = n, n = b;
            }
            this._a = n + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = s + this._d | 0, this._e = u + this._e | 0;
          }, u.prototype._hash = function () {
            var e = o.allocUnsafe(20);
            return e.writeInt32BE(0 | this._a, 0), e.writeInt32BE(0 | this._b, 4), e.writeInt32BE(0 | this._c, 8), e.writeInt32BE(0 | this._d, 12), e.writeInt32BE(0 | this._e, 16), e;
          }, e.exports = u;
        },
        6288: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(4571),
            o = r(6003),
            a = r(8850).Buffer,
            s = new Array(64);
          function u() {
            this.init(), this._w = s, o.call(this, 64, 56);
          }
          n(u, i), u.prototype.init = function () {
            return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this;
          }, u.prototype._hash = function () {
            var e = a.allocUnsafe(28);
            return e.writeInt32BE(this._a, 0), e.writeInt32BE(this._b, 4), e.writeInt32BE(this._c, 8), e.writeInt32BE(this._d, 12), e.writeInt32BE(this._e, 16), e.writeInt32BE(this._f, 20), e.writeInt32BE(this._g, 24), e;
          }, e.exports = u;
        },
        4571: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(6003),
            o = r(8850).Buffer,
            a = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298],
            s = new Array(64);
          function u() {
            this.init(), this._w = s, i.call(this, 64, 56);
          }
          function c(e, t, r) {
            return r ^ e & (t ^ r);
          }
          function f(e, t, r) {
            return e & t | r & (e | t);
          }
          function d(e) {
            return (e >>> 2 | e << 30) ^ (e >>> 13 | e << 19) ^ (e >>> 22 | e << 10);
          }
          function l(e) {
            return (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
          }
          function h(e) {
            return (e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3;
          }
          n(u, i), u.prototype.init = function () {
            return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
          }, u.prototype._update = function (e) {
            for (var t, r = this._w, n = 0 | this._a, i = 0 | this._b, o = 0 | this._c, s = 0 | this._d, u = 0 | this._e, p = 0 | this._f, b = 0 | this._g, y = 0 | this._h, m = 0; m < 16; ++m) r[m] = e.readInt32BE(4 * m);
            for (; m < 64; ++m) r[m] = 0 | (((t = r[m - 2]) >>> 17 | t << 15) ^ (t >>> 19 | t << 13) ^ t >>> 10) + r[m - 7] + h(r[m - 15]) + r[m - 16];
            for (var v = 0; v < 64; ++v) {
              var g = y + l(u) + c(u, p, b) + a[v] + r[v] | 0,
                w = d(n) + f(n, i, o) | 0;
              y = b, b = p, p = u, u = s + g | 0, s = o, o = i, i = n, n = g + w | 0;
            }
            this._a = n + this._a | 0, this._b = i + this._b | 0, this._c = o + this._c | 0, this._d = s + this._d | 0, this._e = u + this._e | 0, this._f = p + this._f | 0, this._g = b + this._g | 0, this._h = y + this._h | 0;
          }, u.prototype._hash = function () {
            var e = o.allocUnsafe(32);
            return e.writeInt32BE(this._a, 0), e.writeInt32BE(this._b, 4), e.writeInt32BE(this._c, 8), e.writeInt32BE(this._d, 12), e.writeInt32BE(this._e, 16), e.writeInt32BE(this._f, 20), e.writeInt32BE(this._g, 24), e.writeInt32BE(this._h, 28), e;
          }, e.exports = u;
        },
        6959: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(4515),
            o = r(6003),
            a = r(8850).Buffer,
            s = new Array(160);
          function u() {
            this.init(), this._w = s, o.call(this, 128, 112);
          }
          n(u, i), u.prototype.init = function () {
            return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
          }, u.prototype._hash = function () {
            var e = a.allocUnsafe(48);
            function t(t, r, n) {
              e.writeInt32BE(t, n), e.writeInt32BE(r, n + 4);
            }
            return t(this._ah, this._al, 0), t(this._bh, this._bl, 8), t(this._ch, this._cl, 16), t(this._dh, this._dl, 24), t(this._eh, this._el, 32), t(this._fh, this._fl, 40), e;
          }, e.exports = u;
        },
        4515: function _(e, t, r) {
          "use strict";

          var n = r(1736),
            i = r(6003),
            o = r(8850).Buffer,
            a = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591],
            s = new Array(160);
          function u() {
            this.init(), this._w = s, i.call(this, 128, 112);
          }
          function c(e, t, r) {
            return r ^ e & (t ^ r);
          }
          function f(e, t, r) {
            return e & t | r & (e | t);
          }
          function d(e, t) {
            return (e >>> 28 | t << 4) ^ (t >>> 2 | e << 30) ^ (t >>> 7 | e << 25);
          }
          function l(e, t) {
            return (e >>> 14 | t << 18) ^ (e >>> 18 | t << 14) ^ (t >>> 9 | e << 23);
          }
          function h(e, t) {
            return (e >>> 1 | t << 31) ^ (e >>> 8 | t << 24) ^ e >>> 7;
          }
          function p(e, t) {
            return (e >>> 1 | t << 31) ^ (e >>> 8 | t << 24) ^ (e >>> 7 | t << 25);
          }
          function b(e, t) {
            return (e >>> 19 | t << 13) ^ (t >>> 29 | e << 3) ^ e >>> 6;
          }
          function y(e, t) {
            return (e >>> 19 | t << 13) ^ (t >>> 29 | e << 3) ^ (e >>> 6 | t << 26);
          }
          function m(e, t) {
            return e >>> 0 < t >>> 0 ? 1 : 0;
          }
          n(u, i), u.prototype.init = function () {
            return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
          }, u.prototype._update = function (e) {
            for (var t = this._w, r = 0 | this._ah, n = 0 | this._bh, i = 0 | this._ch, o = 0 | this._dh, s = 0 | this._eh, u = 0 | this._fh, v = 0 | this._gh, g = 0 | this._hh, w = 0 | this._al, A = 0 | this._bl, k = 0 | this._cl, _ = 0 | this._dl, S = 0 | this._el, E = 0 | this._fl, x = 0 | this._gl, P = 0 | this._hl, O = 0; O < 32; O += 2) t[O] = e.readInt32BE(4 * O), t[O + 1] = e.readInt32BE(4 * O + 4);
            for (; O < 160; O += 2) {
              var B = t[O - 30],
                T = t[O - 30 + 1],
                C = h(B, T),
                I = p(T, B),
                M = b(B = t[O - 4], T = t[O - 4 + 1]),
                U = y(T, B),
                R = t[O - 14],
                j = t[O - 14 + 1],
                N = t[O - 32],
                F = t[O - 32 + 1],
                L = I + j | 0,
                D = C + R + m(L, I) | 0;
              D = (D = D + M + m(L = L + U | 0, U) | 0) + N + m(L = L + F | 0, F) | 0, t[O] = D, t[O + 1] = L;
            }
            for (var H = 0; H < 160; H += 2) {
              D = t[H], L = t[H + 1];
              var q = f(r, n, i),
                z = f(w, A, k),
                G = d(r, w),
                K = d(w, r),
                V = l(s, S),
                J = l(S, s),
                W = a[H],
                Y = a[H + 1],
                X = c(s, u, v),
                Q = c(S, E, x),
                Z = P + J | 0,
                $ = g + V + m(Z, P) | 0;
              $ = ($ = ($ = $ + X + m(Z = Z + Q | 0, Q) | 0) + W + m(Z = Z + Y | 0, Y) | 0) + D + m(Z = Z + L | 0, L) | 0;
              var ee = K + z | 0,
                te = G + q + m(ee, K) | 0;
              g = v, P = x, v = u, x = E, u = s, E = S, s = o + $ + m(S = _ + Z | 0, _) | 0, o = i, _ = k, i = n, k = A, n = r, A = w, r = $ + te + m(w = Z + ee | 0, Z) | 0;
            }
            this._al = this._al + w | 0, this._bl = this._bl + A | 0, this._cl = this._cl + k | 0, this._dl = this._dl + _ | 0, this._el = this._el + S | 0, this._fl = this._fl + E | 0, this._gl = this._gl + x | 0, this._hl = this._hl + P | 0, this._ah = this._ah + r + m(this._al, w) | 0, this._bh = this._bh + n + m(this._bl, A) | 0, this._ch = this._ch + i + m(this._cl, k) | 0, this._dh = this._dh + o + m(this._dl, _) | 0, this._eh = this._eh + s + m(this._el, S) | 0, this._fh = this._fh + u + m(this._fl, E) | 0, this._gh = this._gh + v + m(this._gl, x) | 0, this._hh = this._hh + g + m(this._hl, P) | 0;
          }, u.prototype._hash = function () {
            var e = o.allocUnsafe(64);
            function t(t, r, n) {
              e.writeInt32BE(t, n), e.writeInt32BE(r, n + 4);
            }
            return t(this._ah, this._al, 0), t(this._bh, this._bl, 8), t(this._ch, this._cl, 16), t(this._dh, this._dl, 24), t(this._eh, this._el, 32), t(this._fh, this._fl, 40), t(this._gh, this._gl, 48), t(this._hh, this._hl, 56), e;
          }, e.exports = u;
        },
        7245: function _(e, t, r) {
          "use strict";

          e.exports = i;
          var n = r(8291).EventEmitter;
          function i() {
            n.call(this);
          }
          r(1736)(i, n), i.Readable = r(6297), i.Writable = r(1471), i.Duplex = r(6884), i.Transform = r(9154), i.PassThrough = r(3582), i.finished = r(5831), i.pipeline = r(384), i.Stream = i, i.prototype.pipe = function (e, t) {
            var r = this;
            function i(t) {
              e.writable && !1 === e.write(t) && r.pause && r.pause();
            }
            function o() {
              r.readable && r.resume && r.resume();
            }
            r.on("data", i), e.on("drain", o), e._isStdio || t && !1 === t.end || (r.on("end", s), r.on("close", u));
            var a = !1;
            function s() {
              a || (a = !0, e.end());
            }
            function u() {
              a || (a = !0, "function" == typeof e.destroy && e.destroy());
            }
            function c(e) {
              if (f(), 0 === n.listenerCount(this, "error")) throw e;
            }
            function f() {
              r.removeListener("data", i), e.removeListener("drain", o), r.removeListener("end", s), r.removeListener("close", u), r.removeListener("error", c), e.removeListener("error", c), r.removeListener("end", f), r.removeListener("close", f), e.removeListener("close", f);
            }
            return r.on("error", c), e.on("error", c), r.on("end", f), r.on("close", f), e.on("close", f), e.emit("pipe", r), e;
          };
        },
        9519: function _(e, t, r) {
          "use strict";

          var n = r(8844),
            i = r(3319),
            o = r(7705),
            a = r(3675),
            s = r(1143),
            u = t;
          u.request = function (e, t) {
            e = "string" == typeof e ? s.parse(e) : o(e);
            var i = -1 === r.g.location.protocol.search(/^https?:$/) ? "http:" : "",
              a = e.protocol || i,
              u = e.hostname || e.host,
              c = e.port,
              f = e.path || "/";
            u && -1 !== u.indexOf(":") && (u = "[" + u + "]"), e.url = (u ? a + "//" + u : "") + (c ? ":" + c : "") + f, e.method = (e.method || "GET").toUpperCase(), e.headers = e.headers || {};
            var d = new n(e);
            return t && d.on("response", t), d;
          }, u.get = function (e, t) {
            var r = u.request(e, t);
            return r.end(), r;
          }, u.ClientRequest = n, u.IncomingMessage = i.IncomingMessage, u.Agent = function () {}, u.Agent.defaultMaxSockets = 4, u.globalAgent = new u.Agent(), u.STATUS_CODES = a, u.METHODS = ["CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LOCK", "M-SEARCH", "MERGE", "MKACTIVITY", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "REPORT", "SEARCH", "SUBSCRIBE", "TRACE", "UNLOCK", "UNSUBSCRIBE"];
        },
        3928: function _(e, t, r) {
          "use strict";

          var n;
          function i() {
            if (void 0 !== n) return n;
            if (r.g.XMLHttpRequest) {
              n = new r.g.XMLHttpRequest();
              try {
                n.open("GET", r.g.XDomainRequest ? "/" : "https://example.com");
              } catch (e) {
                n = null;
              }
            } else n = null;
            return n;
          }
          function o(e) {
            var t = i();
            if (!t) return !1;
            try {
              return t.responseType = e, t.responseType === e;
            } catch (e) {}
            return !1;
          }
          function a(e) {
            return "function" == typeof e;
          }
          t.fetch = a(r.g.fetch) && a(r.g.ReadableStream), t.writableStream = a(r.g.WritableStream), t.abortController = a(r.g.AbortController), t.arraybuffer = t.fetch || o("arraybuffer"), t.msstream = !t.fetch && o("ms-stream"), t.mozchunkedarraybuffer = !t.fetch && o("moz-chunked-arraybuffer"), t.overrideMimeType = t.fetch || !!i() && a(i().overrideMimeType), n = null;
        },
        8844: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(9142),
            o = r(3928),
            a = r(1736),
            s = r(3319),
            u = r(6505),
            c = s.IncomingMessage,
            f = s.readyStates,
            d = e.exports = function (e) {
              var t,
                r = this;
              u.Writable.call(r), r._opts = e, r._body = [], r._headers = {}, e.auth && r.setHeader("Authorization", "Basic " + n.from(e.auth).toString("base64")), Object.keys(e.headers).forEach(function (t) {
                r.setHeader(t, e.headers[t]);
              });
              var i = !0;
              if ("disable-fetch" === e.mode || "requestTimeout" in e && !o.abortController) i = !1, t = !0;else if ("prefer-streaming" === e.mode) t = !1;else if ("allow-wrong-content-type" === e.mode) t = !o.overrideMimeType;else {
                if (e.mode && "default" !== e.mode && "prefer-fast" !== e.mode) throw new Error("Invalid value for opts.mode");
                t = !0;
              }
              r._mode = function (e, t) {
                return o.fetch && t ? "fetch" : o.mozchunkedarraybuffer ? "moz-chunked-arraybuffer" : o.msstream ? "ms-stream" : o.arraybuffer && e ? "arraybuffer" : "text";
              }(t, i), r._fetchTimer = null, r._socketTimeout = null, r._socketTimer = null, r.on("finish", function () {
                r._onFinish();
              });
            };
          a(d, u.Writable), d.prototype.setHeader = function (e, t) {
            var r = e.toLowerCase();
            -1 === l.indexOf(r) && (this._headers[r] = {
              name: e,
              value: t
            });
          }, d.prototype.getHeader = function (e) {
            var t = this._headers[e.toLowerCase()];
            return t ? t.value : null;
          }, d.prototype.removeHeader = function (e) {
            delete this._headers[e.toLowerCase()];
          }, d.prototype._onFinish = function () {
            var e = this;
            if (!e._destroyed) {
              var t = e._opts;
              "timeout" in t && 0 !== t.timeout && e.setTimeout(t.timeout);
              var n = e._headers,
                a = null;
              "GET" !== t.method && "HEAD" !== t.method && (a = new Blob(e._body, {
                type: (n["content-type"] || {}).value || ""
              }));
              var s = [];
              if (Object.keys(n).forEach(function (e) {
                var t = n[e].name,
                  r = n[e].value;
                Array.isArray(r) ? r.forEach(function (e) {
                  s.push([t, e]);
                }) : s.push([t, r]);
              }), "fetch" === e._mode) {
                var u = null;
                if (o.abortController) {
                  var c = new AbortController();
                  u = c.signal, e._fetchAbortController = c, "requestTimeout" in t && 0 !== t.requestTimeout && (e._fetchTimer = r.g.setTimeout(function () {
                    e.emit("requestTimeout"), e._fetchAbortController && e._fetchAbortController.abort();
                  }, t.requestTimeout));
                }
                r.g.fetch(e._opts.url, {
                  method: e._opts.method,
                  headers: s,
                  body: a || void 0,
                  mode: "cors",
                  credentials: t.withCredentials ? "include" : "same-origin",
                  signal: u
                }).then(function (t) {
                  e._fetchResponse = t, e._resetTimers(!1), e._connect();
                }, function (t) {
                  e._resetTimers(!0), e._destroyed || e.emit("error", t);
                });
              } else {
                var d = e._xhr = new r.g.XMLHttpRequest();
                try {
                  d.open(e._opts.method, e._opts.url, !0);
                } catch (t) {
                  return void i.nextTick(function () {
                    e.emit("error", t);
                  });
                }
                "responseType" in d && (d.responseType = e._mode), "withCredentials" in d && (d.withCredentials = !!t.withCredentials), "text" === e._mode && "overrideMimeType" in d && d.overrideMimeType("text/plain; charset=x-user-defined"), "requestTimeout" in t && (d.timeout = t.requestTimeout, d.ontimeout = function () {
                  e.emit("requestTimeout");
                }), s.forEach(function (e) {
                  d.setRequestHeader(e[0], e[1]);
                }), e._response = null, d.onreadystatechange = function () {
                  switch (d.readyState) {
                    case f.LOADING:
                    case f.DONE:
                      e._onXHRProgress();
                  }
                }, "moz-chunked-arraybuffer" === e._mode && (d.onprogress = function () {
                  e._onXHRProgress();
                }), d.onerror = function () {
                  e._destroyed || (e._resetTimers(!0), e.emit("error", new Error("XHR error")));
                };
                try {
                  d.send(a);
                } catch (t) {
                  return void i.nextTick(function () {
                    e.emit("error", t);
                  });
                }
              }
            }
          }, d.prototype._onXHRProgress = function () {
            var e = this;
            e._resetTimers(!1), function (e) {
              try {
                var t = e.status;
                return null !== t && 0 !== t;
              } catch (e) {
                return !1;
              }
            }(e._xhr) && !e._destroyed && (e._response || e._connect(), e._response._onXHRProgress(e._resetTimers.bind(e)));
          }, d.prototype._connect = function () {
            var e = this;
            e._destroyed || (e._response = new c(e._xhr, e._fetchResponse, e._mode, e._resetTimers.bind(e)), e._response.on("error", function (t) {
              e.emit("error", t);
            }), e.emit("response", e._response));
          }, d.prototype._write = function (e, t, r) {
            this._body.push(e), r();
          }, d.prototype._resetTimers = function (e) {
            var t = this;
            r.g.clearTimeout(t._socketTimer), t._socketTimer = null, e ? (r.g.clearTimeout(t._fetchTimer), t._fetchTimer = null) : t._socketTimeout && (t._socketTimer = r.g.setTimeout(function () {
              t.emit("timeout");
            }, t._socketTimeout));
          }, d.prototype.abort = d.prototype.destroy = function (e) {
            var t = this;
            t._destroyed = !0, t._resetTimers(!0), t._response && (t._response._destroyed = !0), t._xhr ? t._xhr.abort() : t._fetchAbortController && t._fetchAbortController.abort(), e && t.emit("error", e);
          }, d.prototype.end = function (e, t, r) {
            "function" == typeof e && (r = e, e = void 0), u.Writable.prototype.end.call(this, e, t, r);
          }, d.prototype.setTimeout = function (e, t) {
            var r = this;
            t && r.once("timeout", t), r._socketTimeout = e, r._resetTimers(!1);
          }, d.prototype.flushHeaders = function () {}, d.prototype.setNoDelay = function () {}, d.prototype.setSocketKeepAlive = function () {};
          var l = ["accept-charset", "accept-encoding", "access-control-request-headers", "access-control-request-method", "connection", "content-length", "cookie", "cookie2", "date", "dnt", "expect", "host", "keep-alive", "origin", "referer", "te", "trailer", "transfer-encoding", "upgrade", "via"];
        },
        3319: function _(e, t, r) {
          "use strict";

          var n = r(9142),
            i = r(9033).Buffer,
            o = r(3928),
            a = r(1736),
            s = r(6505),
            u = t.readyStates = {
              UNSENT: 0,
              OPENED: 1,
              HEADERS_RECEIVED: 2,
              LOADING: 3,
              DONE: 4
            },
            c = t.IncomingMessage = function (e, t, r, a) {
              var u = this;
              if (s.Readable.call(u), u._mode = r, u.headers = {}, u.rawHeaders = [], u.trailers = {}, u.rawTrailers = [], u.on("end", function () {
                n.nextTick(function () {
                  u.emit("close");
                });
              }), "fetch" === r) {
                if (u._fetchResponse = t, u.url = t.url, u.statusCode = t.status, u.statusMessage = t.statusText, t.headers.forEach(function (e, t) {
                  u.headers[t.toLowerCase()] = e, u.rawHeaders.push(t, e);
                }), o.writableStream) {
                  var c = new WritableStream({
                    write: function write(e) {
                      return a(!1), new Promise(function (t, r) {
                        u._destroyed ? r() : u.push(i.from(e)) ? t() : u._resumeFetch = t;
                      });
                    },
                    close: function close() {
                      a(!0), u._destroyed || u.push(null);
                    },
                    abort: function abort(e) {
                      a(!0), u._destroyed || u.emit("error", e);
                    }
                  });
                  try {
                    return void t.body.pipeTo(c).catch(function (e) {
                      a(!0), u._destroyed || u.emit("error", e);
                    });
                  } catch (e) {}
                }
                var f = t.body.getReader();
                !function e() {
                  f.read().then(function (t) {
                    u._destroyed || (a(t.done), t.done ? u.push(null) : (u.push(i.from(t.value)), e()));
                  }).catch(function (e) {
                    a(!0), u._destroyed || u.emit("error", e);
                  });
                }();
              } else if (u._xhr = e, u._pos = 0, u.url = e.responseURL, u.statusCode = e.status, u.statusMessage = e.statusText, e.getAllResponseHeaders().split(/\r?\n/).forEach(function (e) {
                var t = e.match(/^([^:]+):\s*(.*)/);
                if (t) {
                  var r = t[1].toLowerCase();
                  "set-cookie" === r ? (void 0 === u.headers[r] && (u.headers[r] = []), u.headers[r].push(t[2])) : void 0 !== u.headers[r] ? u.headers[r] += ", " + t[2] : u.headers[r] = t[2], u.rawHeaders.push(t[1], t[2]);
                }
              }), u._charset = "x-user-defined", !o.overrideMimeType) {
                var d = u.rawHeaders["mime-type"];
                if (d) {
                  var l = d.match(/;\s*charset=([^;])(;|$)/);
                  l && (u._charset = l[1].toLowerCase());
                }
                u._charset || (u._charset = "utf-8");
              }
            };
          a(c, s.Readable), c.prototype._read = function () {
            var e = this._resumeFetch;
            e && (this._resumeFetch = null, e());
          }, c.prototype._onXHRProgress = function (e) {
            var t = this,
              n = t._xhr,
              o = null;
            switch (t._mode) {
              case "text":
                if ((o = n.responseText).length > t._pos) {
                  var a = o.substr(t._pos);
                  if ("x-user-defined" === t._charset) {
                    for (var s = i.alloc(a.length), c = 0; c < a.length; c++) s[c] = 255 & a.charCodeAt(c);
                    t.push(s);
                  } else t.push(a, t._charset);
                  t._pos = o.length;
                }
                break;
              case "arraybuffer":
                if (n.readyState !== u.DONE || !n.response) break;
                o = n.response, t.push(i.from(new Uint8Array(o)));
                break;
              case "moz-chunked-arraybuffer":
                if (o = n.response, n.readyState !== u.LOADING || !o) break;
                t.push(i.from(new Uint8Array(o)));
                break;
              case "ms-stream":
                if (o = n.response, n.readyState !== u.LOADING) break;
                var f = new r.g.MSStreamReader();
                f.onprogress = function () {
                  f.result.byteLength > t._pos && (t.push(i.from(new Uint8Array(f.result.slice(t._pos)))), t._pos = f.result.byteLength);
                }, f.onload = function () {
                  e(!0), t.push(null);
                }, f.readAsArrayBuffer(o);
            }
            t._xhr.readyState === u.DONE && "ms-stream" !== t._mode && (e(!0), t.push(null));
          };
        },
        10: function _(e) {
          "use strict";

          e.exports = function (e) {
            return encodeURIComponent(e).replace(/[!'()*]/g, function (e) {
              return "%" + e.charCodeAt(0).toString(16).toUpperCase();
            });
          };
        },
        3462: function _(e, t, r) {
          "use strict";

          var n = r(8850).Buffer,
            i = n.isEncoding || function (e) {
              switch ((e = "" + e) && e.toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                case "raw":
                  return !0;
                default:
                  return !1;
              }
            };
          function o(e) {
            var t;
            switch (this.encoding = function (e) {
              var t = function (e) {
                if (!e) return "utf8";
                for (var t;;) switch (e) {
                  case "utf8":
                  case "utf-8":
                    return "utf8";
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return "utf16le";
                  case "latin1":
                  case "binary":
                    return "latin1";
                  case "base64":
                  case "ascii":
                  case "hex":
                    return e;
                  default:
                    if (t) return;
                    e = ("" + e).toLowerCase(), t = !0;
                }
              }(e);
              if ("string" != typeof t && (n.isEncoding === i || !i(e))) throw new Error("Unknown encoding: " + e);
              return t || e;
            }(e), this.encoding) {
              case "utf16le":
                this.text = u, this.end = c, t = 4;
                break;
              case "utf8":
                this.fillLast = s, t = 4;
                break;
              case "base64":
                this.text = f, this.end = d, t = 3;
                break;
              default:
                return this.write = l, void (this.end = h);
            }
            this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(t);
          }
          function a(e) {
            return e <= 127 ? 0 : e >> 5 == 6 ? 2 : e >> 4 == 14 ? 3 : e >> 3 == 30 ? 4 : e >> 6 == 2 ? -1 : -2;
          }
          function s(e) {
            var t = this.lastTotal - this.lastNeed,
              r = function (e, t, r) {
                if (128 != (192 & t[0])) return e.lastNeed = 0, "�";
                if (e.lastNeed > 1 && t.length > 1) {
                  if (128 != (192 & t[1])) return e.lastNeed = 1, "�";
                  if (e.lastNeed > 2 && t.length > 2 && 128 != (192 & t[2])) return e.lastNeed = 2, "�";
                }
              }(this, e);
            return void 0 !== r ? r : this.lastNeed <= e.length ? (e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e.copy(this.lastChar, t, 0, e.length), void (this.lastNeed -= e.length));
          }
          function u(e, t) {
            if ((e.length - t) % 2 == 0) {
              var r = e.toString("utf16le", t);
              if (r) {
                var n = r.charCodeAt(r.length - 1);
                if (n >= 55296 && n <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], r.slice(0, -1);
              }
              return r;
            }
            return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);
          }
          function c(e) {
            var t = e && e.length ? this.write(e) : "";
            if (this.lastNeed) {
              var r = this.lastTotal - this.lastNeed;
              return t + this.lastChar.toString("utf16le", 0, r);
            }
            return t;
          }
          function f(e, t) {
            var r = (e.length - t) % 3;
            return 0 === r ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, 1 === r ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));
          }
          function d(e) {
            var t = e && e.length ? this.write(e) : "";
            return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;
          }
          function l(e) {
            return e.toString(this.encoding);
          }
          function h(e) {
            return e && e.length ? this.write(e) : "";
          }
          t.s = o, o.prototype.write = function (e) {
            if (0 === e.length) return "";
            var t, r;
            if (this.lastNeed) {
              if (void 0 === (t = this.fillLast(e))) return "";
              r = this.lastNeed, this.lastNeed = 0;
            } else r = 0;
            return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";
          }, o.prototype.end = function (e) {
            var t = e && e.length ? this.write(e) : "";
            return this.lastNeed ? t + "�" : t;
          }, o.prototype.text = function (e, t) {
            var r = function (e, t, r) {
              var n = t.length - 1;
              if (n < r) return 0;
              var i = a(t[n]);
              return i >= 0 ? (i > 0 && (e.lastNeed = i - 1), i) : --n < r || -2 === i ? 0 : (i = a(t[n])) >= 0 ? (i > 0 && (e.lastNeed = i - 2), i) : --n < r || -2 === i ? 0 : (i = a(t[n])) >= 0 ? (i > 0 && (2 === i ? i = 0 : e.lastNeed = i - 3), i) : 0;
            }(this, e, t);
            if (!this.lastNeed) return e.toString("utf8", t);
            this.lastTotal = r;
            var n = e.length - (r - this.lastNeed);
            return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);
          }, o.prototype.fillLast = function (e) {
            if (this.lastNeed <= e.length) return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
            e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;
          };
        },
        6931: function _(e, t, r) {
          "use strict";

          var n = r(8619);
          e.exports = function (e) {
            return "string" != typeof e ? e : n(e) ? e.slice(2) : e;
          };
        },
        6427: function _(e, t, r) {
          "use strict";

          var n = function n() {
              throw "This swarm.js function isn't available on the browser.";
            },
            i = {
              readFile: n
            },
            o = {
              download: n,
              safeDownloadArchived: n,
              directoryTree: n
            },
            a = {
              platform: n,
              arch: n
            },
            s = {
              join: n,
              slice: n
            },
            u = {
              spawn: n
            },
            c = {
              lookup: n
            },
            f = r(1357),
            d = r(631),
            l = r(2733),
            h = r(2510),
            p = r(3094);
          e.exports = p({
            fs: i,
            files: o,
            os: a,
            path: s,
            child_process: u,
            defaultArchives: {},
            mimetype: c,
            request: f,
            downloadUrl: null,
            bytes: d,
            hash: l,
            pick: h
          });
        },
        2510: function _(e) {
          "use strict";

          var t = function t(e) {
            return function () {
              return new Promise(function (t, r) {
                var n,
                  i = function i(r) {
                    var n = {},
                      i = r.target.files.length,
                      o = 0;
                    [].map.call(r.target.files, function (r) {
                      var a = new FileReader();
                      a.onload = function (a) {
                        var s = new Uint8Array(a.target.result);
                        if ("directory" === e) {
                          var u = r.webkitRelativePath;
                          n[u.slice(u.indexOf("/") + 1)] = {
                            type: "text/plain",
                            data: s
                          }, ++o === i && t(n);
                        } else if ("file" === e) {
                          var c = r.webkitRelativePath;
                          t({
                            type: mimetype.lookup(c),
                            data: s
                          });
                        } else t(s);
                      }, a.readAsArrayBuffer(r);
                    });
                  };
                "directory" === e ? ((n = document.createElement("input")).addEventListener("change", i), n.type = "file", n.webkitdirectory = !0, n.mozdirectory = !0, n.msdirectory = !0, n.odirectory = !0, n.directory = !0) : ((n = document.createElement("input")).addEventListener("change", i), n.type = "file");
                var o = document.createEvent("MouseEvents");
                o.initEvent("click", !0, !1), n.dispatchEvent(o);
              });
            };
          };
          e.exports = {
            data: t("data"),
            file: t("file"),
            directory: t("directory")
          };
        },
        2733: function _(e, t, r) {
          "use strict";

          var n = r(9574).keccak256,
            i = r(631),
            o = function o(e, t) {
              var r = i.reverse(i.pad(6, i.fromNumber(e))),
                o = i.flatten([r, "0x0000", t]);
              return n(o).slice(2);
            };
          e.exports = function e(t) {
            "string" == typeof t && "0x" !== t.slice(0, 2) ? t = i.fromString(t) : "string" != typeof t && void 0 !== t.length && (t = i.fromUint8Array(t));
            var r = i.length(t);
            if (r <= 4096) return o(r, t);
            for (var n = 4096; 128 * n < r;) n *= 128;
            for (var a = [], s = 0; s < r; s += n) {
              var u = n < r - s ? n : r - s;
              a.push(e(i.slice(t, s, s + u)));
            }
            return o(r, i.flatten(a));
          };
        },
        3094: function _(e) {
          "use strict";

          e.exports = function (e) {
            var t = e.fs,
              r = e.files,
              n = e.os,
              i = e.path,
              o = e.child_process,
              a = e.mimetype,
              s = e.defaultArchives,
              u = e.request,
              c = e.downloadUrl,
              f = e.bytes,
              d = e.hash,
              l = e.pick,
              h = function h(e) {
                return function (t) {
                  for (var r = {}, n = 0, i = e.length; n < i; ++n) r[e[n]] = t[n];
                  return r;
                };
              },
              p = function p(e) {
                return function (t) {
                  return "".concat(e, "/bzz-raw:/").concat(t);
                };
              },
              b = function b(e) {
                return function (t) {
                  return new Promise(function (r, n) {
                    u(p(e)(t), {
                      responseType: "arraybuffer"
                    }, function (e, t, i) {
                      return e ? n(e) : i.statusCode >= 400 ? n(new Error("Error ".concat(i.statusCode, "."))) : r(new Uint8Array(t));
                    });
                  });
                };
              },
              y = function y(e) {
                return function (t) {
                  return function t(r) {
                    return function (n) {
                      return function (i) {
                        var o = function o(e) {
                          return void 0 === e.path ? Promise.resolve() : "application/bzz-manifest+json" === e.contentType ? t(e.hash)(n + e.path)(i) : Promise.resolve((r = n + e.path, function (e) {
                            return function (t) {
                              return t[r] = e, t;
                            };
                          })(function (e) {
                            return {
                              type: e.contentType,
                              hash: e.hash
                            };
                          }(e))(i));
                          var r;
                        };
                        return b(e)(r).then(function (e) {
                          return JSON.parse(j(e)).entries;
                        }).then(function (e) {
                          return Promise.all(e.map(o));
                        }).then(function () {
                          return i;
                        });
                      };
                    };
                  }(t)("")({});
                };
              },
              m = function m(e) {
                return function (t) {
                  return y(e)(t).then(function (e) {
                    return h(Object.keys(e))(Object.keys(e).map(function (t) {
                      return e[t].hash;
                    }));
                  });
                };
              },
              v = function v(e) {
                return function (t) {
                  return y(e)(t).then(function (t) {
                    var r = Object.keys(t),
                      n = r.map(function (e) {
                        return t[e].hash;
                      }),
                      i = r.map(function (e) {
                        return t[e].type;
                      }),
                      o = n.map(b(e));
                    return Promise.all(o).then(function (e) {
                      return h(r)(function (e) {
                        return e.map(function (e, t) {
                          return {
                            type: i[t],
                            data: e
                          };
                        });
                      }(e));
                    });
                  });
                };
              },
              g = function g(e) {
                return function (t) {
                  return function (n) {
                    return r.download(p(e)(t))(n);
                  };
                };
              },
              w = function w(e) {
                return function (t) {
                  return function (r) {
                    return m(e)(t).then(function (t) {
                      var n = [];
                      for (var o in t) if (o.length > 0) {
                        var a = i.join(r, o);
                        n.push(g(e)(t[o])(a));
                      }
                      return Promise.all(n).then(function () {
                        return r;
                      });
                    });
                  };
                };
              },
              A = function A(e) {
                return function (t) {
                  return new Promise(function (r, n) {
                    var i = {
                      body: "string" == typeof t ? N(t) : t,
                      method: "POST"
                    };
                    u("".concat(e, "/bzz-raw:/"), i, function (e, t) {
                      return e ? n(e) : r(t);
                    });
                  });
                };
              },
              k = function k(e) {
                return function (t) {
                  return function (r) {
                    return function (n) {
                      return function i(o) {
                        var a = "/" === r[0] ? r : "/" + r,
                          s = "".concat(e, "/bzz:/").concat(t).concat(a),
                          c = {
                            method: "PUT",
                            headers: {
                              "Content-Type": n.type
                            },
                            body: n.data
                          };
                        return new Promise(function (e, t) {
                          u(s, c, function (r, n) {
                            return r ? t(r) : -1 !== n.indexOf("error") ? t(n) : e(n);
                          });
                        }).catch(function (e) {
                          return o > 0 && i(o - 1);
                        });
                      }(3);
                    };
                  };
                };
              },
              _ = function _(e) {
                return function (t) {
                  return E(e)({
                    "": t
                  });
                };
              },
              S = function S(e) {
                return function (r) {
                  return t.readFile(r).then(function (t) {
                    return _(e)({
                      type: a.lookup(r),
                      data: t
                    });
                  });
                };
              },
              E = function E(e) {
                return function (t) {
                  return A(e)("{}").then(function (r) {
                    return Object.keys(t).reduce(function (r, n) {
                      return r.then(function (r) {
                        return function (n) {
                          return k(e)(n)(r)(t[r]);
                        };
                      }(n));
                    }, Promise.resolve(r));
                  });
                };
              },
              x = function x(e) {
                return function (r) {
                  return t.readFile(r).then(A(e));
                };
              },
              P = function P(e) {
                return function (n) {
                  return function (i) {
                    return r.directoryTree(i).then(function (e) {
                      return Promise.all(e.map(function (e) {
                        return t.readFile(e);
                      })).then(function (t) {
                        var r = e.map(function (e) {
                            return e.slice(i.length);
                          }),
                          n = e.map(function (e) {
                            return a.lookup(e) || "text/plain";
                          });
                        return h(r)(t.map(function (e, t) {
                          return {
                            type: n[t],
                            data: e
                          };
                        }));
                      });
                    }).then(function (e) {
                      return (t = n ? {
                        "": e[n]
                      } : {}, function (e) {
                        var r = {};
                        for (var n in t) r[n] = t[n];
                        for (var i in e) r[i] = e[i];
                        return r;
                      })(e);
                      var t;
                    }).then(E(e));
                  };
                };
              },
              O = function O(e) {
                return function (t) {
                  if ("data" === t.pick) return l.data().then(A(e));
                  if ("file" === t.pick) return l.file().then(_(e));
                  if ("directory" === t.pick) return l.directory().then(E(e));
                  if (t.path) switch (t.kind) {
                    case "data":
                      return x(e)(t.path);
                    case "file":
                      return S(e)(t.path);
                    case "directory":
                      return P(e)(t.defaultFile)(t.path);
                  } else {
                    if (t.length || "string" == typeof t) return A(e)(t);
                    if (t instanceof Object) return E(e)(t);
                  }
                  return Promise.reject(new Error("Bad arguments"));
                };
              },
              B = function B(e) {
                return function (t) {
                  return function (r) {
                    return U(e)(t).then(function (n) {
                      return n ? r ? w(e)(t)(r) : v(e)(t) : r ? g(e)(t)(r) : b(e)(t);
                    });
                  };
                };
              },
              T = function T(e, t) {
                var i = n.platform().replace("win32", "windows") + "-" + ("x64" === n.arch() ? "amd64" : "386"),
                  o = (t || s)[i],
                  a = c + o.archive + ".tar.gz",
                  u = o.archiveMD5,
                  f = o.binaryMD5;
                return r.safeDownloadArchived(a)(u)(f)(e);
              },
              C = function C(e) {
                return new Promise(function (t, r) {
                  var n = o.spawn,
                    i = function i(e) {
                      return function (t) {
                        return -1 !== ("" + t).indexOf(e);
                      };
                    },
                    a = e.account,
                    s = e.password,
                    u = e.dataDir,
                    c = e.ensApi,
                    f = e.privateKey,
                    d = 0,
                    l = n(e.binPath, ["--bzzaccount", a || f, "--datadir", u, "--ens-api", c]),
                    h = function h(e) {
                      0 === d && i("Passphrase")(e) ? setTimeout(function () {
                        d = 1, l.stdin.write(s + "\n");
                      }, 500) : i("Swarm http proxy started")(e) && (d = 2, clearTimeout(p), t(l));
                    };
                  l.stdout.on("data", h), l.stderr.on("data", h);
                  var p = setTimeout(function () {
                    return r(new Error("Couldn't start swarm process."));
                  }, 2e4);
                });
              },
              I = function I(e) {
                return new Promise(function (t, r) {
                  e.stderr.removeAllListeners("data"), e.stdout.removeAllListeners("data"), e.stdin.removeAllListeners("error"), e.removeAllListeners("error"), e.removeAllListeners("exit"), e.kill("SIGINT");
                  var n = setTimeout(function () {
                    return e.kill("SIGKILL");
                  }, 8e3);
                  e.once("close", function () {
                    clearTimeout(n), t();
                  });
                });
              },
              M = function M(e) {
                return A(e)("test").then(function (e) {
                  return "c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7" === e;
                }).catch(function () {
                  return !1;
                });
              },
              U = function U(e) {
                return function (t) {
                  return b(e)(t).then(function (e) {
                    try {
                      return !!JSON.parse(j(e)).entries;
                    } catch (e) {
                      return !1;
                    }
                  });
                };
              },
              R = function R(e) {
                return function (t, r, n, i, o) {
                  var a;
                  return void 0 !== t && (a = e(t)), void 0 !== r && (a = e(r)), void 0 !== n && (a = e(n)), void 0 !== i && (a = e(i)), void 0 !== o && (a = e(o)), a;
                };
              },
              j = function j(e) {
                return f.toString(f.fromUint8Array(e));
              },
              N = function N(e) {
                return f.toUint8Array(f.fromString(e));
              },
              F = function F(e) {
                return {
                  download: function download(t, r) {
                    return B(e)(t)(r);
                  },
                  downloadData: R(b(e)),
                  downloadDataToDisk: R(g(e)),
                  downloadDirectory: R(v(e)),
                  downloadDirectoryToDisk: R(w(e)),
                  downloadEntries: R(y(e)),
                  downloadRoutes: R(m(e)),
                  isAvailable: function isAvailable() {
                    return M(e);
                  },
                  upload: function upload(t) {
                    return O(e)(t);
                  },
                  uploadData: R(A(e)),
                  uploadFile: R(_(e)),
                  uploadFileFromDisk: R(_(e)),
                  uploadDataFromDisk: R(x(e)),
                  uploadDirectory: R(E(e)),
                  uploadDirectoryFromDisk: R(P(e)),
                  uploadToManifest: R(k(e)),
                  pick: l,
                  hash: d,
                  fromString: N,
                  toString: j
                };
              };
            return {
              at: F,
              local: function local(e) {
                return function (t) {
                  return M("http://localhost:8500").then(function (r) {
                    return r ? t(F("http://localhost:8500")).then(function () {}) : T(e.binPath, e.archives).onData(function (t) {
                      return (e.onProgress || function () {})(t.length);
                    }).then(function () {
                      return C(e);
                    }).then(function (e) {
                      return t(F("http://localhost:8500")).then(function () {
                        return e;
                      });
                    }).then(I);
                  });
                };
              },
              download: B,
              downloadBinary: T,
              downloadData: b,
              downloadDataToDisk: g,
              downloadDirectory: v,
              downloadDirectoryToDisk: w,
              downloadEntries: y,
              downloadRoutes: m,
              isAvailable: M,
              startProcess: C,
              stopProcess: I,
              upload: O,
              uploadData: A,
              uploadDataFromDisk: x,
              uploadFile: _,
              uploadFileFromDisk: S,
              uploadDirectory: E,
              uploadDirectoryFromDisk: P,
              uploadToManifest: k,
              pick: l,
              hash: d,
              fromString: N,
              toString: j
            };
          };
        },
        7380: function _(e) {
          "use strict";

          var t = function t(e, _t2) {
            for (var r = [], n = 0; n < e; ++n) r.push(_t2(n));
            return r;
          };
          e.exports = {
            generate: t,
            replicate: function replicate(e, r) {
              return t(e, function () {
                return r;
              });
            },
            concat: function concat(e, t) {
              return e.concat(t);
            },
            flatten: function flatten(e) {
              for (var t = [], r = 0, n = e.length; r < n; ++r) for (var i = 0, o = e[r].length; i < o; ++i) t.push(e[r][i]);
              return t;
            },
            chunksOf: function chunksOf(e, t) {
              for (var r = [], n = 0, i = t.length; n < i; n += e) r.push(t.slice(n, n + e));
              return r;
            }
          };
        },
        631: function _(e, t, r) {
          "use strict";

          r(7380);
          var n = function n(e, t) {
              return parseInt(e.slice(2 * t + 2, 2 * t + 4), 16);
            },
            i = function i(e) {
              return (e.length - 2) / 2;
            },
            o = function o(e) {
              for (var t = [], r = 2, n = e.length; r < n; r += 2) t.push(parseInt(e.slice(r, r + 2), 16));
              return t;
            },
            a = function a(e) {
              for (var t = "0x", r = 0, n = e.length; r < n; ++r) {
                var i = e[r];
                t += (i < 16 ? "0" : "") + i.toString(16);
              }
              return t;
            };
          e.exports = {
            random: function random(e) {
              var t = void 0;
              t = "undefined" != typeof window && window.crypto && window.crypto.getRandomValues ? window.crypto.getRandomValues(new Uint8Array(e)) : r(4293).randomBytes(e);
              for (var n = "0x", i = 0; i < e; ++i) n += ("00" + t[i].toString(16)).slice(-2);
              return n;
            },
            length: i,
            concat: function concat(e, t) {
              return e.concat(t.slice(2));
            },
            flatten: function flatten(e) {
              return "0x" + e.reduce(function (e, t) {
                return e + t.slice(2);
              }, "");
            },
            slice: function slice(e, t, r) {
              return "0x" + r.slice(2 * e + 2, 2 * t + 2);
            },
            reverse: function reverse(e) {
              for (var t = "0x", r = 0, n = i(e); r < n; ++r) t += e.slice(2 * (n - r), 2 * (n - r + 1));
              return t;
            },
            pad: function e(t, r) {
              return r.length === 2 * t + 2 ? r : e(t, "0x0" + r.slice(2));
            },
            padRight: function e(t, r) {
              return r.length === 2 * t + 2 ? r : e(t, r + "0");
            },
            fromAscii: function fromAscii(e) {
              for (var t = "0x", r = 0; r < e.length; ++r) t += ("00" + e.charCodeAt(r).toString(16)).slice(-2);
              return t;
            },
            toAscii: function toAscii(e) {
              for (var t = "", r = 2; r < e.length; r += 2) t += String.fromCharCode(parseInt(e.slice(r, r + 2), 16));
              return t;
            },
            fromString: function fromString(e) {
              for (var t = function t(e) {
                  var t = e.toString(16);
                  return t.length < 2 ? "0" + t : t;
                }, r = "0x", n = 0; n != e.length; n++) {
                var i = e.charCodeAt(n);
                if (i < 128) r += t(i);else {
                  if (i < 2048) r += t(i >> 6 | 192);else {
                    if (i > 55295 && i < 56320) {
                      if (++n == e.length) return null;
                      var o = e.charCodeAt(n);
                      if (o < 56320 || o > 57343) return null;
                      r += t((i = 65536 + ((1023 & i) << 10) + (1023 & o)) >> 18 | 240), r += t(i >> 12 & 63 | 128);
                    } else r += t(i >> 12 | 224);
                    r += t(i >> 6 & 63 | 128);
                  }
                  r += t(63 & i | 128);
                }
              }
              return r;
            },
            toString: function toString(e) {
              for (var t = "", r = 0, o = i(e); r < o;) {
                var a = n(e, r++);
                if (a > 127) {
                  if (a > 191 && a < 224) {
                    if (r >= o) return null;
                    a = (31 & a) << 6 | 63 & n(e, r);
                  } else if (a > 223 && a < 240) {
                    if (r + 1 >= o) return null;
                    a = (15 & a) << 12 | (63 & n(e, r)) << 6 | 63 & n(e, ++r);
                  } else {
                    if (!(a > 239 && a < 248)) return null;
                    if (r + 2 >= o) return null;
                    a = (7 & a) << 18 | (63 & n(e, r)) << 12 | (63 & n(e, ++r)) << 6 | 63 & n(e, ++r);
                  }
                  ++r;
                }
                if (a <= 65535) t += String.fromCharCode(a);else {
                  if (!(a <= 1114111)) return null;
                  a -= 65536, t += String.fromCharCode(a >> 10 | 55296), t += String.fromCharCode(1023 & a | 56320);
                }
              }
              return t;
            },
            fromNumber: function fromNumber(e) {
              var t = e.toString(16);
              return t.length % 2 == 0 ? "0x" + t : "0x0" + t;
            },
            toNumber: function toNumber(e) {
              return parseInt(e.slice(2), 16);
            },
            fromNat: function fromNat(e) {
              return "0x0" === e ? "0x" : e.length % 2 == 0 ? e : "0x0" + e.slice(2);
            },
            toNat: function toNat(e) {
              return "0" === e[2] ? "0x" + e.slice(3) : e;
            },
            fromArray: a,
            toArray: o,
            fromUint8Array: function fromUint8Array(e) {
              return a([].slice.call(e, 0));
            },
            toUint8Array: function toUint8Array(e) {
              return new Uint8Array(o(e));
            }
          };
        },
        9574: function _(e) {
          "use strict";

          var t = "0123456789abcdef".split(""),
            r = [1, 256, 65536, 16777216],
            n = [0, 8, 16, 24],
            i = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648],
            o = function o(e) {
              var t, r, n, o, a, s, u, c, f, d, l, h, p, b, y, m, v, g, w, A, k, _, S, E, x, P, O, B, T, C, I, M, U, R, j, N, F, L, D, H, q, z, G, K, V, J, W, Y, X, Q, Z, $, ee, te, re, ne, ie, oe, ae, se, ue, ce, fe;
              for (n = 0; n < 48; n += 2) o = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], a = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], s = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], u = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], c = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], f = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], d = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], l = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], t = (h = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48]) ^ (s << 1 | u >>> 31), r = (p = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (u << 1 | s >>> 31), e[0] ^= t, e[1] ^= r, e[10] ^= t, e[11] ^= r, e[20] ^= t, e[21] ^= r, e[30] ^= t, e[31] ^= r, e[40] ^= t, e[41] ^= r, t = o ^ (c << 1 | f >>> 31), r = a ^ (f << 1 | c >>> 31), e[2] ^= t, e[3] ^= r, e[12] ^= t, e[13] ^= r, e[22] ^= t, e[23] ^= r, e[32] ^= t, e[33] ^= r, e[42] ^= t, e[43] ^= r, t = s ^ (d << 1 | l >>> 31), r = u ^ (l << 1 | d >>> 31), e[4] ^= t, e[5] ^= r, e[14] ^= t, e[15] ^= r, e[24] ^= t, e[25] ^= r, e[34] ^= t, e[35] ^= r, e[44] ^= t, e[45] ^= r, t = c ^ (h << 1 | p >>> 31), r = f ^ (p << 1 | h >>> 31), e[6] ^= t, e[7] ^= r, e[16] ^= t, e[17] ^= r, e[26] ^= t, e[27] ^= r, e[36] ^= t, e[37] ^= r, e[46] ^= t, e[47] ^= r, t = d ^ (o << 1 | a >>> 31), r = l ^ (a << 1 | o >>> 31), e[8] ^= t, e[9] ^= r, e[18] ^= t, e[19] ^= r, e[28] ^= t, e[29] ^= r, e[38] ^= t, e[39] ^= r, e[48] ^= t, e[49] ^= r, b = e[0], y = e[1], J = e[11] << 4 | e[10] >>> 28, W = e[10] << 4 | e[11] >>> 28, B = e[20] << 3 | e[21] >>> 29, T = e[21] << 3 | e[20] >>> 29, se = e[31] << 9 | e[30] >>> 23, ue = e[30] << 9 | e[31] >>> 23, z = e[40] << 18 | e[41] >>> 14, G = e[41] << 18 | e[40] >>> 14, R = e[2] << 1 | e[3] >>> 31, j = e[3] << 1 | e[2] >>> 31, m = e[13] << 12 | e[12] >>> 20, v = e[12] << 12 | e[13] >>> 20, Y = e[22] << 10 | e[23] >>> 22, X = e[23] << 10 | e[22] >>> 22, C = e[33] << 13 | e[32] >>> 19, I = e[32] << 13 | e[33] >>> 19, ce = e[42] << 2 | e[43] >>> 30, fe = e[43] << 2 | e[42] >>> 30, te = e[5] << 30 | e[4] >>> 2, re = e[4] << 30 | e[5] >>> 2, N = e[14] << 6 | e[15] >>> 26, F = e[15] << 6 | e[14] >>> 26, g = e[25] << 11 | e[24] >>> 21, w = e[24] << 11 | e[25] >>> 21, Q = e[34] << 15 | e[35] >>> 17, Z = e[35] << 15 | e[34] >>> 17, M = e[45] << 29 | e[44] >>> 3, U = e[44] << 29 | e[45] >>> 3, E = e[6] << 28 | e[7] >>> 4, x = e[7] << 28 | e[6] >>> 4, ne = e[17] << 23 | e[16] >>> 9, ie = e[16] << 23 | e[17] >>> 9, L = e[26] << 25 | e[27] >>> 7, D = e[27] << 25 | e[26] >>> 7, A = e[36] << 21 | e[37] >>> 11, k = e[37] << 21 | e[36] >>> 11, $ = e[47] << 24 | e[46] >>> 8, ee = e[46] << 24 | e[47] >>> 8, K = e[8] << 27 | e[9] >>> 5, V = e[9] << 27 | e[8] >>> 5, P = e[18] << 20 | e[19] >>> 12, O = e[19] << 20 | e[18] >>> 12, oe = e[29] << 7 | e[28] >>> 25, ae = e[28] << 7 | e[29] >>> 25, H = e[38] << 8 | e[39] >>> 24, q = e[39] << 8 | e[38] >>> 24, _ = e[48] << 14 | e[49] >>> 18, S = e[49] << 14 | e[48] >>> 18, e[0] = b ^ ~m & g, e[1] = y ^ ~v & w, e[10] = E ^ ~P & B, e[11] = x ^ ~O & T, e[20] = R ^ ~N & L, e[21] = j ^ ~F & D, e[30] = K ^ ~J & Y, e[31] = V ^ ~W & X, e[40] = te ^ ~ne & oe, e[41] = re ^ ~ie & ae, e[2] = m ^ ~g & A, e[3] = v ^ ~w & k, e[12] = P ^ ~B & C, e[13] = O ^ ~T & I, e[22] = N ^ ~L & H, e[23] = F ^ ~D & q, e[32] = J ^ ~Y & Q, e[33] = W ^ ~X & Z, e[42] = ne ^ ~oe & se, e[43] = ie ^ ~ae & ue, e[4] = g ^ ~A & _, e[5] = w ^ ~k & S, e[14] = B ^ ~C & M, e[15] = T ^ ~I & U, e[24] = L ^ ~H & z, e[25] = D ^ ~q & G, e[34] = Y ^ ~Q & $, e[35] = X ^ ~Z & ee, e[44] = oe ^ ~se & ce, e[45] = ae ^ ~ue & fe, e[6] = A ^ ~_ & b, e[7] = k ^ ~S & y, e[16] = C ^ ~M & E, e[17] = I ^ ~U & x, e[26] = H ^ ~z & R, e[27] = q ^ ~G & j, e[36] = Q ^ ~$ & K, e[37] = Z ^ ~ee & V, e[46] = se ^ ~ce & te, e[47] = ue ^ ~fe & re, e[8] = _ ^ ~b & m, e[9] = S ^ ~y & v, e[18] = M ^ ~E & P, e[19] = U ^ ~x & O, e[28] = z ^ ~R & N, e[29] = G ^ ~j & F, e[38] = $ ^ ~K & J, e[39] = ee ^ ~V & W, e[48] = ce ^ ~te & ne, e[49] = fe ^ ~re & ie, e[0] ^= i[n], e[1] ^= i[n + 1];
            },
            a = function a(e) {
              return function (i) {
                var a;
                if ("0x" === i.slice(0, 2)) {
                  a = [];
                  for (var s = 2, u = i.length; s < u; s += 2) a.push(parseInt(i.slice(s, s + 2), 16));
                } else a = i;
                return function (e, i) {
                  for (var a, s = i.length, u = e.blocks, c = e.blockCount << 2, f = e.blockCount, d = e.outputBlocks, l = e.s, h = 0; h < s;) {
                    if (e.reset) for (e.reset = !1, u[0] = e.block, y = 1; y < f + 1; ++y) u[y] = 0;
                    if ("string" != typeof i) for (y = e.start; h < s && y < c; ++h) u[y >> 2] |= i[h] << n[3 & y++];else for (y = e.start; h < s && y < c; ++h) (a = i.charCodeAt(h)) < 128 ? u[y >> 2] |= a << n[3 & y++] : a < 2048 ? (u[y >> 2] |= (192 | a >> 6) << n[3 & y++], u[y >> 2] |= (128 | 63 & a) << n[3 & y++]) : a < 55296 || a >= 57344 ? (u[y >> 2] |= (224 | a >> 12) << n[3 & y++], u[y >> 2] |= (128 | a >> 6 & 63) << n[3 & y++], u[y >> 2] |= (128 | 63 & a) << n[3 & y++]) : (a = 65536 + ((1023 & a) << 10 | 1023 & i.charCodeAt(++h)), u[y >> 2] |= (240 | a >> 18) << n[3 & y++], u[y >> 2] |= (128 | a >> 12 & 63) << n[3 & y++], u[y >> 2] |= (128 | a >> 6 & 63) << n[3 & y++], u[y >> 2] |= (128 | 63 & a) << n[3 & y++]);
                    if (e.lastByteIndex = y, y >= c) {
                      for (e.start = y - c, e.block = u[f], y = 0; y < f; ++y) l[y] ^= u[y];
                      o(l), e.reset = !0;
                    } else e.start = y;
                  }
                  if (u[(y = e.lastByteIndex) >> 2] |= r[3 & y], e.lastByteIndex === c) for (u[0] = u[f], y = 1; y < f + 1; ++y) u[y] = 0;
                  for (u[f - 1] |= 2147483648, y = 0; y < f; ++y) l[y] ^= u[y];
                  o(l);
                  for (var p, b = "", y = 0, m = 0; m < d;) {
                    for (y = 0; y < f && m < d; ++y, ++m) p = l[y], b += t[p >> 4 & 15] + t[15 & p] + t[p >> 12 & 15] + t[p >> 8 & 15] + t[p >> 20 & 15] + t[p >> 16 & 15] + t[p >> 28 & 15] + t[p >> 24 & 15];
                    m % f == 0 && (o(l), y = 0);
                  }
                  return "0x" + b;
                }(function (e) {
                  return {
                    blocks: [],
                    reset: !0,
                    block: 0,
                    start: 0,
                    blockCount: 1600 - (e << 1) >> 5,
                    outputBlocks: e >> 5,
                    s: (t = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [].concat(t, t, t, t, t))
                  };
                  var t;
                }(e), a);
              };
            };
          e.exports = {
            keccak256: a(256),
            keccak512: a(512),
            keccak256s: a(256),
            keccak512s: a(512)
          };
        },
        8419: function _(e) {
          "use strict";

          e.exports = function (e, t) {
            if (t) {
              t = (t = t.trim().replace(/^(\?|#|&)/, "")) ? "?" + t : t;
              var r = e.split(/[\?\#]/)[0];
              t && /\:\/\/[^\/]*$/.test(r) && (r += "/");
              var n = e.match(/(\#.*)$/);
              e = r + t, n && (e += n[0]);
            }
            return e;
          };
        },
        8677: function _(e, t, r) {
          "use strict";

          var n;
          e = r.nmd(e);
          var i = r(8847)(r(3355));
          !function (o) {
            var a = "object" == (0, i.default)(t) && t && !t.nodeType && t,
              s = "object" == (0, i.default)(e) && e && !e.nodeType && e,
              u = "object" == (void 0 === r.g ? "undefined" : (0, i.default)(r.g)) && r.g;
            u.global !== u && u.window !== u && u.self !== u || (o = u);
            var c,
              f,
              d = 2147483647,
              l = 36,
              h = 1,
              p = 26,
              b = 38,
              y = 700,
              m = 72,
              v = 128,
              g = "-",
              w = /^xn--/,
              A = /[^\x20-\x7E]/,
              k = /[\x2E\u3002\uFF0E\uFF61]/g,
              _ = {
                overflow: "Overflow: input needs wider integers to process",
                "not-basic": "Illegal input >= 0x80 (not a basic code point)",
                "invalid-input": "Invalid input"
              },
              S = l - h,
              E = Math.floor,
              x = String.fromCharCode;
            function P(e) {
              throw RangeError(_[e]);
            }
            function O(e, t) {
              for (var r = e.length, n = []; r--;) n[r] = t(e[r]);
              return n;
            }
            function B(e, t) {
              var r = e.split("@"),
                n = "";
              return r.length > 1 && (n = r[0] + "@", e = r[1]), n + O((e = e.replace(k, ".")).split("."), t).join(".");
            }
            function T(e) {
              for (var t, r, n = [], i = 0, o = e.length; i < o;) (t = e.charCodeAt(i++)) >= 55296 && t <= 56319 && i < o ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), i--) : n.push(t);
              return n;
            }
            function C(e) {
              return O(e, function (e) {
                var t = "";
                return e > 65535 && (t += x((e -= 65536) >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), t + x(e);
              }).join("");
            }
            function I(e, t) {
              return e + 22 + 75 * (e < 26) - ((0 != t) << 5);
            }
            function M(e, t, r) {
              var n = 0;
              for (e = r ? E(e / y) : e >> 1, e += E(e / t); e > S * p >> 1; n += l) e = E(e / S);
              return E(n + (S + 1) * e / (e + b));
            }
            function U(e) {
              var t,
                r,
                n,
                i,
                o,
                a,
                s,
                u,
                c,
                f,
                b,
                y = [],
                w = e.length,
                A = 0,
                k = v,
                _ = m;
              for ((r = e.lastIndexOf(g)) < 0 && (r = 0), n = 0; n < r; ++n) e.charCodeAt(n) >= 128 && P("not-basic"), y.push(e.charCodeAt(n));
              for (i = r > 0 ? r + 1 : 0; i < w;) {
                for (o = A, a = 1, s = l; i >= w && P("invalid-input"), ((u = (b = e.charCodeAt(i++)) - 48 < 10 ? b - 22 : b - 65 < 26 ? b - 65 : b - 97 < 26 ? b - 97 : l) >= l || u > E((d - A) / a)) && P("overflow"), A += u * a, !(u < (c = s <= _ ? h : s >= _ + p ? p : s - _)); s += l) a > E(d / (f = l - c)) && P("overflow"), a *= f;
                _ = M(A - o, t = y.length + 1, 0 == o), E(A / t) > d - k && P("overflow"), k += E(A / t), A %= t, y.splice(A++, 0, k);
              }
              return C(y);
            }
            function R(e) {
              var t,
                r,
                n,
                i,
                o,
                a,
                s,
                u,
                c,
                f,
                b,
                y,
                w,
                A,
                k,
                _ = [];
              for (y = (e = T(e)).length, t = v, r = 0, o = m, a = 0; a < y; ++a) (b = e[a]) < 128 && _.push(x(b));
              for (n = i = _.length, i && _.push(g); n < y;) {
                for (s = d, a = 0; a < y; ++a) (b = e[a]) >= t && b < s && (s = b);
                for (s - t > E((d - r) / (w = n + 1)) && P("overflow"), r += (s - t) * w, t = s, a = 0; a < y; ++a) if ((b = e[a]) < t && ++r > d && P("overflow"), b == t) {
                  for (u = r, c = l; !(u < (f = c <= o ? h : c >= o + p ? p : c - o)); c += l) k = u - f, A = l - f, _.push(x(I(f + k % A, 0))), u = E(k / A);
                  _.push(x(I(u, 0))), o = M(r, w, n == i), r = 0, ++n;
                }
                ++r, ++t;
              }
              return _.join("");
            }
            if (c = {
              version: "1.3.2",
              ucs2: {
                decode: T,
                encode: C
              },
              decode: U,
              encode: R,
              toASCII: function toASCII(e) {
                return B(e, function (e) {
                  return A.test(e) ? "xn--" + R(e) : e;
                });
              },
              toUnicode: function toUnicode(e) {
                return B(e, function (e) {
                  return w.test(e) ? U(e.slice(4).toLowerCase()) : e;
                });
              }
            }, "object" == (0, i.default)(r.amdO) && r.amdO) void 0 === (n = function () {
              return c;
            }.call(t, r, t, e)) || (e.exports = n);else if (a && s) {
              if (e.exports == a) s.exports = c;else for (f in c) c.hasOwnProperty(f) && (a[f] = c[f]);
            } else o.punycode = c;
          }(void 0);
        },
        8983: function _(e) {
          "use strict";

          function t(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
          }
          e.exports = function (e, r, n, i) {
            r = r || "&", n = n || "=";
            var o = {};
            if ("string" != typeof e || 0 === e.length) return o;
            var a = /\+/g;
            e = e.split(r);
            var s = 1e3;
            i && "number" == typeof i.maxKeys && (s = i.maxKeys);
            var u = e.length;
            s > 0 && u > s && (u = s);
            for (var c = 0; c < u; ++c) {
              var f,
                d,
                l,
                h,
                p = e[c].replace(a, "%20"),
                b = p.indexOf(n);
              b >= 0 ? (f = p.substr(0, b), d = p.substr(b + 1)) : (f = p, d = ""), l = decodeURIComponent(f), h = decodeURIComponent(d), t(o, l) ? Array.isArray(o[l]) ? o[l].push(h) : o[l] = [o[l], h] : o[l] = h;
            }
            return o;
          };
        },
        4031: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = function i(e) {
              switch ((0, n.default)(e)) {
                case "string":
                  return e;
                case "boolean":
                  return e ? "true" : "false";
                case "number":
                  return isFinite(e) ? e : "";
                default:
                  return "";
              }
            };
          e.exports = function (e, t, r, o) {
            return t = t || "&", r = r || "=", null === e && (e = void 0), "object" === (0, n.default)(e) ? Object.keys(e).map(function (n) {
              var o = encodeURIComponent(i(n)) + r;
              return Array.isArray(e[n]) ? e[n].map(function (e) {
                return o + encodeURIComponent(i(e));
              }).join(t) : o + encodeURIComponent(i(e[n]));
            }).join(t) : o ? encodeURIComponent(i(o)) + r + encodeURIComponent(i(e)) : "";
          };
        },
        845: function _(e, t, r) {
          "use strict";

          t.decode = t.parse = r(8983), t.encode = t.stringify = r(4031);
        },
        1143: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(8677),
            o = r(5751);
          function a() {
            this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
          }
          t.parse = w, t.resolve = function (e, t) {
            return w(e, !1, !0).resolve(t);
          }, t.resolveObject = function (e, t) {
            return e ? w(e, !1, !0).resolveObject(t) : t;
          }, t.format = function (e) {
            return o.isString(e) && (e = w(e)), e instanceof a ? e.format() : a.prototype.format.call(e);
          }, t.Url = a;
          var s = /^([a-z0-9.+-]+:)/i,
            u = /:[0-9]*$/,
            c = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
            f = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "\t"]),
            d = ["'"].concat(f),
            l = ["%", "/", "?", ";", "#"].concat(d),
            h = ["/", "?", "#"],
            p = /^[+a-z0-9A-Z_-]{0,63}$/,
            b = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
            y = {
              javascript: !0,
              "javascript:": !0
            },
            m = {
              javascript: !0,
              "javascript:": !0
            },
            v = {
              http: !0,
              https: !0,
              ftp: !0,
              gopher: !0,
              file: !0,
              "http:": !0,
              "https:": !0,
              "ftp:": !0,
              "gopher:": !0,
              "file:": !0
            },
            g = r(845);
          function w(e, t, r) {
            if (e && o.isObject(e) && e instanceof a) return e;
            var n = new a();
            return n.parse(e, t, r), n;
          }
          a.prototype.parse = function (e, t, r) {
            if (!o.isString(e)) throw new TypeError("Parameter 'url' must be a string, not " + (0, n.default)(e));
            var a = e.indexOf("?"),
              u = -1 !== a && a < e.indexOf("#") ? "?" : "#",
              f = e.split(u);
            f[0] = f[0].replace(/\\/g, "/");
            var w = e = f.join(u);
            if (w = w.trim(), !r && 1 === e.split("#").length) {
              var A = c.exec(w);
              if (A) return this.path = w, this.href = w, this.pathname = A[1], A[2] ? (this.search = A[2], this.query = t ? g.parse(this.search.substr(1)) : this.search.substr(1)) : t && (this.search = "", this.query = {}), this;
            }
            var k = s.exec(w);
            if (k) {
              var _ = (k = k[0]).toLowerCase();
              this.protocol = _, w = w.substr(k.length);
            }
            if (r || k || w.match(/^\/\/[^@\/]+@[^@\/]+/)) {
              var S = "//" === w.substr(0, 2);
              !S || k && m[k] || (w = w.substr(2), this.slashes = !0);
            }
            if (!m[k] && (S || k && !v[k])) {
              for (var E, x, P = -1, O = 0; O < h.length; O++) -1 !== (B = w.indexOf(h[O])) && (-1 === P || B < P) && (P = B);
              for (-1 !== (x = -1 === P ? w.lastIndexOf("@") : w.lastIndexOf("@", P)) && (E = w.slice(0, x), w = w.slice(x + 1), this.auth = decodeURIComponent(E)), P = -1, O = 0; O < l.length; O++) {
                var B;
                -1 !== (B = w.indexOf(l[O])) && (-1 === P || B < P) && (P = B);
              }
              -1 === P && (P = w.length), this.host = w.slice(0, P), w = w.slice(P), this.parseHost(), this.hostname = this.hostname || "";
              var T = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
              if (!T) for (var C = this.hostname.split(/\./), I = (O = 0, C.length); O < I; O++) {
                var M = C[O];
                if (M && !M.match(p)) {
                  for (var U = "", R = 0, j = M.length; R < j; R++) M.charCodeAt(R) > 127 ? U += "x" : U += M[R];
                  if (!U.match(p)) {
                    var N = C.slice(0, O),
                      F = C.slice(O + 1),
                      L = M.match(b);
                    L && (N.push(L[1]), F.unshift(L[2])), F.length && (w = "/" + F.join(".") + w), this.hostname = N.join(".");
                    break;
                  }
                }
              }
              this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), T || (this.hostname = i.toASCII(this.hostname));
              var D = this.port ? ":" + this.port : "",
                H = this.hostname || "";
              this.host = H + D, this.href += this.host, T && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== w[0] && (w = "/" + w));
            }
            if (!y[_]) for (O = 0, I = d.length; O < I; O++) {
              var q = d[O];
              if (-1 !== w.indexOf(q)) {
                var z = encodeURIComponent(q);
                z === q && (z = escape(q)), w = w.split(q).join(z);
              }
            }
            var G = w.indexOf("#");
            -1 !== G && (this.hash = w.substr(G), w = w.slice(0, G));
            var K = w.indexOf("?");
            if (-1 !== K ? (this.search = w.substr(K), this.query = w.substr(K + 1), t && (this.query = g.parse(this.query)), w = w.slice(0, K)) : t && (this.search = "", this.query = {}), w && (this.pathname = w), v[_] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
              D = this.pathname || "";
              var V = this.search || "";
              this.path = D + V;
            }
            return this.href = this.format(), this;
          }, a.prototype.format = function () {
            var e = this.auth || "";
            e && (e = (e = encodeURIComponent(e)).replace(/%3A/i, ":"), e += "@");
            var t = this.protocol || "",
              r = this.pathname || "",
              n = this.hash || "",
              i = !1,
              a = "";
            this.host ? i = e + this.host : this.hostname && (i = e + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (i += ":" + this.port)), this.query && o.isObject(this.query) && Object.keys(this.query).length && (a = g.stringify(this.query));
            var s = this.search || a && "?" + a || "";
            return t && ":" !== t.substr(-1) && (t += ":"), this.slashes || (!t || v[t]) && !1 !== i ? (i = "//" + (i || ""), r && "/" !== r.charAt(0) && (r = "/" + r)) : i || (i = ""), n && "#" !== n.charAt(0) && (n = "#" + n), s && "?" !== s.charAt(0) && (s = "?" + s), t + i + (r = r.replace(/[?#]/g, function (e) {
              return encodeURIComponent(e);
            })) + (s = s.replace("#", "%23")) + n;
          }, a.prototype.resolve = function (e) {
            return this.resolveObject(w(e, !1, !0)).format();
          }, a.prototype.resolveObject = function (e) {
            if (o.isString(e)) {
              var t = new a();
              t.parse(e, !1, !0), e = t;
            }
            for (var r = new a(), n = Object.keys(this), i = 0; i < n.length; i++) {
              var s = n[i];
              r[s] = this[s];
            }
            if (r.hash = e.hash, "" === e.href) return r.href = r.format(), r;
            if (e.slashes && !e.protocol) {
              for (var u = Object.keys(e), c = 0; c < u.length; c++) {
                var f = u[c];
                "protocol" !== f && (r[f] = e[f]);
              }
              return v[r.protocol] && r.hostname && !r.pathname && (r.path = r.pathname = "/"), r.href = r.format(), r;
            }
            if (e.protocol && e.protocol !== r.protocol) {
              if (!v[e.protocol]) {
                for (var d = Object.keys(e), l = 0; l < d.length; l++) {
                  var h = d[l];
                  r[h] = e[h];
                }
                return r.href = r.format(), r;
              }
              if (r.protocol = e.protocol, e.host || m[e.protocol]) r.pathname = e.pathname;else {
                for (var p = (e.pathname || "").split("/"); p.length && !(e.host = p.shift()););
                e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== p[0] && p.unshift(""), p.length < 2 && p.unshift(""), r.pathname = p.join("/");
              }
              if (r.search = e.search, r.query = e.query, r.host = e.host || "", r.auth = e.auth, r.hostname = e.hostname || e.host, r.port = e.port, r.pathname || r.search) {
                var b = r.pathname || "",
                  y = r.search || "";
                r.path = b + y;
              }
              return r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
            }
            var g = r.pathname && "/" === r.pathname.charAt(0),
              w = e.host || e.pathname && "/" === e.pathname.charAt(0),
              A = w || g || r.host && e.pathname,
              k = A,
              _ = r.pathname && r.pathname.split("/") || [],
              S = (p = e.pathname && e.pathname.split("/") || [], r.protocol && !v[r.protocol]);
            if (S && (r.hostname = "", r.port = null, r.host && ("" === _[0] ? _[0] = r.host : _.unshift(r.host)), r.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && ("" === p[0] ? p[0] = e.host : p.unshift(e.host)), e.host = null), A = A && ("" === p[0] || "" === _[0])), w) r.host = e.host || "" === e.host ? e.host : r.host, r.hostname = e.hostname || "" === e.hostname ? e.hostname : r.hostname, r.search = e.search, r.query = e.query, _ = p;else if (p.length) _ || (_ = []), _.pop(), _ = _.concat(p), r.search = e.search, r.query = e.query;else if (!o.isNullOrUndefined(e.search)) return S && (r.hostname = r.host = _.shift(), (B = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = B.shift(), r.host = r.hostname = B.shift())), r.search = e.search, r.query = e.query, o.isNull(r.pathname) && o.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.href = r.format(), r;
            if (!_.length) return r.pathname = null, r.search ? r.path = "/" + r.search : r.path = null, r.href = r.format(), r;
            for (var E = _.slice(-1)[0], x = (r.host || e.host || _.length > 1) && ("." === E || ".." === E) || "" === E, P = 0, O = _.length; O >= 0; O--) "." === (E = _[O]) ? _.splice(O, 1) : ".." === E ? (_.splice(O, 1), P++) : P && (_.splice(O, 1), P--);
            if (!A && !k) for (; P--; P) _.unshift("..");
            !A || "" === _[0] || _[0] && "/" === _[0].charAt(0) || _.unshift(""), x && "/" !== _.join("/").substr(-1) && _.push("");
            var B,
              T = "" === _[0] || _[0] && "/" === _[0].charAt(0);
            return S && (r.hostname = r.host = T ? "" : _.length ? _.shift() : "", (B = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = B.shift(), r.host = r.hostname = B.shift())), (A = A || r.host && _.length) && !T && _.unshift(""), _.length ? r.pathname = _.join("/") : (r.pathname = null, r.path = null), o.isNull(r.pathname) && o.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.auth = e.auth || r.auth, r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
          }, a.prototype.parseHost = function () {
            var e = this.host,
              t = u.exec(e);
            t && (":" !== (t = t[0]) && (this.port = t.substr(1)), e = e.substr(0, e.length - t.length)), e && (this.hostname = e);
          };
        },
        5751: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355));
          e.exports = {
            isString: function isString(e) {
              return "string" == typeof e;
            },
            isObject: function isObject(e) {
              return "object" === (0, n.default)(e) && null !== e;
            },
            isNull: function isNull(e) {
              return null === e;
            },
            isNullOrUndefined: function isNullOrUndefined(e) {
              return null == e;
            }
          };
        },
        8632: function _(e, t) {
          "use strict";

          !function (e) {
            var t,
              r,
              n,
              i = String.fromCharCode;
            function o(e) {
              for (var t, r, n = [], i = 0, o = e.length; i < o;) (t = e.charCodeAt(i++)) >= 55296 && t <= 56319 && i < o ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), i--) : n.push(t);
              return n;
            }
            function a(e) {
              if (e >= 55296 && e <= 57343) throw Error("Lone surrogate U+" + e.toString(16).toUpperCase() + " is not a scalar value");
            }
            function s(e, t) {
              return i(e >> t & 63 | 128);
            }
            function u(e) {
              if (0 == (4294967168 & e)) return i(e);
              var t = "";
              return 0 == (4294965248 & e) ? t = i(e >> 6 & 31 | 192) : 0 == (4294901760 & e) ? (a(e), t = i(e >> 12 & 15 | 224), t += s(e, 6)) : 0 == (4292870144 & e) && (t = i(e >> 18 & 7 | 240), t += s(e, 12), t += s(e, 6)), t + i(63 & e | 128);
            }
            function c() {
              if (n >= r) throw Error("Invalid byte index");
              var e = 255 & t[n];
              if (n++, 128 == (192 & e)) return 63 & e;
              throw Error("Invalid continuation byte");
            }
            function f() {
              var e, i;
              if (n > r) throw Error("Invalid byte index");
              if (n == r) return !1;
              if (e = 255 & t[n], n++, 0 == (128 & e)) return e;
              if (192 == (224 & e)) {
                if ((i = (31 & e) << 6 | c()) >= 128) return i;
                throw Error("Invalid continuation byte");
              }
              if (224 == (240 & e)) {
                if ((i = (15 & e) << 12 | c() << 6 | c()) >= 2048) return a(i), i;
                throw Error("Invalid continuation byte");
              }
              if (240 == (248 & e) && (i = (7 & e) << 18 | c() << 12 | c() << 6 | c()) >= 65536 && i <= 1114111) return i;
              throw Error("Invalid UTF-8 detected");
            }
            e.version = "3.0.0", e.encode = function (e) {
              for (var t = o(e), r = t.length, n = -1, i = ""; ++n < r;) i += u(t[n]);
              return i;
            }, e.decode = function (e) {
              t = o(e), r = t.length, n = 0;
              for (var a, s = []; !1 !== (a = f());) s.push(a);
              return function (e) {
                for (var t, r = e.length, n = -1, o = ""; ++n < r;) (t = e[n]) > 65535 && (o += i((t -= 65536) >>> 10 & 1023 | 55296), t = 56320 | 1023 & t), o += i(t);
                return o;
              }(s);
            };
          }(t);
        },
        6219: function _(e, t, r) {
          "use strict";

          function n(e) {
            try {
              if (!r.g.localStorage) return !1;
            } catch (e) {
              return !1;
            }
            var t = r.g.localStorage[e];
            return null != t && "true" === String(t).toLowerCase();
          }
          e.exports = function (e, t) {
            if (n("noDeprecation")) return e;
            var r = !1;
            return function () {
              if (!r) {
                if (n("throwDeprecation")) throw new Error(t);
                n("traceDeprecation") ? console.trace(t) : console.warn(t), r = !0;
              }
              return e.apply(this, arguments);
            };
          };
        },
        6248: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355));
          e.exports = function (e) {
            return e && "object" === (0, n.default)(e) && "function" == typeof e.copy && "function" == typeof e.fill && "function" == typeof e.readUInt8;
          };
        },
        7092: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(9446),
            o = r(4477),
            a = r(2337),
            s = r(8915);
          function u(e) {
            return e.call.bind(e);
          }
          var c = "undefined" != typeof BigInt,
            f = "undefined" != typeof Symbol,
            d = u(Object.prototype.toString),
            l = u(Number.prototype.valueOf),
            h = u(String.prototype.valueOf),
            p = u(Boolean.prototype.valueOf);
          if (c) var b = u(BigInt.prototype.valueOf);
          if (f) var y = u(Symbol.prototype.valueOf);
          function m(e, t) {
            if ("object" !== (0, n.default)(e)) return !1;
            try {
              return t(e), !0;
            } catch (e) {
              return !1;
            }
          }
          function v(e) {
            return "[object Map]" === d(e);
          }
          function g(e) {
            return "[object Set]" === d(e);
          }
          function w(e) {
            return "[object WeakMap]" === d(e);
          }
          function A(e) {
            return "[object WeakSet]" === d(e);
          }
          function k(e) {
            return "[object ArrayBuffer]" === d(e);
          }
          function _(e) {
            return "undefined" != typeof ArrayBuffer && (k.working ? k(e) : e instanceof ArrayBuffer);
          }
          function S(e) {
            return "[object DataView]" === d(e);
          }
          function E(e) {
            return "undefined" != typeof DataView && (S.working ? S(e) : e instanceof DataView);
          }
          t.isArgumentsObject = i, t.isGeneratorFunction = o, t.isTypedArray = s, t.isPromise = function (e) {
            return "undefined" != typeof Promise && e instanceof Promise || null !== e && "object" === (0, n.default)(e) && "function" == typeof e.then && "function" == typeof e.catch;
          }, t.isArrayBufferView = function (e) {
            return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(e) : s(e) || E(e);
          }, t.isUint8Array = function (e) {
            return "Uint8Array" === a(e);
          }, t.isUint8ClampedArray = function (e) {
            return "Uint8ClampedArray" === a(e);
          }, t.isUint16Array = function (e) {
            return "Uint16Array" === a(e);
          }, t.isUint32Array = function (e) {
            return "Uint32Array" === a(e);
          }, t.isInt8Array = function (e) {
            return "Int8Array" === a(e);
          }, t.isInt16Array = function (e) {
            return "Int16Array" === a(e);
          }, t.isInt32Array = function (e) {
            return "Int32Array" === a(e);
          }, t.isFloat32Array = function (e) {
            return "Float32Array" === a(e);
          }, t.isFloat64Array = function (e) {
            return "Float64Array" === a(e);
          }, t.isBigInt64Array = function (e) {
            return "BigInt64Array" === a(e);
          }, t.isBigUint64Array = function (e) {
            return "BigUint64Array" === a(e);
          }, v.working = "undefined" != typeof Map && v(new Map()), t.isMap = function (e) {
            return "undefined" != typeof Map && (v.working ? v(e) : e instanceof Map);
          }, g.working = "undefined" != typeof Set && g(new Set()), t.isSet = function (e) {
            return "undefined" != typeof Set && (g.working ? g(e) : e instanceof Set);
          }, w.working = "undefined" != typeof WeakMap && w(new WeakMap()), t.isWeakMap = function (e) {
            return "undefined" != typeof WeakMap && (w.working ? w(e) : e instanceof WeakMap);
          }, A.working = "undefined" != typeof WeakSet && A(new WeakSet()), t.isWeakSet = function (e) {
            return A(e);
          }, k.working = "undefined" != typeof ArrayBuffer && k(new ArrayBuffer()), t.isArrayBuffer = _, S.working = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView && S(new DataView(new ArrayBuffer(1), 0, 1)), t.isDataView = E;
          var x = "undefined" != typeof SharedArrayBuffer ? SharedArrayBuffer : void 0;
          function P(e) {
            return "[object SharedArrayBuffer]" === d(e);
          }
          function O(e) {
            return void 0 !== x && (void 0 === P.working && (P.working = P(new x())), P.working ? P(e) : e instanceof x);
          }
          function B(e) {
            return m(e, l);
          }
          function T(e) {
            return m(e, h);
          }
          function C(e) {
            return m(e, p);
          }
          function I(e) {
            return c && m(e, b);
          }
          function M(e) {
            return f && m(e, y);
          }
          t.isSharedArrayBuffer = O, t.isAsyncFunction = function (e) {
            return "[object AsyncFunction]" === d(e);
          }, t.isMapIterator = function (e) {
            return "[object Map Iterator]" === d(e);
          }, t.isSetIterator = function (e) {
            return "[object Set Iterator]" === d(e);
          }, t.isGeneratorObject = function (e) {
            return "[object Generator]" === d(e);
          }, t.isWebAssemblyCompiledModule = function (e) {
            return "[object WebAssembly.Module]" === d(e);
          }, t.isNumberObject = B, t.isStringObject = T, t.isBooleanObject = C, t.isBigIntObject = I, t.isSymbolObject = M, t.isBoxedPrimitive = function (e) {
            return B(e) || T(e) || C(e) || I(e) || M(e);
          }, t.isAnyArrayBuffer = function (e) {
            return "undefined" != typeof Uint8Array && (_(e) || O(e));
          }, ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function (e) {
            Object.defineProperty(t, e, {
              enumerable: !1,
              value: function value() {
                throw new Error(e + " is not supported in userland");
              }
            });
          });
        },
        5058: function _(e, t, r) {
          "use strict";

          var n = r(9142),
            i = r(8847)(r(3355)),
            o = Object.getOwnPropertyDescriptors || function (e) {
              for (var t = Object.keys(e), r = {}, n = 0; n < t.length; n++) r[t[n]] = Object.getOwnPropertyDescriptor(e, t[n]);
              return r;
            },
            a = /%[sdj%]/g;
          t.format = function (e) {
            if (!w(e)) {
              for (var t = [], r = 0; r < arguments.length; r++) t.push(f(arguments[r]));
              return t.join(" ");
            }
            r = 1;
            for (var n = arguments, i = n.length, o = String(e).replace(a, function (e) {
                if ("%%" === e) return "%";
                if (r >= i) return e;
                switch (e) {
                  case "%s":
                    return String(n[r++]);
                  case "%d":
                    return Number(n[r++]);
                  case "%j":
                    try {
                      return JSON.stringify(n[r++]);
                    } catch (e) {
                      return "[Circular]";
                    }
                  default:
                    return e;
                }
              }), s = n[r]; r < i; s = n[++r]) v(s) || !_(s) ? o += " " + s : o += " " + f(s);
            return o;
          }, t.deprecate = function (e, r) {
            if (void 0 !== n && !0 === n.noDeprecation) return e;
            if (void 0 === n) return function () {
              return t.deprecate(e, r).apply(this, arguments);
            };
            var i = !1;
            return function () {
              if (!i) {
                if (n.throwDeprecation) throw new Error(r);
                n.traceDeprecation ? console.trace(r) : console.error(r), i = !0;
              }
              return e.apply(this, arguments);
            };
          };
          var s = {},
            u = /^$/;
          if (n.env.NODE_DEBUG) {
            var c = n.env.NODE_DEBUG;
            c = c.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), u = new RegExp("^" + c + "$", "i");
          }
          function f(e, r) {
            var n = {
              seen: [],
              stylize: l
            };
            return arguments.length >= 3 && (n.depth = arguments[2]), arguments.length >= 4 && (n.colors = arguments[3]), m(r) ? n.showHidden = r : r && t._extend(n, r), A(n.showHidden) && (n.showHidden = !1), A(n.depth) && (n.depth = 2), A(n.colors) && (n.colors = !1), A(n.customInspect) && (n.customInspect = !0), n.colors && (n.stylize = d), h(n, e, n.depth);
          }
          function d(e, t) {
            var r = f.styles[t];
            return r ? "[" + f.colors[r][0] + "m" + e + "[" + f.colors[r][1] + "m" : e;
          }
          function l(e, t) {
            return e;
          }
          function h(e, r, n) {
            if (e.customInspect && r && x(r.inspect) && r.inspect !== t.inspect && (!r.constructor || r.constructor.prototype !== r)) {
              var i = r.inspect(n, e);
              return w(i) || (i = h(e, i, n)), i;
            }
            var o = function (e, t) {
              if (A(t)) return e.stylize("undefined", "undefined");
              if (w(t)) {
                var r = "'" + JSON.stringify(t).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                return e.stylize(r, "string");
              }
              return g(t) ? e.stylize("" + t, "number") : m(t) ? e.stylize("" + t, "boolean") : v(t) ? e.stylize("null", "null") : void 0;
            }(e, r);
            if (o) return o;
            var a = Object.keys(r),
              s = function (e) {
                var t = {};
                return e.forEach(function (e, r) {
                  t[e] = !0;
                }), t;
              }(a);
            if (e.showHidden && (a = Object.getOwnPropertyNames(r)), E(r) && (a.indexOf("message") >= 0 || a.indexOf("description") >= 0)) return p(r);
            if (0 === a.length) {
              if (x(r)) {
                var u = r.name ? ": " + r.name : "";
                return e.stylize("[Function" + u + "]", "special");
              }
              if (k(r)) return e.stylize(RegExp.prototype.toString.call(r), "regexp");
              if (S(r)) return e.stylize(Date.prototype.toString.call(r), "date");
              if (E(r)) return p(r);
            }
            var c,
              f = "",
              d = !1,
              l = ["{", "}"];
            return y(r) && (d = !0, l = ["[", "]"]), x(r) && (f = " [Function" + (r.name ? ": " + r.name : "") + "]"), k(r) && (f = " " + RegExp.prototype.toString.call(r)), S(r) && (f = " " + Date.prototype.toUTCString.call(r)), E(r) && (f = " " + p(r)), 0 !== a.length || d && 0 != r.length ? n < 0 ? k(r) ? e.stylize(RegExp.prototype.toString.call(r), "regexp") : e.stylize("[Object]", "special") : (e.seen.push(r), c = d ? function (e, t, r, n, i) {
              for (var o = [], a = 0, s = t.length; a < s; ++a) T(t, String(a)) ? o.push(b(e, t, r, n, String(a), !0)) : o.push("");
              return i.forEach(function (i) {
                i.match(/^\d+$/) || o.push(b(e, t, r, n, i, !0));
              }), o;
            }(e, r, n, s, a) : a.map(function (t) {
              return b(e, r, n, s, t, d);
            }), e.seen.pop(), function (e, t, r) {
              return e.reduce(function (e, t) {
                return t.indexOf("\n"), e + t.replace(/\u001b\[\d\d?m/g, "").length + 1;
              }, 0) > 60 ? r[0] + ("" === t ? "" : t + "\n ") + " " + e.join(",\n  ") + " " + r[1] : r[0] + t + " " + e.join(", ") + " " + r[1];
            }(c, f, l)) : l[0] + f + l[1];
          }
          function p(e) {
            return "[" + Error.prototype.toString.call(e) + "]";
          }
          function b(e, t, r, n, i, o) {
            var a, s, u;
            if ((u = Object.getOwnPropertyDescriptor(t, i) || {
              value: t[i]
            }).get ? s = u.set ? e.stylize("[Getter/Setter]", "special") : e.stylize("[Getter]", "special") : u.set && (s = e.stylize("[Setter]", "special")), T(n, i) || (a = "[" + i + "]"), s || (e.seen.indexOf(u.value) < 0 ? (s = v(r) ? h(e, u.value, null) : h(e, u.value, r - 1)).indexOf("\n") > -1 && (s = o ? s.split("\n").map(function (e) {
              return "  " + e;
            }).join("\n").slice(2) : "\n" + s.split("\n").map(function (e) {
              return "   " + e;
            }).join("\n")) : s = e.stylize("[Circular]", "special")), A(a)) {
              if (o && i.match(/^\d+$/)) return s;
              (a = JSON.stringify("" + i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (a = a.slice(1, -1), a = e.stylize(a, "name")) : (a = a.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), a = e.stylize(a, "string"));
            }
            return a + ": " + s;
          }
          function y(e) {
            return Array.isArray(e);
          }
          function m(e) {
            return "boolean" == typeof e;
          }
          function v(e) {
            return null === e;
          }
          function g(e) {
            return "number" == typeof e;
          }
          function w(e) {
            return "string" == typeof e;
          }
          function A(e) {
            return void 0 === e;
          }
          function k(e) {
            return _(e) && "[object RegExp]" === P(e);
          }
          function _(e) {
            return "object" === (0, i.default)(e) && null !== e;
          }
          function S(e) {
            return _(e) && "[object Date]" === P(e);
          }
          function E(e) {
            return _(e) && ("[object Error]" === P(e) || e instanceof Error);
          }
          function x(e) {
            return "function" == typeof e;
          }
          function P(e) {
            return Object.prototype.toString.call(e);
          }
          function O(e) {
            return e < 10 ? "0" + e.toString(10) : e.toString(10);
          }
          t.debuglog = function (e) {
            if (e = e.toUpperCase(), !s[e]) if (u.test(e)) {
              var r = n.pid;
              s[e] = function () {
                var n = t.format.apply(t, arguments);
                console.error("%s %d: %s", e, r, n);
              };
            } else s[e] = function () {};
            return s[e];
          }, t.inspect = f, f.colors = {
            bold: [1, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            white: [37, 39],
            grey: [90, 39],
            black: [30, 39],
            blue: [34, 39],
            cyan: [36, 39],
            green: [32, 39],
            magenta: [35, 39],
            red: [31, 39],
            yellow: [33, 39]
          }, f.styles = {
            special: "cyan",
            number: "yellow",
            boolean: "yellow",
            undefined: "grey",
            null: "bold",
            string: "green",
            date: "magenta",
            regexp: "red"
          }, t.types = r(7092), t.isArray = y, t.isBoolean = m, t.isNull = v, t.isNullOrUndefined = function (e) {
            return null == e;
          }, t.isNumber = g, t.isString = w, t.isSymbol = function (e) {
            return "symbol" === (0, i.default)(e);
          }, t.isUndefined = A, t.isRegExp = k, t.types.isRegExp = k, t.isObject = _, t.isDate = S, t.types.isDate = S, t.isError = E, t.types.isNativeError = E, t.isFunction = x, t.isPrimitive = function (e) {
            return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" === (0, i.default)(e) || void 0 === e;
          }, t.isBuffer = r(6248);
          var B = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
          function T(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
          }
          t.log = function () {
            var e, r;
            console.log("%s - %s", (r = [O((e = new Date()).getHours()), O(e.getMinutes()), O(e.getSeconds())].join(":"), [e.getDate(), B[e.getMonth()], r].join(" ")), t.format.apply(t, arguments));
          }, t.inherits = r(1736), t._extend = function (e, t) {
            if (!t || !_(t)) return e;
            for (var r = Object.keys(t), n = r.length; n--;) e[r[n]] = t[r[n]];
            return e;
          };
          var C = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
          function I(e, t) {
            if (!e) {
              var r = new Error("Promise was rejected with a falsy value");
              r.reason = e, e = r;
            }
            return t(e);
          }
          t.promisify = function (e) {
            if ("function" != typeof e) throw new TypeError('The "original" argument must be of type Function');
            if (C && e[C]) {
              var t;
              if ("function" != typeof (t = e[C])) throw new TypeError('The "util.promisify.custom" argument must be of type Function');
              return Object.defineProperty(t, C, {
                value: t,
                enumerable: !1,
                writable: !1,
                configurable: !0
              }), t;
            }
            function t() {
              for (var t, r, n = new Promise(function (e, n) {
                  t = e, r = n;
                }), i = [], o = 0; o < arguments.length; o++) i.push(arguments[o]);
              i.push(function (e, n) {
                e ? r(e) : t(n);
              });
              try {
                e.apply(this, i);
              } catch (e) {
                r(e);
              }
              return n;
            }
            return Object.setPrototypeOf(t, Object.getPrototypeOf(e)), C && Object.defineProperty(t, C, {
              value: t,
              enumerable: !1,
              writable: !1,
              configurable: !0
            }), Object.defineProperties(t, o(e));
          }, t.promisify.custom = C, t.callbackify = function (e) {
            if ("function" != typeof e) throw new TypeError('The "original" argument must be of type Function');
            function t() {
              for (var t = [], r = 0; r < arguments.length; r++) t.push(arguments[r]);
              var i = t.pop();
              if ("function" != typeof i) throw new TypeError("The last argument must be of type Function");
              var o = this,
                a = function a() {
                  return i.apply(o, arguments);
                };
              e.apply(this, t).then(function (e) {
                n.nextTick(a.bind(null, null, e));
              }, function (e) {
                n.nextTick(I.bind(null, e, a));
              });
            }
            return Object.setPrototypeOf(t, Object.getPrototypeOf(e)), Object.defineProperties(t, o(e)), t;
          };
        },
        2679: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), Object.defineProperty(t, "NIL", {
            enumerable: !0,
            get: function get() {
              return s.default;
            }
          }), Object.defineProperty(t, "parse", {
            enumerable: !0,
            get: function get() {
              return d.default;
            }
          }), Object.defineProperty(t, "stringify", {
            enumerable: !0,
            get: function get() {
              return f.default;
            }
          }), Object.defineProperty(t, "v1", {
            enumerable: !0,
            get: function get() {
              return n.default;
            }
          }), Object.defineProperty(t, "v3", {
            enumerable: !0,
            get: function get() {
              return i.default;
            }
          }), Object.defineProperty(t, "v4", {
            enumerable: !0,
            get: function get() {
              return o.default;
            }
          }), Object.defineProperty(t, "v5", {
            enumerable: !0,
            get: function get() {
              return a.default;
            }
          }), Object.defineProperty(t, "validate", {
            enumerable: !0,
            get: function get() {
              return c.default;
            }
          }), Object.defineProperty(t, "version", {
            enumerable: !0,
            get: function get() {
              return u.default;
            }
          });
          var n = l(r(5999)),
            i = l(r(8231)),
            o = l(r(8647)),
            a = l(r(5025)),
            s = l(r(5996)),
            u = l(r(8928)),
            c = l(r(6163)),
            f = l(r(2982)),
            d = l(r(1729));
          function l(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          }
        },
        6792: function _(e, t) {
          "use strict";

          function r(e) {
            return 14 + (e + 64 >>> 9 << 4) + 1;
          }
          function n(e, t) {
            var r = (65535 & e) + (65535 & t);
            return (e >> 16) + (t >> 16) + (r >> 16) << 16 | 65535 & r;
          }
          function i(e, t, r, i, o, a) {
            return n((s = n(n(t, e), n(i, a))) << (u = o) | s >>> 32 - u, r);
            var s, u;
          }
          function o(e, t, r, n, o, a, s) {
            return i(t & r | ~t & n, e, t, o, a, s);
          }
          function a(e, t, r, n, o, a, s) {
            return i(t & n | r & ~n, e, t, o, a, s);
          }
          function s(e, t, r, n, o, a, s) {
            return i(t ^ r ^ n, e, t, o, a, s);
          }
          function u(e, t, r, n, o, a, s) {
            return i(r ^ (t | ~n), e, t, o, a, s);
          }
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = void 0;
          t.default = function (e) {
            if ("string" == typeof e) {
              var t = unescape(encodeURIComponent(e));
              e = new Uint8Array(t.length);
              for (var i = 0; i < t.length; ++i) e[i] = t.charCodeAt(i);
            }
            return function (e) {
              for (var t = [], r = 32 * e.length, n = "0123456789abcdef", i = 0; i < r; i += 8) {
                var o = e[i >> 5] >>> i % 32 & 255,
                  a = parseInt(n.charAt(o >>> 4 & 15) + n.charAt(15 & o), 16);
                t.push(a);
              }
              return t;
            }(function (e, t) {
              e[t >> 5] |= 128 << t % 32, e[r(t) - 1] = t;
              for (var i = 1732584193, c = -271733879, f = -1732584194, d = 271733878, l = 0; l < e.length; l += 16) {
                var h = i,
                  p = c,
                  b = f,
                  y = d;
                i = o(i, c, f, d, e[l], 7, -680876936), d = o(d, i, c, f, e[l + 1], 12, -389564586), f = o(f, d, i, c, e[l + 2], 17, 606105819), c = o(c, f, d, i, e[l + 3], 22, -1044525330), i = o(i, c, f, d, e[l + 4], 7, -176418897), d = o(d, i, c, f, e[l + 5], 12, 1200080426), f = o(f, d, i, c, e[l + 6], 17, -1473231341), c = o(c, f, d, i, e[l + 7], 22, -45705983), i = o(i, c, f, d, e[l + 8], 7, 1770035416), d = o(d, i, c, f, e[l + 9], 12, -1958414417), f = o(f, d, i, c, e[l + 10], 17, -42063), c = o(c, f, d, i, e[l + 11], 22, -1990404162), i = o(i, c, f, d, e[l + 12], 7, 1804603682), d = o(d, i, c, f, e[l + 13], 12, -40341101), f = o(f, d, i, c, e[l + 14], 17, -1502002290), i = a(i, c = o(c, f, d, i, e[l + 15], 22, 1236535329), f, d, e[l + 1], 5, -165796510), d = a(d, i, c, f, e[l + 6], 9, -1069501632), f = a(f, d, i, c, e[l + 11], 14, 643717713), c = a(c, f, d, i, e[l], 20, -373897302), i = a(i, c, f, d, e[l + 5], 5, -701558691), d = a(d, i, c, f, e[l + 10], 9, 38016083), f = a(f, d, i, c, e[l + 15], 14, -660478335), c = a(c, f, d, i, e[l + 4], 20, -405537848), i = a(i, c, f, d, e[l + 9], 5, 568446438), d = a(d, i, c, f, e[l + 14], 9, -1019803690), f = a(f, d, i, c, e[l + 3], 14, -187363961), c = a(c, f, d, i, e[l + 8], 20, 1163531501), i = a(i, c, f, d, e[l + 13], 5, -1444681467), d = a(d, i, c, f, e[l + 2], 9, -51403784), f = a(f, d, i, c, e[l + 7], 14, 1735328473), i = s(i, c = a(c, f, d, i, e[l + 12], 20, -1926607734), f, d, e[l + 5], 4, -378558), d = s(d, i, c, f, e[l + 8], 11, -2022574463), f = s(f, d, i, c, e[l + 11], 16, 1839030562), c = s(c, f, d, i, e[l + 14], 23, -35309556), i = s(i, c, f, d, e[l + 1], 4, -1530992060), d = s(d, i, c, f, e[l + 4], 11, 1272893353), f = s(f, d, i, c, e[l + 7], 16, -155497632), c = s(c, f, d, i, e[l + 10], 23, -1094730640), i = s(i, c, f, d, e[l + 13], 4, 681279174), d = s(d, i, c, f, e[l], 11, -358537222), f = s(f, d, i, c, e[l + 3], 16, -722521979), c = s(c, f, d, i, e[l + 6], 23, 76029189), i = s(i, c, f, d, e[l + 9], 4, -640364487), d = s(d, i, c, f, e[l + 12], 11, -421815835), f = s(f, d, i, c, e[l + 15], 16, 530742520), i = u(i, c = s(c, f, d, i, e[l + 2], 23, -995338651), f, d, e[l], 6, -198630844), d = u(d, i, c, f, e[l + 7], 10, 1126891415), f = u(f, d, i, c, e[l + 14], 15, -1416354905), c = u(c, f, d, i, e[l + 5], 21, -57434055), i = u(i, c, f, d, e[l + 12], 6, 1700485571), d = u(d, i, c, f, e[l + 3], 10, -1894986606), f = u(f, d, i, c, e[l + 10], 15, -1051523), c = u(c, f, d, i, e[l + 1], 21, -2054922799), i = u(i, c, f, d, e[l + 8], 6, 1873313359), d = u(d, i, c, f, e[l + 15], 10, -30611744), f = u(f, d, i, c, e[l + 6], 15, -1560198380), c = u(c, f, d, i, e[l + 13], 21, 1309151649), i = u(i, c, f, d, e[l + 4], 6, -145523070), d = u(d, i, c, f, e[l + 11], 10, -1120210379), f = u(f, d, i, c, e[l + 2], 15, 718787259), c = u(c, f, d, i, e[l + 9], 21, -343485551), i = n(i, h), c = n(c, p), f = n(f, b), d = n(d, y);
              }
              return [i, c, f, d];
            }(function (e) {
              if (0 === e.length) return [];
              for (var t = 8 * e.length, n = new Uint32Array(r(t)), i = 0; i < t; i += 8) n[i >> 5] |= (255 & e[i / 8]) << i % 32;
              return n;
            }(e), 8 * e.length));
          };
        },
        1788: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = void 0;
          var r = {
            randomUUID: "undefined" != typeof crypto && crypto.randomUUID && crypto.randomUUID.bind(crypto)
          };
          t.default = r;
        },
        5996: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = void 0, t.default = "00000000-0000-0000-0000-000000000000";
        },
        1729: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = void 0;
          var n,
            i = (n = r(6163)) && n.__esModule ? n : {
              default: n
            };
          t.default = function (e) {
            if (!(0, i.default)(e)) throw TypeError("Invalid UUID");
            var t,
              r = new Uint8Array(16);
            return r[0] = (t = parseInt(e.slice(0, 8), 16)) >>> 24, r[1] = t >>> 16 & 255, r[2] = t >>> 8 & 255, r[3] = 255 & t, r[4] = (t = parseInt(e.slice(9, 13), 16)) >>> 8, r[5] = 255 & t, r[6] = (t = parseInt(e.slice(14, 18), 16)) >>> 8, r[7] = 255 & t, r[8] = (t = parseInt(e.slice(19, 23), 16)) >>> 8, r[9] = 255 & t, r[10] = (t = parseInt(e.slice(24, 36), 16)) / 1099511627776 & 255, r[11] = t / 4294967296 & 255, r[12] = t >>> 24 & 255, r[13] = t >>> 16 & 255, r[14] = t >>> 8 & 255, r[15] = 255 & t, r;
          };
        },
        7300: function _(e, t) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = void 0, t.default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
        },
        4402: function _(e, t) {
          "use strict";

          var r;
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = function () {
            if (!r && !(r = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto))) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
            return r(n);
          };
          var n = new Uint8Array(16);
        },
        2702: function _(e, t) {
          "use strict";

          function r(e, t, r, n) {
            switch (e) {
              case 0:
                return t & r ^ ~t & n;
              case 1:
              case 3:
                return t ^ r ^ n;
              case 2:
                return t & r ^ t & n ^ r & n;
            }
          }
          function n(e, t) {
            return e << t | e >>> 32 - t;
          }
          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = void 0;
          t.default = function (e) {
            var t = [1518500249, 1859775393, 2400959708, 3395469782],
              i = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
            if ("string" == typeof e) {
              var o = unescape(encodeURIComponent(e));
              e = [];
              for (var a = 0; a < o.length; ++a) e.push(o.charCodeAt(a));
            } else Array.isArray(e) || (e = Array.prototype.slice.call(e));
            e.push(128);
            for (var s = e.length / 4 + 2, u = Math.ceil(s / 16), c = new Array(u), f = 0; f < u; ++f) {
              for (var d = new Uint32Array(16), l = 0; l < 16; ++l) d[l] = e[64 * f + 4 * l] << 24 | e[64 * f + 4 * l + 1] << 16 | e[64 * f + 4 * l + 2] << 8 | e[64 * f + 4 * l + 3];
              c[f] = d;
            }
            c[u - 1][14] = 8 * (e.length - 1) / Math.pow(2, 32), c[u - 1][14] = Math.floor(c[u - 1][14]), c[u - 1][15] = 8 * (e.length - 1) & 4294967295;
            for (var h = 0; h < u; ++h) {
              for (var p = new Uint32Array(80), b = 0; b < 16; ++b) p[b] = c[h][b];
              for (var y = 16; y < 80; ++y) p[y] = n(p[y - 3] ^ p[y - 8] ^ p[y - 14] ^ p[y - 16], 1);
              for (var m = i[0], v = i[1], g = i[2], w = i[3], A = i[4], k = 0; k < 80; ++k) {
                var _ = Math.floor(k / 20),
                  S = n(m, 5) + r(_, v, g, w) + A + t[_] + p[k] >>> 0;
                A = w, w = g, g = n(v, 30) >>> 0, v = m, m = S;
              }
              i[0] = i[0] + m >>> 0, i[1] = i[1] + v >>> 0, i[2] = i[2] + g >>> 0, i[3] = i[3] + w >>> 0, i[4] = i[4] + A >>> 0;
            }
            return [i[0] >> 24 & 255, i[0] >> 16 & 255, i[0] >> 8 & 255, 255 & i[0], i[1] >> 24 & 255, i[1] >> 16 & 255, i[1] >> 8 & 255, 255 & i[1], i[2] >> 24 & 255, i[2] >> 16 & 255, i[2] >> 8 & 255, 255 & i[2], i[3] >> 24 & 255, i[3] >> 16 & 255, i[3] >> 8 & 255, 255 & i[3], i[4] >> 24 & 255, i[4] >> 16 & 255, i[4] >> 8 & 255, 255 & i[4]];
          };
        },
        2982: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = void 0, t.unsafeStringify = s;
          for (var n, i = (n = r(6163)) && n.__esModule ? n : {
              default: n
            }, o = [], a = 0; a < 256; ++a) o.push((a + 256).toString(16).slice(1));
          function s(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
            return (o[e[t + 0]] + o[e[t + 1]] + o[e[t + 2]] + o[e[t + 3]] + "-" + o[e[t + 4]] + o[e[t + 5]] + "-" + o[e[t + 6]] + o[e[t + 7]] + "-" + o[e[t + 8]] + o[e[t + 9]] + "-" + o[e[t + 10]] + o[e[t + 11]] + o[e[t + 12]] + o[e[t + 13]] + o[e[t + 14]] + o[e[t + 15]]).toLowerCase();
          }
          t.default = function (e) {
            var t = s(e, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0);
            if (!(0, i.default)(t)) throw TypeError("Stringified UUID is invalid");
            return t;
          };
        },
        5999: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = void 0;
          var n,
            i,
            o,
            a = (n = r(4402)) && n.__esModule ? n : {
              default: n
            },
            s = r(2982),
            u = 0,
            c = 0;
          t.default = function (e, t, r) {
            var n = t && r || 0,
              f = t || new Array(16),
              d = (e = e || {}).node || i,
              l = void 0 !== e.clockseq ? e.clockseq : o;
            if (null == d || null == l) {
              var h = e.random || (e.rng || a.default)();
              null == d && (d = i = [1 | h[0], h[1], h[2], h[3], h[4], h[5]]), null == l && (l = o = 16383 & (h[6] << 8 | h[7]));
            }
            var p = void 0 !== e.msecs ? e.msecs : Date.now(),
              b = void 0 !== e.nsecs ? e.nsecs : c + 1,
              y = p - u + (b - c) / 1e4;
            if (y < 0 && void 0 === e.clockseq && (l = l + 1 & 16383), (y < 0 || p > u) && void 0 === e.nsecs && (b = 0), b >= 1e4) throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
            u = p, c = b, o = l;
            var m = (1e4 * (268435455 & (p += 122192928e5)) + b) % 4294967296;
            f[n++] = m >>> 24 & 255, f[n++] = m >>> 16 & 255, f[n++] = m >>> 8 & 255, f[n++] = 255 & m;
            var v = p / 4294967296 * 1e4 & 268435455;
            f[n++] = v >>> 8 & 255, f[n++] = 255 & v, f[n++] = v >>> 24 & 15 | 16, f[n++] = v >>> 16 & 255, f[n++] = l >>> 8 | 128, f[n++] = 255 & l;
            for (var g = 0; g < 6; ++g) f[n + g] = d[g];
            return t || (0, s.unsafeStringify)(f);
          };
        },
        8231: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = void 0;
          var n = o(r(6125)),
            i = o(r(6792));
          function o(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          }
          var a = (0, n.default)("v3", 48, i.default);
          t.default = a;
        },
        6125: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.URL = t.DNS = void 0, t.default = function (e, t, r) {
            function n(e, n, a, s) {
              var u;
              if ("string" == typeof e && (e = function (e) {
                e = unescape(encodeURIComponent(e));
                for (var t = [], r = 0; r < e.length; ++r) t.push(e.charCodeAt(r));
                return t;
              }(e)), "string" == typeof n && (n = (0, o.default)(n)), 16 !== (null === (u = n) || void 0 === u ? void 0 : u.length)) throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
              var c = new Uint8Array(16 + e.length);
              if (c.set(n), c.set(e, n.length), (c = r(c))[6] = 15 & c[6] | t, c[8] = 63 & c[8] | 128, a) {
                s = s || 0;
                for (var f = 0; f < 16; ++f) a[s + f] = c[f];
                return a;
              }
              return (0, i.unsafeStringify)(c);
            }
            try {
              n.name = e;
            } catch (e) {}
            return n.DNS = a, n.URL = s, n;
          };
          var n,
            i = r(2982),
            o = (n = r(1729)) && n.__esModule ? n : {
              default: n
            },
            a = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
          t.DNS = a;
          var s = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
          t.URL = s;
        },
        8647: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = void 0;
          var n = a(r(1788)),
            i = a(r(4402)),
            o = r(2982);
          function a(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          }
          t.default = function (e, t, r) {
            if (n.default.randomUUID && !t && !e) return n.default.randomUUID();
            var a = (e = e || {}).random || (e.rng || i.default)();
            if (a[6] = 15 & a[6] | 64, a[8] = 63 & a[8] | 128, t) {
              r = r || 0;
              for (var s = 0; s < 16; ++s) t[r + s] = a[s];
              return t;
            }
            return (0, o.unsafeStringify)(a);
          };
        },
        5025: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = void 0;
          var n = o(r(6125)),
            i = o(r(2702));
          function o(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          }
          var a = (0, n.default)("v5", 80, i.default);
          t.default = a;
        },
        6163: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = void 0;
          var n,
            i = (n = r(7300)) && n.__esModule ? n : {
              default: n
            };
          t.default = function (e) {
            return "string" == typeof e && i.default.test(e);
          };
        },
        8928: function _(e, t, r) {
          "use strict";

          Object.defineProperty(t, "__esModule", {
            value: !0
          }), t.default = void 0;
          var n,
            i = (n = r(6163)) && n.__esModule ? n : {
              default: n
            };
          t.default = function (e) {
            if (!(0, i.default)(e)) throw TypeError("Invalid UUID");
            return parseInt(e.slice(14, 15), 16);
          };
        },
        8325: function _(e) {
          "use strict";

          e.exports = function e(n, i) {
            var o,
              a = 0,
              s = 0,
              u = i = i || 0,
              c = n.length;
            do {
              if (u >= c) throw e.bytes = 0, new RangeError("Could not decode varint");
              o = n[u++], a += s < 28 ? (o & r) << s : (o & r) * Math.pow(2, s), s += 7;
            } while (o >= t);
            return e.bytes = u - i, a;
          };
          var t = 128,
            r = 127;
        },
        2699: function _(e) {
          "use strict";

          e.exports = function e(i, o, a) {
            o = o || [];
            for (var s = a = a || 0; i >= n;) o[a++] = 255 & i | t, i /= 128;
            for (; i & r;) o[a++] = 255 & i | t, i >>>= 7;
            return o[a] = 0 | i, e.bytes = a - s + 1, o;
          };
          var t = 128,
            r = -128,
            n = Math.pow(2, 31);
        },
        6657: function _(e, t, r) {
          "use strict";

          e.exports = {
            encode: r(2699),
            decode: r(8325),
            encodingLength: r(7490)
          };
        },
        7490: function _(e) {
          "use strict";

          var t = Math.pow(2, 7),
            r = Math.pow(2, 14),
            n = Math.pow(2, 21),
            i = Math.pow(2, 28),
            o = Math.pow(2, 35),
            a = Math.pow(2, 42),
            s = Math.pow(2, 49),
            u = Math.pow(2, 56),
            c = Math.pow(2, 63);
          e.exports = function (e) {
            return e < t ? 1 : e < r ? 2 : e < n ? 3 : e < i ? 4 : e < o ? 5 : e < a ? 6 : e < s ? 7 : e < u ? 8 : e < c ? 9 : 10;
          };
        },
        1158: function _(e, t, r) {
          "use strict";

          var n,
            i = r(8847)(r(3355));
          if ("object" === ("undefined" == typeof globalThis ? "undefined" : (0, i.default)(globalThis))) n = globalThis;else try {
            n = r(6464);
          } catch (e) {} finally {
            if (n || "undefined" == typeof window || (n = window), !n) throw new Error("Could not determine global this");
          }
          var o = n.WebSocket || n.MozWebSocket,
            a = r(5735);
          function s(e, t) {
            return t ? new o(e, t) : new o(e);
          }
          o && ["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function (e) {
            Object.defineProperty(s, e, {
              get: function get() {
                return o[e];
              }
            });
          }), e.exports = {
            w3cwebsocket: o ? s : null,
            version: a
          };
        },
        5735: function _(e, t, r) {
          "use strict";

          e.exports = r(9794).version;
        },
        2337: function _(e, t, r) {
          "use strict";

          var n = r(8184),
            i = r(3604),
            o = r(593),
            a = r(3820),
            s = o("Object.prototype.toString"),
            u = r(1191)(),
            c = "undefined" == typeof globalThis ? r.g : globalThis,
            f = i(),
            d = o("String.prototype.slice"),
            l = {},
            h = Object.getPrototypeOf;
          u && a && h && n(f, function (e) {
            if ("function" == typeof c[e]) {
              var t = new c[e]();
              if (Symbol.toStringTag in t) {
                var r = h(t),
                  n = a(r, Symbol.toStringTag);
                if (!n) {
                  var i = h(r);
                  n = a(i, Symbol.toStringTag);
                }
                l[e] = n.get;
              }
            }
          });
          var p = r(8915);
          e.exports = function (e) {
            return !!p(e) && (u && Symbol.toStringTag in e ? function (e) {
              var t = !1;
              return n(l, function (r, n) {
                if (!t) try {
                  var i = r.call(e);
                  i === n && (t = i);
                } catch (e) {}
              }), t;
            }(e) : d(s(e), 8, -1));
          };
        },
        1357: function _(e, t, r) {
          "use strict";

          var n = r(1296),
            i = r(8419),
            o = r(3103),
            a = r(9122),
            s = r(7321),
            u = "application/json",
            c = function c() {};
          e.exports = function (e, t, r) {
            if (!e || "string" != typeof e) throw new TypeError("must specify a URL");
            if ("function" == typeof t && (r = t, t = {}), r && "function" != typeof r) throw new TypeError("expected cb to be undefined or a function");
            r = r || c;
            var f = (t = t || {}).json ? "json" : "text",
              d = (t = o({
                responseType: f
              }, t)).headers || {},
              l = (t.method || "GET").toUpperCase(),
              h = t.query;
            return h && ("string" != typeof h && (h = n.stringify(h)), e = i(e, h)), "json" === t.responseType && a(d, "Accept", u), t.json && "GET" !== l && "HEAD" !== l && (a(d, "Content-Type", u), t.body = JSON.stringify(t.body)), t.method = l, t.url = e, t.headers = d, delete t.query, delete t.json, s(t, r);
          };
        },
        9122: function _(e) {
          "use strict";

          e.exports = function (e, t, r) {
            var n = t.toLowerCase();
            e[t] || e[n] || (e[t] = r);
          };
        },
        9800: function _(e) {
          "use strict";

          e.exports = function (e, t) {
            return t ? {
              statusCode: t.statusCode,
              headers: t.headers,
              method: e.method,
              url: e.url,
              rawRequest: t.rawRequest ? t.rawRequest : t
            } : null;
          };
        },
        7321: function _(e, t, r) {
          "use strict";

          var n = r(346),
            i = r(9800),
            o = function o() {};
          e.exports = function (e, t) {
            delete e.uri;
            var r = !1;
            "json" === e.responseType && (e.responseType = "text", r = !0);
            var a = n(e, function (n, a, s) {
                if (r && !n) try {
                  var u = a.rawRequest.responseText;
                  s = JSON.parse(u);
                } catch (e) {
                  n = e;
                }
                a = i(e, a), t(n, n ? null : s, a), t = o;
              }),
              s = a.onabort;
            return a.onabort = function () {
              var e = s.apply(a, Array.prototype.slice.call(arguments));
              return t(new Error("XHR Aborted")), t = o, e;
            }, a;
          };
        },
        346: function _(e, t, r) {
          "use strict";

          var n = r(2948),
            i = r(4339),
            o = r(8209),
            a = r(7705);
          function s(e, t, r) {
            var n = e;
            return i(t) ? (r = t, "string" == typeof e && (n = {
              uri: e
            })) : n = a(t, {
              uri: e
            }), n.callback = r, n;
          }
          function u(e, t, r) {
            return c(t = s(e, t, r));
          }
          function c(e) {
            if (void 0 === e.callback) throw new Error("callback argument missing");
            var t = !1,
              r = function r(_r2, n, i) {
                t || (t = !0, e.callback(_r2, n, i));
              };
            function n() {
              var e = void 0;
              if (e = f.response ? f.response : f.responseText || function (e) {
                try {
                  if ("document" === e.responseType) return e.responseXML;
                  var t = e.responseXML && "parsererror" === e.responseXML.documentElement.nodeName;
                  if ("" === e.responseType && !t) return e.responseXML;
                } catch (e) {}
                return null;
              }(f), m) try {
                e = JSON.parse(e);
              } catch (e) {}
              return e;
            }
            function i(e) {
              return clearTimeout(d), e instanceof Error || (e = new Error("" + (e || "Unknown XMLHttpRequest Error"))), e.statusCode = 0, r(e, v);
            }
            function a() {
              if (!c) {
                var t;
                clearTimeout(d), t = e.useXDR && void 0 === f.status ? 200 : 1223 === f.status ? 204 : f.status;
                var i = v,
                  a = null;
                return 0 !== t ? (i = {
                  body: n(),
                  statusCode: t,
                  method: h,
                  headers: {},
                  url: l,
                  rawRequest: f
                }, f.getAllResponseHeaders && (i.headers = o(f.getAllResponseHeaders()))) : a = new Error("Internal XMLHttpRequest Error"), r(a, i, i.body);
              }
            }
            var s,
              c,
              f = e.xhr || null;
            f || (f = e.cors || e.useXDR ? new u.XDomainRequest() : new u.XMLHttpRequest());
            var d,
              l = f.url = e.uri || e.url,
              h = f.method = e.method || "GET",
              p = e.body || e.data,
              b = f.headers = e.headers || {},
              y = !!e.sync,
              m = !1,
              v = {
                body: void 0,
                headers: {},
                statusCode: 0,
                method: h,
                url: l,
                rawRequest: f
              };
            if ("json" in e && !1 !== e.json && (m = !0, b.accept || b.Accept || (b.Accept = "application/json"), "GET" !== h && "HEAD" !== h && (b["content-type"] || b["Content-Type"] || (b["Content-Type"] = "application/json"), p = JSON.stringify(!0 === e.json ? p : e.json))), f.onreadystatechange = function () {
              4 === f.readyState && setTimeout(a, 0);
            }, f.onload = a, f.onerror = i, f.onprogress = function () {}, f.onabort = function () {
              c = !0;
            }, f.ontimeout = i, f.open(h, l, !y, e.username, e.password), y || (f.withCredentials = !!e.withCredentials), !y && e.timeout > 0 && (d = setTimeout(function () {
              if (!c) {
                c = !0, f.abort("timeout");
                var e = new Error("XMLHttpRequest timeout");
                e.code = "ETIMEDOUT", i(e);
              }
            }, e.timeout)), f.setRequestHeader) for (s in b) b.hasOwnProperty(s) && f.setRequestHeader(s, b[s]);else if (e.headers && !function (e) {
              for (var t in e) if (e.hasOwnProperty(t)) return !1;
              return !0;
            }(e.headers)) throw new Error("Headers cannot be set on an XDomainRequest object");
            return "responseType" in e && (f.responseType = e.responseType), "beforeSend" in e && "function" == typeof e.beforeSend && e.beforeSend(f), f.send(p || null), f;
          }
          e.exports = u, e.exports.default = u, u.XMLHttpRequest = n.XMLHttpRequest || function () {}, u.XDomainRequest = "withCredentials" in new u.XMLHttpRequest() ? u.XMLHttpRequest : n.XDomainRequest, function (e, t) {
            for (var r = 0; r < e.length; r++) t(e[r]);
          }(["get", "put", "post", "patch", "head", "delete"], function (e) {
            u["delete" === e ? "del" : e] = function (t, r, n) {
              return (r = s(t, r, n)).method = e.toUpperCase(), c(r);
            };
          });
        },
        7705: function _(e) {
          "use strict";

          e.exports = function () {
            for (var e = {}, r = 0; r < arguments.length; r++) {
              var n = arguments[r];
              for (var i in n) t.call(n, i) && (e[i] = n[i]);
            }
            return e;
          };
          var t = Object.prototype.hasOwnProperty;
        },
        2463: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(6427),
            o = function e(t) {
              this.givenProvider = e.givenProvider, t && t._requestManager && (t = t.currentProvider), "undefined" != typeof document && (this.pick = i.pick), this.setProvider(t);
            };
          o.givenProvider = null, "undefined" != typeof ethereum && ethereum.bzz && (o.givenProvider = ethereum.bzz), o.prototype.setProvider = function (e) {
            if (e && "object" === (0, n.default)(e) && "string" == typeof e.bzz && (e = e.bzz), "string" != typeof e) {
              this.currentProvider = null;
              var t = new Error("No provider set, please set one using bzz.setProvider().");
              return this.download = this.upload = this.isAvailable = function () {
                throw t;
              }, !1;
            }
            return this.currentProvider = e, this.download = i.at(e).download, this.upload = i.at(e).upload, this.isAvailable = i.at(e).isAvailable, !0;
          }, e.exports = o;
        },
        4246: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355));
          e.exports = {
            ErrorResponse: function ErrorResponse(e) {
              var t = e && e.error && e.error.message ? e.error.message : JSON.stringify(e),
                r = e.error && e.error.data ? e.error.data : null,
                n = new Error("Returned error: " + t);
              return n.data = r, n;
            },
            InvalidNumberOfParams: function InvalidNumberOfParams(e, t, r) {
              return new Error('Invalid number of parameters for "' + r + '". Got ' + e + " expected " + t + "!");
            },
            InvalidConnection: function InvalidConnection(e, t) {
              return this.ConnectionError("CONNECTION ERROR: Couldn't connect to node " + e + ".", t);
            },
            InvalidProvider: function InvalidProvider() {
              return new Error("Provider not set or invalid");
            },
            InvalidResponse: function InvalidResponse(e) {
              var t = e && e.error && e.error.message ? e.error.message : "Invalid JSON RPC response: " + JSON.stringify(e);
              return new Error(t);
            },
            ConnectionTimeout: function ConnectionTimeout(e) {
              return new Error("CONNECTION TIMEOUT: timeout of " + e + " ms achived");
            },
            ConnectionNotOpenError: function ConnectionNotOpenError(e) {
              return this.ConnectionError("connection not open on send()", e);
            },
            ConnectionCloseError: function ConnectionCloseError(e) {
              return "object" === (0, n.default)(e) && e.code && e.reason ? this.ConnectionError("CONNECTION ERROR: The connection got closed with the close code `" + e.code + "` and the following reason string `" + e.reason + "`", e) : new Error("CONNECTION ERROR: The connection closed unexpectedly");
            },
            MaxAttemptsReachedOnReconnectingError: function MaxAttemptsReachedOnReconnectingError() {
              return new Error("Maximum number of reconnect attempts reached!");
            },
            PendingRequestsOnReconnectingError: function PendingRequestsOnReconnectingError() {
              return new Error("CONNECTION ERROR: Provider started to reconnect before the response got received!");
            },
            ConnectionError: function ConnectionError(e, t) {
              var r = new Error(e);
              return t && (r.code = t.code, r.reason = t.reason, t.description && (r.description = t.description)), r;
            },
            RevertInstructionError: function RevertInstructionError(e, t) {
              var r = new Error("Your request got reverted with the following reason string: " + e);
              return r.reason = e, r.signature = t, r;
            },
            TransactionRevertInstructionError: function TransactionRevertInstructionError(e, t, r) {
              var n = new Error("Transaction has been reverted by the EVM:\n" + JSON.stringify(r, null, 2));
              return n.reason = e, n.signature = t, n.receipt = r, n;
            },
            TransactionError: function TransactionError(e, t) {
              var r = new Error(e);
              return r.receipt = t, r;
            },
            NoContractAddressFoundError: function NoContractAddressFoundError(e) {
              return this.TransactionError("The transaction receipt didn't contain a contract address.", e);
            },
            ContractCodeNotStoredError: function ContractCodeNotStoredError(e) {
              return this.TransactionError("The contract code couldn't be stored, please check your gas limit.", e);
            },
            TransactionRevertedWithoutReasonError: function TransactionRevertedWithoutReasonError(e) {
              return this.TransactionError("Transaction has been reverted by the EVM:\n" + JSON.stringify(e, null, 2), e);
            },
            TransactionOutOfGasError: function TransactionOutOfGasError(e) {
              return this.TransactionError("Transaction ran out of gas. Please provide more gas:\n" + JSON.stringify(e, null, 2), e);
            },
            ResolverMethodMissingError: function ResolverMethodMissingError(e, t) {
              return new Error("The resolver at " + e + 'does not implement requested method: "' + t + '".');
            },
            ContractMissingABIError: function ContractMissingABIError() {
              return new Error("You must provide the json interface of the contract when instantiating a contract object.");
            },
            ContractOnceRequiresCallbackError: function ContractOnceRequiresCallbackError() {
              return new Error("Once requires a callback as the second parameter.");
            },
            ContractEventDoesNotExistError: function ContractEventDoesNotExistError(e) {
              return new Error('Event "' + e + "\" doesn't exist in this contract.");
            },
            ContractReservedEventError: function ContractReservedEventError(e) {
              return new Error('The event "' + e + "\" is a reserved event name, you can't use it.");
            },
            ContractMissingDeployDataError: function ContractMissingDeployDataError() {
              return new Error('No "data" specified in neither the given options, nor the default options.');
            },
            ContractNoAddressDefinedError: function ContractNoAddressDefinedError() {
              return new Error("This contract object doesn't have address set yet, please set an address first.");
            },
            ContractNoFromAddressDefinedError: function ContractNoFromAddressDefinedError() {
              return new Error('No "from" address specified in neither the given options, nor the default options.');
            }
          };
        },
        2084: function _(e, t, r) {
          "use strict";

          var n = r(8847),
            i = n(r(775)),
            o = n(r(3355));
          function a(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t && (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })), r.push.apply(r, n);
            }
            return r;
          }
          function s(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2 ? a(Object(r), !0).forEach(function (t) {
                (0, i.default)(e, t, r[t]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : a(Object(r)).forEach(function (t) {
                Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
              });
            }
            return e;
          }
          var u = r(8161),
            c = r(6),
            f = function f(e) {
              return u.toBN(e).toString(10);
            },
            d = function d(e) {
              if (void 0 !== e) return function (e) {
                return ["latest", "pending", "earliest", "finalized", "safe"].includes(e);
              }(e) ? e : "genesis" === e ? "0x0" : u.isHexStrict(e) ? "string" == typeof e ? e.toLowerCase() : e : u.numberToHex(e);
            },
            l = function l(e) {
              if (e.to && (e.to = b(e.to)), e.data && e.input) throw new Error('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
              if (!e.data && e.input && (e.data = e.input, delete e.input), e.data && !e.data.startsWith("0x") && (e.data = "0x" + e.data), e.data && !u.isHex(e.data)) throw new Error("The data field must be HEX encoded data.");
              return (e.gas || e.gasLimit) && (e.gas = e.gas || e.gasLimit), (e.maxPriorityFeePerGas || e.maxFeePerGas) && delete e.gasPrice, ["gasPrice", "gas", "value", "maxPriorityFeePerGas", "maxFeePerGas", "nonce", "type"].filter(function (t) {
                return void 0 !== e[t];
              }).forEach(function (t) {
                e[t] = u.numberToHex(e[t]);
              }), e;
            },
            h = function h(e, t) {
              return t || (null !== e.blockNumber && (e.blockNumber = u.hexToNumber(e.blockNumber)), null !== e.transactionIndex && (e.transactionIndex = u.hexToNumber(e.transactionIndex)), e.nonce = u.hexToNumber(e.nonce), e.gas = u.hexToNumber(e.gas), e.type && (e.type = u.hexToNumber(e.type))), e.gasPrice && (e.gasPrice = f(e.gasPrice)), e.maxFeePerGas && (e.maxFeePerGas = f(e.maxFeePerGas)), e.maxPriorityFeePerGas && (e.maxPriorityFeePerGas = f(e.maxPriorityFeePerGas)), e.value = f(e.value), e.to && u.isAddress(e.to) ? e.to = u.toChecksumAddress(e.to) : e.to = null, e.from && (e.from = u.toChecksumAddress(e.from)), e;
            },
            p = function p(e) {
              if ("string" == typeof e.blockHash && "string" == typeof e.transactionHash && "string" == typeof e.logIndex) {
                var t = u.sha3(e.blockHash.replace("0x", "") + e.transactionHash.replace("0x", "") + e.logIndex.replace("0x", ""));
                e.id = "log_" + t.replace("0x", "").slice(0, 8);
              } else e.id || (e.id = null);
              return null !== e.blockNumber && (e.blockNumber = u.hexToNumber(e.blockNumber)), null !== e.transactionIndex && (e.transactionIndex = u.hexToNumber(e.transactionIndex)), null !== e.logIndex && (e.logIndex = u.hexToNumber(e.logIndex)), e.address && (e.address = u.toChecksumAddress(e.address)), e;
            },
            b = function b(e) {
              var t = new c(e);
              if (t.isValid() && t.isDirect()) return t.toAddress().toLowerCase();
              if (u.isAddress(e)) return "0x" + e.toLowerCase().replace("0x", "");
              throw new Error("Provided address ".concat(e, " is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted."));
            };
          e.exports = {
            inputDefaultBlockNumberFormatter: function inputDefaultBlockNumberFormatter(e) {
              return d(this && null == e ? this.defaultBlock : e);
            },
            inputBlockNumberFormatter: d,
            inputCallFormatter: function inputCallFormatter(e) {
              var t = (e = l(e)).from || (this ? this.defaultAccount : null);
              return t && (e.from = b(t)), e;
            },
            inputTransactionFormatter: function inputTransactionFormatter(e) {
              if ("number" != typeof (e = l(e)).from && (!e.from || "object" !== (0, o.default)(e.from))) {
                if (e.from = e.from || (this ? this.defaultAccount : null), !e.from && "number" != typeof e.from) throw new Error('The send transactions "from" field must be defined!');
                e.from = b(e.from);
              }
              return e;
            },
            inputAddressFormatter: b,
            inputPostFormatter: function inputPostFormatter(e) {
              return e.ttl && (e.ttl = u.numberToHex(e.ttl)), e.workToProve && (e.workToProve = u.numberToHex(e.workToProve)), e.priority && (e.priority = u.numberToHex(e.priority)), Array.isArray(e.topics) || (e.topics = e.topics ? [e.topics] : []), e.topics = e.topics.map(function (e) {
                return 0 === e.indexOf("0x") ? e : u.fromUtf8(e);
              }), e;
            },
            inputLogFormatter: function inputLogFormatter(e) {
              var t = function t(e) {
                return null == e ? null : 0 === (e = String(e)).indexOf("0x") ? e : u.fromUtf8(e);
              };
              return void 0 === e && (e = {}), void 0 === e.fromBlock && (e = s(s({}, e), {}, {
                fromBlock: "latest"
              })), (e.fromBlock || 0 === e.fromBlock) && (e.fromBlock = d(e.fromBlock)), (e.toBlock || 0 === e.toBlock) && (e.toBlock = d(e.toBlock)), e.topics = e.topics || [], e.topics = e.topics.map(function (e) {
                return Array.isArray(e) ? e.map(t) : t(e);
              }), t = null, e.address && (e.address = Array.isArray(e.address) ? e.address.map(function (e) {
                return b(e);
              }) : b(e.address)), e;
            },
            inputSignFormatter: function inputSignFormatter(e) {
              return u.isHexStrict(e) ? e : u.utf8ToHex(e);
            },
            inputStorageKeysFormatter: function inputStorageKeysFormatter(e) {
              return e.map(u.numberToHex);
            },
            outputProofFormatter: function outputProofFormatter(e) {
              return e.address = u.toChecksumAddress(e.address), e.nonce = u.hexToNumberString(e.nonce), e.balance = u.hexToNumberString(e.balance), e;
            },
            outputBigNumberFormatter: f,
            outputTransactionFormatter: h,
            outputTransactionReceiptFormatter: function outputTransactionReceiptFormatter(e) {
              if ("object" !== (0, o.default)(e)) throw new Error("Received receipt is invalid: " + e);
              return this.hexFormat || (null !== e.blockNumber && (e.blockNumber = u.hexToNumber(e.blockNumber)), null !== e.transactionIndex && (e.transactionIndex = u.hexToNumber(e.transactionIndex)), e.cumulativeGasUsed = u.hexToNumber(e.cumulativeGasUsed), e.gasUsed = u.hexToNumber(e.gasUsed), e.effectiveGasPrice && (e.effectiveGasPrice = u.hexToNumber(e.effectiveGasPrice))), Array.isArray(e.logs) && (e.logs = e.logs.map(p)), e.contractAddress && (e.contractAddress = u.toChecksumAddress(e.contractAddress)), void 0 !== e.status && null !== e.status && (e.status = Boolean(parseInt(e.status))), e;
            },
            outputBlockFormatter: function outputBlockFormatter(e, t) {
              return t || (e.gasLimit = u.hexToNumber(e.gasLimit), e.gasUsed = u.hexToNumber(e.gasUsed), e.size = u.hexToNumber(e.size), e.timestamp = u.hexToNumber(e.timestamp), null !== e.number && (e.number = u.hexToNumber(e.number))), e.difficulty && (e.difficulty = f(e.difficulty)), e.totalDifficulty && (e.totalDifficulty = f(e.totalDifficulty)), Array.isArray(e.transactions) && e.transactions.forEach(function (e) {
                if ("string" != typeof e) return h(e, t);
              }), e.miner && (e.miner = u.toChecksumAddress(e.miner)), e.baseFeePerGas && (e.baseFeePerGas = u.hexToNumber(e.baseFeePerGas)), e;
            },
            outputLogFormatter: p,
            outputPostFormatter: function outputPostFormatter(e) {
              return e.expiry = u.hexToNumber(e.expiry), e.sent = u.hexToNumber(e.sent), e.ttl = u.hexToNumber(e.ttl), e.workProved = u.hexToNumber(e.workProved), e.topics || (e.topics = []), e.topics = e.topics.map(function (e) {
                return u.toUtf8(e);
              }), e;
            },
            outputSyncingFormatter: function outputSyncingFormatter(e) {
              return e.startingBlock = u.hexToNumber(e.startingBlock), e.currentBlock = u.hexToNumber(e.currentBlock), e.highestBlock = u.hexToNumber(e.highestBlock), e.knownStates && (e.knownStates = u.hexToNumber(e.knownStates), e.pulledStates = u.hexToNumber(e.pulledStates)), e;
            }
          };
        },
        1314: function _(e, t, r) {
          "use strict";

          var n = r(4246),
            i = r(2084);
          e.exports = {
            errors: n,
            formatters: i
          };
        },
        3349: function _(e, t, r) {
          "use strict";

          var n = r(8847),
            i = n(r(2247)),
            o = n(r(4519)),
            a = n(r(775)),
            s = n(r(5698)),
            u = n(r(3355));
          function c(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t && (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })), r.push.apply(r, n);
            }
            return r;
          }
          function f(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2 ? c(Object(r), !0).forEach(function (t) {
                (0, a.default)(e, t, r[t]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : c(Object(r)).forEach(function (t) {
                Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
              });
            }
            return e;
          }
          var d = r(1314).errors,
            l = r(1314).formatters,
            h = r(8161),
            p = r(282),
            b = r(4178).subscriptions,
            y = r(1936),
            m = function m(e) {
              if (!e.call || !e.name) throw new Error('When creating a method you need to provide at least the "name" and "call" property.');
              this.name = e.name, this.call = e.call, this.params = e.params || 0, this.inputFormatter = e.inputFormatter, this.outputFormatter = e.outputFormatter, this.transformPayload = e.transformPayload, this.extraFormatters = e.extraFormatters, this.abiCoder = e.abiCoder, this.requestManager = e.requestManager, this.accounts = e.accounts, this.defaultBlock = e.defaultBlock || "latest", this.defaultAccount = e.defaultAccount || null, this.transactionBlockTimeout = e.transactionBlockTimeout || 50, this.transactionConfirmationBlocks = e.transactionConfirmationBlocks || 24, this.transactionPollingTimeout = e.transactionPollingTimeout || 750, this.transactionPollingInterval = e.transactionPollingInterval || 1e3, this.blockHeaderTimeout = e.blockHeaderTimeout || 10, this.defaultCommon = e.defaultCommon, this.defaultChain = e.defaultChain, this.defaultHardfork = e.defaultHardfork, this.handleRevert = e.handleRevert;
            };
          m.prototype.setRequestManager = function (e, t) {
            this.requestManager = e, t && (this.accounts = t);
          }, m.prototype.createFunction = function (e, t) {
            var r = this.buildCall();
            return Object.defineProperty(r, "call", {
              configurable: !0,
              writable: !0,
              value: this.call
            }), this.setRequestManager(e || this.requestManager, t || this.accounts), r;
          }, m.prototype.attachToObject = function (e) {
            var t = this.buildCall();
            Object.defineProperty(t, "call", {
              configurable: !0,
              writable: !0,
              value: this.call
            });
            var r = this.name.split(".");
            r.length > 1 ? (e[r[0]] = e[r[0]] || {}, e[r[0]][r[1]] = t) : e[r[0]] = t;
          }, m.prototype.getCall = function (e) {
            return "function" == typeof this.call ? this.call(e) : this.call;
          }, m.prototype.extractCallback = function (e) {
            if ("function" == typeof e[e.length - 1]) return e.pop();
          }, m.prototype.validateArgs = function (e) {
            if (e.length !== this.params) throw d.InvalidNumberOfParams(e.length, this.params, this.name);
          }, m.prototype.formatInput = function (e) {
            var t = this;
            return this.inputFormatter ? this.inputFormatter.map(function (r, n) {
              return r ? r.call(t, e[n]) : e[n];
            }) : e;
          }, m.prototype.formatOutput = function (e) {
            var t = this;
            return Array.isArray(e) ? e.map(function (e) {
              return t.outputFormatter && e ? t.outputFormatter(e, null == this ? void 0 : this.hexFormat) : e;
            }) : this.outputFormatter && e ? this.outputFormatter(e, null == this ? void 0 : this.hexFormat) : e;
          }, m.prototype.toPayload = function (e) {
            var t = this.getCall(e),
              r = this.extractCallback(e),
              n = this.formatInput(e);
            this.validateArgs(n);
            var i = {
              method: t,
              params: n,
              callback: r
            };
            return this.transformPayload && (i = this.transformPayload(i)), i;
          }, m.prototype._confirmTransaction = function (e, t, r) {
            var n = this,
              o = !1,
              a = !0,
              c = 0,
              f = 0,
              v = null,
              g = null,
              w = null,
              A = r.params[0] && "object" === (0, u.default)(r.params[0]) && r.params[0].gas ? r.params[0].gas : null,
              k = !!r.params[0] && "object" === (0, u.default)(r.params[0]) && r.params[0].data && r.params[0].from && !r.params[0].to,
              _ = k && r.params[0].data.length > 2,
              S = [new m({
                name: "getBlockByNumber",
                call: "eth_getBlockByNumber",
                params: 2,
                inputFormatter: [l.inputBlockNumberFormatter, function (e) {
                  return !!e;
                }],
                outputFormatter: l.outputBlockFormatter
              }), new m({
                name: "getTransactionReceipt",
                call: "eth_getTransactionReceipt",
                params: 1,
                inputFormatter: [null],
                outputFormatter: l.outputTransactionReceiptFormatter
              }), new m({
                name: "getCode",
                call: "eth_getCode",
                params: 2,
                inputFormatter: [l.inputAddressFormatter, l.inputDefaultBlockNumberFormatter]
              }), new m({
                name: "getTransactionByHash",
                call: "eth_getTransactionByHash",
                params: 1,
                inputFormatter: [null],
                outputFormatter: l.outputTransactionFormatter
              }), new b({
                name: "subscribe",
                type: "eth",
                subscriptions: {
                  newBlockHeaders: {
                    subscriptionName: "newHeads",
                    params: 0,
                    outputFormatter: l.outputBlockFormatter
                  }
                }
              })],
              E = {};
            S.forEach(function (e) {
              e.attachToObject(E), e.requestManager = n.requestManager;
            });
            var x = function x(u, b, m, S, _x) {
                if (!m) return _x || (_x = {
                  unsubscribe: function unsubscribe() {
                    clearInterval(v), clearTimeout(g);
                  }
                }), (u ? p.resolve(u) : E.getTransactionReceipt(t)).catch(function (t) {
                  _x.unsubscribe(), o = !0, h._fireError({
                    message: "Failed to check for transaction receipt:",
                    data: t
                  }, e.eventEmitter, e.reject);
                }).then(function () {
                  var t = (0, s.default)(i.default.mark(function t(r) {
                    var o, s, c;
                    return i.default.wrap(function (t) {
                      for (;;) switch (t.prev = t.next) {
                        case 0:
                          if (r && r.blockHash) {
                            t.next = 2;
                            break;
                          }
                          throw new Error("Receipt missing or blockHash null");
                        case 2:
                          if (n.extraFormatters && n.extraFormatters.receiptFormatter && (r = n.extraFormatters.receiptFormatter(r)), !(e.eventEmitter.listeners("confirmation").length > 0)) {
                            t.next = 28;
                            break;
                          }
                          if (void 0 !== u && 0 === f) {
                            t.next = 25;
                            break;
                          }
                          return t.next = 7, E.getBlockByNumber("latest");
                        case 7:
                          if (s = t.sent, c = s ? s.hash : null, !b) {
                            t.next = 24;
                            break;
                          }
                          if (!w) {
                            t.next = 17;
                            break;
                          }
                          return t.next = 13, E.getBlockByNumber(w.number + 1);
                        case 13:
                          (o = t.sent) && (w = o, e.eventEmitter.emit("confirmation", f, r, c)), t.next = 22;
                          break;
                        case 17:
                          return t.next = 19, E.getBlockByNumber(r.blockNumber);
                        case 19:
                          o = t.sent, w = o, e.eventEmitter.emit("confirmation", f, r, c);
                        case 22:
                          t.next = 25;
                          break;
                        case 24:
                          e.eventEmitter.emit("confirmation", f, r, c);
                        case 25:
                          (b && o || !b) && f++, a = !1, f === n.transactionConfirmationBlocks + 1 && (_x.unsubscribe(), e.eventEmitter.removeAllListeners());
                        case 28:
                          return t.abrupt("return", r);
                        case 29:
                        case "end":
                          return t.stop();
                      }
                    }, t);
                  }));
                  return function (e) {
                    return t.apply(this, arguments);
                  };
                }()).then(function () {
                  var t = (0, s.default)(i.default.mark(function t(r) {
                    var s;
                    return i.default.wrap(function (t) {
                      for (;;) switch (t.prev = t.next) {
                        case 0:
                          if (!k || o) {
                            t.next = 19;
                            break;
                          }
                          if (r.contractAddress) {
                            t.next = 5;
                            break;
                          }
                          return a && (_x.unsubscribe(), o = !0), h._fireError(d.NoContractAddressFoundError(r), e.eventEmitter, e.reject, null, r), t.abrupt("return");
                        case 5:
                          return t.prev = 5, t.next = 8, E.getCode(r.contractAddress);
                        case 8:
                          s = t.sent, t.next = 13;
                          break;
                        case 11:
                          t.prev = 11, t.t0 = t.catch(5);
                        case 13:
                          if (s) {
                            t.next = 15;
                            break;
                          }
                          return t.abrupt("return");
                        case 15:
                          !0 === r.status && _ || s.length > 2 ? (e.eventEmitter.emit("receipt", r), n.extraFormatters && n.extraFormatters.contractDeployFormatter ? e.resolve(n.extraFormatters.contractDeployFormatter(r)) : e.resolve(r), a && e.eventEmitter.removeAllListeners()) : h._fireError(d.ContractCodeNotStoredError(r), e.eventEmitter, e.reject, null, r), a && _x.unsubscribe(), o = !0;
                        case 19:
                          return t.abrupt("return", r);
                        case 20:
                        case "end":
                          return t.stop();
                      }
                    }, t, null, [[5, 11]]);
                  }));
                  return function (e) {
                    return t.apply(this, arguments);
                  };
                }()).then(function () {
                  var t = (0, s.default)(i.default.mark(function t(s) {
                    var u, c, f, p;
                    return i.default.wrap(function (t) {
                      for (;;) switch (t.prev = t.next) {
                        case 0:
                          if (k || o) {
                            t.next = 35;
                            break;
                          }
                          if (s.outOfGas || A && A === s.gasUsed || !0 !== s.status && "0x1" !== s.status && void 0 !== s.status) {
                            t.next = 7;
                            break;
                          }
                          e.eventEmitter.emit("receipt", s), e.resolve(s), a && e.eventEmitter.removeAllListeners(), t.next = 33;
                          break;
                        case 7:
                          if (JSON.stringify(s, null, 2), !1 !== s.status && "0x0" !== s.status) {
                            t.next = 32;
                            break;
                          }
                          if (t.prev = 9, u = null, !n.handleRevert || "eth_sendTransaction" !== n.call && "eth_sendRawTransaction" !== n.call) {
                            t.next = 24;
                            break;
                          }
                          return c = r.params[0], "eth_sendRawTransaction" === n.call && (f = r.params[0], p = y.parse(f), c = l.inputTransactionFormatter({
                            data: p.data,
                            to: p.to,
                            from: p.from,
                            gas: p.gasLimit.toHexString(),
                            gasPrice: p.gasPrice ? p.gasPrice.toHexString() : void 0,
                            value: p.value.toHexString()
                          })), t.next = 16, n.getRevertReason(c, s.blockNumber);
                        case 16:
                          if (!(u = t.sent)) {
                            t.next = 21;
                            break;
                          }
                          h._fireError(d.TransactionRevertInstructionError(u.reason, u.signature, s), e.eventEmitter, e.reject, null, s), t.next = 22;
                          break;
                        case 21:
                          throw !1;
                        case 22:
                          t.next = 25;
                          break;
                        case 24:
                          throw !1;
                        case 25:
                          t.next = 30;
                          break;
                        case 27:
                          t.prev = 27, t.t0 = t.catch(9), h._fireError(d.TransactionRevertedWithoutReasonError(s), e.eventEmitter, e.reject, null, s);
                        case 30:
                          t.next = 33;
                          break;
                        case 32:
                          h._fireError(d.TransactionOutOfGasError(s), e.eventEmitter, e.reject, null, s);
                        case 33:
                          a && _x.unsubscribe(), o = !0;
                        case 35:
                        case "end":
                          return t.stop();
                      }
                    }, t, null, [[9, 27]]);
                  }));
                  return function (e) {
                    return t.apply(this, arguments);
                  };
                }()).catch(function () {
                  c++, b ? c - 1 >= n.transactionPollingTimeout && (_x.unsubscribe(), o = !0, h._fireError(d.TransactionError("Transaction was not mined within " + n.transactionPollingTimeout + " seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!"), e.eventEmitter, e.reject)) : c - 1 >= n.transactionBlockTimeout && (_x.unsubscribe(), o = !0, h._fireError(d.TransactionError("Transaction was not mined within " + n.transactionBlockTimeout + " blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!"), e.eventEmitter, e.reject));
                });
                _x.unsubscribe(), o = !0, h._fireError({
                  message: "Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.",
                  data: m
                }, e.eventEmitter, e.reject);
              },
              P = function (e) {
                var t = !1,
                  r = function r() {
                    v = setInterval(x.bind(null, e, !0), n.transactionPollingInterval);
                  };
                if (!this.requestManager.provider.on) return r();
                E.subscribe("newBlockHeaders", function (n, i, o) {
                  if (t = !0, n || !i) return r();
                  x(e, !1, n, 0, o);
                }), g = setTimeout(function () {
                  t || r();
                }, 1e3 * this.blockHeaderTimeout);
              }.bind(this);
            E.getTransactionReceipt(t).then(function (t) {
              t && t.blockHash ? (e.eventEmitter.listeners("confirmation").length > 0 && P(t), x(t, !1)) : o || P();
            }).catch(function () {
              o || P();
            });
          };
          var v = function v(e, t) {
            return "number" == typeof e ? t.wallet[e] : e && "object" === (0, u.default)(e) && e.address && e.privateKey ? e : t.wallet[e.toLowerCase()];
          };
          m.prototype.buildCall = function () {
            var e = this,
              t = "eth_sendTransaction" === e.call || "eth_sendRawTransaction" === e.call,
              r = "eth_call" === e.call,
              n = function n() {
                var n = Array.prototype.slice.call(arguments),
                  i = p(!t),
                  a = e.toPayload(n);
                e.hexFormat = !1, "eth_getTransactionReceipt" !== e.call && "eth_getTransactionByHash" !== e.call && "getBlock" !== e.name || (e.hexFormat = a.params.length < n.length && "hex" === n[n.length - 1]);
                var s = function s(n, o) {
                    if (e.handleRevert && r && e.abiCoder) {
                      var s;
                      if (!n && e.isRevertReasonString(o)) s = o.substring(10);else if (n && n.data) {
                        var c;
                        s = "object" === (0, u.default)(n.data) ? (null !== (c = n.data.originalError) && void 0 !== c ? c : n.data).data.substring(10) : n.data.substring(10);
                      }
                      if (s) {
                        var f = e.abiCoder.decodeParameter("string", "0x" + s),
                          l = "Error(String)";
                        return void h._fireError(d.RevertInstructionError(f, l), i.eventEmitter, i.reject, a.callback, {
                          reason: f,
                          signature: l
                        });
                      }
                    }
                    try {
                      o = e.formatOutput(o);
                    } catch (e) {
                      n = e;
                    }
                    if (o instanceof Error && (n = o), n) return n.error && (n = n.error), h._fireError(n, i.eventEmitter, i.reject, a.callback);
                    a.callback && a.callback(null, o), t ? (i.eventEmitter.emit("transactionHash", o), e._confirmTransaction(i, o, a)) : n || i.resolve(o);
                  },
                  c = function c(t) {
                    var r = f(f({}, a), {}, {
                      method: "eth_sendRawTransaction",
                      params: [t.rawTransaction]
                    });
                    e.requestManager.send(r, s);
                  },
                  l = function l(e, t) {
                    var r;
                    if (t && t.accounts && t.accounts.wallet && t.accounts.wallet.length) if ("eth_sendTransaction" === e.method) {
                      var n = e.params[0];
                      if ((r = v(n && "object" === (0, u.default)(n) ? n.from : null, t.accounts)) && r.privateKey) return delete (n = JSON.parse(JSON.stringify(n))).from, t.defaultChain && !n.chain && (n.chain = t.defaultChain), t.defaultHardfork && !n.hardfork && (n.hardfork = t.defaultHardfork), t.defaultCommon && !n.common && (n.common = t.defaultCommon), void t.accounts.signTransaction(n, r.privateKey).then(c).catch(function (e) {
                        if ("function" == typeof i.eventEmitter.listeners && i.eventEmitter.listeners("error").length) {
                          try {
                            i.eventEmitter.emit("error", e);
                          } catch (e) {}
                          i.eventEmitter.removeAllListeners(), i.eventEmitter.catch(function () {});
                        }
                        i.reject(e);
                      });
                    } else if ("eth_sign" === e.method) {
                      var o = e.params[1];
                      if ((r = v(e.params[0], t.accounts)) && r.privateKey) {
                        var a = t.accounts.sign(o, r.privateKey);
                        return e.callback && e.callback(null, a.signature), void i.resolve(a.signature);
                      }
                    }
                    return t.requestManager.send(e, s);
                  },
                  b = t && !!a.params[0] && "object" === (0, u.default)(a.params[0]);
                return b && "0x1" === a.params[0].type && void 0 === a.params[0].accessList && (a.params[0].accessList = []), !b || void 0 !== a.params[0].gasPrice || void 0 !== a.params[0].maxPriorityFeePerGas && void 0 !== a.params[0].maxFeePerGas ? (t && setTimeout(function () {
                  i.eventEmitter.emit("sending", a);
                }, 0), l(a, e)) : function (e, t) {
                  return new Promise(function (r, n) {
                    try {
                      var i = new m({
                          name: "getBlockByNumber",
                          call: "eth_getBlockByNumber",
                          params: 2,
                          inputFormatter: [function (e) {
                            return e ? h.toHex(e) : "latest";
                          }, function () {
                            return !1;
                          }]
                        }).createFunction(e.requestManager),
                        a = new m({
                          name: "getGasPrice",
                          call: "eth_gasPrice",
                          params: 0
                        }).createFunction(e.requestManager);
                      Promise.all([i(), a()]).then(function (e) {
                        var n = (0, o.default)(e, 2),
                          i = n[0],
                          a = n[1];
                        if (("0x2" === t.type || void 0 === t.type) && i && i.baseFeePerGas) {
                          var s, u;
                          t.gasPrice ? (s = t.gasPrice, u = t.gasPrice, delete t.gasPrice) : (s = t.maxPriorityFeePerGas || "0x9502F900", u = t.maxFeePerGas || h.toHex(h.toBN(i.baseFeePerGas).mul(h.toBN(2)).add(h.toBN(s)))), r({
                            maxFeePerGas: u,
                            maxPriorityFeePerGas: s
                          });
                        } else {
                          if (t.maxPriorityFeePerGas || t.maxFeePerGas) throw Error("Network doesn't support eip-1559");
                          r({
                            gasPrice: a
                          });
                        }
                      });
                    } catch (e) {
                      n(e);
                    }
                  });
                }(e, a.params[0]).then(function (r) {
                  void 0 !== r.gasPrice ? a.params[0].gasPrice = r.gasPrice : void 0 !== r.maxPriorityFeePerGas && void 0 !== r.maxFeePerGas && (a.params[0].maxPriorityFeePerGas = r.maxPriorityFeePerGas, a.params[0].maxFeePerGas = r.maxFeePerGas), t && setTimeout(function () {
                    i.eventEmitter.emit("sending", a);
                  }, 0), l(a, e);
                }), t && setTimeout(function () {
                  i.eventEmitter.emit("sent", a);
                }, 0), i.eventEmitter;
              };
            return n.method = e, n.request = this.request.bind(this), n;
          }, m.prototype.getRevertReason = function (e, t) {
            var r = this;
            return new Promise(function (n, i) {
              new m({
                name: "call",
                call: "eth_call",
                params: 2,
                abiCoder: r.abiCoder,
                handleRevert: !0
              }).createFunction(r.requestManager)(e, h.numberToHex(t)).then(function () {
                n(!1);
              }).catch(function (e) {
                e.reason ? n({
                  reason: e.reason,
                  signature: e.signature
                }) : i(e);
              });
            });
          }, m.prototype.isRevertReasonString = function (e) {
            return "string" == typeof e && (e.length - 2) / 2 % 32 == 4 && "0x08c379a0" === e.substring(0, 10);
          }, m.prototype.request = function () {
            var e = this.toPayload(Array.prototype.slice.call(arguments));
            return e.format = this.formatOutput.bind(this), e;
          }, e.exports = m;
        },
        282: function _(e, t, r) {
          "use strict";

          var n = r(8008),
            i = function i(e) {
              var t,
                r,
                i = new Promise(function () {
                  t = arguments[0], r = arguments[1];
                });
              if (e) return {
                resolve: t,
                reject: r,
                eventEmitter: i
              };
              var o = new n();
              return i._events = o._events, i.emit = o.emit, i.on = o.on, i.once = o.once, i.off = o.off, i.listeners = o.listeners, i.addListener = o.addListener, i.removeListener = o.removeListener, i.removeAllListeners = o.removeAllListeners, {
                resolve: t,
                reject: r,
                eventEmitter: i
              };
            };
          i.resolve = function (e) {
            var t = i(!0);
            return t.resolve(e), t.eventEmitter;
          }, e.exports = i;
        },
        5229: function _(e, t, r) {
          "use strict";

          var n = r(8155),
            i = r(1314).errors,
            o = function o(e) {
              this.requestManager = e, this.requests = [];
            };
          o.prototype.add = function (e) {
            this.requests.push(e);
          }, o.prototype.execute = function () {
            var e = this.requests,
              t = this._sortResponses.bind(this);
            this.requestManager.sendBatch(e, function (r, o) {
              o = t(o), e.map(function (e, t) {
                return o[t] || {};
              }).forEach(function (t, r) {
                if (e[r].callback) {
                  if (t && t.error) return e[r].callback(i.ErrorResponse(t));
                  if (!n.isValidResponse(t)) return e[r].callback(i.InvalidResponse(t));
                  try {
                    e[r].callback(null, e[r].format ? e[r].format(t.result) : t.result);
                  } catch (t) {
                    e[r].callback(t);
                  }
                }
              });
            });
          }, o.prototype._sortResponses = function (e) {
            return (e || []).sort(function (e, t) {
              return e.id - t.id;
            });
          }, e.exports = o;
        },
        9764: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = null,
            o = "object" === ("undefined" == typeof globalThis ? "undefined" : (0, n.default)(globalThis)) ? globalThis : void 0;
          if (!o) try {
            o = Function("return this")();
          } catch (e) {
            o = self;
          }
          void 0 !== o.ethereum ? i = o.ethereum : void 0 !== o.web3 && o.web3.currentProvider && (o.web3.currentProvider.sendAsync && (o.web3.currentProvider.send = o.web3.currentProvider.sendAsync, delete o.web3.currentProvider.sendAsync), !o.web3.currentProvider.on && o.web3.currentProvider.connection && "ipcProviderWrapper" === o.web3.currentProvider.connection.constructor.name && (o.web3.currentProvider.on = function (e, t) {
            if ("function" != typeof t) throw new Error("The second parameter callback must be a function.");
            "data" === e ? this.connection.on("data", function (e) {
              var r = "";
              e = e.toString();
              try {
                r = JSON.parse(e);
              } catch (r) {
                return t(new Error("Couldn't parse response data" + e));
              }
              r.id || -1 === r.method.indexOf("_subscription") || t(null, r);
            }) : this.connection.on(e, t);
          }), i = o.web3.currentProvider), e.exports = i;
        },
        2033: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(5058).callbackify,
            o = r(1314).errors,
            a = r(8155),
            s = r(5229),
            u = r(9764),
            c = function e(t, r) {
              this.provider = null, this.providers = e.providers, this.setProvider(t, r), this.subscriptions = new Map();
            };
          c.givenProvider = u, c.providers = {
            WebsocketProvider: r(7651),
            HttpProvider: r(4565),
            IpcProvider: r(2683)
          }, c.prototype.setProvider = function (e, t) {
            var r = this;
            if (e && "string" == typeof e && this.providers) if (/^http(s)?:\/\//i.test(e)) e = new this.providers.HttpProvider(e);else if (/^ws(s)?:\/\//i.test(e)) e = new this.providers.WebsocketProvider(e);else if (e && "object" === (0, n.default)(t) && "function" == typeof t.connect) e = new this.providers.IpcProvider(e, t);else if (e) throw new Error("Can't autodetect provider for \"" + e + '"');
            this.provider && this.provider.connected && this.clearSubscriptions(), this.provider = e || null, this.provider && this.provider.on && ("function" == typeof e.request ? this.provider.on("message", function (e) {
              if (e && "eth_subscription" === e.type && e.data) {
                var t = e.data;
                t.subscription && r.subscriptions.has(t.subscription) && r.subscriptions.get(t.subscription).callback(null, t.result);
              }
            }) : this.provider.on("data", function (e, t) {
              (e = e || t).method && e.params && e.params.subscription && r.subscriptions.has(e.params.subscription) && r.subscriptions.get(e.params.subscription).callback(null, e.params.result);
            }), this.provider.on("connect", function () {
              r.subscriptions.forEach(function (e) {
                e.subscription.resubscribe();
              });
            }), this.provider.on("error", function (e) {
              r.subscriptions.forEach(function (t) {
                t.callback(e);
              });
            }), this.provider.on("disconnect", function (e) {
              r._isCleanCloseEvent(e) && !r._isIpcCloseError(e) || (r.subscriptions.forEach(function (t) {
                t.callback(o.ConnectionCloseError(e)), r.subscriptions.delete(t.subscription.id);
              }), r.provider && r.provider.emit && r.provider.emit("error", o.ConnectionCloseError(e))), r.provider && r.provider.emit && r.provider.emit("end", e);
            }));
          }, c.prototype.send = function (e, t) {
            if (t = t || function () {}, !this.provider) return t(o.InvalidProvider());
            var r = e.method,
              n = e.params,
              s = a.toPayload(r, n),
              u = this._jsonrpcResultCallback(t, s);
            if (this.provider.request) i(this.provider.request.bind(this.provider))({
              method: r,
              params: n
            }, t);else if (this.provider.sendAsync) this.provider.sendAsync(s, u);else {
              if (!this.provider.send) throw new Error("Provider does not have a request or send method to use.");
              this.provider.send(s, u);
            }
          }, c.prototype.sendBatch = function (e, t) {
            if (!this.provider) return t(o.InvalidProvider());
            var r = a.toBatchPayload(e);
            this.provider[this.provider.sendAsync ? "sendAsync" : "send"](r, function (e, r) {
              return e ? t(e) : Array.isArray(r) ? void t(null, r) : t(o.InvalidResponse(r));
            });
          }, c.prototype.addSubscription = function (e, t) {
            if (!this.provider.on) throw new Error("The provider doesn't support subscriptions: " + this.provider.constructor.name);
            this.subscriptions.set(e.id, {
              callback: t,
              subscription: e
            });
          }, c.prototype.removeSubscription = function (e, t) {
            if (this.subscriptions.has(e)) {
              var r = this.subscriptions.get(e).subscription.options.type;
              return this.subscriptions.delete(e), void this.send({
                method: r + "_unsubscribe",
                params: [e]
              }, t);
            }
            "function" == typeof t && t(null);
          }, c.prototype.clearSubscriptions = function (e) {
            try {
              var t = this;
              return this.subscriptions.size > 0 && this.subscriptions.forEach(function (r, n) {
                e && "syncing" === r.name || t.removeSubscription(n);
              }), this.provider.reset && this.provider.reset(), !0;
            } catch (e) {
              throw new Error("Error while clearing subscriptions: ".concat(e));
            }
          }, c.prototype._isCleanCloseEvent = function (e) {
            return "object" === (0, n.default)(e) && ([1e3].includes(e.code) || !0 === e.wasClean);
          }, c.prototype._isIpcCloseError = function (e) {
            return "boolean" == typeof e && e;
          }, c.prototype._jsonrpcResultCallback = function (e, t) {
            return function (r, n) {
              return n && n.id && t.id !== n.id ? e(new Error("Wrong response id ".concat(n.id, " (expected: ").concat(t.id, ") in ").concat(JSON.stringify(t)))) : r ? e(r) : n && n.error ? e(o.ErrorResponse(n)) : a.isValidResponse(n) ? void e(null, n.result) : e(o.InvalidResponse(n));
            };
          }, e.exports = {
            Manager: c,
            BatchManager: s
          };
        },
        8155: function _(e) {
          "use strict";

          var t = {
            messageId: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),
            toPayload: function toPayload(e, r) {
              if (!e) throw new Error('JSONRPC method should be specified for params: "' + JSON.stringify(r) + '"!');
              return t.messageId === Number.MAX_SAFE_INTEGER ? t.messageId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER) : t.messageId++, {
                jsonrpc: "2.0",
                id: t.messageId,
                method: e,
                params: r || []
              };
            },
            isValidResponse: function isValidResponse(e) {
              return Array.isArray(e) ? e.every(t) : t(e);
              function t(e) {
                return !(!e || e.error || "2.0" !== e.jsonrpc || "number" != typeof e.id && "string" != typeof e.id || void 0 === e.result);
              }
            },
            toBatchPayload: function toBatchPayload(e) {
              return e.map(function (e) {
                return t.toPayload(e.method, e.params);
              });
            }
          };
          e.exports = t;
        },
        4178: function _(e, t, r) {
          "use strict";

          var n = r(2929),
            i = function i(e) {
              this.name = e.name, this.type = e.type, this.subscriptions = e.subscriptions || {}, this.requestManager = null;
            };
          i.prototype.setRequestManager = function (e) {
            this.requestManager = e;
          }, i.prototype.attachToObject = function (e) {
            var t = this.buildCall(),
              r = this.name.split(".");
            r.length > 1 ? (e[r[0]] = e[r[0]] || {}, e[r[0]][r[1]] = t) : e[r[0]] = t;
          }, i.prototype.buildCall = function () {
            var e = this;
            return function () {
              e.subscriptions[arguments[0]] || console.warn("Subscription " + JSON.stringify(arguments[0]) + " doesn't exist. Subscribing anyway.");
              var t = new n({
                subscription: e.subscriptions[arguments[0]] || {},
                requestManager: e.requestManager,
                type: e.type
              });
              return t.subscribe.apply(t, arguments);
            };
          }, e.exports = {
            subscriptions: i,
            subscription: n
          };
        },
        2929: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(1314).errors,
            o = r(8008),
            a = r(1314).formatters;
          function s(e) {
            return e;
          }
          function u(e) {
            o.call(this), this.id = null, this.callback = s, this.arguments = null, this.lastBlock = null, this.options = {
              subscription: e.subscription,
              type: e.type,
              requestManager: e.requestManager
            };
          }
          u.prototype = Object.create(o.prototype), u.prototype.constructor = u, u.prototype._extractCallback = function (e) {
            if ("function" == typeof e[e.length - 1]) return e.pop();
          }, u.prototype._validateArgs = function (e) {
            var t = this.options.subscription;
            if (t || (t = {}), t.params || (t.params = 0), e.length !== t.params) throw i.InvalidNumberOfParams(e.length, t.params, t.subscriptionName);
          }, u.prototype._formatInput = function (e) {
            var t = this.options.subscription;
            return t && t.inputFormatter ? t.inputFormatter.map(function (t, r) {
              return t ? t(e[r]) : e[r];
            }) : e;
          }, u.prototype._formatOutput = function (e) {
            var t = this.options.subscription;
            return t && t.outputFormatter && e ? t.outputFormatter(e) : e;
          }, u.prototype._toPayload = function (e) {
            var t = [];
            if (this.callback = this._extractCallback(e) || s, this.subscriptionMethod || (this.subscriptionMethod = e.shift(), this.options.subscription.subscriptionName && (this.subscriptionMethod = this.options.subscription.subscriptionName)), this.arguments || (this.arguments = this._formatInput(e), this._validateArgs(this.arguments), e = []), t.push(this.subscriptionMethod), t = t.concat(this.arguments), e.length) throw new Error("Only a callback is allowed as parameter on an already instantiated subscription.");
            return {
              method: this.options.type + "_subscribe",
              params: t
            };
          }, u.prototype.unsubscribe = function (e) {
            this.options.requestManager.removeSubscription(this.id, e), this.id = null, this.lastBlock = null, this.removeAllListeners();
          }, u.prototype.subscribe = function () {
            var e = this,
              t = Array.prototype.slice.call(arguments),
              r = this._toPayload(t);
            if (!r) return this;
            if (!this.options.requestManager.provider) return setTimeout(function () {
              var t = new Error("No provider set.");
              e.callback(t, null, e), e.emit("error", t);
            }, 0), this;
            if (!this.options.requestManager.provider.on) return setTimeout(function () {
              var t = new Error("The current provider doesn't support subscriptions: " + e.options.requestManager.provider.constructor.name);
              e.callback(t, null, e), e.emit("error", t);
            }, 0), this;
            if (this.lastBlock && this.options.params && "object" === (0, n.default)(this.options.params) && (r.params[1] = this.options.params, r.params[1].fromBlock = a.inputBlockNumberFormatter(this.lastBlock + 1)), this.id && this.unsubscribe(), this.options.params = r.params[1], "logs" === r.params[0] && r.params[1] && "object" === (0, n.default)(r.params[1]) && r.params[1].hasOwnProperty("fromBlock") && isFinite(r.params[1].fromBlock)) {
              var i = Object.assign({}, r.params[1]);
              this.options.requestManager.send({
                method: "eth_getLogs",
                params: [i]
              }, function (t, r) {
                t ? setTimeout(function () {
                  e.callback(t, null, e), e.emit("error", t);
                }, 0) : r.forEach(function (t) {
                  var r = e._formatOutput(t);
                  e.callback(null, r, e), e.emit("data", r);
                });
              });
            }
            return "object" === (0, n.default)(r.params[1]) && delete r.params[1].fromBlock, this.options.requestManager.send(r, function (t, i) {
              !t && i ? (e.id = i, e.method = r.params[0], e.options.requestManager.addSubscription(e, function (t, r) {
                t ? (e.callback(t, !1, e), e.emit("error", t)) : (Array.isArray(r) || (r = [r]), r.forEach(function (t) {
                  var r = e._formatOutput(t);
                  if (e.lastBlock = r && "object" === (0, n.default)(r) ? r.blockNumber : null, "function" == typeof e.options.subscription.subscriptionHandler) return e.options.subscription.subscriptionHandler.call(e, r);
                  e.emit("data", r), e.callback(null, r, e);
                }));
              }), e.emit("connected", i)) : setTimeout(function () {
                e.callback(t, !1, e), e.emit("error", t);
              }, 0);
            }), this;
          }, u.prototype.resubscribe = function () {
            this.options.requestManager.removeSubscription(this.id), this.id = null, this.subscribe(this.callback);
          }, e.exports = u;
        },
        9907: function _(e, t, r) {
          "use strict";

          var n = r(1314).formatters,
            i = r(3349),
            o = r(8161);
          e.exports = function (e) {
            var t = function t(_t3) {
              var r;
              return _t3.property ? (e[_t3.property] || (e[_t3.property] = {}), r = e[_t3.property]) : r = e, _t3.methods && _t3.methods.forEach(function (t) {
                t instanceof i || (t = new i(t)), t.attachToObject(r), t.setRequestManager(e._requestManager);
              }), e;
            };
            return t.formatters = n, t.utils = o, t.Method = i, t;
          };
        },
        606: function _(e, t, r) {
          "use strict";

          var n = r(2033),
            i = r(9907);
          e.exports = {
            packageInit: function packageInit(e, t) {
              if (t = Array.prototype.slice.call(t), !e) throw new Error('You need to instantiate using the "new" keyword.');
              Object.defineProperty(e, "currentProvider", {
                get: function get() {
                  return e._provider;
                },
                set: function set(t) {
                  return e.setProvider(t);
                },
                enumerable: !0,
                configurable: !0
              }), t[0] && t[0]._requestManager ? e._requestManager = t[0]._requestManager : e._requestManager = new n.Manager(t[0], t[1]), e.givenProvider = n.Manager.givenProvider, e.providers = n.Manager.providers, e._provider = e._requestManager.provider, e.setProvider || (e.setProvider = function (t, r) {
                return e._requestManager.setProvider(t, r), e._provider = e._requestManager.provider, !0;
              }), e.setRequestManager = function (t) {
                e._requestManager = t, e._provider = t.provider;
              }, e.BatchRequest = n.BatchManager.bind(null, e._requestManager), e.extend = i(e);
            },
            addProviders: function addProviders(e) {
              e.givenProvider = n.Manager.givenProvider, e.providers = n.Manager.providers;
            }
          };
        },
        9901: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(9033).Buffer,
            o = r(8161),
            a = r(2914).RQ,
            s = r(2914)._R,
            u = new a(function (e, t) {
              return !e.match(/^u?int/) || Array.isArray(t) || t && "object" === (0, n.default)(t) && "BN" === t.constructor.name ? t : t.toString();
            });
          function c() {}
          var f = function f() {};
          f.prototype.encodeFunctionSignature = function (e) {
            return ("function" == typeof e || "object" === (0, n.default)(e) && e) && (e = o._jsonInterfaceMethodToString(e)), o.sha3(e).slice(0, 10);
          }, f.prototype.encodeEventSignature = function (e) {
            return ("function" == typeof e || "object" === (0, n.default)(e) && e) && (e = o._jsonInterfaceMethodToString(e)), o.sha3(e);
          }, f.prototype.encodeParameter = function (e, t) {
            return this.encodeParameters([e], [t]);
          }, f.prototype.encodeParameters = function (e, t) {
            var r = this;
            return e = r.mapTypes(e), t = t.map(function (t, i) {
              var o = e[i];
              return "object" === (0, n.default)(o) && o.type && (o = o.type), t = r.formatParam(o, t), "string" == typeof o && o.includes("tuple") && function e(t, n) {
                if ("array" === t.name) {
                  if (!t.type.match(/\[(\d+)\]/)) return n.map(function (r) {
                    return e(u._getCoder(s.from(t.type.replace("[]", ""))), r);
                  });
                  var i = parseInt(t.type.match(/\[(\d+)\]/)[1]);
                  if (n.length !== i) throw new Error("Array length does not matches with the given input");
                  return n.map(function (r) {
                    return e(u._getCoder(s.from(t.type.replace(/\[\d+\]/, ""))), r);
                  });
                }
                t.coders.forEach(function (t, i) {
                  "tuple" === t.name ? e(t, n[i]) : n[i] = r.formatParam(t.name, n[i]);
                });
              }(u._getCoder(s.from(o)), t), t;
            }), u.encode(e, t);
          }, f.prototype.mapTypes = function (e) {
            var t = this,
              r = [];
            return e.forEach(function (e) {
              if ("object" === (0, n.default)(e) && "function" === e.type && (e = Object.assign({}, e, {
                type: "bytes24"
              })), t.isSimplifiedStructFormat(e)) {
                var i = Object.keys(e)[0];
                r.push(Object.assign(t.mapStructNameAndType(i), {
                  components: t.mapStructToCoderFormat(e[i])
                }));
              } else r.push(e);
            }), r;
          }, f.prototype.isSimplifiedStructFormat = function (e) {
            return "object" === (0, n.default)(e) && void 0 === e.components && void 0 === e.name;
          }, f.prototype.mapStructNameAndType = function (e) {
            var t = "tuple";
            return e.indexOf("[]") > -1 && (t = "tuple[]", e = e.slice(0, -2)), {
              type: t,
              name: e
            };
          }, f.prototype.mapStructToCoderFormat = function (e) {
            var t = this,
              r = [];
            return Object.keys(e).forEach(function (i) {
              "object" !== (0, n.default)(e[i]) ? r.push({
                name: i,
                type: e[i]
              }) : r.push(Object.assign(t.mapStructNameAndType(i), {
                components: t.mapStructToCoderFormat(e[i])
              }));
            }), r;
          }, f.prototype.formatParam = function (e, t) {
            var r = this,
              n = new RegExp(/^bytes([0-9]*)$/),
              a = new RegExp(/^bytes([0-9]*)\[\]$/),
              s = new RegExp(/^(u?int)([0-9]*)$/),
              u = new RegExp(/^(u?int)([0-9]*)\[\]$/);
            if (o.isBN(t) || o.isBigNumber(t)) return t.toString(10);
            if (e.match(a) || e.match(u)) return t.map(function (t) {
              return r.formatParam(e.replace("[]", ""), t);
            });
            var c = e.match(s);
            if (c) {
              var f = parseInt(c[2] || "256");
              f / 8 < t.length && (t = o.leftPad(t, f));
            }
            if (c = e.match(n)) {
              i.isBuffer(t) && (t = o.toHex(t));
              var d = parseInt(c[1]);
              if (d) {
                var l = 2 * d;
                "0x" === t.substring(0, 2) && (l += 2), t.length < l && (t = o.rightPad(t, 2 * d));
              }
              t.length % 2 == 1 && (t = "0x0" + t.substring(2));
            }
            return t;
          }, f.prototype.encodeFunctionCall = function (e, t) {
            return this.encodeFunctionSignature(e) + this.encodeParameters(e.inputs, t).replace("0x", "");
          }, f.prototype.decodeParameter = function (e, t) {
            return this.decodeParameters([e], t)[0];
          }, f.prototype.decodeParameters = function (e, t) {
            return this.decodeParametersWith(e, t, !1);
          }, f.prototype.decodeParametersWith = function (e, t, r) {
            if (e.length > 0 && (!t || "0x" === t || "0X" === t)) throw new Error("Returned values aren't valid, did it run Out of Gas? You might also see this error if you are not using the correct ABI for the contract you are retrieving data from, requesting data from a block number that does not exist, or querying a node which is not fully synced.");
            var i = u.decode(this.mapTypes(e), "0x" + t.replace(/0x/i, ""), r),
              o = new c();
            return o.__length__ = 0, e.forEach(function (e, t) {
              var r = i[o.__length__],
                a = "object" === (0, n.default)(e) && e.type && "string" === e.type;
              r = "0x" !== r || a || "string" == typeof e && "string" === e ? r : null, o[t] = r, ("function" == typeof e || e && "object" === (0, n.default)(e)) && e.name && (o[e.name] = r), o.__length__++;
            }), o;
          }, f.prototype.decodeLog = function (e, t, r) {
            var n = this;
            r = Array.isArray(r) ? r : [r], t = t || "";
            var i = [],
              o = [],
              a = 0;
            e.forEach(function (e, t) {
              e.indexed ? (o[t] = ["bool", "int", "uint", "address", "fixed", "ufixed"].find(function (t) {
                return -1 !== e.type.indexOf(t);
              }) ? n.decodeParameter(e.type, r[a]) : r[a], a++) : i[t] = e;
            });
            var s = t,
              u = s ? this.decodeParametersWith(i, s, !0) : [],
              f = new c();
            return f.__length__ = 0, e.forEach(function (e, t) {
              f[t] = "string" === e.type ? "" : null, void 0 !== u[t] && (f[t] = u[t]), void 0 !== o[t] && (f[t] = o[t]), e.name && (f[e.name] = f[t]), f.__length__++;
            }), f;
          };
          var d = new f();
          e.exports = d;
        },
        9819: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(8847),
            o = i(r(3106)),
            a = i(r(3355)),
            s = i(r(775)),
            u = i(r(4519));
          function c(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t && (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })), r.push.apply(r, n);
            }
            return r;
          }
          function f(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2 ? c(Object(r), !0).forEach(function (t) {
                (0, s.default)(e, t, r[t]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : c(Object(r)).forEach(function (t) {
                Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
              });
            }
            return e;
          }
          function d(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          var l = r(606),
            h = r(3349),
            p = r(3058),
            b = r(4293),
            y = r(7799),
            m = r(2679),
            v = r(8161),
            g = r(1314),
            w = r(2339).TransactionFactory,
            A = r(3863).default,
            k = r(3863).Hardfork,
            _ = r(3062),
            S = function S(e) {
              return null == e;
            },
            E = function E(e) {
              return null != e;
            },
            x = function x() {
              var e = this;
              l.packageInit(this, arguments), delete this.BatchRequest, delete this.extend;
              var t = [new h({
                name: "getNetworkId",
                call: "net_version",
                params: 0,
                outputFormatter: parseInt
              }), new h({
                name: "getChainId",
                call: "eth_chainId",
                params: 0,
                outputFormatter: v.hexToNumber
              }), new h({
                name: "getGasPrice",
                call: "eth_gasPrice",
                params: 0
              }), new h({
                name: "getTransactionCount",
                call: "eth_getTransactionCount",
                params: 2,
                inputFormatter: [function (e) {
                  if (v.isAddress(e)) return e;
                  throw new Error("Address " + e + ' is not a valid address to get the "transactionCount".');
                }, function () {
                  return "latest";
                }]
              }), new h({
                name: "getBlockByNumber",
                call: "eth_getBlockByNumber",
                params: 2,
                inputFormatter: [function (e) {
                  return e ? v.toHex(e) : "latest";
                }, function () {
                  return !1;
                }]
              })];
              this._ethereumCall = {}, t.forEach(function (t) {
                t.attachToObject(e._ethereumCall), t.setRequestManager(e._requestManager);
              }), this.wallet = new O(this);
            };
          function P(e, t) {
            return new Promise(function (r, n) {
              try {
                (void 0 === t.type || t.type < "0x2") && void 0 !== t.gasPrice ? r({
                  gasPrice: t.gasPrice
                }) : "0x2" === t.type && t.maxFeePerGas && t.maxPriorityFeePerGas ? r({
                  maxFeePerGas: t.maxFeePerGas,
                  maxPriorityFeePerGas: t.maxPriorityFeePerGas
                }) : Promise.all([e._ethereumCall.getBlockByNumber(), e._ethereumCall.getGasPrice()]).then(function (e) {
                  var n = (0, u.default)(e, 2),
                    i = n[0],
                    o = n[1];
                  if ("0x2" === t.type && i && i.baseFeePerGas) {
                    var a, s;
                    t.gasPrice ? (a = t.gasPrice, s = t.gasPrice, delete t.gasPrice) : (a = t.maxPriorityFeePerGas || "0x9502F900", s = t.maxFeePerGas || v.toHex(v.toBN(i.baseFeePerGas).mul(v.toBN(2)).add(v.toBN(a)))), r({
                      maxFeePerGas: s,
                      maxPriorityFeePerGas: a
                    });
                  } else {
                    if (t.maxPriorityFeePerGas || t.maxFeePerGas) throw Error("Network doesn't support eip-1559");
                    r({
                      gasPrice: o
                    });
                  }
                }).catch(function (e) {
                  n(e);
                });
              } catch (e) {
                n(e);
              }
            });
          }
          function O(e) {
            this._accounts = e, this.length = 0, this.defaultKeyName = "web3js_wallet";
          }
          x.prototype._addAccountFunctions = function (e) {
            var t = this;
            return e.signTransaction = function (r, n) {
              return t.signTransaction(r, e.privateKey, n);
            }, e.sign = function (r) {
              return t.sign(r, e.privateKey);
            }, e.encrypt = function (r, n) {
              return t.encrypt(e.privateKey, r, n);
            }, e;
          }, x.prototype.create = function (e) {
            return this._addAccountFunctions(p.create(e || v.randomHex(32)));
          }, x.prototype.privateKeyToAccount = function (e, t) {
            if (e.startsWith("0x") || (e = "0x" + e), !t && 66 !== e.length) throw new Error("Private key must be 32 bytes long");
            return this._addAccountFunctions(p.fromPrivate(e));
          }, x.prototype.signTransaction = function (e, t, r) {
            var i = this,
              o = !1,
              a = {},
              s = !(!e || !(e.chain && e.hardfork || e.common));
            if (r = r || function () {}, !e) return o = new Error("No transaction object given!"), r(o), Promise.reject(o);
            if (E(e.common) && S(e.common.customChain)) return o = new Error("If tx.common is provided it must have tx.common.customChain"), r(o), Promise.reject(o);
            if (E(e.common) && S(e.common.customChain.chainId)) return o = new Error("If tx.common is provided it must have tx.common.customChain and tx.common.customChain.chainId"), r(o), Promise.reject(o);
            if (E(e.common) && E(e.common.customChain.chainId) && E(e.chainId) && e.chainId !== e.common.customChain.chainId) return o = new Error("Chain Id doesnt match in tx.chainId tx.common.customChain.chainId"), r(o), Promise.reject(o);
            function c(e) {
              var i = function (e) {
                if (e.common && e.chain && e.hardfork) return new Error("Please provide the @ethereumjs/common object or the chain and hardfork property but not all together.");
                if (e.chain && !e.hardfork || e.hardfork && !e.chain) return new Error('When specifying chain and hardfork, both values must be defined. Received "chain": ' + e.chain + ', "hardfork": ' + e.hardfork);
                if (!(e.gas || e.gasLimit || e.maxPriorityFeePerGas || e.maxFeePerGas)) return new Error('"gas" is missing');
                if (e.gas && e.gasPrice) {
                  if (e.gas < 0 || e.gasPrice < 0) return new Error("Gas or gasPrice is lower than 0");
                } else if (e.maxPriorityFeePerGas < 0 || e.maxFeePerGas < 0) return new Error("maxPriorityFeePerGas or maxFeePerGas is lower than 0");
                return e.nonce < 0 || e.chainId < 0 ? new Error("Nonce or chainId is lower than 0") : void 0;
              }(e);
              if (i) return r(i), Promise.reject(i);
              try {
                var o = g.formatters.inputCallFormatter(Object.assign({}, e));
                o.data = o.data || "0x", o.value = o.value || "0x", o.gasLimit = o.gasLimit || o.gas, "0x1" === o.type && void 0 === o.accessList && (o.accessList = []), s ? (o.common && (a.common = A.forCustomChain(o.common.baseChain || "mainnet", {
                  name: o.common.customChain.name || "custom-network",
                  networkId: o.common.customChain.networkId,
                  chainId: o.common.customChain.chainId
                }, o.common.hardfork || k.London), delete o.common), o.chain && (a.chain = o.chain, delete o.chain), o.hardfork && (a.hardfork = o.hardfork, delete o.hardfork)) : (a.common = A.forCustomChain("mainnet", {
                  name: "custom-network",
                  networkId: o.networkId,
                  chainId: o.chainId
                }, o.hardfork || k.London), delete o.networkId), t.startsWith("0x") && (t = t.substring(2));
                var u = w.fromTxData(o, a).sign(n.from(t, "hex")),
                  c = u.validate(!0);
                if (c.length > 0) {
                  var f,
                    l = "Signer Error: ",
                    h = function (e, t) {
                      var r = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                      if (!r) {
                        if (Array.isArray(e) || (r = function (e, t) {
                          if (e) {
                            if ("string" == typeof e) return d(e, t);
                            var r = Object.prototype.toString.call(e).slice(8, -1);
                            return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? d(e, t) : void 0;
                          }
                        }(e)) || t && e && "number" == typeof e.length) {
                          r && (e = r);
                          var _n10 = 0,
                            i = function i() {};
                          return {
                            s: i,
                            n: function n() {
                              return _n10 >= e.length ? {
                                done: !0
                              } : {
                                done: !1,
                                value: e[_n10++]
                              };
                            },
                            e: function e(_e20) {
                              throw _e20;
                            },
                            f: i
                          };
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                      }
                      var o,
                        a = !0,
                        s = !1;
                      return {
                        s: function s() {
                          r = r.call(e);
                        },
                        n: function n() {
                          var e = r.next();
                          return a = e.done, e;
                        },
                        e: function e(_e21) {
                          s = !0, o = _e21;
                        },
                        f: function f() {
                          try {
                            a || null == r.return || r.return();
                          } finally {
                            if (s) throw o;
                          }
                        }
                      };
                    }(c);
                  try {
                    for (h.s(); !(f = h.n()).done;) {
                      var p = f.value;
                      l += "".concat(l, " ").concat(p, ".");
                    }
                  } catch (e) {
                    h.e(e);
                  } finally {
                    h.f();
                  }
                  throw new Error(l);
                }
                var b = "0x" + u.serialize().toString("hex"),
                  y = v.keccak256(b),
                  m = {
                    messageHash: "0x" + n.from(u.getMessageToSign(!0)).toString("hex"),
                    v: "0x" + u.v.toString("hex"),
                    r: "0x" + u.r.toString("hex"),
                    s: "0x" + u.s.toString("hex"),
                    rawTransaction: b,
                    transactionHash: y
                  };
                return r(null, m), m;
              } catch (e) {
                return r(e), Promise.reject(e);
              }
            }
            return e.type = function (e) {
              var t,
                r = void 0 !== e.maxFeePerGas || void 0 !== e.maxPriorityFeePerGas;
              if (void 0 !== e.type ? t = v.toHex(e.type) : void 0 === e.type && r && (t = "0x2"), void 0 !== e.gasPrice && ("0x2" === t || r)) throw Error("eip-1559 transactions don't support gasPrice");
              if (("0x1" === t || "0x0" === t) && r) throw Error("pre-eip-1559 transaction don't support maxFeePerGas/maxPriorityFeePerGas");
              return r || e.common && e.common.hardfork && e.common.hardfork.toLowerCase() === k.London || e.hardfork && e.hardfork.toLowerCase() === k.London ? t = "0x2" : (e.accessList || e.common && e.common.hardfork && e.common.hardfork.toLowerCase() === k.Berlin || e.hardfork && e.hardfork.toLowerCase() === k.Berlin) && (t = "0x1"), t;
            }(e), void 0 !== e.nonce && void 0 !== e.chainId && (void 0 !== e.gasPrice || void 0 !== e.maxFeePerGas && void 0 !== e.maxPriorityFeePerGas) && s ? Promise.resolve(c(e)) : Promise.all([S(e.common) || S(e.common.customChain.chainId) ? S(e.chainId) ? i._ethereumCall.getChainId() : e.chainId : void 0, S(e.nonce) ? i._ethereumCall.getTransactionCount(i.privateKeyToAccount(t).address) : e.nonce, S(s) ? i._ethereumCall.getNetworkId() : 1, P(i, e)]).then(function (t) {
              var r = (0, u.default)(t, 4),
                n = r[0],
                i = r[1],
                o = r[2],
                a = r[3];
              if (S(n) && S(e.common) && S(e.common.customChain.chainId) || S(i) || S(o) || S(a)) throw new Error('One of the values "chainId", "networkId", "gasPrice", or "nonce" couldn\'t be fetched: ' + JSON.stringify(t));
              return c(f(f(f({}, e), S(e.common) || S(e.common.customChain.chainId) ? {
                chainId: n
              } : {}), {}, {
                nonce: i,
                networkId: o
              }, a));
            });
          }, x.prototype.recoverTransaction = function (e) {
            var t = n.from(e.slice(2), "hex"),
              r = w.fromSerializedData(t);
            return v.toChecksumAddress(r.getSenderAddress().toString("hex"));
          }, x.prototype.hashMessage = function (e) {
            var t = v.isHexStrict(e) ? e : v.utf8ToHex(e),
              r = v.hexToBytes(t),
              i = n.from(r),
              o = "Ethereum Signed Message:\n" + r.length,
              a = n.from(o),
              s = n.concat([a, i]);
            return _.bufferToHex(_.keccak256(s));
          }, x.prototype.sign = function (e, t) {
            if (t.startsWith("0x") || (t = "0x" + t), 66 !== t.length) throw new Error("Private key must be 32 bytes long");
            var r = this.hashMessage(e),
              n = p.sign(r, t),
              i = p.decodeSignature(n);
            return {
              message: e,
              messageHash: r,
              v: i[0],
              r: i[1],
              s: i[2],
              signature: n
            };
          }, x.prototype.recover = function (e, t, r) {
            var n = [].slice.apply(arguments);
            return e && "object" === (0, a.default)(e) ? this.recover(e.messageHash, p.encodeSignature([e.v, e.r, e.s]), !0) : (r || (e = this.hashMessage(e)), n.length >= 4 ? (r = "boolean" == typeof (r = n.slice(-1)[0]) && !!r, this.recover(e, p.encodeSignature(n.slice(1, 4)), r)) : p.recover(e, t));
          }, x.prototype.decrypt = function (e, t, r) {
            if ("string" != typeof t) throw new Error("No password given.");
            var i,
              s,
              u = e && "object" === (0, a.default)(e) ? e : JSON.parse(r ? e.toLowerCase() : e);
            if (3 !== u.version) throw new Error("Not a valid V3 wallet");
            if ("scrypt" === u.crypto.kdf) s = u.crypto.kdfparams, i = y.syncScrypt(n.from(t), n.from(s.salt, "hex"), s.n, s.r, s.p, s.dklen);else {
              if ("pbkdf2" !== u.crypto.kdf) throw new Error("Unsupported key derivation scheme");
              if ("hmac-sha256" !== (s = u.crypto.kdfparams).prf) throw new Error("Unsupported parameters to PBKDF2");
              i = b.pbkdf2Sync(n.from(t), n.from(s.salt, "hex"), s.c, s.dklen, "sha256");
            }
            var c = n.from(u.crypto.ciphertext, "hex");
            if (v.sha3(n.from([].concat((0, o.default)(i.slice(16, 32)), (0, o.default)(c)))).replace("0x", "") !== u.crypto.mac) throw new Error("Key derivation failed - possibly wrong password");
            var f = b.createDecipheriv(u.crypto.cipher, i.slice(0, 16), n.from(u.crypto.cipherparams.iv, "hex")),
              d = "0x" + n.from([].concat((0, o.default)(f.update(c)), (0, o.default)(f.final()))).toString("hex");
            return this.privateKeyToAccount(d, !0);
          }, x.prototype.encrypt = function (e, t, r) {
            var i,
              a = this.privateKeyToAccount(e, !0),
              s = (r = r || {}).salt || b.randomBytes(32),
              u = r.iv || b.randomBytes(16),
              c = r.kdf || "scrypt",
              f = {
                dklen: r.dklen || 32,
                salt: s.toString("hex")
              };
            if ("pbkdf2" === c) f.c = r.c || 262144, f.prf = "hmac-sha256", i = b.pbkdf2Sync(n.from(t), n.from(f.salt, "hex"), f.c, f.dklen, "sha256");else {
              if ("scrypt" !== c) throw new Error("Unsupported kdf");
              f.n = r.n || 8192, f.r = r.r || 8, f.p = r.p || 1, i = y.syncScrypt(n.from(t), n.from(f.salt, "hex"), f.n, f.r, f.p, f.dklen);
            }
            var d = b.createCipheriv(r.cipher || "aes-128-ctr", i.slice(0, 16), u);
            if (!d) throw new Error("Unsupported cipher");
            var l = n.from([].concat((0, o.default)(d.update(n.from(a.privateKey.replace("0x", ""), "hex"))), (0, o.default)(d.final()))),
              h = v.sha3(n.from([].concat((0, o.default)(i.slice(16, 32)), (0, o.default)(l)))).replace("0x", "");
            return {
              version: 3,
              id: m.v4({
                random: r.uuid || b.randomBytes(16)
              }),
              address: a.address.toLowerCase().replace("0x", ""),
              crypto: {
                ciphertext: l.toString("hex"),
                cipherparams: {
                  iv: u.toString("hex")
                },
                cipher: r.cipher || "aes-128-ctr",
                kdf: c,
                kdfparams: f,
                mac: h.toString("hex")
              }
            };
          }, O.prototype._findSafeIndex = function (e) {
            return e = e || 0, this.hasOwnProperty(e) ? this._findSafeIndex(e + 1) : e;
          }, O.prototype._currentIndexes = function () {
            return Object.keys(this).map(function (e) {
              return parseInt(e);
            }).filter(function (e) {
              return e < 9e20;
            });
          }, O.prototype.create = function (e, t) {
            for (var r = 0; r < e; ++r) this.add(this._accounts.create(t).privateKey);
            return this;
          }, O.prototype.add = function (e) {
            return "string" == typeof e && (e = this._accounts.privateKeyToAccount(e)), this[e.address] ? this[e.address] : ((e = this._accounts.privateKeyToAccount(e.privateKey)).index = this._findSafeIndex(), this[e.index] = e, this[e.address] = e, this[e.address.toLowerCase()] = e, this.length++, e);
          }, O.prototype.remove = function (e) {
            var t = this[e];
            return !(!t || !t.address || (this[t.address].privateKey = null, delete this[t.address], this[t.address.toLowerCase()] && (this[t.address.toLowerCase()].privateKey = null, delete this[t.address.toLowerCase()]), this[t.index].privateKey = null, delete this[t.index], this.length--, 0));
          }, O.prototype.clear = function () {
            var e = this;
            return this._currentIndexes().forEach(function (t) {
              e.remove(t);
            }), this;
          }, O.prototype.encrypt = function (e, t) {
            var r = this;
            return this._currentIndexes().map(function (n) {
              return r[n].encrypt(e, t);
            });
          }, O.prototype.decrypt = function (e, t) {
            var r = this;
            return e.forEach(function (e) {
              var n = r._accounts.decrypt(e, t);
              if (!n) throw new Error("Couldn't decrypt accounts. Password wrong?");
              r.add(n);
            }), this;
          }, O.prototype.save = function (e, t) {
            return localStorage.setItem(t || this.defaultKeyName, JSON.stringify(this.encrypt(e))), !0;
          }, O.prototype.load = function (e, t) {
            var r = localStorage.getItem(t || this.defaultKeyName);
            if (r) try {
              r = JSON.parse(r);
            } catch (e) {}
            return this.decrypt(r || [], e);
          }, function (e) {
            var t;
            try {
              t = self.localStorage;
              var r = "__storage_test__";
              return t.setItem(r, r), t.removeItem(r), !0;
            } catch (e) {
              return e && (22 === e.code || 1014 === e.code || "QuotaExceededError" === e.name || "NS_ERROR_DOM_QUOTA_REACHED" === e.name) && t && 0 !== t.length;
            }
          }() || (delete O.prototype.save, delete O.prototype.load), e.exports = x;
        },
        8164: function _(e, t, r) {
          "use strict";

          var n = r(8847),
            i = n(r(3106)),
            o = n(r(775)),
            a = n(r(3355));
          function s(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          function u(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t && (n = n.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })), r.push.apply(r, n);
            }
            return r;
          }
          function c(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2 ? u(Object(r), !0).forEach(function (t) {
                (0, o.default)(e, t, r[t]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : u(Object(r)).forEach(function (t) {
                Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
              });
            }
            return e;
          }
          var f = r(606),
            d = r(3349),
            l = r(8161),
            h = r(4178).subscription,
            p = r(1314).formatters,
            b = r(1314).errors,
            y = r(282),
            m = r(9901),
            v = function e(t, r, n) {
              var i = this,
                o = Array.prototype.slice.call(arguments);
              if (!(this instanceof e)) throw new Error('Please use the "new" keyword to instantiate a web3.eth.Contract() object!');
              if (this.setProvider = function () {
                f.packageInit(i, arguments), i.clearSubscriptions = i._requestManager.clearSubscriptions;
              }, f.packageInit(this, [this.constructor]), this.clearSubscriptions = this._requestManager.clearSubscriptions, !t || !Array.isArray(t)) throw b.ContractMissingABIError();
              this.options = {};
              var s = o[o.length - 1];
              s && "object" === (0, a.default)(s) && !Array.isArray(s) && (n = s, this.options = c(c({}, this.options), this._getOrSetDefaultOptions(n)), r && "object" === (0, a.default)(r) && (r = null)), Object.defineProperty(this.options, "address", {
                set: function set(e) {
                  e && (i._address = l.toChecksumAddress(p.inputAddressFormatter(e)));
                },
                get: function get() {
                  return i._address;
                },
                enumerable: !0
              }), Object.defineProperty(this.options, "jsonInterface", {
                set: function set(e) {
                  return i.methods = {}, i.events = {}, i._jsonInterface = e.map(function (e) {
                    var t, r;
                    if (e.constant = "view" === e.stateMutability || "pure" === e.stateMutability || e.constant, e.payable = "payable" === e.stateMutability || e.payable, e.name && (r = l._jsonInterfaceMethodToString(e)), "function" === e.type) {
                      if (e.signature = m.encodeFunctionSignature(r), t = i._createTxObject.bind({
                        method: e,
                        parent: i
                      }), i.methods[e.name]) {
                        var n = i._createTxObject.bind({
                          method: e,
                          parent: i,
                          nextMethod: i.methods[e.name]
                        });
                        i.methods[e.name] = n;
                      } else i.methods[e.name] = t;
                      i.methods[e.signature] = t, i.methods[r] = t;
                    } else if ("event" === e.type) {
                      e.signature = m.encodeEventSignature(r);
                      var o = i._on.bind(i, e.signature);
                      i.events[e.name] && "bound " !== i.events[e.name].name || (i.events[e.name] = o), i.events[e.signature] = o, i.events[r] = o;
                    }
                    return e;
                  }), i.events.allEvents = i._on.bind(i, "allevents"), i._jsonInterface;
                },
                get: function get() {
                  return i._jsonInterface;
                },
                enumerable: !0
              });
              var u = this.constructor.defaultAccount,
                d = this.constructor.defaultBlock || "latest";
              Object.defineProperty(this, "handleRevert", {
                get: function get() {
                  return !1 === i.options.handleRevert || !0 === i.options.handleRevert ? i.options.handleRevert : this.constructor.handleRevert;
                },
                set: function set(e) {
                  i.options.handleRevert = e;
                },
                enumerable: !0
              }), Object.defineProperty(this, "defaultCommon", {
                get: function get() {
                  return i.options.common || this.constructor.defaultCommon;
                },
                set: function set(e) {
                  i.options.common = e;
                },
                enumerable: !0
              }), Object.defineProperty(this, "defaultHardfork", {
                get: function get() {
                  return i.options.hardfork || this.constructor.defaultHardfork;
                },
                set: function set(e) {
                  i.options.hardfork = e;
                },
                enumerable: !0
              }), Object.defineProperty(this, "defaultChain", {
                get: function get() {
                  return i.options.chain || this.constructor.defaultChain;
                },
                set: function set(e) {
                  i.options.chain = e;
                },
                enumerable: !0
              }), Object.defineProperty(this, "transactionPollingTimeout", {
                get: function get() {
                  return 0 === i.options.transactionPollingTimeout ? i.options.transactionPollingTimeout : i.options.transactionPollingTimeout || this.constructor.transactionPollingTimeout;
                },
                set: function set(e) {
                  i.options.transactionPollingTimeout = e;
                },
                enumerable: !0
              }), Object.defineProperty(this, "transactionPollingInterval", {
                get: function get() {
                  return 0 === i.options.transactionPollingInterval ? i.options.transactionPollingInterval : i.options.transactionPollingInterval || this.constructor.transactionPollingInterval;
                },
                set: function set(e) {
                  i.options.transactionPollingInterval = e;
                },
                enumerable: !0
              }), Object.defineProperty(this, "transactionConfirmationBlocks", {
                get: function get() {
                  return 0 === i.options.transactionConfirmationBlocks ? i.options.transactionConfirmationBlocks : i.options.transactionConfirmationBlocks || this.constructor.transactionConfirmationBlocks;
                },
                set: function set(e) {
                  i.options.transactionConfirmationBlocks = e;
                },
                enumerable: !0
              }), Object.defineProperty(this, "transactionBlockTimeout", {
                get: function get() {
                  return 0 === i.options.transactionBlockTimeout ? i.options.transactionBlockTimeout : i.options.transactionBlockTimeout || this.constructor.transactionBlockTimeout;
                },
                set: function set(e) {
                  i.options.transactionBlockTimeout = e;
                },
                enumerable: !0
              }), Object.defineProperty(this, "blockHeaderTimeout", {
                get: function get() {
                  return 0 === i.options.blockHeaderTimeout ? i.options.blockHeaderTimeout : i.options.blockHeaderTimeout || this.constructor.blockHeaderTimeout;
                },
                set: function set(e) {
                  i.options.blockHeaderTimeout = e;
                },
                enumerable: !0
              }), Object.defineProperty(this, "defaultAccount", {
                get: function get() {
                  return u;
                },
                set: function set(e) {
                  return e && (u = l.toChecksumAddress(p.inputAddressFormatter(e))), e;
                },
                enumerable: !0
              }), Object.defineProperty(this, "defaultBlock", {
                get: function get() {
                  return d;
                },
                set: function set(e) {
                  return d = e, e;
                },
                enumerable: !0
              }), this.methods = {}, this.events = {}, this._address = null, this._jsonInterface = [], this.options.address = r, this.options.jsonInterface = t;
            };
          v.setProvider = function (e, t) {
            f.packageInit(this, [e]), this._ethAccounts = t;
          }, v.prototype._getCallback = function (e) {
            if (e && e[e.length - 1] && "function" == typeof e[e.length - 1]) return e.pop();
          }, v.prototype._checkListener = function (e, t) {
            if (t === e) throw b.ContractReservedEventError(e);
          }, v.prototype._getOrSetDefaultOptions = function (e) {
            var t = c({}, e),
              r = t.gasPrice ? String(t.gasPrice) : null,
              n = t.from ? l.toChecksumAddress(p.inputAddressFormatter(t.from)) : null;
            return t.data = t.data || this.options.data, t.from = n || this.options.from, t.gasPrice = r || this.options.gasPrice, t.gas = t.gas || t.gasLimit || this.options.gas, delete t.gasLimit, t;
          }, v.prototype._encodeEventABI = function (e, t) {
            var r = (t = t || {}).filter || {},
              n = {};
            ["fromBlock", "toBlock"].filter(function (e) {
              return void 0 !== t[e];
            }).forEach(function (e) {
              n[e] = p.inputBlockNumberFormatter(t[e]);
            });
            var o = [];
            if (t.topics && Array.isArray(t.topics)) o = (0, i.default)(t.topics);else if (o = [], e && !e.anonymous && "ALLEVENTS" !== e.name && o.push(e.signature || m.encodeEventSignature(l.jsonInterfaceMethodToString(e))), "ALLEVENTS" !== e.name && e.inputs) {
              var a,
                u = function (e, t) {
                  var r = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                  if (!r) {
                    if (Array.isArray(e) || (r = function (e, t) {
                      if (e) {
                        if ("string" == typeof e) return s(e, t);
                        var r = Object.prototype.toString.call(e).slice(8, -1);
                        return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? s(e, t) : void 0;
                      }
                    }(e)) || t && e && "number" == typeof e.length) {
                      r && (e = r);
                      var _n11 = 0,
                        i = function i() {};
                      return {
                        s: i,
                        n: function n() {
                          return _n11 >= e.length ? {
                            done: !0
                          } : {
                            done: !1,
                            value: e[_n11++]
                          };
                        },
                        e: function e(_e22) {
                          throw _e22;
                        },
                        f: i
                      };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                  }
                  var o,
                    a = !0,
                    u = !1;
                  return {
                    s: function s() {
                      r = r.call(e);
                    },
                    n: function n() {
                      var e = r.next();
                      return a = e.done, e;
                    },
                    e: function e(_e23) {
                      u = !0, o = _e23;
                    },
                    f: function f() {
                      try {
                        a || null == r.return || r.return();
                      } finally {
                        if (u) throw o;
                      }
                    }
                  };
                }(e.inputs);
              try {
                var c = function c() {
                  var e = a.value;
                  if (!e.indexed) return "continue";
                  var t = r[e.name];
                  if (!t) return o.push(null), "continue";
                  Array.isArray(t) ? o.push(t.map(function (t) {
                    return m.encodeParameter(e.type, t);
                  })) : o.push(m.encodeParameter(e.type, t));
                };
                for (u.s(); !(a = u.n()).done;) c();
              } catch (e) {
                u.e(e);
              } finally {
                u.f();
              }
            }
            return o.length && (n.topics = o), this.options.address && (n.address = this.options.address.toLowerCase()), n;
          }, v.prototype._decodeEventABI = function (e) {
            var t = this;
            e.data = e.data || "", e.topics = e.topics || [];
            var r = p.outputLogFormatter(e);
            if ("ALLEVENTS" === t.name && (t = t.jsonInterface.find(function (t) {
              return t.signature === e.topics[0];
            }) || {
              anonymous: !0
            }), t.inputs = t.inputs || [], !t.anonymous) {
              var n = 0;
              t.inputs.forEach(function (e) {
                return e.indexed ? n++ : null;
              }), n > 0 && e.topics.length !== n + 1 && (t = {
                anonymous: !0,
                inputs: []
              });
            }
            var i = t.anonymous ? e.topics : e.topics.slice(1);
            return r.returnValues = m.decodeLog(t.inputs, e.data, i), delete r.returnValues.__length__, r.event = t.name, r.signature = t.anonymous || !e.topics[0] ? null : e.topics[0], r.raw = {
              data: r.data,
              topics: r.topics
            }, delete r.data, delete r.topics, r;
          }, v.prototype._encodeMethodABI = function () {
            var e = this._method.signature,
              t = this.arguments || [],
              r = !1,
              n = this._parent.options.jsonInterface.filter(function (t) {
                return "constructor" === e && t.type === e || (t.signature === e || t.signature === e.replace("0x", "") || t.name === e) && "function" === t.type;
              }).map(function (e) {
                var n = Array.isArray(e.inputs) ? e.inputs.length : 0;
                if (n !== t.length) throw new Error("The number of arguments is not matching the methods required number. You need to pass " + n + " arguments.");
                return "function" === e.type && (r = e.signature), Array.isArray(e.inputs) ? e.inputs : [];
              }).map(function (e) {
                return m.encodeParameters(e, t).replace("0x", "");
              })[0] || "";
            if ("constructor" === e) {
              if (!this._deployData) throw new Error("The contract has no contract data option set. This is necessary to append the constructor parameters.");
              return this._deployData.startsWith("0x") || (this._deployData = "0x" + this._deployData), this._deployData + n;
            }
            var i = r ? r + n : n;
            if (!i) throw new Error("Couldn't find a matching contract method named \"" + this._method.name + '".');
            return i;
          }, v.prototype._decodeMethodReturn = function (e, t) {
            if (!t) return null;
            t = t.length >= 2 ? t.slice(2) : t;
            var r = m.decodeParameters(e, t);
            return 1 === r.__length__ ? r[0] : (delete r.__length__, r);
          }, v.prototype.deploy = function (e, t) {
            if ((e = e || {}).arguments = e.arguments || [], !(e = this._getOrSetDefaultOptions(e)).data) {
              if ("function" == typeof t) return t(b.ContractMissingDeployDataError());
              throw b.ContractMissingDeployDataError();
            }
            var r = this.options.jsonInterface.find(function (e) {
              return "constructor" === e.type;
            }) || {};
            return r.signature = "constructor", this._createTxObject.apply({
              method: r,
              parent: this,
              deployData: e.data,
              _ethAccounts: this.constructor._ethAccounts
            }, e.arguments);
          }, v.prototype._generateEventOptions = function () {
            var e = Array.prototype.slice.call(arguments),
              t = this._getCallback(e),
              r = "object" === (!!e[e.length - 1] && (0, a.default)(e[e.length - 1])) ? e.pop() : {},
              n = "string" == typeof e[0] ? e[0] : "allevents",
              i = "allevents" === n.toLowerCase() ? {
                name: "ALLEVENTS",
                jsonInterface: this.options.jsonInterface
              } : this.options.jsonInterface.find(function (e) {
                return "event" === e.type && (e.name === n || e.signature === "0x" + n.replace("0x", ""));
              });
            if (!i) throw b.ContractEventDoesNotExistError(n);
            if (!l.isAddress(this.options.address)) throw b.ContractNoAddressDefinedError();
            return {
              params: this._encodeEventABI(i, r),
              event: i,
              filter: r.filter || {},
              callback: t
            };
          }, v.prototype.clone = function () {
            return new this.constructor(this.options.jsonInterface, this.options.address, this.options);
          }, v.prototype.once = function (e, t, r) {
            var n = Array.prototype.slice.call(arguments);
            if (!(r = this._getCallback(n))) throw b.ContractOnceRequiresCallbackError();
            t && delete t.fromBlock, this._on(e, t, function (e, t, n) {
              n.unsubscribe(), "function" == typeof r && r(e, t, n);
            });
          }, v.prototype._on = function () {
            var e = this._generateEventOptions.apply(this, arguments);
            e.params && e.params.toBlock && (delete e.params.toBlock, console.warn("Invalid option: toBlock. Use getPastEvents for specific range.")), this._checkListener("newListener", e.event.name), this._checkListener("removeListener", e.event.name);
            var t = new h({
              subscription: {
                params: 1,
                inputFormatter: [p.inputLogFormatter],
                outputFormatter: this._decodeEventABI.bind(e.event),
                subscriptionHandler: function subscriptionHandler(e) {
                  e.removed ? this.emit("changed", e) : this.emit("data", e), "function" == typeof this.callback && this.callback(null, e, this);
                }
              },
              type: "eth",
              requestManager: this._requestManager
            });
            return t.subscribe("logs", e.params, e.callback || function () {}), t;
          };
          var g = function g(e, t) {
            if (e.event && "ALLEVENTS" === e.event.name && Array.isArray(t)) {
              var r = e.filter || {},
                n = Object.keys(r);
              return n.length > 0 ? t.filter(function (e) {
                return "string" == typeof e || n.every(function (t) {
                  return Array.isArray(r[t]) ? r[t].some(function (r) {
                    return String(e.returnValues[t]).toUpperCase() === String(r).toUpperCase();
                  }) : String(e.returnValues[t]).toUpperCase() === String(r[t]).toUpperCase();
                });
              }) : t;
            }
            return t;
          };
          v.prototype.getPastEvents = function () {
            var e = this._generateEventOptions.apply(this, arguments),
              t = new d({
                name: "getPastLogs",
                call: "eth_getLogs",
                params: 1,
                inputFormatter: [p.inputLogFormatter],
                outputFormatter: this._decodeEventABI.bind(e.event)
              });
            t.setRequestManager(this._requestManager);
            var r = t.buildCall();
            return t = null, r(e.params, function (t, r) {
              "function" == typeof e.callback && e.callback(t, g(e, r));
            }).then(g.bind(this, e));
          }, v.prototype._createTxObject = function () {
            var e = Array.prototype.slice.call(arguments),
              t = {};
            if ("function" === this.method.type && (t.call = this.parent._executeMethod.bind(t, "call"), t.call.request = this.parent._executeMethod.bind(t, "call", !0)), t.send = this.parent._executeMethod.bind(t, "send"), t.send.request = this.parent._executeMethod.bind(t, "send", !0), t.encodeABI = this.parent._encodeMethodABI.bind(t), t.estimateGas = this.parent._executeMethod.bind(t, "estimate"), t.createAccessList = this.parent._executeMethod.bind(t, "createAccessList"), e && this.method.inputs && e.length !== this.method.inputs.length) {
              if (this.nextMethod) return this.nextMethod.apply(null, e);
              throw b.InvalidNumberOfParams(e.length, this.method.inputs.length, this.method.name);
            }
            return t.arguments = e || [], t._method = this.method, t._parent = this.parent, t._ethAccounts = this.parent.constructor._ethAccounts || this._ethAccounts, this.deployData && (t._deployData = this.deployData), t;
          }, v.prototype._processExecuteArguments = function (e, t) {
            var r = {};
            if (r.type = e.shift(), r.callback = this._parent._getCallback(e), "call" !== r.type || !0 === e[e.length - 1] || "string" != typeof e[e.length - 1] && !isFinite(e[e.length - 1]) || (r.defaultBlock = e.pop()), r.options = "object" === (!!e[e.length - 1] && (0, a.default)(e[e.length - 1])) ? e.pop() : {}, r.generateRequest = !0 === e[e.length - 1] && e.pop(), r.options = this._parent._getOrSetDefaultOptions(r.options), r.options.data = this.encodeABI(), !this._deployData && !l.isAddress(this._parent.options.address)) throw b.ContractNoAddressDefinedError();
            return this._deployData || (r.options.to = this._parent.options.address), r.options.data ? r : l._fireError(new Error("Couldn't find a matching contract method, or the number of parameters is wrong."), t.eventEmitter, t.reject, r.callback);
          }, v.prototype._executeMethod = function () {
            var e = this,
              t = this._parent._processExecuteArguments.call(this, Array.prototype.slice.call(arguments), r),
              r = y("send" !== t.type),
              n = e.constructor._ethAccounts || e._ethAccounts;
            if (t.generateRequest) {
              var i = {
                params: [p.inputCallFormatter.call(this._parent, t.options)],
                callback: t.callback
              };
              return "call" === t.type ? (i.params.push(p.inputDefaultBlockNumberFormatter.call(this._parent, t.defaultBlock)), i.method = "eth_call", i.format = this._parent._decodeMethodReturn.bind(null, this._method.outputs)) : i.method = "eth_sendTransaction", i;
            }
            switch (t.type) {
              case "createAccessList":
                return l.isAddress(t.options.from) ? new d({
                  name: "createAccessList",
                  call: "eth_createAccessList",
                  params: 2,
                  inputFormatter: [p.inputTransactionFormatter, p.inputDefaultBlockNumberFormatter],
                  requestManager: e._parent._requestManager,
                  accounts: n,
                  defaultAccount: e._parent.defaultAccount,
                  defaultBlock: e._parent.defaultBlock
                }).createFunction()(t.options, t.callback) : l._fireError(b.ContractNoFromAddressDefinedError(), r.eventEmitter, r.reject, t.callback);
              case "estimate":
                return new d({
                  name: "estimateGas",
                  call: "eth_estimateGas",
                  params: 1,
                  inputFormatter: [p.inputCallFormatter],
                  outputFormatter: l.hexToNumber,
                  requestManager: e._parent._requestManager,
                  accounts: n,
                  defaultAccount: e._parent.defaultAccount,
                  defaultBlock: e._parent.defaultBlock
                }).createFunction()(t.options, t.callback);
              case "call":
                return new d({
                  name: "call",
                  call: "eth_call",
                  params: 2,
                  inputFormatter: [p.inputCallFormatter, p.inputDefaultBlockNumberFormatter],
                  outputFormatter: function outputFormatter(t) {
                    return e._parent._decodeMethodReturn(e._method.outputs, t);
                  },
                  requestManager: e._parent._requestManager,
                  accounts: n,
                  defaultAccount: e._parent.defaultAccount,
                  defaultBlock: e._parent.defaultBlock,
                  handleRevert: e._parent.handleRevert,
                  abiCoder: m
                }).createFunction()(t.options, t.defaultBlock, t.callback);
              case "send":
                if (!l.isAddress(t.options.from)) return l._fireError(b.ContractNoFromAddressDefinedError(), r.eventEmitter, r.reject, t.callback);
                if ("boolean" == typeof this._method.payable && !this._method.payable && t.options.value && t.options.value > 0) return l._fireError(new Error("Can not send value to non-payable contract method or constructor"), r.eventEmitter, r.reject, t.callback);
                var o = {
                  receiptFormatter: function receiptFormatter(t) {
                    if (Array.isArray(t.logs)) {
                      var r = t.logs.map(function (t) {
                        return e._parent._decodeEventABI.call({
                          name: "ALLEVENTS",
                          jsonInterface: e._parent.options.jsonInterface
                        }, t);
                      });
                      t.events = {};
                      var n = 0;
                      r.forEach(function (e) {
                        e.event ? t.events[e.event] ? Array.isArray(t.events[e.event]) ? t.events[e.event].push(e) : t.events[e.event] = [t.events[e.event], e] : t.events[e.event] = e : (t.events[n] = e, n++);
                      }), delete t.logs;
                    }
                    return t;
                  },
                  contractDeployFormatter: function contractDeployFormatter(t) {
                    var r = e._parent.clone();
                    return r.options.address = t.contractAddress, r;
                  }
                };
                return new d({
                  name: "sendTransaction",
                  call: "eth_sendTransaction",
                  params: 1,
                  inputFormatter: [p.inputTransactionFormatter],
                  requestManager: e._parent._requestManager,
                  accounts: e.constructor._ethAccounts || e._ethAccounts,
                  defaultAccount: e._parent.defaultAccount,
                  defaultBlock: e._parent.defaultBlock,
                  transactionBlockTimeout: e._parent.transactionBlockTimeout,
                  transactionConfirmationBlocks: e._parent.transactionConfirmationBlocks,
                  transactionPollingTimeout: e._parent.transactionPollingTimeout,
                  transactionPollingInterval: e._parent.transactionPollingInterval,
                  defaultCommon: e._parent.defaultCommon,
                  defaultChain: e._parent.defaultChain,
                  defaultHardfork: e._parent.defaultHardfork,
                  handleRevert: e._parent.handleRevert,
                  extraFormatters: o,
                  abiCoder: m
                }).createFunction()(t.options, t.callback);
              default:
                throw new Error('Method "' + t.type + '" not implemented.');
            }
          }, e.exports = v;
        },
        6764: function _(e, t, r) {
          "use strict";

          var n = r(8847),
            i = n(r(2247)),
            o = n(r(5698)),
            a = r(5160),
            s = r(1314).formatters,
            u = r(8161),
            c = r(1841),
            f = r(2867),
            d = r(2689);
          function l(e) {
            this.eth = e;
            var t = null;
            this._detectedAddress = null, this._lastSyncCheck = null, Object.defineProperty(this, "registry", {
              get: function get() {
                return new c(this);
              },
              enumerable: !0
            }), Object.defineProperty(this, "resolverMethodHandler", {
              get: function get() {
                return new f(this.registry);
              },
              enumerable: !0
            }), Object.defineProperty(this, "registryAddress", {
              get: function get() {
                return t;
              },
              set: function set(e) {
                t = null !== e ? s.inputAddressFormatter(e) : e;
              },
              enumerable: !0
            });
          }
          l.prototype.supportsInterface = function (e, t, r) {
            return this.getResolver(e).then(function (e) {
              return u.isHexStrict(t) || (t = u.sha3(t).slice(0, 10)), e.methods.supportsInterface(t).call(r);
            }).catch(function (e) {
              if ("function" != typeof r) throw e;
              r(e, null);
            });
          }, l.prototype.resolver = function (e, t) {
            return this.registry.resolver(e, t);
          }, l.prototype.getResolver = function (e, t) {
            return this.registry.getResolver(e, t);
          }, l.prototype.setResolver = function (e, t, r, n) {
            return this.registry.setResolver(e, t, r, n);
          }, l.prototype.setRecord = function (e, t, r, n, i, o) {
            return this.registry.setRecord(e, t, r, n, i, o);
          }, l.prototype.setSubnodeRecord = function (e, t, r, n, i, o, a) {
            return this.registry.setSubnodeRecord(e, t, r, n, i, o, a);
          }, l.prototype.setApprovalForAll = function (e, t, r, n) {
            return this.registry.setApprovalForAll(e, t, r, n);
          }, l.prototype.isApprovedForAll = function (e, t, r) {
            return this.registry.isApprovedForAll(e, t, r);
          }, l.prototype.recordExists = function (e, t) {
            return this.registry.recordExists(e, t);
          }, l.prototype.setSubnodeOwner = function (e, t, r, n, i) {
            return this.registry.setSubnodeOwner(e, t, r, n, i);
          }, l.prototype.getTTL = function (e, t) {
            return this.registry.getTTL(e, t);
          }, l.prototype.setTTL = function (e, t, r, n) {
            return this.registry.setTTL(e, t, r, n);
          }, l.prototype.getOwner = function (e, t) {
            return this.registry.getOwner(e, t);
          }, l.prototype.setOwner = function (e, t, r, n) {
            return this.registry.setOwner(e, t, r, n);
          }, l.prototype.getAddress = function (e, t) {
            return this.resolverMethodHandler.method(e, "addr", []).call(t);
          }, l.prototype.setAddress = function (e, t, r, n) {
            return this.resolverMethodHandler.method(e, "setAddr", [t]).send(r, n);
          }, l.prototype.getPubkey = function (e, t) {
            return this.resolverMethodHandler.method(e, "pubkey", [], null, t).call(t);
          }, l.prototype.setPubkey = function (e, t, r, n, i) {
            return this.resolverMethodHandler.method(e, "setPubkey", [t, r]).send(n, i);
          }, l.prototype.getContent = function (e, t) {
            return this.resolverMethodHandler.method(e, "content", []).call(t);
          }, l.prototype.setContent = function (e, t, r, n) {
            return this.resolverMethodHandler.method(e, "setContent", [t]).send(r, n);
          }, l.prototype.getContenthash = function (e, t) {
            return this.resolverMethodHandler.method(e, "contenthash", [], d.decode).call(t);
          }, l.prototype.setContenthash = function (e, t, r, n) {
            var i;
            try {
              i = d.encode(t);
            } catch (e) {
              var o = new Error("Could not encode " + t + ". See docs for supported hash protocols.");
              if ("function" == typeof n) return void n(o, null);
              throw o;
            }
            return this.resolverMethodHandler.method(e, "setContenthash", [i]).send(r, n);
          }, l.prototype.getMultihash = function (e, t) {
            return this.resolverMethodHandler.method(e, "multihash", []).call(t);
          }, l.prototype.setMultihash = function (e, t, r, n) {
            return this.resolverMethodHandler.method(e, "multihash", [t]).send(r, n);
          }, l.prototype.checkNetwork = (0, o.default)(i.default.mark(function e() {
            var t, r, n, o, s;
            return i.default.wrap(function (e) {
              for (;;) switch (e.prev = e.next) {
                case 0:
                  if (t = new Date() / 1e3, this._lastSyncCheck && !(t - this._lastSyncCheck > 3600)) {
                    e.next = 9;
                    break;
                  }
                  return e.next = 4, this.eth.getBlock("latest");
                case 4:
                  if (r = e.sent, !((n = t - r.timestamp) > 3600)) {
                    e.next = 8;
                    break;
                  }
                  throw new Error("Network not synced; last block was " + n + " seconds ago");
                case 8:
                  this._lastSyncCheck = t;
                case 9:
                  if (!this.registryAddress) {
                    e.next = 11;
                    break;
                  }
                  return e.abrupt("return", this.registryAddress);
                case 11:
                  if (this._detectedAddress) {
                    e.next = 20;
                    break;
                  }
                  return e.next = 14, this.eth.net.getNetworkType();
                case 14:
                  if (o = e.sent, void 0 !== (s = a.addresses[o])) {
                    e.next = 18;
                    break;
                  }
                  throw new Error("ENS is not supported on network " + o);
                case 18:
                  return this._detectedAddress = s, e.abrupt("return", this._detectedAddress);
                case 20:
                  return e.abrupt("return", this._detectedAddress);
                case 21:
                case "end":
                  return e.stop();
              }
            }, e, this);
          })), e.exports = l;
        },
        5160: function _(e) {
          "use strict";

          e.exports = {
            addresses: {
              main: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
              ropsten: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
              rinkeby: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
              goerli: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
            },
            interfaceIds: {
              addr: "0x3b3b57de",
              setAddr: "0x3b3b57de",
              pubkey: "0xc8690233",
              setPubkey: "0xc8690233",
              contenthash: "0xbc1c58d1",
              setContenthash: "0xbc1c58d1",
              content: "0xd8389dc5",
              setContent: "0xd8389dc5"
            }
          };
        },
        1841: function _(e, t, r) {
          "use strict";

          var n = r(8164),
            i = r(1006),
            o = r(282),
            a = r(1314).formatters,
            s = r(8161),
            u = r(3205),
            c = r(8384);
          function f(e) {
            var t = this;
            this.ens = e, this.contract = e.checkNetwork().then(function (e) {
              var r = new n(u, e);
              return r.setProvider(t.ens.eth.currentProvider), r;
            });
          }
          f.prototype.owner = function (e, t) {
            return console.warn('Deprecated: Please use the "getOwner" method instead of "owner".'), this.getOwner(e, t);
          }, f.prototype.getOwner = function (e, t) {
            var r = new o(!0);
            return this.contract.then(function (t) {
              return t.methods.owner(i.hash(e)).call();
            }).then(function (e) {
              "function" != typeof t ? r.resolve(e) : t(e, e);
            }).catch(function (e) {
              "function" != typeof t ? r.reject(e) : t(e, null);
            }), r.eventEmitter;
          }, f.prototype.setOwner = function (e, t, r, n) {
            var s = new o(!0);
            return this.contract.then(function (n) {
              return n.methods.setOwner(i.hash(e), a.inputAddressFormatter(t)).send(r);
            }).then(function (e) {
              "function" != typeof n ? s.resolve(e) : n(e, e);
            }).catch(function (e) {
              "function" != typeof n ? s.reject(e) : n(e, null);
            }), s.eventEmitter;
          }, f.prototype.getTTL = function (e, t) {
            var r = new o(!0);
            return this.contract.then(function (t) {
              return t.methods.ttl(i.hash(e)).call();
            }).then(function (e) {
              "function" != typeof t ? r.resolve(e) : t(e, e);
            }).catch(function (e) {
              "function" != typeof t ? r.reject(e) : t(e, null);
            }), r.eventEmitter;
          }, f.prototype.setTTL = function (e, t, r, n) {
            var a = new o(!0);
            return this.contract.then(function (n) {
              return n.methods.setTTL(i.hash(e), t).send(r);
            }).then(function (e) {
              "function" != typeof n ? a.resolve(e) : n(e, e);
            }).catch(function (e) {
              "function" != typeof n ? a.reject(e) : n(e, null);
            }), a.eventEmitter;
          }, f.prototype.setSubnodeOwner = function (e, t, r, n, u) {
            var c = new o(!0);
            return s.isHexStrict(t) || (t = s.sha3(t)), this.contract.then(function (o) {
              return o.methods.setSubnodeOwner(i.hash(e), t, a.inputAddressFormatter(r)).send(n);
            }).then(function (e) {
              "function" != typeof u ? c.resolve(e) : u(e, e);
            }).catch(function (e) {
              "function" != typeof u ? c.reject(e) : u(e, null);
            }), c.eventEmitter;
          }, f.prototype.setRecord = function (e, t, r, n, s, u) {
            var c = new o(!0);
            return this.contract.then(function (o) {
              return o.methods.setRecord(i.hash(e), a.inputAddressFormatter(t), a.inputAddressFormatter(r), n).send(s);
            }).then(function (e) {
              "function" != typeof u ? c.resolve(e) : u(e, e);
            }).catch(function (e) {
              "function" != typeof u ? c.reject(e) : u(e, null);
            }), c.eventEmitter;
          }, f.prototype.setSubnodeRecord = function (e, t, r, n, u, c, f) {
            var d = new o(!0);
            return s.isHexStrict(t) || (t = s.sha3(t)), this.contract.then(function (o) {
              return o.methods.setSubnodeRecord(i.hash(e), t, a.inputAddressFormatter(r), a.inputAddressFormatter(n), u).send(c);
            }).then(function (e) {
              "function" != typeof f ? d.resolve(e) : f(e, e);
            }).catch(function (e) {
              "function" != typeof f ? d.reject(e) : f(e, null);
            }), d.eventEmitter;
          }, f.prototype.setApprovalForAll = function (e, t, r, n) {
            var i = new o(!0);
            return this.contract.then(function (n) {
              return n.methods.setApprovalForAll(a.inputAddressFormatter(e), t).send(r);
            }).then(function (e) {
              "function" != typeof n ? i.resolve(e) : n(e, e);
            }).catch(function (e) {
              "function" != typeof n ? i.reject(e) : n(e, null);
            }), i.eventEmitter;
          }, f.prototype.isApprovedForAll = function (e, t, r) {
            var n = new o(!0);
            return this.contract.then(function (r) {
              return r.methods.isApprovedForAll(a.inputAddressFormatter(e), a.inputAddressFormatter(t)).call();
            }).then(function (e) {
              "function" != typeof r ? n.resolve(e) : r(e, e);
            }).catch(function (e) {
              "function" != typeof r ? n.reject(e) : r(e, null);
            }), n.eventEmitter;
          }, f.prototype.recordExists = function (e, t) {
            var r = new o(!0);
            return this.contract.then(function (t) {
              return t.methods.recordExists(i.hash(e)).call();
            }).then(function (e) {
              "function" != typeof t ? r.resolve(e) : t(e, e);
            }).catch(function (e) {
              "function" != typeof t ? r.reject(e) : t(e, null);
            }), r.eventEmitter;
          }, f.prototype.resolver = function (e, t) {
            return console.warn('Deprecated: Please use the "getResolver" method instead of "resolver".'), this.getResolver(e, t);
          }, f.prototype.getResolver = function (e, t) {
            var r = this;
            return this.contract.then(function (t) {
              return t.methods.resolver(i.hash(e)).call();
            }).then(function (e) {
              var i = new n(c, e);
              if (i.setProvider(r.ens.eth.currentProvider), "function" != typeof t) return i;
              t(i, i);
            }).catch(function (e) {
              if ("function" != typeof t) throw e;
              t(e, null);
            });
          }, f.prototype.setResolver = function (e, t, r, n) {
            var s = new o(!0);
            return this.contract.then(function (n) {
              return n.methods.setResolver(i.hash(e), a.inputAddressFormatter(t)).send(r);
            }).then(function (e) {
              "function" != typeof n ? s.resolve(e) : n(e, e);
            }).catch(function (e) {
              "function" != typeof n ? s.reject(e) : n(e, null);
            }), s.eventEmitter;
          }, e.exports = f;
        },
        715: function _(e, t, r) {
          "use strict";

          var n = r(6764);
          e.exports = n;
        },
        2867: function _(e, t, r) {
          "use strict";

          var n = r(8847),
            i = n(r(2247)),
            o = n(r(5698)),
            a = r(282),
            s = r(1006),
            u = r(1314).errors,
            c = r(5160).interfaceIds;
          function f(e) {
            this.registry = e;
          }
          f.prototype.method = function (e, t, r, n, i) {
            return {
              call: this.call.bind({
                ensName: e,
                methodName: t,
                methodArguments: r,
                callback: i,
                parent: this,
                outputFormatter: n
              }),
              send: this.send.bind({
                ensName: e,
                methodName: t,
                methodArguments: r,
                callback: i,
                parent: this
              })
            };
          }, f.prototype.call = function (e) {
            var t = this,
              r = new a(),
              n = this.parent.prepareArguments(this.ensName, this.methodArguments),
              s = this.outputFormatter || null;
            return this.parent.registry.getResolver(this.ensName).then(function () {
              var a = (0, o.default)(i.default.mark(function o(a) {
                return i.default.wrap(function (i) {
                  for (;;) switch (i.prev = i.next) {
                    case 0:
                      return i.next = 2, t.parent.checkInterfaceSupport(a, t.methodName);
                    case 2:
                      t.parent.handleCall(r, a.methods[t.methodName], n, s, e);
                    case 3:
                    case "end":
                      return i.stop();
                  }
                }, o);
              }));
              return function (e) {
                return a.apply(this, arguments);
              };
            }()).catch(function (t) {
              "function" != typeof e ? r.reject(t) : e(t, null);
            }), r.eventEmitter;
          }, f.prototype.send = function (e, t) {
            var r = this,
              n = new a(),
              s = this.parent.prepareArguments(this.ensName, this.methodArguments);
            return this.parent.registry.getResolver(this.ensName).then(function () {
              var a = (0, o.default)(i.default.mark(function o(a) {
                return i.default.wrap(function (i) {
                  for (;;) switch (i.prev = i.next) {
                    case 0:
                      return i.next = 2, r.parent.checkInterfaceSupport(a, r.methodName);
                    case 2:
                      r.parent.handleSend(n, a.methods[r.methodName], s, e, t);
                    case 3:
                    case "end":
                      return i.stop();
                  }
                }, o);
              }));
              return function (e) {
                return a.apply(this, arguments);
              };
            }()).catch(function (e) {
              "function" != typeof t ? n.reject(e) : t(e, null);
            }), n.eventEmitter;
          }, f.prototype.handleCall = function (e, t, r, n, i) {
            return t.apply(this, r).call().then(function (t) {
              n && (t = n(t)), "function" != typeof i ? e.resolve(t) : i(t, t);
            }).catch(function (t) {
              "function" != typeof i ? e.reject(t) : i(t, null);
            }), e;
          }, f.prototype.handleSend = function (e, t, r, n, i) {
            return t.apply(this, r).send(n).on("sending", function () {
              e.eventEmitter.emit("sending");
            }).on("sent", function () {
              e.eventEmitter.emit("sent");
            }).on("transactionHash", function (t) {
              e.eventEmitter.emit("transactionHash", t);
            }).on("confirmation", function (t, r) {
              e.eventEmitter.emit("confirmation", t, r);
            }).on("receipt", function (t) {
              e.eventEmitter.emit("receipt", t), e.resolve(t), "function" == typeof i && i(t, t);
            }).on("error", function (t) {
              e.eventEmitter.emit("error", t), "function" != typeof i ? e.reject(t) : i(t, null);
            }), e;
          }, f.prototype.prepareArguments = function (e, t) {
            var r = s.hash(e);
            return t.length > 0 ? (t.unshift(r), t) : [r];
          }, f.prototype.checkInterfaceSupport = function () {
            var e = (0, o.default)(i.default.mark(function e(t, r) {
              var n;
              return i.default.wrap(function (e) {
                for (;;) switch (e.prev = e.next) {
                  case 0:
                    if (c[r]) {
                      e.next = 2;
                      break;
                    }
                    return e.abrupt("return");
                  case 2:
                    return n = !1, e.prev = 3, e.next = 6, t.methods.supportsInterface(c[r]).call();
                  case 6:
                    n = e.sent, e.next = 12;
                    break;
                  case 9:
                    e.prev = 9, e.t0 = e.catch(3), console.warn('Could not verify interface of resolver contract at "' + t.options.address + '". ');
                  case 12:
                    if (n) {
                      e.next = 14;
                      break;
                    }
                    throw u.ResolverMethodMissingError(t.options.address, r);
                  case 14:
                  case "end":
                    return e.stop();
                }
              }, e, null, [[3, 9]]);
            }));
            return function (t, r) {
              return e.apply(this, arguments);
            };
          }(), e.exports = f;
        },
        2689: function _(e, t, r) {
          "use strict";

          var n = r(4308);
          e.exports = {
            decode: function decode(e) {
              var t = null,
                r = null,
                i = null;
              if (e && e.error) return {
                protocolType: null,
                decoded: e.error
              };
              if (e) try {
                t = n.decode(e);
                var o = n.getCodec(e);
                "ipfs-ns" === o ? r = "ipfs" : "swarm-ns" === o ? r = "bzz" : "onion" === o ? r = "onion" : "onion3" === o ? r = "onion3" : t = e;
              } catch (e) {
                i = e.message;
              }
              return {
                protocolType: r,
                decoded: t,
                error: i
              };
            },
            encode: function encode(e) {
              var t,
                r,
                i = !1;
              if (e) {
                var o = e.match(/^(ipfs|bzz|onion|onion3):\/\/(.*)/) || e.match(/\/(ipfs)\/(.*)/);
                o && (r = o[1], t = o[2]);
                try {
                  if ("ipfs" === r) t.length >= 4 && (i = "0x" + n.fromIpfs(t));else if ("bzz" === r) t.length >= 4 && (i = "0x" + n.fromSwarm(t));else if ("onion" === r) 16 === t.length && (i = "0x" + n.encode("onion", t));else {
                    if ("onion3" !== r) throw new Error("Could not encode content hash: unsupported content type");
                    56 === t.length && (i = "0x" + n.encode("onion3", t));
                  }
                } catch (e) {
                  throw e;
                }
              }
              return i;
            }
          };
        },
        3205: function _(e) {
          "use strict";

          e.exports = [{
            constant: !0,
            inputs: [{
              name: "node",
              type: "bytes32"
            }],
            name: "resolver",
            outputs: [{
              name: "",
              type: "address"
            }],
            payable: !1,
            type: "function"
          }, {
            constant: !0,
            inputs: [{
              name: "node",
              type: "bytes32"
            }],
            name: "owner",
            outputs: [{
              name: "",
              type: "address"
            }],
            payable: !1,
            type: "function"
          }, {
            constant: !1,
            inputs: [{
              name: "node",
              type: "bytes32"
            }, {
              name: "label",
              type: "bytes32"
            }, {
              name: "owner",
              type: "address"
            }],
            name: "setSubnodeOwner",
            outputs: [],
            payable: !1,
            type: "function"
          }, {
            constant: !1,
            inputs: [{
              name: "node",
              type: "bytes32"
            }, {
              name: "ttl",
              type: "uint64"
            }],
            name: "setTTL",
            outputs: [],
            payable: !1,
            type: "function"
          }, {
            constant: !0,
            inputs: [{
              name: "node",
              type: "bytes32"
            }],
            name: "ttl",
            outputs: [{
              name: "",
              type: "uint64"
            }],
            payable: !1,
            type: "function"
          }, {
            constant: !1,
            inputs: [{
              name: "node",
              type: "bytes32"
            }, {
              name: "resolver",
              type: "address"
            }],
            name: "setResolver",
            outputs: [],
            payable: !1,
            type: "function"
          }, {
            constant: !1,
            inputs: [{
              name: "node",
              type: "bytes32"
            }, {
              name: "owner",
              type: "address"
            }],
            name: "setOwner",
            outputs: [],
            payable: !1,
            type: "function"
          }, {
            anonymous: !1,
            inputs: [{
              indexed: !0,
              name: "node",
              type: "bytes32"
            }, {
              indexed: !1,
              name: "owner",
              type: "address"
            }],
            name: "Transfer",
            type: "event"
          }, {
            anonymous: !1,
            inputs: [{
              indexed: !0,
              name: "node",
              type: "bytes32"
            }, {
              indexed: !0,
              name: "label",
              type: "bytes32"
            }, {
              indexed: !1,
              name: "owner",
              type: "address"
            }],
            name: "NewOwner",
            type: "event"
          }, {
            anonymous: !1,
            inputs: [{
              indexed: !0,
              name: "node",
              type: "bytes32"
            }, {
              indexed: !1,
              name: "resolver",
              type: "address"
            }],
            name: "NewResolver",
            type: "event"
          }, {
            anonymous: !1,
            inputs: [{
              indexed: !0,
              name: "node",
              type: "bytes32"
            }, {
              indexed: !1,
              name: "ttl",
              type: "uint64"
            }],
            name: "NewTTL",
            type: "event"
          }, {
            constant: !1,
            inputs: [{
              internalType: "bytes32",
              name: "node",
              type: "bytes32"
            }, {
              internalType: "address",
              name: "owner",
              type: "address"
            }, {
              internalType: "address",
              name: "resolver",
              type: "address"
            }, {
              internalType: "uint64",
              name: "ttl",
              type: "uint64"
            }],
            name: "setRecord",
            outputs: [],
            payable: !1,
            stateMutability: "nonpayable",
            type: "function"
          }, {
            constant: !1,
            inputs: [{
              internalType: "address",
              name: "operator",
              type: "address"
            }, {
              internalType: "bool",
              name: "approved",
              type: "bool"
            }],
            name: "setApprovalForAll",
            outputs: [],
            payable: !1,
            stateMutability: "nonpayable",
            type: "function"
          }, {
            anonymous: !1,
            inputs: [{
              indexed: !0,
              internalType: "address",
              name: "owner",
              type: "address"
            }, {
              indexed: !0,
              internalType: "address",
              name: "operator",
              type: "address"
            }, {
              indexed: !1,
              internalType: "bool",
              name: "approved",
              type: "bool"
            }],
            name: "ApprovalForAll",
            type: "event"
          }, {
            constant: !0,
            inputs: [{
              internalType: "address",
              name: "owner",
              type: "address"
            }, {
              internalType: "address",
              name: "operator",
              type: "address"
            }],
            name: "isApprovedForAll",
            outputs: [{
              internalType: "bool",
              name: "",
              type: "bool"
            }],
            payable: !1,
            stateMutability: "view",
            type: "function"
          }, {
            constant: !0,
            inputs: [{
              internalType: "bytes32",
              name: "node",
              type: "bytes32"
            }],
            name: "recordExists",
            outputs: [{
              internalType: "bool",
              name: "",
              type: "bool"
            }],
            payable: !1,
            stateMutability: "view",
            type: "function"
          }, {
            constant: !1,
            inputs: [{
              internalType: "bytes32",
              name: "node",
              type: "bytes32"
            }, {
              internalType: "bytes32",
              name: "label",
              type: "bytes32"
            }, {
              internalType: "address",
              name: "owner",
              type: "address"
            }, {
              internalType: "address",
              name: "resolver",
              type: "address"
            }, {
              internalType: "uint64",
              name: "ttl",
              type: "uint64"
            }],
            name: "setSubnodeRecord",
            outputs: [],
            payable: !1,
            stateMutability: "nonpayable",
            type: "function"
          }];
        },
        8384: function _(e) {
          "use strict";

          e.exports = [{
            constant: !0,
            inputs: [{
              name: "interfaceID",
              type: "bytes4"
            }],
            name: "supportsInterface",
            outputs: [{
              name: "",
              type: "bool"
            }],
            payable: !1,
            type: "function"
          }, {
            constant: !0,
            inputs: [{
              name: "node",
              type: "bytes32"
            }, {
              name: "contentTypes",
              type: "uint256"
            }],
            name: "ABI",
            outputs: [{
              name: "contentType",
              type: "uint256"
            }, {
              name: "data",
              type: "bytes"
            }],
            payable: !1,
            type: "function"
          }, {
            constant: !1,
            inputs: [{
              name: "node",
              type: "bytes32"
            }, {
              name: "hash",
              type: "bytes"
            }],
            name: "setMultihash",
            outputs: [],
            payable: !1,
            stateMutability: "nonpayable",
            type: "function"
          }, {
            constant: !0,
            inputs: [{
              name: "node",
              type: "bytes32"
            }],
            name: "multihash",
            outputs: [{
              name: "",
              type: "bytes"
            }],
            payable: !1,
            stateMutability: "view",
            type: "function"
          }, {
            constant: !1,
            inputs: [{
              name: "node",
              type: "bytes32"
            }, {
              name: "x",
              type: "bytes32"
            }, {
              name: "y",
              type: "bytes32"
            }],
            name: "setPubkey",
            outputs: [],
            payable: !1,
            type: "function"
          }, {
            constant: !0,
            inputs: [{
              name: "node",
              type: "bytes32"
            }],
            name: "content",
            outputs: [{
              name: "ret",
              type: "bytes32"
            }],
            payable: !1,
            type: "function"
          }, {
            constant: !0,
            inputs: [{
              name: "node",
              type: "bytes32"
            }],
            name: "addr",
            outputs: [{
              name: "ret",
              type: "address"
            }],
            payable: !1,
            type: "function"
          }, {
            constant: !1,
            inputs: [{
              name: "node",
              type: "bytes32"
            }, {
              name: "contentType",
              type: "uint256"
            }, {
              name: "data",
              type: "bytes"
            }],
            name: "setABI",
            outputs: [],
            payable: !1,
            type: "function"
          }, {
            constant: !0,
            inputs: [{
              name: "node",
              type: "bytes32"
            }],
            name: "name",
            outputs: [{
              name: "ret",
              type: "string"
            }],
            payable: !1,
            type: "function"
          }, {
            constant: !1,
            inputs: [{
              name: "node",
              type: "bytes32"
            }, {
              name: "name",
              type: "string"
            }],
            name: "setName",
            outputs: [],
            payable: !1,
            type: "function"
          }, {
            constant: !1,
            inputs: [{
              name: "node",
              type: "bytes32"
            }, {
              name: "hash",
              type: "bytes32"
            }],
            name: "setContent",
            outputs: [],
            payable: !1,
            type: "function"
          }, {
            constant: !0,
            inputs: [{
              name: "node",
              type: "bytes32"
            }],
            name: "pubkey",
            outputs: [{
              name: "x",
              type: "bytes32"
            }, {
              name: "y",
              type: "bytes32"
            }],
            payable: !1,
            type: "function"
          }, {
            constant: !1,
            inputs: [{
              name: "node",
              type: "bytes32"
            }, {
              name: "addr",
              type: "address"
            }],
            name: "setAddr",
            outputs: [],
            payable: !1,
            type: "function"
          }, {
            inputs: [{
              name: "ensAddr",
              type: "address"
            }],
            payable: !1,
            type: "constructor"
          }, {
            anonymous: !1,
            inputs: [{
              indexed: !0,
              name: "node",
              type: "bytes32"
            }, {
              indexed: !1,
              name: "a",
              type: "address"
            }],
            name: "AddrChanged",
            type: "event"
          }, {
            anonymous: !1,
            inputs: [{
              indexed: !0,
              name: "node",
              type: "bytes32"
            }, {
              indexed: !1,
              name: "hash",
              type: "bytes32"
            }],
            name: "ContentChanged",
            type: "event"
          }, {
            anonymous: !1,
            inputs: [{
              indexed: !0,
              name: "node",
              type: "bytes32"
            }, {
              indexed: !1,
              name: "name",
              type: "string"
            }],
            name: "NameChanged",
            type: "event"
          }, {
            anonymous: !1,
            inputs: [{
              indexed: !0,
              name: "node",
              type: "bytes32"
            }, {
              indexed: !0,
              name: "contentType",
              type: "uint256"
            }],
            name: "ABIChanged",
            type: "event"
          }, {
            anonymous: !1,
            inputs: [{
              indexed: !0,
              name: "node",
              type: "bytes32"
            }, {
              indexed: !1,
              name: "x",
              type: "bytes32"
            }, {
              indexed: !1,
              name: "y",
              type: "bytes32"
            }],
            name: "PubkeyChanged",
            type: "event"
          }, {
            anonymous: !1,
            inputs: [{
              indexed: !0,
              name: "node",
              type: "bytes32"
            }, {
              indexed: !1,
              name: "hash",
              type: "bytes"
            }],
            name: "ContenthashChanged",
            type: "event"
          }, {
            constant: !0,
            inputs: [{
              name: "node",
              type: "bytes32"
            }],
            name: "contenthash",
            outputs: [{
              name: "",
              type: "bytes"
            }],
            payable: !1,
            stateMutability: "view",
            type: "function"
          }, {
            constant: !1,
            inputs: [{
              name: "node",
              type: "bytes32"
            }, {
              name: "hash",
              type: "bytes"
            }],
            name: "setContenthash",
            outputs: [],
            payable: !1,
            stateMutability: "nonpayable",
            type: "function"
          }];
        },
        6: function _(e, t, r) {
          "use strict";

          var n = r(8847),
            i = n(r(9721)),
            o = n(r(8985)),
            a = r(8161),
            s = r(1734),
            u = function u(e) {
              var t = "A".charCodeAt(0),
                r = "Z".charCodeAt(0);
              return (e = (e = e.toUpperCase()).slice(4) + e.slice(0, 4)).split("").map(function (e) {
                var n = e.charCodeAt(0);
                return n >= t && n <= r ? n - t + 10 : e;
              }).join("");
            },
            c = function c(e) {
              for (var t, r = e; r.length > 2;) t = r.slice(0, 9), r = parseInt(t, 10) % 97 + r.slice(t.length);
              return parseInt(r, 10) % 97;
            },
            f = function () {
              function e(t) {
                (0, i.default)(this, e), this._iban = t;
              }
              return (0, o.default)(e, [{
                key: "isValid",
                value: function value() {
                  return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && 1 === c(u(this._iban));
                }
              }, {
                key: "isDirect",
                value: function value() {
                  return 34 === this._iban.length || 35 === this._iban.length;
                }
              }, {
                key: "isIndirect",
                value: function value() {
                  return 20 === this._iban.length;
                }
              }, {
                key: "checksum",
                value: function value() {
                  return this._iban.slice(2, 4);
                }
              }, {
                key: "institution",
                value: function value() {
                  return this.isIndirect() ? this._iban.slice(7, 11) : "";
                }
              }, {
                key: "client",
                value: function value() {
                  return this.isIndirect() ? this._iban.slice(11) : "";
                }
              }, {
                key: "toAddress",
                value: function value() {
                  if (this.isDirect()) {
                    var e = this._iban.slice(4),
                      t = new s(e, 36);
                    return a.toChecksumAddress(t.toString(16, 20));
                  }
                  return "";
                }
              }, {
                key: "toString",
                value: function value() {
                  return this._iban;
                }
              }], [{
                key: "toAddress",
                value: function value(t) {
                  if (!(t = new e(t)).isDirect()) throw new Error("IBAN is indirect and can't be converted");
                  return t.toAddress();
                }
              }, {
                key: "toIban",
                value: function value(t) {
                  return e.fromAddress(t).toString();
                }
              }, {
                key: "fromAddress",
                value: function value(t) {
                  if (!a.isAddress(t)) throw new Error("Provided address is not a valid address: " + t);
                  t = t.replace("0x", "").replace("0X", "");
                  var r = function (e, t) {
                    for (var r = e; r.length < 30;) r = "0" + r;
                    return r;
                  }(new s(t, 16).toString(36));
                  return e.fromBban(r.toUpperCase());
                }
              }, {
                key: "fromBban",
                value: function value(t) {
                  return new e("XE" + ("0" + (98 - c(u("XE00" + t)))).slice(-2) + t);
                }
              }, {
                key: "createIndirect",
                value: function value(t) {
                  return e.fromBban("ETH" + t.institution + t.identifier);
                }
              }, {
                key: "isValid",
                value: function value(t) {
                  return new e(t).isValid();
                }
              }]), e;
            }();
          e.exports = f;
        },
        6306: function _(e, t, r) {
          "use strict";

          var n = r(606),
            i = r(3349),
            o = r(8161),
            a = r(473),
            s = r(1314).formatters,
            u = function u() {
              var e = this;
              n.packageInit(this, arguments), this.net = new a(this);
              var t = null,
                r = "latest";
              Object.defineProperty(this, "defaultAccount", {
                get: function get() {
                  return t;
                },
                set: function set(e) {
                  return e && (t = o.toChecksumAddress(s.inputAddressFormatter(e))), u.forEach(function (e) {
                    e.defaultAccount = t;
                  }), e;
                },
                enumerable: !0
              }), Object.defineProperty(this, "defaultBlock", {
                get: function get() {
                  return r;
                },
                set: function set(e) {
                  return r = e, u.forEach(function (e) {
                    e.defaultBlock = r;
                  }), e;
                },
                enumerable: !0
              });
              var u = [new i({
                name: "getAccounts",
                call: "personal_listAccounts",
                params: 0,
                outputFormatter: o.toChecksumAddress
              }), new i({
                name: "newAccount",
                call: "personal_newAccount",
                params: 1,
                inputFormatter: [null],
                outputFormatter: o.toChecksumAddress
              }), new i({
                name: "unlockAccount",
                call: "personal_unlockAccount",
                params: 3,
                inputFormatter: [s.inputAddressFormatter, null, null]
              }), new i({
                name: "lockAccount",
                call: "personal_lockAccount",
                params: 1,
                inputFormatter: [s.inputAddressFormatter]
              }), new i({
                name: "importRawKey",
                call: "personal_importRawKey",
                params: 2
              }), new i({
                name: "sendTransaction",
                call: "personal_sendTransaction",
                params: 2,
                inputFormatter: [s.inputTransactionFormatter, null]
              }), new i({
                name: "signTransaction",
                call: "personal_signTransaction",
                params: 2,
                inputFormatter: [s.inputTransactionFormatter, null]
              }), new i({
                name: "sign",
                call: "personal_sign",
                params: 3,
                inputFormatter: [s.inputSignFormatter, s.inputAddressFormatter, null]
              }), new i({
                name: "ecRecover",
                call: "personal_ecRecover",
                params: 2,
                inputFormatter: [s.inputSignFormatter, null]
              })];
              u.forEach(function (t) {
                t.attachToObject(e), t.setRequestManager(e._requestManager), t.defaultBlock = e.defaultBlock, t.defaultAccount = e.defaultAccount;
              });
            };
          n.addProviders(u), e.exports = u;
        },
        8130: function _(e) {
          "use strict";

          e.exports = function (e) {
            var t,
              r = this;
            return this.net.getId().then(function (e) {
              return t = e, r.getBlock(0);
            }).then(function (r) {
              var n = "private";
              return "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3" === r.hash && 1 === t && (n = "main"), "0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d" === r.hash && 3 === t && (n = "ropsten"), "0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177" === r.hash && 4 === t && (n = "rinkeby"), "0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a" === r.hash && 5 === t && (n = "goerli"), "0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9" === r.hash && 42 === t && (n = "kovan"), "function" == typeof e && e(null, n), n;
            }).catch(function (t) {
              if ("function" != typeof e) throw t;
              e(t);
            });
          };
        },
        6748: function _(e, t, r) {
          "use strict";

          var n = r(606),
            i = r(1314),
            o = r(4178).subscriptions,
            a = r(3349),
            s = r(8161),
            u = r(473),
            c = r(715),
            f = r(6306),
            d = r(8164),
            l = r(6),
            h = r(9819),
            p = r(9901),
            b = r(8130),
            y = i.formatters,
            m = function m(e) {
              return "string" == typeof e[0] && 0 === e[0].indexOf("0x") ? "eth_getBlockByHash" : "eth_getBlockByNumber";
            },
            v = function v(e) {
              return "string" == typeof e[0] && 0 === e[0].indexOf("0x") ? "eth_getTransactionByBlockHashAndIndex" : "eth_getTransactionByBlockNumberAndIndex";
            },
            g = function g(e) {
              return "string" == typeof e[0] && 0 === e[0].indexOf("0x") ? "eth_getUncleByBlockHashAndIndex" : "eth_getUncleByBlockNumberAndIndex";
            },
            w = function w(e) {
              return "string" == typeof e[0] && 0 === e[0].indexOf("0x") ? "eth_getBlockTransactionCountByHash" : "eth_getBlockTransactionCountByNumber";
            },
            A = function A(e) {
              return "string" == typeof e[0] && 0 === e[0].indexOf("0x") ? "eth_getUncleCountByBlockHash" : "eth_getUncleCountByBlockNumber";
            },
            k = function k() {
              var e = this;
              n.packageInit(this, arguments);
              var t = this.setRequestManager;
              this.setRequestManager = function (r) {
                return t(r), e.net.setRequestManager(r), e.personal.setRequestManager(r), e.accounts.setRequestManager(r), e.Contract._requestManager = e._requestManager, e.Contract.currentProvider = e._provider, !0;
              };
              var r = this.setProvider;
              this.setProvider = function () {
                r.apply(e, arguments), e.setRequestManager(e._requestManager), e.ens._detectedAddress = null, e.ens._lastSyncCheck = null;
              };
              var i,
                k,
                _,
                S = !1,
                E = null,
                x = "latest",
                P = 50,
                O = 24,
                B = 750,
                T = 1e3,
                C = 10,
                I = 100;
              Object.defineProperty(this, "handleRevert", {
                get: function get() {
                  return S;
                },
                set: function set(t) {
                  S = t, e.Contract.handleRevert = S, R.forEach(function (e) {
                    e.handleRevert = S;
                  });
                },
                enumerable: !0
              }), Object.defineProperty(this, "defaultCommon", {
                get: function get() {
                  return _;
                },
                set: function set(t) {
                  _ = t, e.Contract.defaultCommon = _, R.forEach(function (e) {
                    e.defaultCommon = _;
                  });
                },
                enumerable: !0
              }), Object.defineProperty(this, "defaultHardfork", {
                get: function get() {
                  return k;
                },
                set: function set(t) {
                  k = t, e.Contract.defaultHardfork = k, R.forEach(function (e) {
                    e.defaultHardfork = k;
                  });
                },
                enumerable: !0
              }), Object.defineProperty(this, "defaultChain", {
                get: function get() {
                  return i;
                },
                set: function set(t) {
                  i = t, e.Contract.defaultChain = i, R.forEach(function (e) {
                    e.defaultChain = i;
                  });
                },
                enumerable: !0
              }), Object.defineProperty(this, "transactionPollingTimeout", {
                get: function get() {
                  return B;
                },
                set: function set(t) {
                  B = t, e.Contract.transactionPollingTimeout = B, R.forEach(function (e) {
                    e.transactionPollingTimeout = B;
                  });
                },
                enumerable: !0
              }), Object.defineProperty(this, "transactionPollingInterval", {
                get: function get() {
                  return T;
                },
                set: function set(t) {
                  T = t, e.Contract.transactionPollingInterval = T, R.forEach(function (e) {
                    e.transactionPollingInterval = T;
                  });
                },
                enumerable: !0
              }), Object.defineProperty(this, "transactionConfirmationBlocks", {
                get: function get() {
                  return O;
                },
                set: function set(t) {
                  O = t, e.Contract.transactionConfirmationBlocks = O, R.forEach(function (e) {
                    e.transactionConfirmationBlocks = O;
                  });
                },
                enumerable: !0
              }), Object.defineProperty(this, "transactionBlockTimeout", {
                get: function get() {
                  return P;
                },
                set: function set(t) {
                  P = t, e.Contract.transactionBlockTimeout = P, R.forEach(function (e) {
                    e.transactionBlockTimeout = P;
                  });
                },
                enumerable: !0
              }), Object.defineProperty(this, "blockHeaderTimeout", {
                get: function get() {
                  return C;
                },
                set: function set(t) {
                  C = t, e.Contract.blockHeaderTimeout = C, R.forEach(function (e) {
                    e.blockHeaderTimeout = C;
                  });
                },
                enumerable: !0
              }), Object.defineProperty(this, "defaultAccount", {
                get: function get() {
                  return E;
                },
                set: function set(t) {
                  return t && (E = s.toChecksumAddress(y.inputAddressFormatter(t))), e.Contract.defaultAccount = E, e.personal.defaultAccount = E, R.forEach(function (e) {
                    e.defaultAccount = E;
                  }), t;
                },
                enumerable: !0
              }), Object.defineProperty(this, "defaultBlock", {
                get: function get() {
                  return x;
                },
                set: function set(t) {
                  return x = t, e.Contract.defaultBlock = x, e.personal.defaultBlock = x, R.forEach(function (e) {
                    e.defaultBlock = x;
                  }), t;
                },
                enumerable: !0
              }), Object.defineProperty(this, "maxListenersWarningThreshold", {
                get: function get() {
                  return I;
                },
                set: function set(t) {
                  e.currentProvider && e.currentProvider.setMaxListeners && (I = t, e.currentProvider.setMaxListeners(t));
                },
                enumerable: !0
              }), this.clearSubscriptions = e._requestManager.clearSubscriptions.bind(e._requestManager), this.removeSubscriptionById = e._requestManager.removeSubscription.bind(e._requestManager), this.net = new u(this), this.net.getNetworkType = b.bind(this), this.accounts = new h(this), this.personal = new f(this), this.personal.defaultAccount = this.defaultAccount, this.maxListenersWarningThreshold = I;
              var M = this,
                U = function U() {
                  d.apply(this, arguments);
                  var e = this,
                    t = M.setProvider;
                  M.setProvider = function () {
                    t.apply(M, arguments), n.packageInit(e, [M]);
                  };
                };
              U.setProvider = function () {
                d.setProvider.apply(this, arguments);
              }, (U.prototype = Object.create(d.prototype)).constructor = U, this.Contract = U, this.Contract.defaultAccount = this.defaultAccount, this.Contract.defaultBlock = this.defaultBlock, this.Contract.transactionBlockTimeout = this.transactionBlockTimeout, this.Contract.transactionConfirmationBlocks = this.transactionConfirmationBlocks, this.Contract.transactionPollingTimeout = this.transactionPollingTimeout, this.Contract.transactionPollingInterval = this.transactionPollingInterval, this.Contract.blockHeaderTimeout = this.blockHeaderTimeout, this.Contract.handleRevert = this.handleRevert, this.Contract._requestManager = this._requestManager, this.Contract._ethAccounts = this.accounts, this.Contract.currentProvider = this._requestManager.provider, this.Iban = l, this.abi = p, this.ens = new c(this);
              var R = [new a({
                name: "getNodeInfo",
                call: "web3_clientVersion"
              }), new a({
                name: "getProtocolVersion",
                call: "eth_protocolVersion",
                params: 0
              }), new a({
                name: "getCoinbase",
                call: "eth_coinbase",
                params: 0
              }), new a({
                name: "isMining",
                call: "eth_mining",
                params: 0
              }), new a({
                name: "getHashrate",
                call: "eth_hashrate",
                params: 0,
                outputFormatter: s.hexToNumber
              }), new a({
                name: "isSyncing",
                call: "eth_syncing",
                params: 0,
                outputFormatter: y.outputSyncingFormatter
              }), new a({
                name: "getGasPrice",
                call: "eth_gasPrice",
                params: 0,
                outputFormatter: y.outputBigNumberFormatter
              }), new a({
                name: "getFeeHistory",
                call: "eth_feeHistory",
                params: 3,
                inputFormatter: [s.numberToHex, y.inputBlockNumberFormatter, null]
              }), new a({
                name: "getAccounts",
                call: "eth_accounts",
                params: 0,
                outputFormatter: s.toChecksumAddress
              }), new a({
                name: "getBlockNumber",
                call: "eth_blockNumber",
                params: 0,
                outputFormatter: s.hexToNumber
              }), new a({
                name: "getBalance",
                call: "eth_getBalance",
                params: 2,
                inputFormatter: [y.inputAddressFormatter, y.inputDefaultBlockNumberFormatter],
                outputFormatter: y.outputBigNumberFormatter
              }), new a({
                name: "getStorageAt",
                call: "eth_getStorageAt",
                params: 3,
                inputFormatter: [y.inputAddressFormatter, s.numberToHex, y.inputDefaultBlockNumberFormatter]
              }), new a({
                name: "getCode",
                call: "eth_getCode",
                params: 2,
                inputFormatter: [y.inputAddressFormatter, y.inputDefaultBlockNumberFormatter]
              }), new a({
                name: "getBlock",
                call: m,
                params: 2,
                inputFormatter: [y.inputBlockNumberFormatter, function (e) {
                  return !!e;
                }],
                outputFormatter: y.outputBlockFormatter
              }), new a({
                name: "getUncle",
                call: g,
                params: 2,
                inputFormatter: [y.inputBlockNumberFormatter, s.numberToHex],
                outputFormatter: y.outputBlockFormatter
              }), new a({
                name: "getBlockTransactionCount",
                call: w,
                params: 1,
                inputFormatter: [y.inputBlockNumberFormatter],
                outputFormatter: s.hexToNumber
              }), new a({
                name: "getBlockUncleCount",
                call: A,
                params: 1,
                inputFormatter: [y.inputBlockNumberFormatter],
                outputFormatter: s.hexToNumber
              }), new a({
                name: "getTransaction",
                call: "eth_getTransactionByHash",
                params: 1,
                inputFormatter: [null],
                outputFormatter: y.outputTransactionFormatter
              }), new a({
                name: "getTransactionFromBlock",
                call: v,
                params: 2,
                inputFormatter: [y.inputBlockNumberFormatter, s.numberToHex],
                outputFormatter: y.outputTransactionFormatter
              }), new a({
                name: "getTransactionReceipt",
                call: "eth_getTransactionReceipt",
                params: 1,
                inputFormatter: [null],
                outputFormatter: y.outputTransactionReceiptFormatter
              }), new a({
                name: "getTransactionCount",
                call: "eth_getTransactionCount",
                params: 2,
                inputFormatter: [y.inputAddressFormatter, y.inputDefaultBlockNumberFormatter],
                outputFormatter: s.hexToNumber
              }), new a({
                name: "sendSignedTransaction",
                call: "eth_sendRawTransaction",
                params: 1,
                inputFormatter: [null],
                abiCoder: p
              }), new a({
                name: "signTransaction",
                call: "eth_signTransaction",
                params: 1,
                inputFormatter: [y.inputTransactionFormatter]
              }), new a({
                name: "sendTransaction",
                call: "eth_sendTransaction",
                params: 1,
                inputFormatter: [y.inputTransactionFormatter],
                abiCoder: p
              }), new a({
                name: "sign",
                call: "eth_sign",
                params: 2,
                inputFormatter: [y.inputSignFormatter, y.inputAddressFormatter],
                transformPayload: function transformPayload(e) {
                  return e.params.reverse(), e;
                }
              }), new a({
                name: "call",
                call: "eth_call",
                params: 2,
                inputFormatter: [y.inputCallFormatter, y.inputDefaultBlockNumberFormatter],
                abiCoder: p
              }), new a({
                name: "estimateGas",
                call: "eth_estimateGas",
                params: 1,
                inputFormatter: [y.inputCallFormatter],
                outputFormatter: s.hexToNumber
              }), new a({
                name: "submitWork",
                call: "eth_submitWork",
                params: 3
              }), new a({
                name: "getWork",
                call: "eth_getWork",
                params: 0
              }), new a({
                name: "getPastLogs",
                call: "eth_getLogs",
                params: 1,
                inputFormatter: [y.inputLogFormatter],
                outputFormatter: y.outputLogFormatter
              }), new a({
                name: "getChainId",
                call: "eth_chainId",
                params: 0,
                outputFormatter: s.hexToNumber
              }), new a({
                name: "requestAccounts",
                call: "eth_requestAccounts",
                params: 0,
                outputFormatter: s.toChecksumAddress
              }), new a({
                name: "getProof",
                call: "eth_getProof",
                params: 3,
                inputFormatter: [y.inputAddressFormatter, y.inputStorageKeysFormatter, y.inputDefaultBlockNumberFormatter],
                outputFormatter: y.outputProofFormatter
              }), new a({
                name: "getPendingTransactions",
                call: "eth_pendingTransactions",
                params: 0,
                outputFormatter: y.outputTransactionFormatter
              }), new a({
                name: "createAccessList",
                call: "eth_createAccessList",
                params: 2,
                inputFormatter: [y.inputTransactionFormatter, y.inputDefaultBlockNumberFormatter]
              }), new o({
                name: "subscribe",
                type: "eth",
                subscriptions: {
                  newBlockHeaders: {
                    subscriptionName: "newHeads",
                    params: 0,
                    outputFormatter: y.outputBlockFormatter
                  },
                  pendingTransactions: {
                    subscriptionName: "newPendingTransactions",
                    params: 0
                  },
                  logs: {
                    params: 1,
                    inputFormatter: [y.inputLogFormatter],
                    outputFormatter: y.outputLogFormatter,
                    subscriptionHandler: function subscriptionHandler(e) {
                      e.removed ? this.emit("changed", e) : this.emit("data", e), "function" == typeof this.callback && this.callback(null, e, this);
                    }
                  },
                  syncing: {
                    params: 0,
                    outputFormatter: y.outputSyncingFormatter,
                    subscriptionHandler: function subscriptionHandler(e) {
                      var t = this;
                      !0 !== this._isSyncing ? (this._isSyncing = !0, this.emit("changed", t._isSyncing), "function" == typeof this.callback && this.callback(null, t._isSyncing, this), setTimeout(function () {
                        t.emit("data", e), "function" == typeof t.callback && t.callback(null, e, t);
                      }, 0)) : (this.emit("data", e), "function" == typeof t.callback && this.callback(null, e, this), clearTimeout(this._isSyncingTimeout), this._isSyncingTimeout = setTimeout(function () {
                        e.currentBlock > e.highestBlock - 200 && (t._isSyncing = !1, t.emit("changed", t._isSyncing), "function" == typeof t.callback && t.callback(null, t._isSyncing, t));
                      }, 500));
                    }
                  }
                }
              })];
              R.forEach(function (t) {
                t.attachToObject(e), t.setRequestManager(e._requestManager, e.accounts), t.defaultBlock = e.defaultBlock, t.defaultAccount = e.defaultAccount, t.transactionBlockTimeout = e.transactionBlockTimeout, t.transactionConfirmationBlocks = e.transactionConfirmationBlocks, t.transactionPollingTimeout = e.transactionPollingTimeout, t.transactionPollingInterval = e.transactionPollingInterval, t.handleRevert = e.handleRevert;
              });
            };
          n.addProviders(k), e.exports = k;
        },
        473: function _(e, t, r) {
          "use strict";

          var n = r(606),
            i = r(3349),
            o = r(8161),
            a = function a() {
              var e = this;
              n.packageInit(this, arguments), [new i({
                name: "getId",
                call: "net_version",
                params: 0,
                outputFormatter: parseInt
              }), new i({
                name: "isListening",
                call: "net_listening",
                params: 0
              }), new i({
                name: "getPeerCount",
                call: "net_peerCount",
                params: 0,
                outputFormatter: o.hexToNumber
              })].forEach(function (t) {
                t.attachToObject(e), t.setRequestManager(e._requestManager);
              });
            };
          n.addProviders(a), e.exports = a;
        },
        4565: function _(e, t, r) {
          "use strict";

          var n = r(1314).errors,
            i = r(9519),
            o = r(912);
          r(2439), r(4258).polyfill(), void 0 === r.g || r.g.AbortController || r(3368);
          var a = function a(e, t) {
            t = t || {}, this.withCredentials = t.withCredentials, this.timeout = t.timeout || 0, this.headers = t.headers, this.agent = t.agent, this.connected = !1;
            var r = !1 !== t.keepAlive;
            this.host = e || "http://localhost:8545", this.agent || ("https" === this.host.substring(0, 5) ? this.httpsAgent = new o.Agent({
              keepAlive: r
            }) : this.httpAgent = new i.Agent({
              keepAlive: r
            }));
          };
          a.prototype.send = function (e, t) {
            var r,
              i = {
                method: "POST",
                body: JSON.stringify(e)
              },
              o = {};
            if ("undefined" != typeof AbortController ? r = new AbortController() : "undefined" != typeof window && void 0 !== window.AbortController && (r = new window.AbortController()), void 0 !== r && (i.signal = r.signal), "undefined" == typeof XMLHttpRequest) {
              var a = {
                httpsAgent: this.httpsAgent,
                httpAgent: this.httpAgent
              };
              this.agent && (a.httpsAgent = this.agent.https, a.httpAgent = this.agent.http), "https" === this.host.substring(0, 5) ? i.agent = a.httpsAgent : i.agent = a.httpAgent;
            }
            this.headers && this.headers.forEach(function (e) {
              o[e.name] = e.value;
            }), o["Content-Type"] || (o["Content-Type"] = "application/json"), this.withCredentials ? i.credentials = "include" : i.credentials = "omit", i.headers = o, this.timeout > 0 && void 0 !== r && (this.timeoutId = setTimeout(function () {
              r.abort();
            }, this.timeout)), fetch(this.host, i).then(function (e) {
              void 0 !== this.timeoutId && clearTimeout(this.timeoutId), e.json().then(function (e) {
                t(null, e);
              }).catch(function (r) {
                t(n.InvalidResponse(e));
              });
            }.bind(this)).catch(function (e) {
              void 0 !== this.timeoutId && clearTimeout(this.timeoutId), "AbortError" === e.name && t(n.ConnectionTimeout(this.timeout)), t(n.InvalidConnection(this.host, e));
            }.bind(this));
          }, a.prototype.disconnect = function () {}, a.prototype.supportsSubscriptions = function () {
            return !1;
          }, e.exports = a;
        },
        2683: function _(e, t, r) {
          "use strict";

          var n = r(1314).errors,
            i = r(3150),
            o = function o(e, t) {
              var r = this;
              this.responseCallbacks = {}, this.notificationCallbacks = [], this.path = e, this.connected = !1, this.connection = t.connect({
                path: this.path
              }), this.addDefaultEvents();
              var n = function n(e) {
                var t = null;
                Array.isArray(e) ? e.forEach(function (e) {
                  r.responseCallbacks[e.id] && (t = e.id);
                }) : t = e.id, t || -1 === e.method.indexOf("_subscription") ? r.responseCallbacks[t] && (r.responseCallbacks[t](null, e), delete r.responseCallbacks[t]) : r.notificationCallbacks.forEach(function (t) {
                  "function" == typeof t && t(e);
                });
              };
              "Socket" === t.constructor.name ? i(this.connection).done(n) : this.connection.on("data", function (e) {
                r._parseResponse(e.toString()).forEach(n);
              });
            };
          o.prototype.addDefaultEvents = function () {
            var e = this;
            this.connection.on("connect", function () {
              e.connected = !0;
            }), this.connection.on("close", function () {
              e.connected = !1;
            }), this.connection.on("error", function () {
              e._timeout();
            }), this.connection.on("end", function () {
              e._timeout();
            }), this.connection.on("timeout", function () {
              e._timeout();
            });
          }, o.prototype._parseResponse = function (e) {
            var t = this,
              r = [];
            return e.replace(/\}[\n\r]?\{/g, "}|--|{").replace(/\}\][\n\r]?\[\{/g, "}]|--|[{").replace(/\}[\n\r]?\[\{/g, "}|--|[{").replace(/\}\][\n\r]?\{/g, "}]|--|{").split("|--|").forEach(function (e) {
              t.lastChunk && (e = t.lastChunk + e);
              var i = null;
              try {
                i = JSON.parse(e);
              } catch (r) {
                return t.lastChunk = e, clearTimeout(t.lastChunkTimeout), void (t.lastChunkTimeout = setTimeout(function () {
                  throw t._timeout(), n.InvalidResponse(e);
                }, 15e3));
              }
              clearTimeout(t.lastChunkTimeout), t.lastChunk = null, i && r.push(i);
            }), r;
          }, o.prototype._addResponseCallback = function (e, t) {
            var r = e.id || e[0].id,
              n = e.method || e[0].method;
            this.responseCallbacks[r] = t, this.responseCallbacks[r].method = n;
          }, o.prototype._timeout = function () {
            for (var e in this.responseCallbacks) this.responseCallbacks.hasOwnProperty(e) && (this.responseCallbacks[e](n.InvalidConnection("on IPC")), delete this.responseCallbacks[e]);
          }, o.prototype.reconnect = function () {
            this.connection.connect({
              path: this.path
            });
          }, o.prototype.send = function (e, t) {
            this.connection.writable || this.connection.connect({
              path: this.path
            }), this.connection.write(JSON.stringify(e)), this._addResponseCallback(e, t);
          }, o.prototype.on = function (e, t) {
            if ("function" != typeof t) throw new Error("The second parameter callback must be a function.");
            "data" === e ? this.notificationCallbacks.push(t) : this.connection.on(e, t);
          }, o.prototype.once = function (e, t) {
            if ("function" != typeof t) throw new Error("The second parameter callback must be a function.");
            this.connection.once(e, t);
          }, o.prototype.removeListener = function (e, t) {
            var r = this;
            "data" === e ? this.notificationCallbacks.forEach(function (e, n) {
              e === t && r.notificationCallbacks.splice(n, 1);
            }) : this.connection.removeListener(e, t);
          }, o.prototype.removeAllListeners = function (e) {
            "data" === e ? this.notificationCallbacks = [] : this.connection.removeAllListeners(e);
          }, o.prototype.reset = function () {
            this._timeout(), this.notificationCallbacks = [], this.connection.removeAllListeners("error"), this.connection.removeAllListeners("end"), this.connection.removeAllListeners("timeout"), this.addDefaultEvents();
          }, o.prototype.supportsSubscriptions = function () {
            return !0;
          }, e.exports = o;
        },
        360: function _(e, t, r) {
          "use strict";

          var n = r(9142),
            i = r(9033).Buffer,
            o = r(8847)(r(3355)),
            a = "[object process]" === Object.prototype.toString.call(void 0 !== n ? n : 0),
            s = "undefined" != typeof navigator && "ReactNative" === navigator.product,
            u = null,
            c = null;
          if (a || s) {
            u = function u(e) {
              return i.from(e).toString("base64");
            };
            var f = r(1143);
            if (f.URL) {
              var d = f.URL;
              c = function c(e) {
                return new d(e);
              };
            } else c = r(1143).parse;
          } else u = btoa.bind("object" === ("undefined" == typeof globalThis ? "undefined" : (0, o.default)(globalThis)) ? globalThis : self), c = function c(e) {
            return new URL(e);
          };
          e.exports = {
            parseURL: c,
            btoa: u
          };
        },
        7651: function _(e, t, r) {
          "use strict";

          var n = r(8008),
            i = r(360),
            o = r(1314).errors,
            a = r(1158).w3cwebsocket,
            s = function s(e, t) {
              n.call(this), t = t || {}, this.url = e, this._customTimeout = t.timeout || 15e3, this.headers = t.headers || {}, this.protocol = t.protocol || void 0, this.reconnectOptions = Object.assign({
                auto: !1,
                delay: 5e3,
                maxAttempts: !1,
                onTimeout: !1
              }, t.reconnect), this.clientConfig = t.clientConfig || void 0, this.requestOptions = t.requestOptions || void 0, this.DATA = "data", this.CLOSE = "close", this.ERROR = "error", this.CONNECT = "connect", this.RECONNECT = "reconnect", this.connection = null, this.requestQueue = new Map(), this.responseQueue = new Map(), this.reconnectAttempts = 0, this.reconnecting = !1, this.connectFailedDescription = null;
              var r = i.parseURL(e);
              r.username && r.password && (this.headers.authorization = "Basic " + i.btoa(r.username + ":" + r.password)), r.auth && (this.headers.authorization = "Basic " + i.btoa(r.auth)), Object.defineProperty(this, "connected", {
                get: function get() {
                  return this.connection && this.connection.readyState === this.connection.OPEN;
                },
                enumerable: !0
              }), this.connect();
            };
          (s.prototype = Object.create(n.prototype)).constructor = s, s.prototype.connect = function () {
            this.connection = new a(this.url, this.protocol, void 0, this.headers, this.requestOptions, this.clientConfig), this._addSocketListeners();
          }, s.prototype._onMessage = function (e) {
            var t = this;
            this._parseResponse("string" == typeof e.data ? e.data : "").forEach(function (e) {
              if (e.method && -1 !== e.method.indexOf("_subscription")) t.emit(t.DATA, e);else {
                var r = e.id;
                Array.isArray(e) && (r = e[0].id), t.responseQueue.has(r) && (void 0 !== t.responseQueue.get(r).callback && t.responseQueue.get(r).callback(!1, e), t.responseQueue.delete(r));
              }
            });
          }, s.prototype._onConnect = function () {
            if (this.emit(this.CONNECT), this.reconnectAttempts = 0, this.reconnecting = !1, this.requestQueue.size > 0) {
              var e = this;
              this.requestQueue.forEach(function (t, r) {
                e.send(t.payload, t.callback), e.requestQueue.delete(r);
              });
            }
          }, s.prototype._onConnectFailed = function (e) {
            this.connectFailedDescription = e.toString().split("\n")[0];
            var t = this;
            this.connectFailedDescription && (e.description = this.connectFailedDescription, this.connectFailedDescription = null), e.code = 1006, e.reason = "connection failed", !this.reconnectOptions.auto || [1e3, 1001].includes(e.code) && !1 !== e.wasClean ? (this.emit(this.ERROR, e), this.requestQueue.size > 0 && this.requestQueue.forEach(function (r, n) {
              r.callback(o.ConnectionNotOpenError(e)), t.requestQueue.delete(n);
            }), this.responseQueue.size > 0 && this.responseQueue.forEach(function (r, n) {
              r.callback(o.InvalidConnection("on WS", e)), t.responseQueue.delete(n);
            }), this.connection._connection && this.connection._connection.removeAllListeners(), this.connection._client.removeAllListeners(), this.connection._readyState = 3, this.emit(this.CLOSE, e)) : this.reconnect();
          }, s.prototype._onClose = function (e) {
            var t = this;
            !this.reconnectOptions.auto || [1e3, 1001].includes(e.code) && !1 !== e.wasClean ? (this.emit(this.CLOSE, e), this.requestQueue.size > 0 && this.requestQueue.forEach(function (r, n) {
              r.callback(o.ConnectionNotOpenError(e)), t.requestQueue.delete(n);
            }), this.responseQueue.size > 0 && this.responseQueue.forEach(function (r, n) {
              r.callback(o.InvalidConnection("on WS", e)), t.responseQueue.delete(n);
            }), this._removeSocketListeners(), this.removeAllListeners()) : this.reconnect();
          }, s.prototype._addSocketListeners = function () {
            this.connection.addEventListener("message", this._onMessage.bind(this)), this.connection.addEventListener("open", this._onConnect.bind(this)), this.connection.addEventListener("close", this._onClose.bind(this)), this.connection._client && (this.connection._client.removeAllListeners("connectFailed"), this.connection._client.on("connectFailed", this._onConnectFailed.bind(this)));
          }, s.prototype._removeSocketListeners = function () {
            this.connection.removeEventListener("message", this._onMessage), this.connection.removeEventListener("open", this._onConnect), this.connection.removeEventListener("close", this._onClose), this.connection._connection && this.connection._client.removeListener("connectFailed", this._onConnectFailed);
          }, s.prototype._parseResponse = function (e) {
            var t = this,
              r = [];
            return e.replace(/\}[\n\r]?\{/g, "}|--|{").replace(/\}\][\n\r]?\[\{/g, "}]|--|[{").replace(/\}[\n\r]?\[\{/g, "}|--|[{").replace(/\}\][\n\r]?\{/g, "}]|--|{").split("|--|").forEach(function (e) {
              t.lastChunk && (e = t.lastChunk + e);
              var n = null;
              try {
                n = JSON.parse(e);
              } catch (r) {
                return t.lastChunk = e, clearTimeout(t.lastChunkTimeout), void (t.lastChunkTimeout = setTimeout(function () {
                  t.reconnectOptions.auto && t.reconnectOptions.onTimeout ? t.reconnect() : (t.emit(t.ERROR, o.ConnectionTimeout(t._customTimeout)), t.requestQueue.size > 0 && t.requestQueue.forEach(function (e, r) {
                    e.callback(o.ConnectionTimeout(t._customTimeout)), t.requestQueue.delete(r);
                  }));
                }, t._customTimeout));
              }
              clearTimeout(t.lastChunkTimeout), t.lastChunk = null, n && r.push(n);
            }), r;
          }, s.prototype.send = function (e, t) {
            var r = e.id,
              n = {
                payload: e,
                callback: t
              };
            if (Array.isArray(e) && (r = e[0].id), this.connection.readyState === this.connection.CONNECTING || this.reconnecting) this.requestQueue.set(r, n);else {
              if (this.connection.readyState !== this.connection.OPEN) return this.requestQueue.delete(r), this.emit(this.ERROR, o.ConnectionNotOpenError()), void n.callback(o.ConnectionNotOpenError());
              this.responseQueue.set(r, n), this.requestQueue.delete(r);
              try {
                this.connection.send(JSON.stringify(n.payload));
              } catch (e) {
                n.callback(e), this.responseQueue.delete(r);
              }
            }
          }, s.prototype.reset = function () {
            this.responseQueue.clear(), this.requestQueue.clear(), this.removeAllListeners(), this._removeSocketListeners(), this._addSocketListeners();
          }, s.prototype.disconnect = function (e, t) {
            this._removeSocketListeners(), this.connection.close(e || 1e3, t);
          }, s.prototype.supportsSubscriptions = function () {
            return !0;
          }, s.prototype.reconnect = function () {
            var e = this;
            this.reconnecting = !0, this.responseQueue.size > 0 && this.responseQueue.forEach(function (t, r) {
              try {
                e.responseQueue.delete(r), t.callback(o.PendingRequestsOnReconnectingError());
              } catch (e) {
                console.error("Error encountered in reconnect: ", e);
              }
            }), !this.reconnectOptions.maxAttempts || this.reconnectAttempts < this.reconnectOptions.maxAttempts ? setTimeout(function () {
              e.reconnectAttempts++, e._removeSocketListeners(), e.emit(e.RECONNECT, e.reconnectAttempts), e.connect();
            }, this.reconnectOptions.delay) : (this.emit(this.ERROR, o.MaxAttemptsReachedOnReconnectingError()), this.reconnecting = !1, this.requestQueue.size > 0 && this.requestQueue.forEach(function (t, r) {
              t.callback(o.MaxAttemptsReachedOnReconnectingError()), e.requestQueue.delete(r);
            }));
          }, e.exports = s;
        },
        2565: function _(e, t, r) {
          "use strict";

          var n = r(606),
            i = r(4178).subscriptions,
            o = r(3349),
            a = r(473),
            s = function s() {
              var e = this;
              n.packageInit(this, arguments);
              var t = this.setRequestManager;
              this.setRequestManager = function (r) {
                return t(r), e.net.setRequestManager(r), !0;
              };
              var r = this.setProvider;
              this.setProvider = function () {
                r.apply(e, arguments), e.setRequestManager(e._requestManager);
              }, this.net = new a(this), [new i({
                name: "subscribe",
                type: "shh",
                subscriptions: {
                  messages: {
                    params: 1
                  }
                }
              }), new o({
                name: "getVersion",
                call: "shh_version",
                params: 0
              }), new o({
                name: "getInfo",
                call: "shh_info",
                params: 0
              }), new o({
                name: "setMaxMessageSize",
                call: "shh_setMaxMessageSize",
                params: 1
              }), new o({
                name: "setMinPoW",
                call: "shh_setMinPoW",
                params: 1
              }), new o({
                name: "markTrustedPeer",
                call: "shh_markTrustedPeer",
                params: 1
              }), new o({
                name: "newKeyPair",
                call: "shh_newKeyPair",
                params: 0
              }), new o({
                name: "addPrivateKey",
                call: "shh_addPrivateKey",
                params: 1
              }), new o({
                name: "deleteKeyPair",
                call: "shh_deleteKeyPair",
                params: 1
              }), new o({
                name: "hasKeyPair",
                call: "shh_hasKeyPair",
                params: 1
              }), new o({
                name: "getPublicKey",
                call: "shh_getPublicKey",
                params: 1
              }), new o({
                name: "getPrivateKey",
                call: "shh_getPrivateKey",
                params: 1
              }), new o({
                name: "newSymKey",
                call: "shh_newSymKey",
                params: 0
              }), new o({
                name: "addSymKey",
                call: "shh_addSymKey",
                params: 1
              }), new o({
                name: "generateSymKeyFromPassword",
                call: "shh_generateSymKeyFromPassword",
                params: 1
              }), new o({
                name: "hasSymKey",
                call: "shh_hasSymKey",
                params: 1
              }), new o({
                name: "getSymKey",
                call: "shh_getSymKey",
                params: 1
              }), new o({
                name: "deleteSymKey",
                call: "shh_deleteSymKey",
                params: 1
              }), new o({
                name: "newMessageFilter",
                call: "shh_newMessageFilter",
                params: 1
              }), new o({
                name: "getFilterMessages",
                call: "shh_getFilterMessages",
                params: 1
              }), new o({
                name: "deleteMessageFilter",
                call: "shh_deleteMessageFilter",
                params: 1
              }), new o({
                name: "post",
                call: "shh_post",
                params: 1,
                inputFormatter: [null]
              }), new o({
                name: "unsubscribe",
                call: "shh_unsubscribe",
                params: 1
              })].forEach(function (t) {
                t.attachToObject(e), t.setRequestManager(e._requestManager);
              });
            };
          s.prototype.clearSubscriptions = function () {
            this._requestManager.clearSubscriptions();
          }, n.addProviders(s), e.exports = s;
        },
        8161: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(7130),
            o = r(323),
            a = r(747),
            s = r(5010),
            u = r(1734),
            c = function e(t, r) {
              var i = [];
              return r.forEach(function (r) {
                if ("object" === (0, n.default)(r.components)) {
                  if ("tuple" !== r.type.substring(0, 5)) throw new Error("components found but type is not tuple; report on GitHub");
                  var o = "",
                    a = r.type.indexOf("[");
                  a >= 0 && (o = r.type.substring(a));
                  var s = e(t, r.components);
                  Array.isArray(s) && t ? i.push("tuple(" + s.join(",") + ")" + o) : t ? i.push("(" + s + ")") : i.push("(" + s.join(",") + ")" + o);
                } else i.push(r.type);
              }), i;
            },
            f = function f(e) {
              if (!o.isHexStrict(e)) throw new Error("The parameter must be a valid HEX string.");
              var t = "",
                r = 0,
                n = e.length;
              for ("0x" === e.substring(0, 2) && (r = 2); r < n; r += 2) {
                var i = parseInt(e.slice(r, r + 2), 16);
                t += String.fromCharCode(i);
              }
              return t;
            },
            d = function d(e) {
              if (!e) return "0x00";
              for (var t = "", r = 0; r < e.length; r++) {
                var n = e.charCodeAt(r).toString(16);
                t += n.length < 2 ? "0" + n : n;
              }
              return "0x" + t;
            },
            l = function l(e) {
              if (e = e ? e.toLowerCase() : "ether", !i.unitMap[e]) throw new Error('This unit "' + e + "\" doesn't exist, please use the one of the following units" + JSON.stringify(i.unitMap, null, 2));
              return e;
            };
          e.exports = {
            _fireError: function _fireError(e, t, r, i, o) {
              return !e || "object" !== (0, n.default)(e) || e instanceof Error || !e.data || ((e.data && "object" === (0, n.default)(e.data) || Array.isArray(e.data)) && (e.data = JSON.stringify(e.data, null, 2)), e = e.message + "\n" + e.data), "string" == typeof e && (e = new Error(e)), "function" == typeof i && i(e, o), "function" == typeof r && ((t && "function" == typeof t.listeners && t.listeners("error").length || "function" == typeof i) && t.catch(function () {}), setTimeout(function () {
                r(e);
              }, 1)), t && "function" == typeof t.emit && setTimeout(function () {
                t.emit("error", e, o), t.removeAllListeners();
              }, 1), t;
            },
            _jsonInterfaceMethodToString: function _jsonInterfaceMethodToString(e) {
              return e && "object" === (0, n.default)(e) && e.name && -1 !== e.name.indexOf("(") ? e.name : e.name + "(" + c(!1, e.inputs).join(",") + ")";
            },
            _flattenTypes: c,
            randomHex: function randomHex(e) {
              return "0x" + s(e).toString("hex");
            },
            BN: o.BN,
            isBN: o.isBN,
            isBigNumber: o.isBigNumber,
            isHex: o.isHex,
            isHexStrict: o.isHexStrict,
            sha3: o.sha3,
            sha3Raw: o.sha3Raw,
            keccak256: o.sha3,
            soliditySha3: a.soliditySha3,
            soliditySha3Raw: a.soliditySha3Raw,
            encodePacked: a.encodePacked,
            isAddress: o.isAddress,
            checkAddressChecksum: o.checkAddressChecksum,
            toChecksumAddress: function toChecksumAddress(e) {
              if (void 0 === e) return "";
              if (!/^(0x)?[0-9a-f]{40}$/i.test(e)) throw new Error('Given address "' + e + '" is not a valid Ethereum address.');
              e = e.toLowerCase().replace(/^0x/i, "");
              for (var t = o.sha3(e).replace(/^0x/i, ""), r = "0x", n = 0; n < e.length; n++) parseInt(t[n], 16) > 7 ? r += e[n].toUpperCase() : r += e[n];
              return r;
            },
            toHex: o.toHex,
            toBN: o.toBN,
            bytesToHex: o.bytesToHex,
            hexToBytes: o.hexToBytes,
            hexToNumberString: o.hexToNumberString,
            hexToNumber: o.hexToNumber,
            toDecimal: o.hexToNumber,
            numberToHex: o.numberToHex,
            fromDecimal: o.numberToHex,
            hexToUtf8: o.hexToUtf8,
            hexToString: o.hexToUtf8,
            toUtf8: o.hexToUtf8,
            stripHexPrefix: o.stripHexPrefix,
            utf8ToHex: o.utf8ToHex,
            stringToHex: o.utf8ToHex,
            fromUtf8: o.utf8ToHex,
            hexToAscii: f,
            toAscii: f,
            asciiToHex: d,
            fromAscii: d,
            unitMap: i.unitMap,
            toWei: function toWei(e, t) {
              if (t = l(t), !o.isBN(e) && "string" != typeof e) throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
              return o.isBN(e) ? i.toWei(e, t) : i.toWei(e, t).toString(10);
            },
            fromWei: function fromWei(e, t) {
              if (t = l(t), !o.isBN(e) && "string" != typeof e) throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
              return o.isBN(e) ? i.fromWei(e, t) : i.fromWei(e, t).toString(10);
            },
            padLeft: o.leftPad,
            leftPad: o.leftPad,
            padRight: o.rightPad,
            rightPad: o.rightPad,
            toTwosComplement: o.toTwosComplement,
            isBloom: o.isBloom,
            isUserEthereumAddressInBloom: o.isUserEthereumAddressInBloom,
            isContractAddressInBloom: o.isContractAddressInBloom,
            isTopic: o.isTopic,
            isTopicInBloom: o.isTopicInBloom,
            isInBloom: o.isInBloom,
            compareBlockNumbers: function compareBlockNumbers(e, t) {
              if (e === t) return 0;
              if ("genesis" !== e && "earliest" !== e && 0 !== e || "genesis" !== t && "earliest" !== t && 0 !== t) {
                if ("genesis" === e || "earliest" === e || 0 === e) return -1;
                if ("genesis" === t || "earliest" === t || 0 === t) return 1;
                if ("latest" === e || "finalized" === e) return "pending" === t ? -1 : 1;
                if ("latest" === t || "finalized" === t) return "pending" === e ? 1 : -1;
                if ("pending" === e) return 1;
                if ("pending" === t) return -1;
                if ("safe" === e || "safe" === t) return;
                var r = new u(e),
                  n = new u(t);
                return r.lt(n) ? -1 : r.eq(n) ? 0 : 1;
              }
              return 0;
            },
            toNumber: o.toNumber
          };
        },
        747: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(1734),
            o = r(323),
            a = function a(e) {
              var t = (0, n.default)(e);
              if ("string" === t) return o.isHexStrict(e) ? new i(e.replace(/0x/i, ""), 16) : new i(e, 10);
              if ("number" === t) return new i(e);
              if (o.isBigNumber(e)) return new i(e.toString(10));
              if (o.isBN(e)) return e;
              throw new Error(e + " is not a number");
            },
            s = function s(e, t, r) {
              var n, s;
              if ("bytes" === (e = function (e) {
                return e.startsWith("int[") ? "int256" + e.slice(3) : "int" === e ? "int256" : e.startsWith("uint[") ? "uint256" + e.slice(4) : "uint" === e ? "uint256" : e.startsWith("fixed[") ? "fixed128x128" + e.slice(5) : "fixed" === e ? "fixed128x128" : e.startsWith("ufixed[") ? "ufixed128x128" + e.slice(6) : "ufixed" === e ? "ufixed128x128" : e;
              }(e))) {
                if (t.replace(/^0x/i, "").length % 2 != 0) throw new Error("Invalid bytes characters " + t.length);
                return t;
              }
              if ("string" === e) return o.utf8ToHex(t);
              if ("bool" === e) return t ? "01" : "00";
              if (e.startsWith("address")) {
                if (n = r ? 64 : 40, !o.isAddress(t)) throw new Error(t + " is not a valid address, or the checksum is invalid.");
                return o.leftPad(t.toLowerCase(), n);
              }
              if (n = function (e) {
                var t = /^\D+(\d+).*$/.exec(e);
                return t ? parseInt(t[1], 10) : null;
              }(e), e.startsWith("bytes")) {
                if (!n) throw new Error("bytes[] not yet supported in solidity");
                if (r && (n = 32), n < 1 || n > 32 || n < t.replace(/^0x/i, "").length / 2) throw new Error("Invalid bytes" + n + " for " + t);
                return o.rightPad(t, 2 * n);
              }
              if (e.startsWith("uint")) {
                if (n % 8 || n < 8 || n > 256) throw new Error("Invalid uint" + n + " size");
                if ((s = a(t)).bitLength() > n) throw new Error("Supplied uint exceeds width: " + n + " vs " + s.bitLength());
                if (s.lt(new i(0))) throw new Error("Supplied uint " + s.toString() + " is negative");
                return n ? o.leftPad(s.toString("hex"), n / 8 * 2) : s;
              }
              if (e.startsWith("int")) {
                if (n % 8 || n < 8 || n > 256) throw new Error("Invalid int" + n + " size");
                if ((s = a(t)).bitLength() > n) throw new Error("Supplied int exceeds width: " + n + " vs " + s.bitLength());
                return s.lt(new i(0)) ? s.toTwos(n).toString("hex") : n ? o.leftPad(s.toString("hex"), n / 8 * 2) : s;
              }
              throw new Error("Unsupported or invalid type: " + e);
            },
            u = function u(e) {
              if (Array.isArray(e)) throw new Error("Autodetection of array types is not supported.");
              var t,
                r,
                a = "";
              if (e && "object" === (0, n.default)(e) && (e.hasOwnProperty("v") || e.hasOwnProperty("t") || e.hasOwnProperty("value") || e.hasOwnProperty("type")) ? (t = e.hasOwnProperty("t") ? e.t : e.type, a = e.hasOwnProperty("v") ? e.v : e.value) : (t = o.toHex(e, !0), a = o.toHex(e), t.startsWith("int") || t.startsWith("uint") || (t = "bytes")), !t.startsWith("int") && !t.startsWith("uint") || "string" != typeof a || /^(-)?0x/i.test(a) || (a = new i(a)), Array.isArray(a)) {
                if (r = function (e) {
                  var t = /^\D+\d*\[(\d+)\]$/.exec(e);
                  return t ? parseInt(t[1], 10) : null;
                }(t), r && a.length !== r) throw new Error(t + " is not matching the given array " + JSON.stringify(a));
                r = a.length;
              }
              return Array.isArray(a) ? a.map(function (e) {
                return s(t, e, r).toString("hex").replace("0x", "");
              }).join("") : s(t, a, r).toString("hex").replace("0x", "");
            };
          e.exports = {
            soliditySha3: function soliditySha3() {
              var e = Array.prototype.slice.call(arguments).map(u);
              return o.sha3("0x" + e.join(""));
            },
            soliditySha3Raw: function soliditySha3Raw() {
              return o.sha3Raw("0x" + Array.prototype.slice.call(arguments).map(u).join(""));
            },
            encodePacked: function encodePacked() {
              return "0x" + Array.prototype.slice.call(arguments).map(u).join("").toLowerCase();
            }
          };
        },
        323: function _(e, t, r) {
          "use strict";

          var n = r(9033).Buffer,
            i = r(8847),
            o = i(r(4519)),
            a = i(r(3355)),
            s = r(1734),
            u = r(7277),
            c = r(8632),
            f = r(3062),
            d = r(9313),
            l = function l(e) {
              return s.isBN(e);
            },
            h = function h(e) {
              return e && e.constructor && "BigNumber" === e.constructor.name;
            },
            p = function p(e) {
              try {
                return u.apply(null, arguments);
              } catch (t) {
                throw new Error(t + ' Given value: "' + e + '"');
              }
            },
            b = function b(e) {
              return !!/^(0x)?[0-9a-f]{40}$/i.test(e) && (!(!/^(0x|0X)?[0-9a-f]{40}$/.test(e) && !/^(0x|0X)?[0-9A-F]{40}$/.test(e)) || y(e));
            },
            y = function y(e) {
              e = e.replace(/^0x/i, "");
              for (var t = S(e.toLowerCase()).replace(/^0x/i, ""), r = 0; r < 40; r++) if (parseInt(t[r], 16) > 7 && e[r].toUpperCase() !== e[r] || parseInt(t[r], 16) <= 7 && e[r].toLowerCase() !== e[r]) return !1;
              return !0;
            },
            m = function m(e) {
              var t = "";
              e = (e = (e = (e = (e = c.encode(e)).replace(/^(?:\u0000)*/, "")).split("").reverse().join("")).replace(/^(?:\u0000)*/, "")).split("").reverse().join("");
              for (var r = 0; r < e.length; r++) {
                var n = e.charCodeAt(r).toString(16);
                t += n.length < 2 ? "0" + n : n;
              }
              return "0x" + t;
            },
            v = function v(e) {
              var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              if (!e) return e;
              if ("string" == typeof e && !A(e)) throw new Error('Given value "' + e + '" is not a valid hex string.');
              var r = p(e);
              return t && (r > Number.MAX_SAFE_INTEGER || r < Number.MIN_SAFE_INTEGER) ? BigInt(r) : r.toNumber();
            },
            g = function g(e) {
              if (null == e) return e;
              if (!isFinite(e) && !A(e)) throw new Error('Given input "' + e + '" is not a number.');
              var t = p(e),
                r = t.toString(16);
              return t.lt(new s(0)) ? "-0x" + r.slice(1) : "0x" + r;
            },
            w = function w(e, t) {
              if (b(e)) return t ? "address" : "0x" + e.toLowerCase().replace(/^0x/i, "");
              if ("boolean" == typeof e) return t ? "bool" : e ? "0x01" : "0x00";
              if (n.isBuffer(e)) return "0x" + e.toString("hex");
              if ("object" === (0, a.default)(e) && e && !h(e) && !l(e)) return t ? "string" : m(JSON.stringify(e));
              if ("string" == typeof e) {
                if (0 === e.indexOf("-0x") || 0 === e.indexOf("-0X")) return t ? "int256" : g(e);
                if (0 === e.indexOf("0x") || 0 === e.indexOf("0X")) return t ? "bytes" : e;
                if (!isFinite(e)) return t ? "string" : m(e);
              }
              return t ? e < 0 ? "int256" : "uint256" : g(e);
            },
            A = function A(e) {
              return ("string" == typeof e || "number" == typeof e) && /^(-)?0x[0-9a-f]*$/i.test(e);
            },
            k = function k(e) {
              return ("string" == typeof e || "number" == typeof e) && /^(-0x|0x)?[0-9a-f]*$/i.test(e);
            },
            _ = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
            S = function S(e) {
              l(e) && (e = e.toString()), A(e) && /^0x/i.test(e.toString()) ? e = f.toBuffer(e) : "string" == typeof e && (e = n.from(e, "utf-8"));
              var t = f.bufferToHex(f.keccak256(e));
              return t === _ ? null : t;
            };
          S._Hash = f.keccak256;
          var E = function E(e) {
            if ("string" == typeof e && e.includes("0x")) {
              var t = e.toLocaleLowerCase().startsWith("-") ? ["-", e.slice(3)] : ["", e.slice(2)],
                r = (0, o.default)(t, 2),
                n = r[0],
                i = r[1];
              return new s(n + i, 16);
            }
            return new s(e);
          };
          Object.setPrototypeOf(E, s), Object.setPrototypeOf(E.prototype, s.prototype), e.exports = {
            BN: E,
            isBN: l,
            isBigNumber: h,
            toBN: p,
            isAddress: b,
            isBloom: function isBloom(e) {
              return d.isBloom(e);
            },
            isUserEthereumAddressInBloom: function isUserEthereumAddressInBloom(e, t) {
              return d.isUserEthereumAddressInBloom(e, t);
            },
            isContractAddressInBloom: function isContractAddressInBloom(e, t) {
              return d.isContractAddressInBloom(e, t);
            },
            isTopic: function isTopic(e) {
              return d.isTopic(e);
            },
            isTopicInBloom: function isTopicInBloom(e, t) {
              return d.isTopicInBloom(e, t);
            },
            isInBloom: function isInBloom(e, t) {
              return d.isInBloom(e, t);
            },
            checkAddressChecksum: y,
            utf8ToHex: m,
            hexToUtf8: function hexToUtf8(e) {
              if (!A(e)) throw new Error('The parameter "' + e + '" must be a valid HEX string.');
              for (var t = "", r = 0, n = (e = (e = (e = (e = (e = e.replace(/^0x/i, "")).replace(/^(?:00)*/, "")).split("").reverse().join("")).replace(/^(?:00)*/, "")).split("").reverse().join("")).length, i = 0; i < n; i += 2) r = parseInt(e.slice(i, i + 2), 16), t += String.fromCharCode(r);
              return c.decode(t);
            },
            hexToNumber: v,
            hexToNumberString: function hexToNumberString(e) {
              if (!e) return e;
              if ("string" == typeof e && !A(e)) throw new Error('Given value "' + e + '" is not a valid hex string.');
              return p(e).toString(10);
            },
            numberToHex: g,
            toHex: w,
            hexToBytes: function hexToBytes(e) {
              if (e = e.toString(16), !A(e)) throw new Error('Given value "' + e + '" is not a valid hex string.');
              e = e.replace(/^0x/i, "");
              for (var t = [], r = 0; r < e.length; r += 2) t.push(parseInt(e.slice(r, r + 2), 16));
              return t;
            },
            bytesToHex: function bytesToHex(e) {
              for (var t = [], r = 0; r < e.length; r++) t.push((e[r] >>> 4).toString(16)), t.push((15 & e[r]).toString(16));
              return "0x" + t.join("");
            },
            isHex: k,
            isHexStrict: A,
            stripHexPrefix: function stripHexPrefix(e) {
              return 0 !== e && k(e) ? e.replace(/^(-)?0x/i, "$1") : e;
            },
            leftPad: function leftPad(e, t, r) {
              var n = /^0x/i.test(e) || "number" == typeof e,
                i = t - (e = e.toString(16).replace(/^0x/i, "")).length + 1 >= 0 ? t - e.length + 1 : 0;
              return (n ? "0x" : "") + new Array(i).join(r || "0") + e;
            },
            rightPad: function rightPad(e, t, r) {
              var n = /^0x/i.test(e) || "number" == typeof e,
                i = t - (e = e.toString(16).replace(/^0x/i, "")).length + 1 >= 0 ? t - e.length + 1 : 0;
              return (n ? "0x" : "") + e + new Array(i).join(r || "0");
            },
            toTwosComplement: function toTwosComplement(e) {
              return "0x" + p(e).toTwos(256).toString(16, 64);
            },
            sha3: S,
            sha3Raw: function sha3Raw(e) {
              return null === (e = S(e)) ? _ : e;
            },
            toNumber: function toNumber(e) {
              var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              return "number" == typeof e ? e : v(w(e), t);
            }
          };
        },
        7001: function _(e, t, r) {
          "use strict";

          var n = r(8920).i8,
            i = r(606),
            o = r(6748),
            a = r(473),
            s = r(6306),
            u = r(2565),
            c = r(2463),
            f = r(8161),
            d = function d() {
              var e = this;
              i.packageInit(this, arguments), this.version = n, this.utils = f, this.eth = new o(this), this.shh = new u(this), this.bzz = new c(this);
              var t = this.setProvider;
              this.setProvider = function (r, n) {
                return t.apply(e, arguments), e.eth.setRequestManager(e._requestManager), e.shh.setRequestManager(e._requestManager), e.bzz.setProvider(r), !0;
              };
            };
          d.version = n, d.utils = f, d.modules = {
            Eth: o,
            Net: a,
            Personal: s,
            Shh: u,
            Bzz: c
          }, i.addProviders(d), e.exports = d;
        },
        9214: function _() {},
        2361: function _() {},
        4616: function _() {},
        8768: function _(e) {
          "use strict";

          e.exports = function (e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        2338: function _(e) {
          "use strict";

          e.exports = function (e) {
            if (Array.isArray(e)) return e;
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        7907: function _(e, t, r) {
          "use strict";

          var n = r(8768);
          e.exports = function (e) {
            if (Array.isArray(e)) return n(e);
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        8975: function _(e) {
          "use strict";

          e.exports = function (e) {
            if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e;
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        5698: function _(e) {
          "use strict";

          function t(e, t, r, n, i, o, a) {
            try {
              var s = e[o](a),
                u = s.value;
            } catch (e) {
              return void r(e);
            }
            s.done ? t(u) : Promise.resolve(u).then(n, i);
          }
          e.exports = function (e) {
            return function () {
              var r = this,
                n = arguments;
              return new Promise(function (i, o) {
                var a = e.apply(r, n);
                function s(e) {
                  t(a, i, o, s, u, "next", e);
                }
                function u(e) {
                  t(a, i, o, s, u, "throw", e);
                }
                s(void 0);
              });
            };
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        9721: function _(e) {
          "use strict";

          e.exports = function (e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        4727: function _(e, t, r) {
          "use strict";

          var n = r(8746),
            i = r(6923);
          function o(t, r, a) {
            return i() ? (e.exports = o = Reflect.construct.bind(), e.exports.__esModule = !0, e.exports.default = e.exports) : (e.exports = o = function o(e, t, r) {
              var i = [null];
              i.push.apply(i, t);
              var o = new (Function.bind.apply(e, i))();
              return r && n(o, r.prototype), o;
            }, e.exports.__esModule = !0, e.exports.default = e.exports), o.apply(null, arguments);
          }
          e.exports = o, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        8985: function _(e, t, r) {
          "use strict";

          var n = r(2310);
          function i(e, t) {
            for (var r = 0; r < t.length; r++) {
              var i = t[r];
              i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, n(i.key), i);
            }
          }
          e.exports = function (e, t, r) {
            return t && i(e.prototype, t), r && i(e, r), Object.defineProperty(e, "prototype", {
              writable: !1
            }), e;
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        775: function _(e, t, r) {
          "use strict";

          var n = r(2310);
          e.exports = function (e, t, r) {
            return (t = n(t)) in e ? Object.defineProperty(e, t, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0
            }) : e[t] = r, e;
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        119: function _(e, t, r) {
          "use strict";

          var n = r(7460);
          function i() {
            return "undefined" != typeof Reflect && Reflect.get ? (e.exports = i = Reflect.get.bind(), e.exports.__esModule = !0, e.exports.default = e.exports) : (e.exports = i = function i(e, t, r) {
              var i = n(e, t);
              if (i) {
                var o = Object.getOwnPropertyDescriptor(i, t);
                return o.get ? o.get.call(arguments.length < 3 ? e : r) : o.value;
              }
            }, e.exports.__esModule = !0, e.exports.default = e.exports), i.apply(this, arguments);
          }
          e.exports = i, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        1949: function _(e) {
          "use strict";

          function t(r) {
            return e.exports = t = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (e) {
              return e.__proto__ || Object.getPrototypeOf(e);
            }, e.exports.__esModule = !0, e.exports.default = e.exports, t(r);
          }
          e.exports = t, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        5163: function _(e, t, r) {
          "use strict";

          var n = r(8746);
          e.exports = function (e, t) {
            if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
            e.prototype = Object.create(t && t.prototype, {
              constructor: {
                value: e,
                writable: !0,
                configurable: !0
              }
            }), Object.defineProperty(e, "prototype", {
              writable: !1
            }), t && n(e, t);
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        8847: function _(e) {
          "use strict";

          e.exports = function (e) {
            return e && e.__esModule ? e : {
              default: e
            };
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        6923: function _(e) {
          "use strict";

          e.exports = function () {
            if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
            if (Reflect.construct.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
            } catch (e) {
              return !1;
            }
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        1642: function _(e) {
          "use strict";

          e.exports = function (e) {
            if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e);
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        1436: function _(e) {
          "use strict";

          e.exports = function (e, t) {
            var r = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
            if (null != r) {
              var n,
                i,
                o,
                a,
                s = [],
                u = !0,
                c = !1;
              try {
                if (o = (r = r.call(e)).next, 0 === t) {
                  if (Object(r) !== r) return;
                  u = !1;
                } else for (; !(u = (n = o.call(r)).done) && (s.push(n.value), s.length !== t); u = !0);
              } catch (e) {
                c = !0, i = e;
              } finally {
                try {
                  if (!u && null != r.return && (a = r.return(), Object(a) !== a)) return;
                } finally {
                  if (c) throw i;
                }
              }
              return s;
            }
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        2966: function _(e) {
          "use strict";

          e.exports = function () {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        2344: function _(e) {
          "use strict";

          e.exports = function () {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        4650: function _(e, t, r) {
          "use strict";

          var n = r(3355).default,
            i = r(8975);
          e.exports = function (e, t) {
            if (t && ("object" === n(t) || "function" == typeof t)) return t;
            if (void 0 !== t) throw new TypeError("Derived constructors may only return object or undefined");
            return i(e);
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        2028: function _(e, t, r) {
          "use strict";

          var n = r(3355).default;
          function i() {
            e.exports = i = function i() {
              return t;
            }, e.exports.__esModule = !0, e.exports.default = e.exports;
            var t = {},
              r = Object.prototype,
              o = r.hasOwnProperty,
              a = Object.defineProperty || function (e, t, r) {
                e[t] = r.value;
              },
              s = "function" == typeof Symbol ? Symbol : {},
              u = s.iterator || "@@iterator",
              c = s.asyncIterator || "@@asyncIterator",
              f = s.toStringTag || "@@toStringTag";
            function d(e, t, r) {
              return Object.defineProperty(e, t, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
              }), e[t];
            }
            try {
              d({}, "");
            } catch (e) {
              d = function d(e, t, r) {
                return e[t] = r;
              };
            }
            function l(e, t, r, n) {
              var i = t && t.prototype instanceof b ? t : b,
                o = Object.create(i.prototype),
                s = new O(n || []);
              return a(o, "_invoke", {
                value: S(e, r, s)
              }), o;
            }
            function h(e, t, r) {
              try {
                return {
                  type: "normal",
                  arg: e.call(t, r)
                };
              } catch (e) {
                return {
                  type: "throw",
                  arg: e
                };
              }
            }
            t.wrap = l;
            var p = {};
            function b() {}
            function y() {}
            function m() {}
            var v = {};
            d(v, u, function () {
              return this;
            });
            var g = Object.getPrototypeOf,
              w = g && g(g(B([])));
            w && w !== r && o.call(w, u) && (v = w);
            var A = m.prototype = b.prototype = Object.create(v);
            function k(e) {
              ["next", "throw", "return"].forEach(function (t) {
                d(e, t, function (e) {
                  return this._invoke(t, e);
                });
              });
            }
            function _(e, t) {
              function r(i, a, s, u) {
                var c = h(e[i], e, a);
                if ("throw" !== c.type) {
                  var f = c.arg,
                    d = f.value;
                  return d && "object" == n(d) && o.call(d, "__await") ? t.resolve(d.__await).then(function (e) {
                    r("next", e, s, u);
                  }, function (e) {
                    r("throw", e, s, u);
                  }) : t.resolve(d).then(function (e) {
                    f.value = e, s(f);
                  }, function (e) {
                    return r("throw", e, s, u);
                  });
                }
                u(c.arg);
              }
              var i;
              a(this, "_invoke", {
                value: function value(e, n) {
                  function o() {
                    return new t(function (t, i) {
                      r(e, n, t, i);
                    });
                  }
                  return i = i ? i.then(o, o) : o();
                }
              });
            }
            function S(e, t, r) {
              var n = "suspendedStart";
              return function (i, o) {
                if ("executing" === n) throw new Error("Generator is already running");
                if ("completed" === n) {
                  if ("throw" === i) throw o;
                  return {
                    value: void 0,
                    done: !0
                  };
                }
                for (r.method = i, r.arg = o;;) {
                  var a = r.delegate;
                  if (a) {
                    var s = E(a, r);
                    if (s) {
                      if (s === p) continue;
                      return s;
                    }
                  }
                  if ("next" === r.method) r.sent = r._sent = r.arg;else if ("throw" === r.method) {
                    if ("suspendedStart" === n) throw n = "completed", r.arg;
                    r.dispatchException(r.arg);
                  } else "return" === r.method && r.abrupt("return", r.arg);
                  n = "executing";
                  var u = h(e, t, r);
                  if ("normal" === u.type) {
                    if (n = r.done ? "completed" : "suspendedYield", u.arg === p) continue;
                    return {
                      value: u.arg,
                      done: r.done
                    };
                  }
                  "throw" === u.type && (n = "completed", r.method = "throw", r.arg = u.arg);
                }
              };
            }
            function E(e, t) {
              var r = t.method,
                n = e.iterator[r];
              if (void 0 === n) return t.delegate = null, "throw" === r && e.iterator.return && (t.method = "return", t.arg = void 0, E(e, t), "throw" === t.method) || "return" !== r && (t.method = "throw", t.arg = new TypeError("The iterator does not provide a '" + r + "' method")), p;
              var i = h(n, e.iterator, t.arg);
              if ("throw" === i.type) return t.method = "throw", t.arg = i.arg, t.delegate = null, p;
              var o = i.arg;
              return o ? o.done ? (t[e.resultName] = o.value, t.next = e.nextLoc, "return" !== t.method && (t.method = "next", t.arg = void 0), t.delegate = null, p) : o : (t.method = "throw", t.arg = new TypeError("iterator result is not an object"), t.delegate = null, p);
            }
            function x(e) {
              var t = {
                tryLoc: e[0]
              };
              1 in e && (t.catchLoc = e[1]), 2 in e && (t.finallyLoc = e[2], t.afterLoc = e[3]), this.tryEntries.push(t);
            }
            function P(e) {
              var t = e.completion || {};
              t.type = "normal", delete t.arg, e.completion = t;
            }
            function O(e) {
              this.tryEntries = [{
                tryLoc: "root"
              }], e.forEach(x, this), this.reset(!0);
            }
            function B(e) {
              if (e) {
                var t = e[u];
                if (t) return t.call(e);
                if ("function" == typeof e.next) return e;
                if (!isNaN(e.length)) {
                  var r = -1,
                    n = function t() {
                      for (; ++r < e.length;) if (o.call(e, r)) return t.value = e[r], t.done = !1, t;
                      return t.value = void 0, t.done = !0, t;
                    };
                  return n.next = n;
                }
              }
              return {
                next: T
              };
            }
            function T() {
              return {
                value: void 0,
                done: !0
              };
            }
            return y.prototype = m, a(A, "constructor", {
              value: m,
              configurable: !0
            }), a(m, "constructor", {
              value: y,
              configurable: !0
            }), y.displayName = d(m, f, "GeneratorFunction"), t.isGeneratorFunction = function (e) {
              var t = "function" == typeof e && e.constructor;
              return !!t && (t === y || "GeneratorFunction" === (t.displayName || t.name));
            }, t.mark = function (e) {
              return Object.setPrototypeOf ? Object.setPrototypeOf(e, m) : (e.__proto__ = m, d(e, f, "GeneratorFunction")), e.prototype = Object.create(A), e;
            }, t.awrap = function (e) {
              return {
                __await: e
              };
            }, k(_.prototype), d(_.prototype, c, function () {
              return this;
            }), t.AsyncIterator = _, t.async = function (e, r, n, i, o) {
              void 0 === o && (o = Promise);
              var a = new _(l(e, r, n, i), o);
              return t.isGeneratorFunction(r) ? a : a.next().then(function (e) {
                return e.done ? e.value : a.next();
              });
            }, k(A), d(A, f, "Generator"), d(A, u, function () {
              return this;
            }), d(A, "toString", function () {
              return "[object Generator]";
            }), t.keys = function (e) {
              var t = Object(e),
                r = [];
              for (var n in t) r.push(n);
              return r.reverse(), function e() {
                for (; r.length;) {
                  var n = r.pop();
                  if (n in t) return e.value = n, e.done = !1, e;
                }
                return e.done = !0, e;
              };
            }, t.values = B, O.prototype = {
              constructor: O,
              reset: function reset(e) {
                if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = !1, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(P), !e) for (var t in this) "t" === t.charAt(0) && o.call(this, t) && !isNaN(+t.slice(1)) && (this[t] = void 0);
              },
              stop: function stop() {
                this.done = !0;
                var e = this.tryEntries[0].completion;
                if ("throw" === e.type) throw e.arg;
                return this.rval;
              },
              dispatchException: function dispatchException(e) {
                if (this.done) throw e;
                var t = this;
                function r(r, n) {
                  return a.type = "throw", a.arg = e, t.next = r, n && (t.method = "next", t.arg = void 0), !!n;
                }
                for (var n = this.tryEntries.length - 1; n >= 0; --n) {
                  var i = this.tryEntries[n],
                    a = i.completion;
                  if ("root" === i.tryLoc) return r("end");
                  if (i.tryLoc <= this.prev) {
                    var s = o.call(i, "catchLoc"),
                      u = o.call(i, "finallyLoc");
                    if (s && u) {
                      if (this.prev < i.catchLoc) return r(i.catchLoc, !0);
                      if (this.prev < i.finallyLoc) return r(i.finallyLoc);
                    } else if (s) {
                      if (this.prev < i.catchLoc) return r(i.catchLoc, !0);
                    } else {
                      if (!u) throw new Error("try statement without catch or finally");
                      if (this.prev < i.finallyLoc) return r(i.finallyLoc);
                    }
                  }
                }
              },
              abrupt: function abrupt(e, t) {
                for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                  var n = this.tryEntries[r];
                  if (n.tryLoc <= this.prev && o.call(n, "finallyLoc") && this.prev < n.finallyLoc) {
                    var i = n;
                    break;
                  }
                }
                i && ("break" === e || "continue" === e) && i.tryLoc <= t && t <= i.finallyLoc && (i = null);
                var a = i ? i.completion : {};
                return a.type = e, a.arg = t, i ? (this.method = "next", this.next = i.finallyLoc, p) : this.complete(a);
              },
              complete: function complete(e, t) {
                if ("throw" === e.type) throw e.arg;
                return "break" === e.type || "continue" === e.type ? this.next = e.arg : "return" === e.type ? (this.rval = this.arg = e.arg, this.method = "return", this.next = "end") : "normal" === e.type && t && (this.next = t), p;
              },
              finish: function finish(e) {
                for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                  var r = this.tryEntries[t];
                  if (r.finallyLoc === e) return this.complete(r.completion, r.afterLoc), P(r), p;
                }
              },
              catch: function _catch(e) {
                for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                  var r = this.tryEntries[t];
                  if (r.tryLoc === e) {
                    var n = r.completion;
                    if ("throw" === n.type) {
                      var i = n.arg;
                      P(r);
                    }
                    return i;
                  }
                }
                throw new Error("illegal catch attempt");
              },
              delegateYield: function delegateYield(e, t, r) {
                return this.delegate = {
                  iterator: B(e),
                  resultName: t,
                  nextLoc: r
                }, "next" === this.method && (this.arg = void 0), p;
              }
            }, t;
          }
          e.exports = i, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        8746: function _(e) {
          "use strict";

          function t(r, n) {
            return e.exports = t = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (e, t) {
              return e.__proto__ = t, e;
            }, e.exports.__esModule = !0, e.exports.default = e.exports, t(r, n);
          }
          e.exports = t, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        4519: function _(e, t, r) {
          "use strict";

          var n = r(2338),
            i = r(1436),
            o = r(6906),
            a = r(2966);
          e.exports = function (e, t) {
            return n(e) || i(e, t) || o(e, t) || a();
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        7460: function _(e, t, r) {
          "use strict";

          var n = r(1949);
          e.exports = function (e, t) {
            for (; !Object.prototype.hasOwnProperty.call(e, t) && null !== (e = n(e)););
            return e;
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        3106: function _(e, t, r) {
          "use strict";

          var n = r(7907),
            i = r(1642),
            o = r(6906),
            a = r(2344);
          e.exports = function (e) {
            return n(e) || i(e) || o(e) || a();
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        9662: function _(e, t, r) {
          "use strict";

          var n = r(3355).default;
          e.exports = function (e, t) {
            if ("object" !== n(e) || null === e) return e;
            var r = e[Symbol.toPrimitive];
            if (void 0 !== r) {
              var i = r.call(e, t || "default");
              if ("object" !== n(i)) return i;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return ("string" === t ? String : Number)(e);
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        2310: function _(e, t, r) {
          "use strict";

          var n = r(3355).default,
            i = r(9662);
          e.exports = function (e) {
            var t = i(e, "string");
            return "symbol" === n(t) ? t : String(t);
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        3355: function _(e) {
          "use strict";

          function t(r) {
            return e.exports = t = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
              return _typeof(e);
            } : function (e) {
              return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
            }, e.exports.__esModule = !0, e.exports.default = e.exports, t(r);
          }
          e.exports = t, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        6906: function _(e, t, r) {
          "use strict";

          var n = r(8768);
          e.exports = function (e, t) {
            if (e) {
              if ("string" == typeof e) return n(e, t);
              var r = Object.prototype.toString.call(e).slice(8, -1);
              return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? n(e, t) : void 0;
            }
          }, e.exports.__esModule = !0, e.exports.default = e.exports;
        },
        2247: function _(e, t, r) {
          "use strict";

          var n = r(8847)(r(3355)),
            i = r(2028)();
          e.exports = i;
          try {
            regeneratorRuntime = i;
          } catch (e) {
            "object" === ("undefined" == typeof globalThis ? "undefined" : (0, n.default)(globalThis)) ? globalThis.regeneratorRuntime = i : Function("r", "regeneratorRuntime = r")(i);
          }
        },
        3604: function _(e, t, r) {
          "use strict";

          var n = ["BigInt64Array", "BigUint64Array", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"],
            i = "undefined" == typeof globalThis ? r.g : globalThis;
          e.exports = function () {
            for (var e = [], t = 0; t < n.length; t++) "function" == typeof i[n[t]] && (e[e.length] = n[t]);
            return e;
          };
        },
        7687: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"goerli","chainId":5,"networkId":5,"defaultHardfork":"istanbul","consensus":{"type":"poa","algorithm":"clique","clique":{"period":15,"epoch":30000}},"comment":"Cross-client PoA test network","url":"https://github.com/goerli/testnet","genesis":{"hash":"0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a","timestamp":"0x5c51a607","gasLimit":10485760,"difficulty":1,"nonce":"0x0000000000000000","extraData":"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","stateRoot":"0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xa3f5ab08"},{"name":"homestead","block":0,"forkHash":"0xa3f5ab08"},{"name":"tangerineWhistle","block":0,"forkHash":"0xa3f5ab08"},{"name":"spuriousDragon","block":0,"forkHash":"0xa3f5ab08"},{"name":"byzantium","block":0,"forkHash":"0xa3f5ab08"},{"name":"constantinople","block":0,"forkHash":"0xa3f5ab08"},{"name":"petersburg","block":0,"forkHash":"0xa3f5ab08"},{"name":"istanbul","block":1561651,"forkHash":"0xc25efa5c"},{"name":"berlin","block":4460644,"forkHash":"0x757a1c47"},{"name":"london","block":5062605,"forkHash":"0xb8c6299d"},{"name":"merge","block":null,"forkash":null},{"name":"shanghai","block":null,"forkash":null}],"bootstrapNodes":[{"ip":"51.141.78.53","port":30303,"id":"011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a","location":"","comment":"Upstream bootnode 1"},{"ip":"13.93.54.137","port":30303,"id":"176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b","location":"","comment":"Upstream bootnode 2"},{"ip":"94.237.54.114","port":30313,"id":"46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291","location":"","comment":"Upstream bootnode 3"},{"ip":"18.218.250.66","port":30313,"id":"b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949","location":"","comment":"Upstream bootnode 4"},{"ip":"3.11.147.67","port":30303,"id":"a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91","location":"","comment":"Ethereum Foundation bootnode"},{"ip":"51.15.116.226","port":30303,"id":"a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd","location":"","comment":"Goerli Initiative bootnode"},{"ip":"51.15.119.157","port":30303,"id":"807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33","location":"","comment":"Goerli Initiative bootnode"},{"ip":"51.15.119.157","port":40303,"id":"a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd","location":"","comment":"Goerli Initiative bootnode"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"]}');
        },
        7098: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"kovan","chainId":42,"networkId":42,"defaultHardfork":"istanbul","consensus":{"type":"poa","algorithm":"aura","aura":{}},"comment":"Parity PoA test network","url":"https://kovan-testnet.github.io/website/","genesis":{"hash":"0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9","timestamp":null,"gasLimit":6000000,"difficulty":131072,"nonce":"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","extraData":"0x","stateRoot":"0x2480155b48a1cea17d67dbfdfaafe821c1d19cdd478c5358e8ec56dec24502b2"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x010ffe56"},{"name":"homestead","block":0,"forkHash":"0x010ffe56"},{"name":"tangerineWhistle","block":0,"forkHash":"0x010ffe56"},{"name":"spuriousDragon","block":0,"forkHash":"0x010ffe56"},{"name":"byzantium","block":5067000,"forkHash":"0x7f83c620"},{"name":"constantinople","block":9200000,"forkHash":"0xa94e3dc4"},{"name":"petersburg","block":10255201,"forkHash":"0x186874aa"},{"name":"istanbul","block":14111141,"forkHash":"0x7f6599a6"},{"name":"berlin","block":null,"forkHash":null},{"name":"london","block":null,"forkHash":null},{"name":"merge","block":null,"forkash":null},{"name":"shanghai","block":null,"forkash":null}],"bootstrapNodes":[{"ip":"116.203.116.241","port":30303,"id":"16898006ba2cd4fa8bf9a3dfe32684c178fa861df144bfc21fe800dc4838a03e342056951fa9fd533dcb0be1219e306106442ff2cf1f7e9f8faa5f2fc1a3aa45","location":"","comment":"1"},{"ip":"3.217.96.11","port":30303,"id":"2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0","location":"","comment":"2"},{"ip":"108.61.170.124","port":30303,"id":"740e1c8ea64e71762c71a463a04e2046070a0c9394fcab5891d41301dc473c0cff00ebab5a9bc87fbcb610ab98ac18225ff897bc8b7b38def5975d5ceb0a7d7c","location":"","comment":"3"},{"ip":"157.230.31.163","port":30303,"id":"2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0","location":"","comment":"4"}]}');
        },
        7295: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"mainnet","chainId":1,"networkId":1,"defaultHardfork":"istanbul","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"The Ethereum main chain","url":"https://ethstats.net/","genesis":{"hash":"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3","timestamp":null,"gasLimit":5000,"difficulty":17179869184,"nonce":"0x0000000000000042","extraData":"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa","stateRoot":"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xfc64ec04"},{"name":"homestead","block":1150000,"forkHash":"0x97c2c34c"},{"name":"dao","block":1920000,"forkHash":"0x91d1f948"},{"name":"tangerineWhistle","block":2463000,"forkHash":"0x7a64da13"},{"name":"spuriousDragon","block":2675000,"forkHash":"0x3edd5b10"},{"name":"byzantium","block":4370000,"forkHash":"0xa00bc324"},{"name":"constantinople","block":7280000,"forkHash":"0x668db0af"},{"name":"petersburg","block":7280000,"forkHash":"0x668db0af"},{"name":"istanbul","block":9069000,"forkHash":"0x879d6e30"},{"name":"muirGlacier","block":9200000,"forkHash":"0xe029e991"},{"name":"berlin","block":12244000,"forkHash":"0x0eb440f6"},{"name":"london","block":12965000,"forkHash":"0xb715077d"},{"name":"merge","block":null,"forkash":null},{"name":"shanghai","block":null,"forkash":null}],"bootstrapNodes":[{"ip":"18.138.108.67","port":30303,"id":"d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666","location":"ap-southeast-1-001","comment":"bootnode-aws-ap-southeast-1-001"},{"ip":"3.209.45.79","port":30303,"id":"22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de","location":"us-east-1-001","comment":"bootnode-aws-us-east-1-001"},{"ip":"34.255.23.113","port":30303,"id":"ca6de62fce278f96aea6ec5a2daadb877e51651247cb96ee310a318def462913b653963c155a0ef6c7d50048bba6e6cea881130857413d9f50a621546b590758","location":"eu-west-1-001","comment":"bootnode-aws-eu-west-1-001"},{"ip":"35.158.244.151","port":30303,"id":"279944d8dcd428dffaa7436f25ca0ca43ae19e7bcf94a8fb7d1641651f92d121e972ac2e8f381414b80cc8e5555811c2ec6e1a99bb009b3f53c4c69923e11bd8","location":"eu-central-1-001","comment":"bootnode-aws-eu-central-1-001"},{"ip":"52.187.207.27","port":30303,"id":"8499da03c47d637b20eee24eec3c356c9a2e6148d6fe25ca195c7949ab8ec2c03e3556126b0d7ed644675e78c4318b08691b7b57de10e5f0d40d05b09238fa0a","location":"australiaeast-001","comment":"bootnode-azure-australiaeast-001"},{"ip":"191.234.162.198","port":30303,"id":"103858bdb88756c71f15e9b5e09b56dc1be52f0a5021d46301dbbfb7e130029cc9d0d6f73f693bc29b665770fff7da4d34f3c6379fe12721b5d7a0bcb5ca1fc1","location":"brazilsouth-001","comment":"bootnode-azure-brazilsouth-001"},{"ip":"52.231.165.108","port":30303,"id":"715171f50508aba88aecd1250af392a45a330af91d7b90701c436b618c86aaa1589c9184561907bebbb56439b8f8787bc01f49a7c77276c58c1b09822d75e8e8","location":"koreasouth-001","comment":"bootnode-azure-koreasouth-001"},{"ip":"104.42.217.25","port":30303,"id":"5d6d7cd20d6da4bb83a1d28cadb5d409b64edf314c0335df658c1a54e32c7c4a7ab7823d57c39b6a757556e68ff1df17c748b698544a55cb488b52479a92b60f","location":"westus-001","comment":"bootnode-azure-westus-001"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"]}');
        },
        439: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"rinkeby","chainId":4,"networkId":4,"defaultHardfork":"istanbul","consensus":{"type":"poa","algorithm":"clique","clique":{"period":15,"epoch":30000}},"comment":"PoA test network","url":"https://www.rinkeby.io","genesis":{"hash":"0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177","timestamp":"0x58ee40ba","gasLimit":4700000,"difficulty":1,"nonce":"0x0000000000000000","extraData":"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","stateRoot":"0x53580584816f617295ea26c0e17641e0120cab2f0a8ffb53a866fd53aa8e8c2d"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x3b8e0691"},{"name":"homestead","block":1,"forkHash":"0x60949295"},{"name":"tangerineWhistle","block":2,"forkHash":"0x8bde40dd"},{"name":"spuriousDragon","block":3,"forkHash":"0xcb3a64bb"},{"name":"byzantium","block":1035301,"forkHash":"0x8d748b57"},{"name":"constantinople","block":3660663,"forkHash":"0xe49cab14"},{"name":"petersburg","block":4321234,"forkHash":"0xafec6b27"},{"name":"istanbul","block":5435345,"forkHash":"0xcbdb8838"},{"name":"berlin","block":8290928,"forkHash":"0x6910c8bd"},{"name":"london","block":8897988,"forkHash":"0x8e29f2f3"},{"name":"merge","block":null,"forkash":null},{"name":"shanghai","block":null,"forkash":null}],"bootstrapNodes":[{"ip":"52.169.42.101","port":30303,"id":"a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf","location":"","comment":"IE"},{"ip":"52.3.158.184","port":30303,"id":"343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8","location":"","comment":"INFURA"},{"ip":"159.89.28.211","port":30303,"id":"b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6","location":"","comment":"AKASHA"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net"]}');
        },
        1227: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"ropsten","chainId":3,"networkId":3,"defaultHardfork":"istanbul","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"PoW test network","url":"https://github.com/ethereum/ropsten","genesis":{"hash":"0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d","timestamp":null,"gasLimit":16777216,"difficulty":1048576,"nonce":"0x0000000000000042","extraData":"0x3535353535353535353535353535353535353535353535353535353535353535","stateRoot":"0x217b0bbcfb72e2d57e28f33cb361b9983513177755dc3f33ce3e7022ed62b77b"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x30c7ddbc"},{"name":"homestead","block":0,"forkHash":"0x30c7ddbc"},{"name":"tangerineWhistle","block":0,"forkHash":"0x30c7ddbc"},{"name":"spuriousDragon","block":10,"forkHash":"0x63760190"},{"name":"byzantium","block":1700000,"forkHash":"0x3ea159c7"},{"name":"constantinople","block":4230000,"forkHash":"0x97b544f3"},{"name":"petersburg","block":4939394,"forkHash":"0xd6e2149b"},{"name":"istanbul","block":6485846,"forkHash":"0x4bc66396"},{"name":"muirGlacier","block":7117117,"forkHash":"0x6727ef90"},{"name":"berlin","block":9812189,"forkHash":"0xa157d377"},{"name":"london","block":10499401,"forkHash":"0x7119b6b3"},{"name":"merge","block":null,"forkash":null},{"name":"shanghai","block":null,"forkash":null}],"bootstrapNodes":[{"ip":"52.176.7.10","port":30303,"id":"30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606","location":"","comment":"US-Azure geth"},{"ip":"52.176.100.77","port":30303,"id":"865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c","location":"","comment":"US-Azure parity"},{"ip":"52.232.243.152","port":30303,"id":"6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f","location":"","comment":"Parity"},{"ip":"192.81.208.223","port":30303,"id":"94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09","location":"","comment":"@gpip"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net"]}');
        },
        7523: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"EIP-1559","number":1559,"comment":"Fee market change for ETH 1.0 chain","url":"https://eips.ethereum.org/EIPS/eip-1559","status":"Review","minimumHardfork":"berlin","requiredEIPs":[2930],"gasConfig":{"baseFeeMaxChangeDenominator":{"v":8,"d":"Maximum base fee change denominator"},"elasticityMultiplier":{"v":2,"d":"Maximum block gas target elasticity"},"initialBaseFee":{"v":1000000000,"d":"Initial base fee on first EIP1559 block"}},"gasPrices":{},"vm":{},"pow":{}}');
        },
        3339: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"EIP-2315","number":2315,"comment":"Simple subroutines for the EVM","url":"https://eips.ethereum.org/EIPS/eip-2315","status":"Draft","minimumHardfork":"istanbul","gasConfig":{},"gasPrices":{"beginsub":{"v":2,"d":"Base fee of the BEGINSUB opcode"},"returnsub":{"v":5,"d":"Base fee of the RETURNSUB opcode"},"jumpsub":{"v":10,"d":"Base fee of the JUMPSUB opcode"}},"vm":{},"pow":{}}');
        },
        6769: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"EIP-2537","number":2537,"comment":"BLS12-381 precompiles","url":"https://eips.ethereum.org/EIPS/eip-2537","status":"Draft","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{"Bls12381G1AddGas":{"v":600,"d":"Gas cost of a single BLS12-381 G1 addition precompile-call"},"Bls12381G1MulGas":{"v":12000,"d":"Gas cost of a single BLS12-381 G1 multiplication precompile-call"},"Bls12381G2AddGas":{"v":4500,"d":"Gas cost of a single BLS12-381 G2 addition precompile-call"},"Bls12381G2MulGas":{"v":55000,"d":"Gas cost of a single BLS12-381 G2 multiplication precompile-call"},"Bls12381PairingBaseGas":{"v":115000,"d":"Base gas cost of BLS12-381 pairing check"},"Bls12381PairingPerPairGas":{"v":23000,"d":"Per-pair gas cost of BLS12-381 pairing check"},"Bls12381MapG1Gas":{"v":5500,"d":"Gas cost of BLS12-381 map field element to G1"},"Bls12381MapG2Gas":{"v":110000,"d":"Gas cost of BLS12-381 map field element to G2"},"Bls12381MultiExpGasDiscount":{"v":[[1,1200],[2,888],[3,764],[4,641],[5,594],[6,547],[7,500],[8,453],[9,438],[10,423],[11,408],[12,394],[13,379],[14,364],[15,349],[16,334],[17,330],[18,326],[19,322],[20,318],[21,314],[22,310],[23,306],[24,302],[25,298],[26,294],[27,289],[28,285],[29,281],[30,277],[31,273],[32,269],[33,268],[34,266],[35,265],[36,263],[37,262],[38,260],[39,259],[40,257],[41,256],[42,254],[43,253],[44,251],[45,250],[46,248],[47,247],[48,245],[49,244],[50,242],[51,241],[52,239],[53,238],[54,236],[55,235],[56,233],[57,232],[58,231],[59,229],[60,228],[61,226],[62,225],[63,223],[64,222],[65,221],[66,220],[67,219],[68,219],[69,218],[70,217],[71,216],[72,216],[73,215],[74,214],[75,213],[76,213],[77,212],[78,211],[79,211],[80,210],[81,209],[82,208],[83,208],[84,207],[85,206],[86,205],[87,205],[88,204],[89,203],[90,202],[91,202],[92,201],[93,200],[94,199],[95,199],[96,198],[97,197],[98,196],[99,196],[100,195],[101,194],[102,193],[103,193],[104,192],[105,191],[106,191],[107,190],[108,189],[109,188],[110,188],[111,187],[112,186],[113,185],[114,185],[115,184],[116,183],[117,182],[118,182],[119,181],[120,180],[121,179],[122,179],[123,178],[124,177],[125,176],[126,176],[127,175],[128,174]],"d":"Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"}},"vm":{},"pow":{}}');
        },
        7897: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"EIP-2565","number":2565,"comment":"ModExp gas cost","url":"https://eips.ethereum.org/EIPS/eip-2565","status":"Last call","minimumHardfork":"byzantium","gasConfig":{},"gasPrices":{"modexpGquaddivisor":{"v":3,"d":"Gquaddivisor from modexp precompile for gas calculation"}},"vm":{},"pow":{}}');
        },
        2170: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"EIP-2718","comment":"Typed Transaction Envelope","url":"https://eips.ethereum.org/EIPS/eip-2718","status":"Draft","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}');
        },
        8436: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"EIP-2929","comment":"Gas cost increases for state access opcodes","url":"https://eips.ethereum.org/EIPS/eip-2929","status":"Draft","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{"coldsload":{"v":2100,"d":"Gas cost of the first read of storage from a given location (per transaction)"},"coldaccountaccess":{"v":2600,"d":"Gas cost of the first read of a given address (per transaction)"},"warmstorageread":{"v":100,"d":"Gas cost of reading storage locations which have already loaded \'cold\'"},"sstoreCleanGasEIP2200":{"v":2900,"d":"Once per SSTORE operation from clean non-zero to something else"},"sstoreNoopGasEIP2200":{"v":100,"d":"Once per SSTORE operation if the value doesn\'t change"},"sstoreDirtyGasEIP2200":{"v":100,"d":"Once per SSTORE operation if a dirty value is changed"},"sstoreInitRefundEIP2200":{"v":19900,"d":"Once per SSTORE operation for resetting to the original zero value"},"sstoreCleanRefundEIP2200":{"v":4900,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"call":{"v":0,"d":"Base fee of the CALL opcode"},"callcode":{"v":0,"d":"Base fee of the CALLCODE opcode"},"delegatecall":{"v":0,"d":"Base fee of the DELEGATECALL opcode"},"staticcall":{"v":0,"d":"Base fee of the STATICCALL opcode"},"balance":{"v":0,"d":"Base fee of the BALANCE opcode"},"extcodesize":{"v":0,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":0,"d":"Base fee of the EXTCODECOPY opcode"},"extcodehash":{"v":0,"d":"Base fee of the EXTCODEHASH opcode"},"sload":{"v":0,"d":"Base fee of the SLOAD opcode"},"sstore":{"v":0,"d":"Base fee of the SSTORE opcode"}},"vm":{},"pow":{}}');
        },
        6213: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"EIP-2930","comment":"Optional access lists","url":"https://eips.ethereum.org/EIPS/eip-2930","status":"Draft","minimumHardfork":"istanbul","requiredEIPs":[2718,2929],"gasConfig":{},"gasPrices":{"accessListStorageKeyCost":{"v":1900,"d":"Gas cost per storage key in an Access List transaction"},"accessListAddressCost":{"v":2400,"d":"Gas cost per storage key in an Access List transaction"}},"vm":{},"pow":{}}');
        },
        5491: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"EIP-3198","number":3198,"comment":"BASEFEE opcode","url":"https://eips.ethereum.org/EIPS/eip-3198","status":"Review","minimumHardfork":"london","gasConfig":{},"gasPrices":{"basefee":{"v":2,"d":"Gas cost of the BASEFEE opcode"}},"vm":{},"pow":{}}');
        },
        7852: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"EIP-3529","comment":"Reduction in refunds","url":"https://eips.ethereum.org/EIPS/eip-3529","status":"Draft","minimumHardfork":"berlin","requiredEIPs":[2929],"gasConfig":{"maxRefundQuotient":{"v":5,"d":"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},"gasPrices":{"selfdestructRefund":{"v":0,"d":"Refunded following a selfdestruct operation"},"sstoreClearRefundEIP2200":{"v":4800,"d":"Once per SSTORE operation for clearing an originally existing storage slot"}},"vm":{},"pow":{}}');
        },
        1871: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"EIP-3541","comment":"Reject new contracts starting with the 0xEF byte","url":"https://eips.ethereum.org/EIPS/eip-3541","status":"Draft","minimumHardfork":"berlin","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}');
        },
        7225: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"EIP-3554","comment":"Reduction in refunds","url":"Difficulty Bomb Delay to December 1st 2021","status":"Draft","minimumHardfork":"muirGlacier","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":9500000,"d":"the amount of blocks to delay the difficulty bomb with"}}}');
        },
        8571: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"EIP-3675","number":3675,"comment":"Upgrade consensus to Proof-of-Stake","url":"https://eips.ethereum.org/EIPS/eip-3675","status":"Draft","minimumHardfork":"london","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}');
        },
        15: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"berlin","comment":"HF targeted for July 2020 following the Muir Glacier HF","url":"https://eips.ethereum.org/EIPS/eip-2070","status":"Draft","eips":[2565,2929,2718,2930]}');
        },
        6985: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"byzantium","comment":"Hardfork with new precompiles, instructions and other protocol changes","url":"https://eips.ethereum.org/EIPS/eip-609","status":"Final","gasConfig":{},"gasPrices":{"modexpGquaddivisor":{"v":20,"d":"Gquaddivisor from modexp precompile for gas calculation"},"ecAdd":{"v":500,"d":"Gas costs for curve addition precompile"},"ecMul":{"v":40000,"d":"Gas costs for curve multiplication precompile"},"ecPairing":{"v":100000,"d":"Base gas costs for curve pairing precompile"},"ecPairingWord":{"v":80000,"d":"Gas costs regarding curve pairing precompile input length"},"revert":{"v":0,"d":"Base fee of the REVERT opcode"},"staticcall":{"v":700,"d":"Base fee of the STATICCALL opcode"},"returndatasize":{"v":2,"d":"Base fee of the RETURNDATASIZE opcode"},"returndatacopy":{"v":3,"d":"Base fee of the RETURNDATACOPY opcode"}},"vm":{},"pow":{"minerReward":{"v":"3000000000000000000","d":"the amount a miner get rewarded for mining a block"},"difficultyBombDelay":{"v":3000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}');
        },
        114: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"chainstart","comment":"Start of the Ethereum main chain","url":"","status":"","gasConfig":{"minGasLimit":{"v":5000,"d":"Minimum the gas limit may ever be"},"gasLimitBoundDivisor":{"v":1024,"d":"The bound divisor of the gas limit, used in update calculations"},"maxRefundQuotient":{"v":2,"d":"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},"gasPrices":{"base":{"v":2,"d":"Gas base cost, used e.g. for ChainID opcode (Istanbul)"},"tierStep":{"v":[0,2,3,5,8,10,20],"d":"Once per operation, for a selection of them"},"exp":{"v":10,"d":"Base fee of the EXP opcode"},"expByte":{"v":10,"d":"Times ceil(log256(exponent)) for the EXP instruction"},"sha3":{"v":30,"d":"Base fee of the SHA3 opcode"},"sha3Word":{"v":6,"d":"Once per word of the SHA3 operation\'s data"},"sload":{"v":50,"d":"Base fee of the SLOAD opcode"},"sstoreSet":{"v":20000,"d":"Once per SSTORE operation if the zeroness changes from zero"},"sstoreReset":{"v":5000,"d":"Once per SSTORE operation if the zeroness does not change from zero"},"sstoreRefund":{"v":15000,"d":"Once per SSTORE operation if the zeroness changes to zero"},"jumpdest":{"v":1,"d":"Base fee of the JUMPDEST opcode"},"log":{"v":375,"d":"Base fee of the LOG opcode"},"logData":{"v":8,"d":"Per byte in a LOG* operation\'s data"},"logTopic":{"v":375,"d":"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"},"create":{"v":32000,"d":"Base fee of the CREATE opcode"},"call":{"v":40,"d":"Base fee of the CALL opcode"},"callStipend":{"v":2300,"d":"Free gas given at beginning of call"},"callValueTransfer":{"v":9000,"d":"Paid for CALL when the value transfor is non-zero"},"callNewAccount":{"v":25000,"d":"Paid for CALL when the destination address didn\'t exist prior"},"selfdestructRefund":{"v":24000,"d":"Refunded following a selfdestruct operation"},"memory":{"v":3,"d":"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"},"quadCoeffDiv":{"v":512,"d":"Divisor for the quadratic particle of the memory cost equation"},"createData":{"v":200,"d":""},"tx":{"v":21000,"d":"Per transaction. NOTE: Not payable on data of calls between transactions"},"txCreation":{"v":32000,"d":"The cost of creating a contract via tx"},"txDataZero":{"v":4,"d":"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"},"txDataNonZero":{"v":68,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},"copy":{"v":3,"d":"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"},"ecRecover":{"v":3000,"d":""},"sha256":{"v":60,"d":""},"sha256Word":{"v":12,"d":""},"ripemd160":{"v":600,"d":""},"ripemd160Word":{"v":120,"d":""},"identity":{"v":15,"d":""},"identityWord":{"v":3,"d":""},"stop":{"v":0,"d":"Base fee of the STOP opcode"},"add":{"v":3,"d":"Base fee of the ADD opcode"},"mul":{"v":5,"d":"Base fee of the MUL opcode"},"sub":{"v":3,"d":"Base fee of the SUB opcode"},"div":{"v":5,"d":"Base fee of the DIV opcode"},"sdiv":{"v":5,"d":"Base fee of the SDIV opcode"},"mod":{"v":5,"d":"Base fee of the MOD opcode"},"smod":{"v":5,"d":"Base fee of the SMOD opcode"},"addmod":{"v":8,"d":"Base fee of the ADDMOD opcode"},"mulmod":{"v":8,"d":"Base fee of the MULMOD opcode"},"signextend":{"v":5,"d":"Base fee of the SIGNEXTEND opcode"},"lt":{"v":3,"d":"Base fee of the LT opcode"},"gt":{"v":3,"d":"Base fee of the GT opcode"},"slt":{"v":3,"d":"Base fee of the SLT opcode"},"sgt":{"v":3,"d":"Base fee of the SGT opcode"},"eq":{"v":3,"d":"Base fee of the EQ opcode"},"iszero":{"v":3,"d":"Base fee of the ISZERO opcode"},"and":{"v":3,"d":"Base fee of the AND opcode"},"or":{"v":3,"d":"Base fee of the OR opcode"},"xor":{"v":3,"d":"Base fee of the XOR opcode"},"not":{"v":3,"d":"Base fee of the NOT opcode"},"byte":{"v":3,"d":"Base fee of the BYTE opcode"},"address":{"v":2,"d":"Base fee of the ADDRESS opcode"},"balance":{"v":20,"d":"Base fee of the BALANCE opcode"},"origin":{"v":2,"d":"Base fee of the ORIGIN opcode"},"caller":{"v":2,"d":"Base fee of the CALLER opcode"},"callvalue":{"v":2,"d":"Base fee of the CALLVALUE opcode"},"calldataload":{"v":3,"d":"Base fee of the CALLDATALOAD opcode"},"calldatasize":{"v":2,"d":"Base fee of the CALLDATASIZE opcode"},"calldatacopy":{"v":3,"d":"Base fee of the CALLDATACOPY opcode"},"codesize":{"v":2,"d":"Base fee of the CODESIZE opcode"},"codecopy":{"v":3,"d":"Base fee of the CODECOPY opcode"},"gasprice":{"v":2,"d":"Base fee of the GASPRICE opcode"},"extcodesize":{"v":20,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":20,"d":"Base fee of the EXTCODECOPY opcode"},"blockhash":{"v":20,"d":"Base fee of the BLOCKHASH opcode"},"coinbase":{"v":2,"d":"Base fee of the COINBASE opcode"},"timestamp":{"v":2,"d":"Base fee of the TIMESTAMP opcode"},"number":{"v":2,"d":"Base fee of the NUMBER opcode"},"difficulty":{"v":2,"d":"Base fee of the DIFFICULTY opcode"},"gaslimit":{"v":2,"d":"Base fee of the GASLIMIT opcode"},"pop":{"v":2,"d":"Base fee of the POP opcode"},"mload":{"v":3,"d":"Base fee of the MLOAD opcode"},"mstore":{"v":3,"d":"Base fee of the MSTORE opcode"},"mstore8":{"v":3,"d":"Base fee of the MSTORE8 opcode"},"sstore":{"v":0,"d":"Base fee of the SSTORE opcode"},"jump":{"v":8,"d":"Base fee of the JUMP opcode"},"jumpi":{"v":10,"d":"Base fee of the JUMPI opcode"},"pc":{"v":2,"d":"Base fee of the PC opcode"},"msize":{"v":2,"d":"Base fee of the MSIZE opcode"},"gas":{"v":2,"d":"Base fee of the GAS opcode"},"push":{"v":3,"d":"Base fee of the PUSH opcode"},"dup":{"v":3,"d":"Base fee of the DUP opcode"},"swap":{"v":3,"d":"Base fee of the SWAP opcode"},"callcode":{"v":40,"d":"Base fee of the CALLCODE opcode"},"return":{"v":0,"d":"Base fee of the RETURN opcode"},"invalid":{"v":0,"d":"Base fee of the INVALID opcode"},"selfdestruct":{"v":0,"d":"Base fee of the SELFDESTRUCT opcode"}},"vm":{"stackLimit":{"v":1024,"d":"Maximum size of VM stack allowed"},"callCreateDepth":{"v":1024,"d":"Maximum depth of call/create stack"},"maxExtraDataSize":{"v":32,"d":"Maximum size extra data may be after Genesis"}},"pow":{"minimumDifficulty":{"v":131072,"d":"The minimum that the difficulty may ever be"},"difficultyBoundDivisor":{"v":2048,"d":"The bound divisor of the difficulty, used in the update calculations"},"durationLimit":{"v":13,"d":"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"},"epochDuration":{"v":30000,"d":"Duration between proof-of-work epochs"},"timebombPeriod":{"v":100000,"d":"Exponential difficulty timebomb period"},"minerReward":{"v":"5000000000000000000","d":"the amount a miner get rewarded for mining a block"},"difficultyBombDelay":{"v":0,"d":"the amount of blocks to delay the difficulty bomb with"}}}');
        },
        5993: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"constantinople","comment":"Postponed hardfork including EIP-1283 (SSTORE gas metering changes)","url":"https://eips.ethereum.org/EIPS/eip-1013","status":"Final","gasConfig":{},"gasPrices":{"netSstoreNoopGas":{"v":200,"d":"Once per SSTORE operation if the value doesn\'t change"},"netSstoreInitGas":{"v":20000,"d":"Once per SSTORE operation from clean zero"},"netSstoreCleanGas":{"v":5000,"d":"Once per SSTORE operation from clean non-zero"},"netSstoreDirtyGas":{"v":200,"d":"Once per SSTORE operation from dirty"},"netSstoreClearRefund":{"v":15000,"d":"Once per SSTORE operation for clearing an originally existing storage slot"},"netSstoreResetRefund":{"v":4800,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"netSstoreResetClearRefund":{"v":19800,"d":"Once per SSTORE operation for resetting to the original zero value"},"shl":{"v":3,"d":"Base fee of the SHL opcode"},"shr":{"v":3,"d":"Base fee of the SHR opcode"},"sar":{"v":3,"d":"Base fee of the SAR opcode"},"extcodehash":{"v":400,"d":"Base fee of the EXTCODEHASH opcode"},"create2":{"v":32000,"d":"Base fee of the CREATE2 opcode"}},"vm":{},"pow":{"minerReward":{"v":"2000000000000000000","d":"The amount a miner gets rewarded for mining a block"},"difficultyBombDelay":{"v":5000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}');
        },
        7197: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"dao","comment":"DAO rescue hardfork","url":"https://eips.ethereum.org/EIPS/eip-779","status":"Final","gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}');
        },
        2800: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"homestead","comment":"Homestead hardfork with protocol and network changes","url":"https://eips.ethereum.org/EIPS/eip-606","status":"Final","gasConfig":{},"gasPrices":{"delegatecall":{"v":40,"d":"Base fee of the DELEGATECALL opcode"}},"vm":{},"pow":{}}');
        },
        3166: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"istanbul","comment":"HF targeted for December 2019 following the Constantinople/Petersburg HF","url":"https://eips.ethereum.org/EIPS/eip-1679","status":"Draft","gasConfig":{},"gasPrices":{"blake2Round":{"v":1,"d":"Gas cost per round for the Blake2 F precompile"},"ecAdd":{"v":150,"d":"Gas costs for curve addition precompile"},"ecMul":{"v":6000,"d":"Gas costs for curve multiplication precompile"},"ecPairing":{"v":45000,"d":"Base gas costs for curve pairing precompile"},"ecPairingWord":{"v":34000,"d":"Gas costs regarding curve pairing precompile input length"},"txDataNonZero":{"v":16,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},"sstoreSentryGasEIP2200":{"v":2300,"d":"Minimum gas required to be present for an SSTORE call, not consumed"},"sstoreNoopGasEIP2200":{"v":800,"d":"Once per SSTORE operation if the value doesn\'t change"},"sstoreDirtyGasEIP2200":{"v":800,"d":"Once per SSTORE operation if a dirty value is changed"},"sstoreInitGasEIP2200":{"v":20000,"d":"Once per SSTORE operation from clean zero to non-zero"},"sstoreInitRefundEIP2200":{"v":19200,"d":"Once per SSTORE operation for resetting to the original zero value"},"sstoreCleanGasEIP2200":{"v":5000,"d":"Once per SSTORE operation from clean non-zero to something else"},"sstoreCleanRefundEIP2200":{"v":4200,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"sstoreClearRefundEIP2200":{"v":15000,"d":"Once per SSTORE operation for clearing an originally existing storage slot"},"balance":{"v":700,"d":"Base fee of the BALANCE opcode"},"extcodehash":{"v":700,"d":"Base fee of the EXTCODEHASH opcode"},"chainid":{"v":2,"d":"Base fee of the CHAINID opcode"},"selfbalance":{"v":5,"d":"Base fee of the SELFBALANCE opcode"},"sload":{"v":800,"d":"Base fee of the SLOAD opcode"}},"vm":{},"pow":{}}');
        },
        1250: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"london","comment":"HF targeted for July 2021 following the Berlin fork","url":"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md","status":"Draft","eips":[1559,3198,3529,3541]}');
        },
        8648: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"merge","comment":"Hardfork to upgrade the consensus mechanism to Proof-of-Stake","url":"https://github.com/ethereum/pm/issues/361","status":"pre-Draft","consensus":{"type":"pos","algorithm":"casper","casper":{}},"eips":[3675]}');
        },
        2946: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"muirGlacier","comment":"HF to delay the difficulty bomb","url":"https://eips.ethereum.org/EIPS/eip-2384","status":"Final","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":9000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}');
        },
        4064: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"petersburg","comment":"Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople","url":"https://eips.ethereum.org/EIPS/eip-1716","status":"Draft","gasConfig":{},"gasPrices":{"netSstoreNoopGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreInitGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreCleanGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreDirtyGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreClearRefund":{"v":null,"d":"Removed along EIP-1283"},"netSstoreResetRefund":{"v":null,"d":"Removed along EIP-1283"},"netSstoreResetClearRefund":{"v":null,"d":"Removed along EIP-1283"}},"vm":{},"pow":{}}');
        },
        5553: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"shanghai","comment":"Next feature hardfork after the London HF","url":"https://github.com/ethereum/pm/issues/356","status":"Pre-Draft","eips":[]}');
        },
        716: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"spuriousDragon","comment":"HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit","url":"https://eips.ethereum.org/EIPS/eip-607","status":"Final","gasConfig":{},"gasPrices":{"expByte":{"v":50,"d":"Times ceil(log256(exponent)) for the EXP instruction"}},"vm":{"maxCodeSize":{"v":24576,"d":"Maximum length of contract code"}},"pow":{}}');
        },
        2302: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"name":"tangerineWhistle","comment":"Hardfork with gas cost changes for IO-heavy operations","url":"https://eips.ethereum.org/EIPS/eip-608","status":"Final","gasConfig":{},"gasPrices":{"sload":{"v":200,"d":"Once per SLOAD operation"},"call":{"v":700,"d":"Once per CALL operation & message call transaction"},"extcodesize":{"v":700,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":700,"d":"Base fee of the EXTCODECOPY opcode"},"balance":{"v":400,"d":"Base fee of the BALANCE opcode"},"delegatecall":{"v":700,"d":"Base fee of the DELEGATECALL opcode"},"callcode":{"v":700,"d":"Base fee of the CALLCODE opcode"},"selfdestruct":{"v":5000,"d":"Base fee of the SELFDESTRUCT opcode"}},"vm":{},"pow":{}}');
        },
        4946: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}');
        },
        5207: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}');
        },
        1308: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}');
        },
        3630: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"identity":0,"ip4":4,"tcp":6,"sha1":17,"sha2-256":18,"sha2-512":19,"sha3-512":20,"sha3-384":21,"sha3-256":22,"sha3-224":23,"shake-128":24,"shake-256":25,"keccak-224":26,"keccak-256":27,"keccak-384":28,"keccak-512":29,"blake3":30,"dccp":33,"murmur3-128":34,"murmur3-32":35,"ip6":41,"ip6zone":42,"path":47,"multicodec":48,"multihash":49,"multiaddr":50,"multibase":51,"dns":53,"dns4":54,"dns6":55,"dnsaddr":56,"protobuf":80,"cbor":81,"raw":85,"dbl-sha2-256":86,"rlp":96,"bencode":99,"dag-pb":112,"dag-cbor":113,"libp2p-key":114,"git-raw":120,"torrent-info":123,"torrent-file":124,"leofcoin-block":129,"leofcoin-tx":130,"leofcoin-pr":131,"sctp":132,"dag-jose":133,"dag-cose":134,"eth-block":144,"eth-block-list":145,"eth-tx-trie":146,"eth-tx":147,"eth-tx-receipt-trie":148,"eth-tx-receipt":149,"eth-state-trie":150,"eth-account-snapshot":151,"eth-storage-trie":152,"bitcoin-block":176,"bitcoin-tx":177,"bitcoin-witness-commitment":178,"zcash-block":192,"zcash-tx":193,"stellar-block":208,"stellar-tx":209,"md4":212,"md5":213,"bmt":214,"decred-block":224,"decred-tx":225,"ipld-ns":226,"ipfs-ns":227,"swarm-ns":228,"ipns-ns":229,"zeronet":230,"secp256k1-pub":231,"bls12_381-g1-pub":234,"bls12_381-g2-pub":235,"x25519-pub":236,"ed25519-pub":237,"dash-block":240,"dash-tx":241,"swarm-manifest":250,"swarm-feed":251,"udp":273,"p2p-webrtc-star":275,"p2p-webrtc-direct":276,"p2p-stardust":277,"p2p-circuit":290,"dag-json":297,"udt":301,"utp":302,"unix":400,"p2p":421,"ipfs":421,"https":443,"onion":444,"onion3":445,"garlic64":446,"garlic32":447,"tls":448,"quic":460,"ws":477,"wss":478,"p2p-websocket-star":479,"http":480,"json":512,"messagepack":513,"libp2p-peer-record":769,"sha2-256-trunc254-padded":4114,"ripemd-128":4178,"ripemd-160":4179,"ripemd-256":4180,"ripemd-320":4181,"x11":4352,"sm3-256":21325,"blake2b-8":45569,"blake2b-16":45570,"blake2b-24":45571,"blake2b-32":45572,"blake2b-40":45573,"blake2b-48":45574,"blake2b-56":45575,"blake2b-64":45576,"blake2b-72":45577,"blake2b-80":45578,"blake2b-88":45579,"blake2b-96":45580,"blake2b-104":45581,"blake2b-112":45582,"blake2b-120":45583,"blake2b-128":45584,"blake2b-136":45585,"blake2b-144":45586,"blake2b-152":45587,"blake2b-160":45588,"blake2b-168":45589,"blake2b-176":45590,"blake2b-184":45591,"blake2b-192":45592,"blake2b-200":45593,"blake2b-208":45594,"blake2b-216":45595,"blake2b-224":45596,"blake2b-232":45597,"blake2b-240":45598,"blake2b-248":45599,"blake2b-256":45600,"blake2b-264":45601,"blake2b-272":45602,"blake2b-280":45603,"blake2b-288":45604,"blake2b-296":45605,"blake2b-304":45606,"blake2b-312":45607,"blake2b-320":45608,"blake2b-328":45609,"blake2b-336":45610,"blake2b-344":45611,"blake2b-352":45612,"blake2b-360":45613,"blake2b-368":45614,"blake2b-376":45615,"blake2b-384":45616,"blake2b-392":45617,"blake2b-400":45618,"blake2b-408":45619,"blake2b-416":45620,"blake2b-424":45621,"blake2b-432":45622,"blake2b-440":45623,"blake2b-448":45624,"blake2b-456":45625,"blake2b-464":45626,"blake2b-472":45627,"blake2b-480":45628,"blake2b-488":45629,"blake2b-496":45630,"blake2b-504":45631,"blake2b-512":45632,"blake2s-8":45633,"blake2s-16":45634,"blake2s-24":45635,"blake2s-32":45636,"blake2s-40":45637,"blake2s-48":45638,"blake2s-56":45639,"blake2s-64":45640,"blake2s-72":45641,"blake2s-80":45642,"blake2s-88":45643,"blake2s-96":45644,"blake2s-104":45645,"blake2s-112":45646,"blake2s-120":45647,"blake2s-128":45648,"blake2s-136":45649,"blake2s-144":45650,"blake2s-152":45651,"blake2s-160":45652,"blake2s-168":45653,"blake2s-176":45654,"blake2s-184":45655,"blake2s-192":45656,"blake2s-200":45657,"blake2s-208":45658,"blake2s-216":45659,"blake2s-224":45660,"blake2s-232":45661,"blake2s-240":45662,"blake2s-248":45663,"blake2s-256":45664,"skein256-8":45825,"skein256-16":45826,"skein256-24":45827,"skein256-32":45828,"skein256-40":45829,"skein256-48":45830,"skein256-56":45831,"skein256-64":45832,"skein256-72":45833,"skein256-80":45834,"skein256-88":45835,"skein256-96":45836,"skein256-104":45837,"skein256-112":45838,"skein256-120":45839,"skein256-128":45840,"skein256-136":45841,"skein256-144":45842,"skein256-152":45843,"skein256-160":45844,"skein256-168":45845,"skein256-176":45846,"skein256-184":45847,"skein256-192":45848,"skein256-200":45849,"skein256-208":45850,"skein256-216":45851,"skein256-224":45852,"skein256-232":45853,"skein256-240":45854,"skein256-248":45855,"skein256-256":45856,"skein512-8":45857,"skein512-16":45858,"skein512-24":45859,"skein512-32":45860,"skein512-40":45861,"skein512-48":45862,"skein512-56":45863,"skein512-64":45864,"skein512-72":45865,"skein512-80":45866,"skein512-88":45867,"skein512-96":45868,"skein512-104":45869,"skein512-112":45870,"skein512-120":45871,"skein512-128":45872,"skein512-136":45873,"skein512-144":45874,"skein512-152":45875,"skein512-160":45876,"skein512-168":45877,"skein512-176":45878,"skein512-184":45879,"skein512-192":45880,"skein512-200":45881,"skein512-208":45882,"skein512-216":45883,"skein512-224":45884,"skein512-232":45885,"skein512-240":45886,"skein512-248":45887,"skein512-256":45888,"skein512-264":45889,"skein512-272":45890,"skein512-280":45891,"skein512-288":45892,"skein512-296":45893,"skein512-304":45894,"skein512-312":45895,"skein512-320":45896,"skein512-328":45897,"skein512-336":45898,"skein512-344":45899,"skein512-352":45900,"skein512-360":45901,"skein512-368":45902,"skein512-376":45903,"skein512-384":45904,"skein512-392":45905,"skein512-400":45906,"skein512-408":45907,"skein512-416":45908,"skein512-424":45909,"skein512-432":45910,"skein512-440":45911,"skein512-448":45912,"skein512-456":45913,"skein512-464":45914,"skein512-472":45915,"skein512-480":45916,"skein512-488":45917,"skein512-496":45918,"skein512-504":45919,"skein512-512":45920,"skein1024-8":45921,"skein1024-16":45922,"skein1024-24":45923,"skein1024-32":45924,"skein1024-40":45925,"skein1024-48":45926,"skein1024-56":45927,"skein1024-64":45928,"skein1024-72":45929,"skein1024-80":45930,"skein1024-88":45931,"skein1024-96":45932,"skein1024-104":45933,"skein1024-112":45934,"skein1024-120":45935,"skein1024-128":45936,"skein1024-136":45937,"skein1024-144":45938,"skein1024-152":45939,"skein1024-160":45940,"skein1024-168":45941,"skein1024-176":45942,"skein1024-184":45943,"skein1024-192":45944,"skein1024-200":45945,"skein1024-208":45946,"skein1024-216":45947,"skein1024-224":45948,"skein1024-232":45949,"skein1024-240":45950,"skein1024-248":45951,"skein1024-256":45952,"skein1024-264":45953,"skein1024-272":45954,"skein1024-280":45955,"skein1024-288":45956,"skein1024-296":45957,"skein1024-304":45958,"skein1024-312":45959,"skein1024-320":45960,"skein1024-328":45961,"skein1024-336":45962,"skein1024-344":45963,"skein1024-352":45964,"skein1024-360":45965,"skein1024-368":45966,"skein1024-376":45967,"skein1024-384":45968,"skein1024-392":45969,"skein1024-400":45970,"skein1024-408":45971,"skein1024-416":45972,"skein1024-424":45973,"skein1024-432":45974,"skein1024-440":45975,"skein1024-448":45976,"skein1024-456":45977,"skein1024-464":45978,"skein1024-472":45979,"skein1024-480":45980,"skein1024-488":45981,"skein1024-496":45982,"skein1024-504":45983,"skein1024-512":45984,"skein1024-520":45985,"skein1024-528":45986,"skein1024-536":45987,"skein1024-544":45988,"skein1024-552":45989,"skein1024-560":45990,"skein1024-568":45991,"skein1024-576":45992,"skein1024-584":45993,"skein1024-592":45994,"skein1024-600":45995,"skein1024-608":45996,"skein1024-616":45997,"skein1024-624":45998,"skein1024-632":45999,"skein1024-640":46000,"skein1024-648":46001,"skein1024-656":46002,"skein1024-664":46003,"skein1024-672":46004,"skein1024-680":46005,"skein1024-688":46006,"skein1024-696":46007,"skein1024-704":46008,"skein1024-712":46009,"skein1024-720":46010,"skein1024-728":46011,"skein1024-736":46012,"skein1024-744":46013,"skein1024-752":46014,"skein1024-760":46015,"skein1024-768":46016,"skein1024-776":46017,"skein1024-784":46018,"skein1024-792":46019,"skein1024-800":46020,"skein1024-808":46021,"skein1024-816":46022,"skein1024-824":46023,"skein1024-832":46024,"skein1024-840":46025,"skein1024-848":46026,"skein1024-856":46027,"skein1024-864":46028,"skein1024-872":46029,"skein1024-880":46030,"skein1024-888":46031,"skein1024-896":46032,"skein1024-904":46033,"skein1024-912":46034,"skein1024-920":46035,"skein1024-928":46036,"skein1024-936":46037,"skein1024-944":46038,"skein1024-952":46039,"skein1024-960":46040,"skein1024-968":46041,"skein1024-976":46042,"skein1024-984":46043,"skein1024-992":46044,"skein1024-1000":46045,"skein1024-1008":46046,"skein1024-1016":46047,"skein1024-1024":46048,"poseidon-bls12_381-a2-fc1":46081,"poseidon-bls12_381-a2-fc1-sc":46082,"zeroxcert-imprint-256":52753,"fil-commitment-unsealed":61697,"fil-commitment-sealed":61698,"holochain-adr-v0":8417572,"holochain-adr-v1":8483108,"holochain-key-v0":9728292,"holochain-key-v1":9793828,"holochain-sig-v0":10645796,"holochain-sig-v1":10711332}');
        },
        9799: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}');
        },
        8597: function _(e) {
          "use strict";

          e.exports = {
            i8: "6.5.4"
          };
        },
        4070: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"identity":0,"ip4":4,"tcp":6,"sha1":17,"sha2-256":18,"sha2-512":19,"sha3-512":20,"sha3-384":21,"sha3-256":22,"sha3-224":23,"shake-128":24,"shake-256":25,"keccak-224":26,"keccak-256":27,"keccak-384":28,"keccak-512":29,"dccp":33,"murmur3-128":34,"murmur3-32":35,"ip6":41,"ip6zone":42,"path":47,"multicodec":48,"multihash":49,"multiaddr":50,"multibase":51,"dns":53,"dns4":54,"dns6":55,"dnsaddr":56,"protobuf":80,"cbor":81,"raw":85,"dbl-sha2-256":86,"rlp":96,"bencode":99,"dag-pb":112,"dag-cbor":113,"libp2p-key":114,"git-raw":120,"torrent-info":123,"torrent-file":124,"leofcoin-block":129,"leofcoin-tx":130,"leofcoin-pr":131,"sctp":132,"eth-block":144,"eth-block-list":145,"eth-tx-trie":146,"eth-tx":147,"eth-tx-receipt-trie":148,"eth-tx-receipt":149,"eth-state-trie":150,"eth-account-snapshot":151,"eth-storage-trie":152,"bitcoin-block":176,"bitcoin-tx":177,"zcash-block":192,"zcash-tx":193,"stellar-block":208,"stellar-tx":209,"md4":212,"md5":213,"bmt":214,"decred-block":224,"decred-tx":225,"ipld-ns":226,"ipfs-ns":227,"swarm-ns":228,"ipns-ns":229,"zeronet":230,"ed25519-pub":237,"dash-block":240,"dash-tx":241,"swarm-manifest":250,"swarm-feed":251,"udp":273,"p2p-webrtc-star":275,"p2p-webrtc-direct":276,"p2p-stardust":277,"p2p-circuit":290,"dag-json":297,"udt":301,"utp":302,"unix":400,"p2p":421,"ipfs":421,"https":443,"onion":444,"onion3":445,"garlic64":446,"garlic32":447,"tls":448,"quic":460,"ws":477,"wss":478,"p2p-websocket-star":479,"http":480,"json":512,"messagepack":513,"x11":4352,"blake2b-8":45569,"blake2b-16":45570,"blake2b-24":45571,"blake2b-32":45572,"blake2b-40":45573,"blake2b-48":45574,"blake2b-56":45575,"blake2b-64":45576,"blake2b-72":45577,"blake2b-80":45578,"blake2b-88":45579,"blake2b-96":45580,"blake2b-104":45581,"blake2b-112":45582,"blake2b-120":45583,"blake2b-128":45584,"blake2b-136":45585,"blake2b-144":45586,"blake2b-152":45587,"blake2b-160":45588,"blake2b-168":45589,"blake2b-176":45590,"blake2b-184":45591,"blake2b-192":45592,"blake2b-200":45593,"blake2b-208":45594,"blake2b-216":45595,"blake2b-224":45596,"blake2b-232":45597,"blake2b-240":45598,"blake2b-248":45599,"blake2b-256":45600,"blake2b-264":45601,"blake2b-272":45602,"blake2b-280":45603,"blake2b-288":45604,"blake2b-296":45605,"blake2b-304":45606,"blake2b-312":45607,"blake2b-320":45608,"blake2b-328":45609,"blake2b-336":45610,"blake2b-344":45611,"blake2b-352":45612,"blake2b-360":45613,"blake2b-368":45614,"blake2b-376":45615,"blake2b-384":45616,"blake2b-392":45617,"blake2b-400":45618,"blake2b-408":45619,"blake2b-416":45620,"blake2b-424":45621,"blake2b-432":45622,"blake2b-440":45623,"blake2b-448":45624,"blake2b-456":45625,"blake2b-464":45626,"blake2b-472":45627,"blake2b-480":45628,"blake2b-488":45629,"blake2b-496":45630,"blake2b-504":45631,"blake2b-512":45632,"blake2s-8":45633,"blake2s-16":45634,"blake2s-24":45635,"blake2s-32":45636,"blake2s-40":45637,"blake2s-48":45638,"blake2s-56":45639,"blake2s-64":45640,"blake2s-72":45641,"blake2s-80":45642,"blake2s-88":45643,"blake2s-96":45644,"blake2s-104":45645,"blake2s-112":45646,"blake2s-120":45647,"blake2s-128":45648,"blake2s-136":45649,"blake2s-144":45650,"blake2s-152":45651,"blake2s-160":45652,"blake2s-168":45653,"blake2s-176":45654,"blake2s-184":45655,"blake2s-192":45656,"blake2s-200":45657,"blake2s-208":45658,"blake2s-216":45659,"blake2s-224":45660,"blake2s-232":45661,"blake2s-240":45662,"blake2s-248":45663,"blake2s-256":45664,"skein256-8":45825,"skein256-16":45826,"skein256-24":45827,"skein256-32":45828,"skein256-40":45829,"skein256-48":45830,"skein256-56":45831,"skein256-64":45832,"skein256-72":45833,"skein256-80":45834,"skein256-88":45835,"skein256-96":45836,"skein256-104":45837,"skein256-112":45838,"skein256-120":45839,"skein256-128":45840,"skein256-136":45841,"skein256-144":45842,"skein256-152":45843,"skein256-160":45844,"skein256-168":45845,"skein256-176":45846,"skein256-184":45847,"skein256-192":45848,"skein256-200":45849,"skein256-208":45850,"skein256-216":45851,"skein256-224":45852,"skein256-232":45853,"skein256-240":45854,"skein256-248":45855,"skein256-256":45856,"skein512-8":45857,"skein512-16":45858,"skein512-24":45859,"skein512-32":45860,"skein512-40":45861,"skein512-48":45862,"skein512-56":45863,"skein512-64":45864,"skein512-72":45865,"skein512-80":45866,"skein512-88":45867,"skein512-96":45868,"skein512-104":45869,"skein512-112":45870,"skein512-120":45871,"skein512-128":45872,"skein512-136":45873,"skein512-144":45874,"skein512-152":45875,"skein512-160":45876,"skein512-168":45877,"skein512-176":45878,"skein512-184":45879,"skein512-192":45880,"skein512-200":45881,"skein512-208":45882,"skein512-216":45883,"skein512-224":45884,"skein512-232":45885,"skein512-240":45886,"skein512-248":45887,"skein512-256":45888,"skein512-264":45889,"skein512-272":45890,"skein512-280":45891,"skein512-288":45892,"skein512-296":45893,"skein512-304":45894,"skein512-312":45895,"skein512-320":45896,"skein512-328":45897,"skein512-336":45898,"skein512-344":45899,"skein512-352":45900,"skein512-360":45901,"skein512-368":45902,"skein512-376":45903,"skein512-384":45904,"skein512-392":45905,"skein512-400":45906,"skein512-408":45907,"skein512-416":45908,"skein512-424":45909,"skein512-432":45910,"skein512-440":45911,"skein512-448":45912,"skein512-456":45913,"skein512-464":45914,"skein512-472":45915,"skein512-480":45916,"skein512-488":45917,"skein512-496":45918,"skein512-504":45919,"skein512-512":45920,"skein1024-8":45921,"skein1024-16":45922,"skein1024-24":45923,"skein1024-32":45924,"skein1024-40":45925,"skein1024-48":45926,"skein1024-56":45927,"skein1024-64":45928,"skein1024-72":45929,"skein1024-80":45930,"skein1024-88":45931,"skein1024-96":45932,"skein1024-104":45933,"skein1024-112":45934,"skein1024-120":45935,"skein1024-128":45936,"skein1024-136":45937,"skein1024-144":45938,"skein1024-152":45939,"skein1024-160":45940,"skein1024-168":45941,"skein1024-176":45942,"skein1024-184":45943,"skein1024-192":45944,"skein1024-200":45945,"skein1024-208":45946,"skein1024-216":45947,"skein1024-224":45948,"skein1024-232":45949,"skein1024-240":45950,"skein1024-248":45951,"skein1024-256":45952,"skein1024-264":45953,"skein1024-272":45954,"skein1024-280":45955,"skein1024-288":45956,"skein1024-296":45957,"skein1024-304":45958,"skein1024-312":45959,"skein1024-320":45960,"skein1024-328":45961,"skein1024-336":45962,"skein1024-344":45963,"skein1024-352":45964,"skein1024-360":45965,"skein1024-368":45966,"skein1024-376":45967,"skein1024-384":45968,"skein1024-392":45969,"skein1024-400":45970,"skein1024-408":45971,"skein1024-416":45972,"skein1024-424":45973,"skein1024-432":45974,"skein1024-440":45975,"skein1024-448":45976,"skein1024-456":45977,"skein1024-464":45978,"skein1024-472":45979,"skein1024-480":45980,"skein1024-488":45981,"skein1024-496":45982,"skein1024-504":45983,"skein1024-512":45984,"skein1024-520":45985,"skein1024-528":45986,"skein1024-536":45987,"skein1024-544":45988,"skein1024-552":45989,"skein1024-560":45990,"skein1024-568":45991,"skein1024-576":45992,"skein1024-584":45993,"skein1024-592":45994,"skein1024-600":45995,"skein1024-608":45996,"skein1024-616":45997,"skein1024-624":45998,"skein1024-632":45999,"skein1024-640":46000,"skein1024-648":46001,"skein1024-656":46002,"skein1024-664":46003,"skein1024-672":46004,"skein1024-680":46005,"skein1024-688":46006,"skein1024-696":46007,"skein1024-704":46008,"skein1024-712":46009,"skein1024-720":46010,"skein1024-728":46011,"skein1024-736":46012,"skein1024-744":46013,"skein1024-752":46014,"skein1024-760":46015,"skein1024-768":46016,"skein1024-776":46017,"skein1024-784":46018,"skein1024-792":46019,"skein1024-800":46020,"skein1024-808":46021,"skein1024-816":46022,"skein1024-824":46023,"skein1024-832":46024,"skein1024-840":46025,"skein1024-848":46026,"skein1024-856":46027,"skein1024-864":46028,"skein1024-872":46029,"skein1024-880":46030,"skein1024-888":46031,"skein1024-896":46032,"skein1024-904":46033,"skein1024-912":46034,"skein1024-920":46035,"skein1024-928":46036,"skein1024-936":46037,"skein1024-944":46038,"skein1024-952":46039,"skein1024-960":46040,"skein1024-968":46041,"skein1024-976":46042,"skein1024-984":46043,"skein1024-992":46044,"skein1024-1000":46045,"skein1024-1008":46046,"skein1024-1016":46047,"skein1024-1024":46048,"holochain-adr-v0":8417572,"holochain-adr-v1":8483108,"holochain-key-v0":9728292,"holochain-key-v1":9793828,"holochain-sig-v0":10645796,"holochain-sig-v1":10711332}');
        },
        2562: function _(e) {
          "use strict";

          e.exports = JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}');
        },
        9794: function _(e) {
          "use strict";

          e.exports = {
            version: "1.0.34"
          };
        },
        8920: function _(e) {
          "use strict";

          e.exports = {
            i8: "1.10.0"
          };
        }
      },
      t = {};
    function r(n) {
      var i = t[n];
      if (void 0 !== i) return i.exports;
      var o = t[n] = {
        id: n,
        loaded: !1,
        exports: {}
      };
      return e[n](o, o.exports, r), o.loaded = !0, o.exports;
    }
    return r.amdO = {}, r.g = function () {
      if ("object" == (typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis))) return globalThis;
      try {
        return this || new Function("return this")();
      } catch (e) {
        if ("object" == (typeof window === "undefined" ? "undefined" : _typeof(window))) return window;
      }
    }(), r.nmd = function (e) {
      return e.paths = [], e.children || (e.children = []), e;
    }, r(7001);
  }();
});
},{}],"node_modules/@walletconnect/window-getters/dist/cjs/index.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
function getFromWindow(name) {
    let res = undefined;
    if (typeof window !== "undefined" && typeof window[name] !== "undefined") {
        res = window[name];
    }
    return res;
}
exports.getFromWindow = getFromWindow;
function getFromWindowOrThrow(name) {
    const res = getFromWindow(name);
    if (!res) {
        throw new Error(`${name} is not defined in Window`);
    }
    return res;
}
exports.getFromWindowOrThrow = getFromWindowOrThrow;
function getDocumentOrThrow() {
    return getFromWindowOrThrow("document");
}
exports.getDocumentOrThrow = getDocumentOrThrow;
function getDocument() {
    return getFromWindow("document");
}
exports.getDocument = getDocument;
function getNavigatorOrThrow() {
    return getFromWindowOrThrow("navigator");
}
exports.getNavigatorOrThrow = getNavigatorOrThrow;
function getNavigator() {
    return getFromWindow("navigator");
}
exports.getNavigator = getNavigator;
function getLocationOrThrow() {
    return getFromWindowOrThrow("location");
}
exports.getLocationOrThrow = getLocationOrThrow;
function getLocation() {
    return getFromWindow("location");
}
exports.getLocation = getLocation;
function getCryptoOrThrow() {
    return getFromWindowOrThrow("crypto");
}
exports.getCryptoOrThrow = getCryptoOrThrow;
function getCrypto() {
    return getFromWindow("crypto");
}
exports.getCrypto = getCrypto;
function getLocalStorageOrThrow() {
    return getFromWindowOrThrow("localStorage");
}
exports.getLocalStorageOrThrow = getLocalStorageOrThrow;
function getLocalStorage() {
    return getFromWindow("localStorage");
}
exports.getLocalStorage = getLocalStorage;

},{}],"node_modules/@walletconnect/window-metadata/dist/cjs/index.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWindowMetadata = void 0;
const window_getters_1 = require("@walletconnect/window-getters");
function getWindowMetadata() {
    let doc;
    let loc;
    try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
    }
    catch (e) {
        return null;
    }
    function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons = [];
        for (let i = 0; i < links.length; i++) {
            const link = links[i];
            const rel = link.getAttribute("rel");
            if (rel) {
                if (rel.toLowerCase().indexOf("icon") > -1) {
                    const href = link.getAttribute("href");
                    if (href) {
                        if (href.toLowerCase().indexOf("https:") === -1 &&
                            href.toLowerCase().indexOf("http:") === -1 &&
                            href.indexOf("//") !== 0) {
                            let absoluteHref = loc.protocol + "//" + loc.host;
                            if (href.indexOf("/") === 0) {
                                absoluteHref += href;
                            }
                            else {
                                const path = loc.pathname.split("/");
                                path.pop();
                                const finalPath = path.join("/");
                                absoluteHref += finalPath + "/" + href;
                            }
                            icons.push(absoluteHref);
                        }
                        else if (href.indexOf("//") === 0) {
                            const absoluteUrl = loc.protocol + href;
                            icons.push(absoluteUrl);
                        }
                        else {
                            icons.push(href);
                        }
                    }
                }
            }
        }
        return icons;
    }
    function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i = 0; i < metaTags.length; i++) {
            const tag = metaTags[i];
            const attributes = ["itemprop", "property", "name"]
                .map((target) => tag.getAttribute(target))
                .filter((attr) => {
                if (attr) {
                    return args.includes(attr);
                }
                return false;
            });
            if (attributes.length && attributes) {
                const content = tag.getAttribute("content");
                if (content) {
                    return content;
                }
            }
        }
        return "";
    }
    function getName() {
        let name = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name) {
            name = doc.title;
        }
        return name;
    }
    function getDescription() {
        const description = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description;
    }
    const name = getName();
    const description = getDescription();
    const url = loc.origin;
    const icons = getIcons();
    const meta = {
        description,
        url,
        icons,
        name,
    };
    return meta;
}
exports.getWindowMetadata = getWindowMetadata;

},{"@walletconnect/window-getters":"node_modules/@walletconnect/window-getters/dist/cjs/index.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}
(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
};

// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};
process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function (name) {
  return [];
};
process.binding = function (name) {
  throw new Error('process.binding is not supported');
};
process.cwd = function () {
  return '/';
};
process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};
process.umask = function () {
  return 0;
};
},{}],"node_modules/detect-browser/es/index.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchBotDeviceInfo = exports.ReactNativeInfo = exports.NodeInfo = exports.BrowserInfo = exports.BotInfo = void 0;
exports.browserName = browserName;
exports.detect = detect;
exports.detectOS = detectOS;
exports.getNodeVersion = getNodeVersion;
exports.parseUserAgent = parseUserAgent;
var __spreadArrays = void 0 && (void 0).__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
};
var BrowserInfo = /** @class */function () {
  function BrowserInfo(name, version, os) {
    this.name = name;
    this.version = version;
    this.os = os;
    this.type = 'browser';
  }
  return BrowserInfo;
}();
exports.BrowserInfo = BrowserInfo;
var NodeInfo = /** @class */function () {
  function NodeInfo(version) {
    this.version = version;
    this.type = 'node';
    this.name = 'node';
    this.os = process.platform;
  }
  return NodeInfo;
}();
exports.NodeInfo = NodeInfo;
var SearchBotDeviceInfo = /** @class */function () {
  function SearchBotDeviceInfo(name, version, os, bot) {
    this.name = name;
    this.version = version;
    this.os = os;
    this.bot = bot;
    this.type = 'bot-device';
  }
  return SearchBotDeviceInfo;
}();
exports.SearchBotDeviceInfo = SearchBotDeviceInfo;
var BotInfo = /** @class */function () {
  function BotInfo() {
    this.type = 'bot';
    this.bot = true; // NOTE: deprecated test name instead
    this.name = 'bot';
    this.version = null;
    this.os = null;
  }
  return BotInfo;
}();
exports.BotInfo = BotInfo;
var ReactNativeInfo = /** @class */function () {
  function ReactNativeInfo() {
    this.type = 'react-native';
    this.name = 'react-native';
    this.version = null;
    this.os = null;
  }
  return ReactNativeInfo;
}();
exports.ReactNativeInfo = ReactNativeInfo;
// tslint:disable-next-line:max-line-length
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [['aol', /AOLShield\/([0-9\._]+)/], ['edge', /Edge\/([0-9\._]+)/], ['edge-ios', /EdgiOS\/([0-9\._]+)/], ['yandexbrowser', /YaBrowser\/([0-9\._]+)/], ['kakaotalk', /KAKAOTALK\s([0-9\.]+)/], ['samsung', /SamsungBrowser\/([0-9\.]+)/], ['silk', /\bSilk\/([0-9._-]+)\b/], ['miui', /MiuiBrowser\/([0-9\.]+)$/], ['beaker', /BeakerBrowser\/([0-9\.]+)/], ['edge-chromium', /EdgA?\/([0-9\.]+)/], ['chromium-webview', /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/], ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/], ['phantomjs', /PhantomJS\/([0-9\.]+)(:?\s|$)/], ['crios', /CriOS\/([0-9\.]+)(:?\s|$)/], ['firefox', /Firefox\/([0-9\.]+)(?:\s|$)/], ['fxios', /FxiOS\/([0-9\.]+)/], ['opera-mini', /Opera Mini.*Version\/([0-9\.]+)/], ['opera', /Opera\/([0-9\.]+)(?:\s|$)/], ['opera', /OPR\/([0-9\.]+)(:?\s|$)/], ['ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/], ['ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/], ['ie', /MSIE\s(7\.0)/], ['bb10', /BB10;\sTouch.*Version\/([0-9\.]+)/], ['android', /Android\s([0-9\.]+)/], ['ios', /Version\/([0-9\._]+).*Mobile.*Safari.*/], ['safari', /Version\/([0-9\._]+).*Safari/], ['facebook', /FBAV\/([0-9\.]+)/], ['instagram', /Instagram\s([0-9\.]+)/], ['ios-webview', /AppleWebKit\/([0-9\.]+).*Mobile/], ['ios-webview', /AppleWebKit\/([0-9\.]+).*Gecko\)$/], ['searchbot', SEARCHBOX_UA_REGEX]];
var operatingSystemRules = [['iOS', /iP(hone|od|ad)/], ['Android OS', /Android/], ['BlackBerry OS', /BlackBerry|BB10/], ['Windows Mobile', /IEMobile/], ['Amazon OS', /Kindle/], ['Windows 3.11', /Win16/], ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/], ['Windows 98', /(Windows 98)|(Win98)/], ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/], ['Windows XP', /(Windows NT 5.1)|(Windows XP)/], ['Windows Server 2003', /(Windows NT 5.2)/], ['Windows Vista', /(Windows NT 6.0)/], ['Windows 7', /(Windows NT 6.1)/], ['Windows 8', /(Windows NT 6.2)/], ['Windows 8.1', /(Windows NT 6.3)/], ['Windows 10', /(Windows NT 10.0)/], ['Windows ME', /Windows ME/], ['Open BSD', /OpenBSD/], ['Sun OS', /SunOS/], ['Chrome OS', /CrOS/], ['Linux', /(Linux)|(X11)/], ['Mac OS', /(Mac_PowerPC)|(Macintosh)/], ['QNX', /QNX/], ['BeOS', /BeOS/], ['OS/2', /OS\/2/]];
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === 'undefined' && typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== 'undefined') {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua) {
  // opted for using reduce here rather than Array#first with a regex.test call
  // this is primarily because using the reduce we only perform the regex
  // execution once rather than once for the test and for the exec again below
  // probably something that needs to be benchmarked though
  return ua !== '' && userAgentRules.reduce(function (matched, _a) {
    var browser = _a[0],
      regex = _a[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function browserName(ua) {
  var data = matchUserAgent(ua);
  return data ? data[0] : null;
}
function parseUserAgent(ua) {
  var matchedRule = matchUserAgent(ua);
  if (!matchedRule) {
    return null;
  }
  var name = matchedRule[0],
    match = matchedRule[1];
  if (name === 'searchbot') {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(/[._]/).slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArrays(versionParts, createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length));
    }
  } else {
    versionParts = [];
  }
  var version = versionParts.join('.');
  var os = detectOS(ua);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);
  }
  return new BrowserInfo(name, version, os);
}
function detectOS(ua) {
  for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {
    var _a = operatingSystemRules[ii],
      os = _a[0],
      regex = _a[1];
    var match = regex.exec(ua);
    if (match) {
      return os;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode = typeof process !== 'undefined' && process.version;
  return isNode ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
  var output = [];
  for (var ii = 0; ii < count; ii++) {
    output.push('0');
  }
  return output;
}
},{"process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/@walletconnect/browser-utils/dist/esm/browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectEnv = detectEnv;
exports.detectOS = detectOS;
exports.getClientMeta = getClientMeta;
exports.getNavigatorOrThrow = exports.getNavigator = exports.getLocationOrThrow = exports.getLocation = exports.getLocalStorageOrThrow = exports.getLocalStorage = exports.getFromWindowOrThrow = exports.getFromWindow = exports.getDocumentOrThrow = exports.getDocument = exports.getCryptoOrThrow = exports.getCrypto = void 0;
exports.isAndroid = isAndroid;
exports.isBrowser = isBrowser;
exports.isIOS = isIOS;
exports.isMobile = isMobile;
exports.isNode = isNode;
var windowMetadata = _interopRequireWildcard(require("@walletconnect/window-metadata"));
var windowGetters = _interopRequireWildcard(require("@walletconnect/window-getters"));
var _detectBrowser = require("detect-browser");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function detectEnv(userAgent) {
  return (0, _detectBrowser.detect)(userAgent);
}
function detectOS() {
  const env = detectEnv();
  return env && env.os ? env.os : undefined;
}
function isAndroid() {
  const os = detectOS();
  return os ? os.toLowerCase().includes("android") : false;
}
function isIOS() {
  const os = detectOS();
  return os ? os.toLowerCase().includes("ios") || os.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1 : false;
}
function isMobile() {
  const os = detectOS();
  return os ? isAndroid() || isIOS() : false;
}
function isNode() {
  const env = detectEnv();
  const result = env && env.name ? env.name.toLowerCase() === "node" : false;
  return result;
}
function isBrowser() {
  const result = !isNode() && !!getNavigator();
  return result;
}
const getFromWindow = windowGetters.getFromWindow;
exports.getFromWindow = getFromWindow;
const getFromWindowOrThrow = windowGetters.getFromWindowOrThrow;
exports.getFromWindowOrThrow = getFromWindowOrThrow;
const getDocumentOrThrow = windowGetters.getDocumentOrThrow;
exports.getDocumentOrThrow = getDocumentOrThrow;
const getDocument = windowGetters.getDocument;
exports.getDocument = getDocument;
const getNavigatorOrThrow = windowGetters.getNavigatorOrThrow;
exports.getNavigatorOrThrow = getNavigatorOrThrow;
const getNavigator = windowGetters.getNavigator;
exports.getNavigator = getNavigator;
const getLocationOrThrow = windowGetters.getLocationOrThrow;
exports.getLocationOrThrow = getLocationOrThrow;
const getLocation = windowGetters.getLocation;
exports.getLocation = getLocation;
const getCryptoOrThrow = windowGetters.getCryptoOrThrow;
exports.getCryptoOrThrow = getCryptoOrThrow;
const getCrypto = windowGetters.getCrypto;
exports.getCrypto = getCrypto;
const getLocalStorageOrThrow = windowGetters.getLocalStorageOrThrow;
exports.getLocalStorageOrThrow = getLocalStorageOrThrow;
const getLocalStorage = windowGetters.getLocalStorage;
exports.getLocalStorage = getLocalStorage;
function getClientMeta() {
  return windowMetadata.getWindowMetadata();
}
},{"@walletconnect/window-metadata":"node_modules/@walletconnect/window-metadata/dist/cjs/index.js","@walletconnect/window-getters":"node_modules/@walletconnect/window-getters/dist/cjs/index.js","detect-browser":"node_modules/detect-browser/es/index.js"}],"node_modules/@walletconnect/safe-json/dist/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.safeJsonParse = safeJsonParse;
exports.safeJsonStringify = safeJsonStringify;
function safeJsonParse(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSON.parse(value);
  } catch (_a) {
    return value;
  }
}
function safeJsonStringify(value) {
  return typeof value === "string" ? value : JSON.stringify(value);
}
},{}],"node_modules/@walletconnect/browser-utils/dist/esm/json.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.safeJsonStringify = exports.safeJsonParse = void 0;
var safeJson = _interopRequireWildcard(require("@walletconnect/safe-json"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const safeJsonParse = safeJson.safeJsonParse;
exports.safeJsonParse = safeJsonParse;
const safeJsonStringify = safeJson.safeJsonStringify;
exports.safeJsonStringify = safeJsonStringify;
},{"@walletconnect/safe-json":"node_modules/@walletconnect/safe-json/dist/esm/index.js"}],"node_modules/@walletconnect/browser-utils/dist/esm/local.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLocal = getLocal;
exports.removeLocal = removeLocal;
exports.setLocal = setLocal;
var _json = require("./json");
var _browser = require("./browser");
function setLocal(key, data) {
  const raw = (0, _json.safeJsonStringify)(data);
  const local = (0, _browser.getLocalStorage)();
  if (local) {
    local.setItem(key, raw);
  }
}
function getLocal(key) {
  let data = null;
  let raw = null;
  const local = (0, _browser.getLocalStorage)();
  if (local) {
    raw = local.getItem(key);
  }
  data = raw ? (0, _json.safeJsonParse)(raw) : raw;
  return data;
}
function removeLocal(key) {
  const local = (0, _browser.getLocalStorage)();
  if (local) {
    local.removeItem(key);
  }
}
},{"./json":"node_modules/@walletconnect/browser-utils/dist/esm/json.js","./browser":"node_modules/@walletconnect/browser-utils/dist/esm/browser.js"}],"node_modules/@walletconnect/browser-utils/dist/esm/mobile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatIOSMobile = formatIOSMobile;
exports.getMobileLinkRegistry = getMobileLinkRegistry;
exports.getMobileRegistryEntry = getMobileRegistryEntry;
exports.mobileLinkChoiceKey = void 0;
exports.saveMobileLinkInfo = saveMobileLinkInfo;
var _local = require("./local");
const mobileLinkChoiceKey = "WALLETCONNECT_DEEPLINK_CHOICE";
exports.mobileLinkChoiceKey = mobileLinkChoiceKey;
function formatIOSMobile(uri, entry) {
  const encodedUri = encodeURIComponent(uri);
  return entry.universalLink ? `${entry.universalLink}/wc?uri=${encodedUri}` : entry.deepLink ? `${entry.deepLink}${entry.deepLink.endsWith(":") ? "//" : "/"}wc?uri=${encodedUri}` : "";
}
function saveMobileLinkInfo(data) {
  const focusUri = data.href.split("?")[0];
  (0, _local.setLocal)(mobileLinkChoiceKey, Object.assign(Object.assign({}, data), {
    href: focusUri
  }));
}
function getMobileRegistryEntry(registry, name) {
  return registry.filter(entry => entry.name.toLowerCase().includes(name.toLowerCase()))[0];
}
function getMobileLinkRegistry(registry, whitelist) {
  let links = registry;
  if (whitelist) {
    links = whitelist.map(name => getMobileRegistryEntry(registry, name)).filter(Boolean);
  }
  return links;
}
},{"./local":"node_modules/@walletconnect/browser-utils/dist/esm/local.js"}],"node_modules/@walletconnect/browser-utils/dist/esm/registry.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatMobileRegistry = formatMobileRegistry;
exports.formatMobileRegistryEntry = formatMobileRegistryEntry;
exports.getDappRegistryUrl = getDappRegistryUrl;
exports.getWalletRegistryUrl = getWalletRegistryUrl;
const API_URL = "https://registry.walletconnect.com";
function getWalletRegistryUrl() {
  return API_URL + "/api/v2/wallets";
}
function getDappRegistryUrl() {
  return API_URL + "/api/v2/dapps";
}
function formatMobileRegistryEntry(entry, platform = "mobile") {
  var _a;
  return {
    name: entry.name || "",
    shortName: entry.metadata.shortName || "",
    color: entry.metadata.colors.primary || "",
    logo: (_a = entry.image_url.sm) !== null && _a !== void 0 ? _a : "",
    universalLink: entry[platform].universal || "",
    deepLink: entry[platform].native || ""
  };
}
function formatMobileRegistry(registry, platform = "mobile") {
  return Object.values(registry).filter(entry => !!entry[platform].universal || !!entry[platform].native).map(entry => formatMobileRegistryEntry(entry, platform));
}
},{}],"node_modules/@walletconnect/browser-utils/dist/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _browser = require("./browser");
Object.keys(_browser).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _browser[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _browser[key];
    }
  });
});
var _json = require("./json");
Object.keys(_json).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _json[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _json[key];
    }
  });
});
var _local = require("./local");
Object.keys(_local).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _local[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _local[key];
    }
  });
});
var _mobile = require("./mobile");
Object.keys(_mobile).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _mobile[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mobile[key];
    }
  });
});
var _registry = require("./registry");
Object.keys(_registry).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _registry[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _registry[key];
    }
  });
});
},{"./browser":"node_modules/@walletconnect/browser-utils/dist/esm/browser.js","./json":"node_modules/@walletconnect/browser-utils/dist/esm/json.js","./local":"node_modules/@walletconnect/browser-utils/dist/esm/local.js","./mobile":"node_modules/@walletconnect/browser-utils/dist/esm/mobile.js","./registry":"node_modules/@walletconnect/browser-utils/dist/esm/registry.js"}],"node_modules/@walletconnect/utils/dist/esm/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stateMethods = exports.signingMethods = exports.reservedEvents = exports.infuraNetworks = void 0;
const reservedEvents = ["session_request", "session_update", "exchange_key", "connect", "disconnect", "display_uri", "modal_closed", "transport_open", "transport_close", "transport_error"];
exports.reservedEvents = reservedEvents;
const signingMethods = ["eth_sendTransaction", "eth_signTransaction", "eth_sign", "eth_signTypedData", "eth_signTypedData_v1", "eth_signTypedData_v2", "eth_signTypedData_v3", "eth_signTypedData_v4", "personal_sign", "wallet_addEthereumChain", "wallet_switchEthereumChain", "wallet_getPermissions", "wallet_requestPermissions", "wallet_registerOnboarding", "wallet_watchAsset", "wallet_scanQRCode"];
exports.signingMethods = signingMethods;
const stateMethods = ["eth_accounts", "eth_chainId", "net_version"];
exports.stateMethods = stateMethods;
const infuraNetworks = {
  1: "mainnet",
  3: "ropsten",
  4: "rinkeby",
  5: "goerli",
  42: "kovan"
};
exports.infuraNetworks = infuraNetworks;
},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/src/builtins/_empty.js":[function(require,module,exports) {

},{}],"node_modules/@walletconnect/utils/node_modules/bn.js/lib/bn.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/is-typedarray/index.js":[function(require,module,exports) {
module.exports      = isTypedArray
isTypedArray.strict = isStrictTypedArray
isTypedArray.loose  = isLooseTypedArray

var toString = Object.prototype.toString
var names = {
    '[object Int8Array]': true
  , '[object Int16Array]': true
  , '[object Int32Array]': true
  , '[object Uint8Array]': true
  , '[object Uint8ClampedArray]': true
  , '[object Uint16Array]': true
  , '[object Uint32Array]': true
  , '[object Float32Array]': true
  , '[object Float64Array]': true
}

function isTypedArray(arr) {
  return (
       isStrictTypedArray(arr)
    || isLooseTypedArray(arr)
  )
}

function isStrictTypedArray(arr) {
  return (
       arr instanceof Int8Array
    || arr instanceof Int16Array
    || arr instanceof Int32Array
    || arr instanceof Uint8Array
    || arr instanceof Uint8ClampedArray
    || arr instanceof Uint16Array
    || arr instanceof Uint32Array
    || arr instanceof Float32Array
    || arr instanceof Float64Array
  )
}

function isLooseTypedArray(arr) {
  return names[toString.call(arr)]
}

},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/ieee754/index.js":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/base64-js/index.js","ieee754":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/ieee754/index.js","isarray":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/isarray/index.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/typedarray-to-buffer/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
/**
 * Convert a typed array to a Buffer without a copy
 *
 * Author:   Feross Aboukhadijeh <https://feross.org>
 * License:  MIT
 *
 * `npm install typedarray-to-buffer`
 */

var isTypedArray = require('is-typedarray').strict

module.exports = function typedarrayToBuffer (arr) {
  if (isTypedArray(arr)) {
    // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer
    var buf = Buffer.from(arr.buffer)
    if (arr.byteLength !== arr.buffer.byteLength) {
      // Respect the "view", i.e. byteOffset and byteLength, without doing a copy
      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength)
    }
    return buf
  } else {
    // Pass through all other types to `Buffer.from`
    return Buffer.from(arr)
  }
}

},{"is-typedarray":"node_modules/is-typedarray/index.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/@walletconnect/encoding/dist/esm/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addHexPrefix = addHexPrefix;
exports.arrayToBinary = arrayToBinary;
exports.arrayToBuffer = arrayToBuffer;
exports.arrayToHex = arrayToHex;
exports.arrayToNumber = arrayToNumber;
exports.arrayToUtf8 = arrayToUtf8;
exports.binaryToArray = binaryToArray;
exports.binaryToBuffer = binaryToBuffer;
exports.binaryToHex = binaryToHex;
exports.binaryToNumber = binaryToNumber;
exports.binaryToUtf8 = binaryToUtf8;
exports.bufferToArray = bufferToArray;
exports.bufferToBinary = bufferToBinary;
exports.bufferToHex = bufferToHex;
exports.bufferToNumber = bufferToNumber;
exports.bufferToUtf8 = bufferToUtf8;
exports.calcByteLength = calcByteLength;
exports.concatArrays = concatArrays;
exports.concatBuffers = concatBuffers;
exports.getEncoding = getEncoding;
exports.getType = getType;
exports.hexToArray = hexToArray;
exports.hexToBinary = hexToBinary;
exports.hexToBuffer = hexToBuffer;
exports.hexToNumber = hexToNumber;
exports.hexToUtf8 = hexToUtf8;
exports.isArrayBuffer = isArrayBuffer;
exports.isBinaryString = isBinaryString;
exports.isBuffer = isBuffer;
exports.isHexString = isHexString;
exports.isTypedArray = isTypedArray;
exports.numberToArray = numberToArray;
exports.numberToBinary = numberToBinary;
exports.numberToBuffer = numberToBuffer;
exports.numberToHex = numberToHex;
exports.numberToUtf8 = numberToUtf8;
exports.padLeft = padLeft;
exports.padRight = padRight;
exports.removeHexLeadingZeros = removeHexLeadingZeros;
exports.removeHexPrefix = removeHexPrefix;
exports.sanitizeBytes = sanitizeBytes;
exports.sanitizeHex = sanitizeHex;
exports.splitBytes = splitBytes;
exports.swapBytes = swapBytes;
exports.swapHex = swapHex;
exports.trimLeft = trimLeft;
exports.trimRight = trimRight;
exports.utf8ToArray = utf8ToArray;
exports.utf8ToBinary = utf8ToBinary;
exports.utf8ToBuffer = utf8ToBuffer;
exports.utf8ToHex = utf8ToHex;
exports.utf8ToNumber = utf8ToNumber;
var _isTypedarray = _interopRequireDefault(require("is-typedarray"));
var _typedarrayToBuffer = _interopRequireDefault(require("typedarray-to-buffer"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ENC_HEX = "hex";
const ENC_UTF8 = "utf8";
const ENC_BIN = "binary";
const TYPE_BUFFER = "buffer";
const TYPE_ARRAY = "array";
const TYPE_TYPED_ARRAY = "typed-array";
const TYPE_ARRAY_BUFFER = "array-buffer";
const STRING_ZERO = "0";
function bufferToArray(buf) {
  return new Uint8Array(buf);
}
function bufferToHex(buf, prefixed = false) {
  const hex = buf.toString(ENC_HEX);
  return prefixed ? addHexPrefix(hex) : hex;
}
function bufferToUtf8(buf) {
  return buf.toString(ENC_UTF8);
}
function bufferToNumber(buf) {
  return buf.readUIntBE(0, buf.length);
}
function bufferToBinary(buf) {
  return arrayToBinary(bufferToArray(buf));
}
function arrayToBuffer(arr) {
  return (0, _typedarrayToBuffer.default)(arr);
}
function arrayToHex(arr, prefixed = false) {
  return bufferToHex(arrayToBuffer(arr), prefixed);
}
function arrayToUtf8(arr) {
  return bufferToUtf8(arrayToBuffer(arr));
}
function arrayToNumber(arr) {
  return bufferToNumber(arrayToBuffer(arr));
}
function arrayToBinary(arr) {
  return Array.from(arr).map(numberToBinary).join("");
}
function hexToBuffer(hex) {
  return Buffer.from(removeHexPrefix(hex), ENC_HEX);
}
function hexToArray(hex) {
  return bufferToArray(hexToBuffer(hex));
}
function hexToUtf8(hex) {
  return bufferToUtf8(hexToBuffer(hex));
}
function hexToNumber(hex) {
  return arrayToNumber(hexToArray(hex));
}
function hexToBinary(hex) {
  return arrayToBinary(hexToArray(hex));
}
function utf8ToBuffer(utf8) {
  return Buffer.from(utf8, ENC_UTF8);
}
function utf8ToArray(utf8) {
  return bufferToArray(utf8ToBuffer(utf8));
}
function utf8ToHex(utf8, prefixed = false) {
  return bufferToHex(utf8ToBuffer(utf8), prefixed);
}
function utf8ToNumber(utf8) {
  const num = parseInt(utf8, 10);
  assert(isDefined(num), "Number can only safely store up to 53 bits");
  return num;
}
function utf8ToBinary(utf8) {
  return arrayToBinary(utf8ToArray(utf8));
}
function numberToBuffer(num) {
  return binaryToBuffer(numberToBinary(num));
}
function numberToArray(num) {
  return binaryToArray(numberToBinary(num));
}
function numberToHex(num, prefixed) {
  return binaryToHex(numberToBinary(num), prefixed);
}
function numberToUtf8(num) {
  return `${num}`;
}
function numberToBinary(num) {
  const bin = (num >>> 0).toString(2);
  return sanitizeBytes(bin);
}
function binaryToBuffer(bin) {
  return arrayToBuffer(binaryToArray(bin));
}
function binaryToArray(bin) {
  return new Uint8Array(splitBytes(bin).map(x => parseInt(x, 2)));
}
function binaryToHex(bin, prefixed) {
  return arrayToHex(binaryToArray(bin), prefixed);
}
function binaryToUtf8(bin) {
  return arrayToUtf8(binaryToArray(bin));
}
function binaryToNumber(bin) {
  return arrayToNumber(binaryToArray(bin));
}
function isBinaryString(str) {
  if (typeof str !== "string" || !new RegExp(/^[01]+$/).test(str)) {
    return false;
  }
  if (str.length % 8 !== 0) {
    return false;
  }
  return true;
}
function isHexString(str, length) {
  if (typeof str !== "string" || !str.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && str.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
function isBuffer(val) {
  return Buffer.isBuffer(val);
}
function isTypedArray(val) {
  return _isTypedarray.default.strict(val) && !isBuffer(val);
}
function isArrayBuffer(val) {
  return !isTypedArray(val) && !isBuffer(val) && typeof val.byteLength !== "undefined";
}
function getType(val) {
  if (isBuffer(val)) {
    return TYPE_BUFFER;
  } else if (isTypedArray(val)) {
    return TYPE_TYPED_ARRAY;
  } else if (isArrayBuffer(val)) {
    return TYPE_ARRAY_BUFFER;
  } else if (Array.isArray(val)) {
    return TYPE_ARRAY;
  } else {
    return typeof val;
  }
}
function getEncoding(str) {
  if (isBinaryString(str)) {
    return ENC_BIN;
  }
  if (isHexString(str)) {
    return ENC_HEX;
  }
  return ENC_UTF8;
}
function concatBuffers(...args) {
  const result = Buffer.concat(args);
  return result;
}
function concatArrays(...args) {
  let result = [];
  args.forEach(arg => result = result.concat(Array.from(arg)));
  return new Uint8Array([...result]);
}
function trimLeft(data, length) {
  const diff = data.length - length;
  if (diff > 0) {
    data = data.slice(diff);
  }
  return data;
}
function trimRight(data, length) {
  return data.slice(0, length);
}
function calcByteLength(length, byteSize = 8) {
  const remainder = length % byteSize;
  return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;
}
function splitBytes(str, byteSize = 8) {
  const bytes = sanitizeBytes(str).match(new RegExp(`.{${byteSize}}`, "gi"));
  return Array.from(bytes || []);
}
function swapBytes(str) {
  return splitBytes(str).map(reverseString).join("");
}
function swapHex(str) {
  return binaryToHex(swapBytes(hexToBinary(str)));
}
function sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {
  return padLeft(str, calcByteLength(str.length, byteSize), padding);
}
function padLeft(str, length, padding = STRING_ZERO) {
  return padString(str, length, true, padding);
}
function padRight(str, length, padding = STRING_ZERO) {
  return padString(str, length, false, padding);
}
function removeHexPrefix(hex) {
  return hex.replace(/^0x/, "");
}
function addHexPrefix(hex) {
  return hex.startsWith("0x") ? hex : `0x${hex}`;
}
function sanitizeHex(hex) {
  hex = removeHexPrefix(hex);
  hex = sanitizeBytes(hex, 2);
  if (hex) {
    hex = addHexPrefix(hex);
  }
  return hex;
}
function removeHexLeadingZeros(hex) {
  const prefixed = hex.startsWith("0x");
  hex = removeHexPrefix(hex);
  hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;
  return prefixed ? addHexPrefix(hex) : hex;
}
function isUndefined(value) {
  return typeof value === "undefined";
}
function isDefined(value) {
  return !isUndefined(value);
}
function assert(assertion, errorMessage) {
  if (!assertion) {
    throw new Error(errorMessage);
  }
}
function reverseString(str) {
  return str.split("").reverse().join("");
}
function padString(str, length, left, padding = STRING_ZERO) {
  const diff = length - str.length;
  let result = str;
  if (diff > 0) {
    const pad = padding.repeat(diff);
    result = left ? pad + str : str + pad;
  }
  return result;
}
},{"is-typedarray":"node_modules/is-typedarray/index.js","typedarray-to-buffer":"node_modules/typedarray-to-buffer/index.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/@walletconnect/utils/dist/esm/encoding.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatArrayBuffers = concatArrayBuffers;
exports.concatBuffers = concatBuffers;
exports.convertArrayBufferToBuffer = convertArrayBufferToBuffer;
exports.convertArrayBufferToHex = convertArrayBufferToHex;
exports.convertArrayBufferToNumber = convertArrayBufferToNumber;
exports.convertArrayBufferToUtf8 = convertArrayBufferToUtf8;
exports.convertBufferToArrayBuffer = convertBufferToArrayBuffer;
exports.convertBufferToHex = convertBufferToHex;
exports.convertBufferToNumber = convertBufferToNumber;
exports.convertBufferToUtf8 = convertBufferToUtf8;
exports.convertHexToArrayBuffer = convertHexToArrayBuffer;
exports.convertHexToBuffer = convertHexToBuffer;
exports.convertHexToNumber = convertHexToNumber;
exports.convertHexToUtf8 = convertHexToUtf8;
exports.convertNumberToArrayBuffer = convertNumberToArrayBuffer;
exports.convertNumberToBuffer = convertNumberToBuffer;
exports.convertNumberToHex = convertNumberToHex;
exports.convertNumberToUtf8 = convertNumberToUtf8;
exports.convertUtf8ToArrayBuffer = convertUtf8ToArrayBuffer;
exports.convertUtf8ToBuffer = convertUtf8ToBuffer;
exports.convertUtf8ToHex = convertUtf8ToHex;
exports.convertUtf8ToNumber = convertUtf8ToNumber;
var _bn = _interopRequireDefault(require("bn.js"));
var encoding = _interopRequireWildcard(require("@walletconnect/encoding"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function convertArrayBufferToBuffer(arrBuf) {
  return encoding.arrayToBuffer(new Uint8Array(arrBuf));
}
function convertArrayBufferToUtf8(arrBuf) {
  return encoding.arrayToUtf8(new Uint8Array(arrBuf));
}
function convertArrayBufferToHex(arrBuf, noPrefix) {
  return encoding.arrayToHex(new Uint8Array(arrBuf), !noPrefix);
}
function convertArrayBufferToNumber(arrBuf) {
  return encoding.arrayToNumber(new Uint8Array(arrBuf));
}
function concatArrayBuffers(...args) {
  return encoding.hexToArray(args.map(b => encoding.arrayToHex(new Uint8Array(b))).join("")).buffer;
}
function convertBufferToArrayBuffer(buf) {
  return encoding.bufferToArray(buf).buffer;
}
function convertBufferToUtf8(buf) {
  return encoding.bufferToUtf8(buf);
}
function convertBufferToHex(buf, noPrefix) {
  return encoding.bufferToHex(buf, !noPrefix);
}
function convertBufferToNumber(buf) {
  return encoding.bufferToNumber(buf);
}
function concatBuffers(...args) {
  return encoding.concatBuffers(...args);
}
function convertUtf8ToArrayBuffer(utf8) {
  return encoding.utf8ToArray(utf8).buffer;
}
function convertUtf8ToBuffer(utf8) {
  return encoding.utf8ToBuffer(utf8);
}
function convertUtf8ToHex(utf8, noPrefix) {
  return encoding.utf8ToHex(utf8, !noPrefix);
}
function convertUtf8ToNumber(utf8) {
  return new _bn.default(utf8, 10).toNumber();
}
function convertHexToBuffer(hex) {
  return encoding.hexToBuffer(hex);
}
function convertHexToArrayBuffer(hex) {
  return encoding.hexToArray(hex).buffer;
}
function convertHexToUtf8(hex) {
  return encoding.hexToUtf8(hex);
}
function convertHexToNumber(hex) {
  return new _bn.default(encoding.removeHexPrefix(hex), "hex").toNumber();
}
function convertNumberToBuffer(num) {
  return encoding.numberToBuffer(num);
}
function convertNumberToArrayBuffer(num) {
  return encoding.numberToArray(num).buffer;
}
function convertNumberToUtf8(num) {
  return new _bn.default(num).toString();
}
function convertNumberToHex(num, noPrefix) {
  const hex = encoding.removeHexPrefix(encoding.sanitizeHex(new _bn.default(num).toString(16)));
  return noPrefix ? hex : encoding.addHexPrefix(hex);
}
},{"bn.js":"node_modules/@walletconnect/utils/node_modules/bn.js/lib/bn.js","@walletconnect/encoding":"node_modules/@walletconnect/encoding/dist/esm/index.js"}],"node_modules/js-sha3/src/sha3.js":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
var define;
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */
/*jslint bitwise: true */
(function () {
  'use strict';

  var INPUT_ERROR = 'input is invalid type';
  var FINALIZE_ERROR = 'finalize already called';
  var WINDOW = typeof window === 'object';
  var root = WINDOW ? window : {};
  if (root.JS_SHA3_NO_WINDOW) {
    WINDOW = false;
  }
  var WEB_WORKER = !WINDOW && typeof self === 'object';
  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  } else if (WEB_WORKER) {
    root = self;
  }
  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD = typeof define === 'function' && define.amd;
  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var PADDING = [6, 1536, 393216, 100663296];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
  var BITS = [224, 256, 384, 512];
  var SHAKE_BITS = [128, 256];
  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
  var CSHAKE_BYTEPAD = {
    '128': 168,
    '256': 136
  };

  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function (bits, padding, outputType) {
    return function (message) {
      return new Keccak(bits, padding, bits).update(message)[outputType]();
    };
  };

  var createShakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits) {
      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
    };
  };

  var createCshakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits, n, s) {
      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
    };
  };

  var createKmacOutputMethod = function (bits, padding, outputType) {
    return function (key, message, outputBits, s) {
      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
    };
  };

  var createOutputMethods = function (method, createMethod, bits, padding) {
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createMethod(bits, padding, type);
    }
    return method;
  };

  var createMethod = function (bits, padding) {
    var method = createOutputMethod(bits, padding, 'hex');
    method.create = function () {
      return new Keccak(bits, padding, bits);
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    return createOutputMethods(method, createOutputMethod, bits, padding);
  };

  var createShakeMethod = function (bits, padding) {
    var method = createShakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits) {
      return new Keccak(bits, padding, outputBits);
    };
    method.update = function (message, outputBits) {
      return method.create(outputBits).update(message);
    };
    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
  };

  var createCshakeMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createCshakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits, n, s) {
      if (!n && !s) {
        return methods['shake' + bits].create(outputBits);
      } else {
        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
      }
    };
    method.update = function (message, outputBits, n, s) {
      return method.create(outputBits, n, s).update(message);
    };
    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
  };

  var createKmacMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createKmacOutputMethod(bits, padding, 'hex');
    method.create = function (key, outputBits, s) {
      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
    };
    method.update = function (key, message, outputBits, s) {
      return method.create(key, outputBits, s).update(message);
    };
    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
  };

  var algorithms = [
    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
  ];

  var methods = {}, methodNames = [];

  for (var i = 0; i < algorithms.length; ++i) {
    var algorithm = algorithms[i];
    var bits = algorithm.bits;
    for (var j = 0; j < bits.length; ++j) {
      var methodName = algorithm.name + '_' + bits[j];
      methodNames.push(methodName);
      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
      if (algorithm.name !== 'sha3') {
        var newMethodName = algorithm.name + bits[j];
        methodNames.push(newMethodName);
        methods[newMethodName] = methods[methodName];
      }
    }
  }

  function Keccak(bits, padding, outputBits) {
    this.blocks = [];
    this.s = [];
    this.padding = padding;
    this.outputBits = outputBits;
    this.reset = true;
    this.finalized = false;
    this.block = 0;
    this.start = 0;
    this.blockCount = (1600 - (bits << 1)) >> 5;
    this.byteCount = this.blockCount << 2;
    this.outputBlocks = outputBits >> 5;
    this.extraBytes = (outputBits & 31) >> 3;

    for (var i = 0; i < 50; ++i) {
      this.s[i] = 0;
    }
  }

  Keccak.prototype.update = function (message) {
    if (this.finalized) {
      throw new Error(FINALIZE_ERROR);
    }
    var notString, type = typeof message;
    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
      blockCount = this.blockCount, index = 0, s = this.s, i, code;

    while (index < length) {
      if (this.reset) {
        this.reset = false;
        blocks[0] = this.block;
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      if (notString) {
        for (i = this.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }
      this.lastByteIndex = i;
      if (i >= byteCount) {
        this.start = i - byteCount;
        this.block = blocks[blockCount];
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
        this.reset = true;
      } else {
        this.start = i;
      }
    }
    return this;
  };

  Keccak.prototype.encode = function (x, right) {
    var o = x & 255, n = 1;
    var bytes = [o];
    x = x >> 8;
    o = x & 255;
    while (o > 0) {
      bytes.unshift(o);
      x = x >> 8;
      o = x & 255;
      ++n;
    }
    if (right) {
      bytes.push(n);
    } else {
      bytes.unshift(n);
    }
    this.update(bytes);
    return bytes.length;
  };

  Keccak.prototype.encodeString = function (str) {
    var notString, type = typeof str;
    if (type !== 'string') {
      if (type === 'object') {
        if (str === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
          str = new Uint8Array(str);
        } else if (!Array.isArray(str)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var bytes = 0, length = str.length;
    if (notString) {
      bytes = length;
    } else {
      for (var i = 0; i < str.length; ++i) {
        var code = str.charCodeAt(i);
        if (code < 0x80) {
          bytes += 1;
        } else if (code < 0x800) {
          bytes += 2;
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes += 3;
        } else {
          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
          bytes += 4;
        }
      }
    }
    bytes += this.encode(bytes * 8);
    this.update(str);
    return bytes;
  };

  Keccak.prototype.bytepad = function (strs, w) {
    var bytes = this.encode(w);
    for (var i = 0; i < strs.length; ++i) {
      bytes += this.encodeString(strs[i]);
    }
    var paddingBytes = w - bytes % w;
    var zeros = [];
    zeros.length = paddingBytes;
    this.update(zeros);
    return this;
  };

  Keccak.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
    blocks[i >> 2] |= this.padding[i & 3];
    if (this.lastByteIndex === this.byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }
    f(s);
  };

  Keccak.prototype.toString = Keccak.prototype.hex = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var hex = '', block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
      }
      if (j % blockCount === 0) {
        f(s);
        i = 0;
      }
    }
    if (extraBytes) {
      block = s[i];
      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
      if (extraBytes > 1) {
        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
      }
      if (extraBytes > 2) {
        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
      }
    }
    return hex;
  };

  Keccak.prototype.arrayBuffer = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var bytes = this.outputBits >> 3;
    var buffer;
    if (extraBytes) {
      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
    } else {
      buffer = new ArrayBuffer(bytes);
    }
    var array = new Uint32Array(buffer);
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        array[j] = s[i];
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      array[i] = s[i];
      buffer = buffer.slice(0, bytes);
    }
    return buffer;
  };

  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

  Keccak.prototype.digest = Keccak.prototype.array = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var array = [], offset, block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        array[offset + 1] = (block >> 8) & 0xFF;
        array[offset + 2] = (block >> 16) & 0xFF;
        array[offset + 3] = (block >> 24) & 0xFF;
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      offset = j << 2;
      block = s[i];
      array[offset] = block & 0xFF;
      if (extraBytes > 1) {
        array[offset + 1] = (block >> 8) & 0xFF;
      }
      if (extraBytes > 2) {
        array[offset + 2] = (block >> 16) & 0xFF;
      }
    }
    return array;
  };

  function Kmac(bits, padding, outputBits) {
    Keccak.call(this, bits, padding, outputBits);
  }

  Kmac.prototype = new Keccak();

  Kmac.prototype.finalize = function () {
    this.encode(this.outputBits, true);
    return Keccak.prototype.finalize.call(this);
  };

  var f = function (s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;

      b0 = s[0];
      b1 = s[1];
      b32 = (s[11] << 4) | (s[10] >>> 28);
      b33 = (s[10] << 4) | (s[11] >>> 28);
      b14 = (s[20] << 3) | (s[21] >>> 29);
      b15 = (s[21] << 3) | (s[20] >>> 29);
      b46 = (s[31] << 9) | (s[30] >>> 23);
      b47 = (s[30] << 9) | (s[31] >>> 23);
      b28 = (s[40] << 18) | (s[41] >>> 14);
      b29 = (s[41] << 18) | (s[40] >>> 14);
      b20 = (s[2] << 1) | (s[3] >>> 31);
      b21 = (s[3] << 1) | (s[2] >>> 31);
      b2 = (s[13] << 12) | (s[12] >>> 20);
      b3 = (s[12] << 12) | (s[13] >>> 20);
      b34 = (s[22] << 10) | (s[23] >>> 22);
      b35 = (s[23] << 10) | (s[22] >>> 22);
      b16 = (s[33] << 13) | (s[32] >>> 19);
      b17 = (s[32] << 13) | (s[33] >>> 19);
      b48 = (s[42] << 2) | (s[43] >>> 30);
      b49 = (s[43] << 2) | (s[42] >>> 30);
      b40 = (s[5] << 30) | (s[4] >>> 2);
      b41 = (s[4] << 30) | (s[5] >>> 2);
      b22 = (s[14] << 6) | (s[15] >>> 26);
      b23 = (s[15] << 6) | (s[14] >>> 26);
      b4 = (s[25] << 11) | (s[24] >>> 21);
      b5 = (s[24] << 11) | (s[25] >>> 21);
      b36 = (s[34] << 15) | (s[35] >>> 17);
      b37 = (s[35] << 15) | (s[34] >>> 17);
      b18 = (s[45] << 29) | (s[44] >>> 3);
      b19 = (s[44] << 29) | (s[45] >>> 3);
      b10 = (s[6] << 28) | (s[7] >>> 4);
      b11 = (s[7] << 28) | (s[6] >>> 4);
      b42 = (s[17] << 23) | (s[16] >>> 9);
      b43 = (s[16] << 23) | (s[17] >>> 9);
      b24 = (s[26] << 25) | (s[27] >>> 7);
      b25 = (s[27] << 25) | (s[26] >>> 7);
      b6 = (s[36] << 21) | (s[37] >>> 11);
      b7 = (s[37] << 21) | (s[36] >>> 11);
      b38 = (s[47] << 24) | (s[46] >>> 8);
      b39 = (s[46] << 24) | (s[47] >>> 8);
      b30 = (s[8] << 27) | (s[9] >>> 5);
      b31 = (s[9] << 27) | (s[8] >>> 5);
      b12 = (s[18] << 20) | (s[19] >>> 12);
      b13 = (s[19] << 20) | (s[18] >>> 12);
      b44 = (s[29] << 7) | (s[28] >>> 25);
      b45 = (s[28] << 7) | (s[29] >>> 25);
      b26 = (s[38] << 8) | (s[39] >>> 24);
      b27 = (s[39] << 8) | (s[38] >>> 24);
      b8 = (s[48] << 14) | (s[49] >>> 18);
      b9 = (s[49] << 14) | (s[48] >>> 18);

      s[0] = b0 ^ (~b2 & b4);
      s[1] = b1 ^ (~b3 & b5);
      s[10] = b10 ^ (~b12 & b14);
      s[11] = b11 ^ (~b13 & b15);
      s[20] = b20 ^ (~b22 & b24);
      s[21] = b21 ^ (~b23 & b25);
      s[30] = b30 ^ (~b32 & b34);
      s[31] = b31 ^ (~b33 & b35);
      s[40] = b40 ^ (~b42 & b44);
      s[41] = b41 ^ (~b43 & b45);
      s[2] = b2 ^ (~b4 & b6);
      s[3] = b3 ^ (~b5 & b7);
      s[12] = b12 ^ (~b14 & b16);
      s[13] = b13 ^ (~b15 & b17);
      s[22] = b22 ^ (~b24 & b26);
      s[23] = b23 ^ (~b25 & b27);
      s[32] = b32 ^ (~b34 & b36);
      s[33] = b33 ^ (~b35 & b37);
      s[42] = b42 ^ (~b44 & b46);
      s[43] = b43 ^ (~b45 & b47);
      s[4] = b4 ^ (~b6 & b8);
      s[5] = b5 ^ (~b7 & b9);
      s[14] = b14 ^ (~b16 & b18);
      s[15] = b15 ^ (~b17 & b19);
      s[24] = b24 ^ (~b26 & b28);
      s[25] = b25 ^ (~b27 & b29);
      s[34] = b34 ^ (~b36 & b38);
      s[35] = b35 ^ (~b37 & b39);
      s[44] = b44 ^ (~b46 & b48);
      s[45] = b45 ^ (~b47 & b49);
      s[6] = b6 ^ (~b8 & b0);
      s[7] = b7 ^ (~b9 & b1);
      s[16] = b16 ^ (~b18 & b10);
      s[17] = b17 ^ (~b19 & b11);
      s[26] = b26 ^ (~b28 & b20);
      s[27] = b27 ^ (~b29 & b21);
      s[36] = b36 ^ (~b38 & b30);
      s[37] = b37 ^ (~b39 & b31);
      s[46] = b46 ^ (~b48 & b40);
      s[47] = b47 ^ (~b49 & b41);
      s[8] = b8 ^ (~b0 & b2);
      s[9] = b9 ^ (~b1 & b3);
      s[18] = b18 ^ (~b10 & b12);
      s[19] = b19 ^ (~b11 & b13);
      s[28] = b28 ^ (~b20 & b22);
      s[29] = b29 ^ (~b21 & b23);
      s[38] = b38 ^ (~b30 & b32);
      s[39] = b39 ^ (~b31 & b33);
      s[48] = b48 ^ (~b40 & b42);
      s[49] = b49 ^ (~b41 & b43);

      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };

  if (COMMON_JS) {
    module.exports = methods;
  } else {
    for (i = 0; i < methodNames.length; ++i) {
      root[methodNames[i]] = methods[methodNames[i]];
    }
    if (AMD) {
      define(function () {
        return methods;
      });
    }
  }
})();

},{"process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STANDARD_ERROR_MAP = exports.SERVER_ERROR_CODE_RANGE = exports.SERVER_ERROR = exports.RESERVED_ERROR_CODES = exports.PARSE_ERROR = exports.METHOD_NOT_FOUND = exports.INVALID_REQUEST = exports.INVALID_PARAMS = exports.INTERNAL_ERROR = exports.DEFAULT_ERROR = void 0;
const PARSE_ERROR = "PARSE_ERROR";
exports.PARSE_ERROR = PARSE_ERROR;
const INVALID_REQUEST = "INVALID_REQUEST";
exports.INVALID_REQUEST = INVALID_REQUEST;
const METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
exports.METHOD_NOT_FOUND = METHOD_NOT_FOUND;
const INVALID_PARAMS = "INVALID_PARAMS";
exports.INVALID_PARAMS = INVALID_PARAMS;
const INTERNAL_ERROR = "INTERNAL_ERROR";
exports.INTERNAL_ERROR = INTERNAL_ERROR;
const SERVER_ERROR = "SERVER_ERROR";
exports.SERVER_ERROR = SERVER_ERROR;
const RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
exports.RESERVED_ERROR_CODES = RESERVED_ERROR_CODES;
const SERVER_ERROR_CODE_RANGE = [-32000, -32099];
exports.SERVER_ERROR_CODE_RANGE = SERVER_ERROR_CODE_RANGE;
const STANDARD_ERROR_MAP = {
  [PARSE_ERROR]: {
    code: -32700,
    message: "Parse error"
  },
  [INVALID_REQUEST]: {
    code: -32600,
    message: "Invalid Request"
  },
  [METHOD_NOT_FOUND]: {
    code: -32601,
    message: "Method not found"
  },
  [INVALID_PARAMS]: {
    code: -32602,
    message: "Invalid params"
  },
  [INTERNAL_ERROR]: {
    code: -32603,
    message: "Internal error"
  },
  [SERVER_ERROR]: {
    code: -32000,
    message: "Server error"
  }
};
exports.STANDARD_ERROR_MAP = STANDARD_ERROR_MAP;
const DEFAULT_ERROR = SERVER_ERROR;
exports.DEFAULT_ERROR = DEFAULT_ERROR;
},{}],"node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getError = getError;
exports.getErrorByCode = getErrorByCode;
exports.isReservedErrorCode = isReservedErrorCode;
exports.isServerErrorCode = isServerErrorCode;
exports.isValidErrorCode = isValidErrorCode;
exports.parseConnectionError = parseConnectionError;
exports.validateJsonRpcError = validateJsonRpcError;
var _constants = require("./constants");
function isServerErrorCode(code) {
  return code <= _constants.SERVER_ERROR_CODE_RANGE[0] && code >= _constants.SERVER_ERROR_CODE_RANGE[1];
}
function isReservedErrorCode(code) {
  return _constants.RESERVED_ERROR_CODES.includes(code);
}
function isValidErrorCode(code) {
  return typeof code === "number";
}
function getError(type) {
  if (!Object.keys(_constants.STANDARD_ERROR_MAP).includes(type)) {
    return _constants.STANDARD_ERROR_MAP[_constants.DEFAULT_ERROR];
  }
  return _constants.STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code) {
  const match = Object.values(_constants.STANDARD_ERROR_MAP).find(e => e.code === code);
  if (!match) {
    return _constants.STANDARD_ERROR_MAP[_constants.DEFAULT_ERROR];
  }
  return match;
}
function validateJsonRpcError(response) {
  if (typeof response.error.code === "undefined") {
    return {
      valid: false,
      error: "Missing code for JSON-RPC error"
    };
  }
  if (typeof response.error.message === "undefined") {
    return {
      valid: false,
      error: "Missing message for JSON-RPC error"
    };
  }
  if (!isValidErrorCode(response.error.code)) {
    return {
      valid: false,
      error: `Invalid error code type for JSON-RPC: ${response.error.code}`
    };
  }
  if (isReservedErrorCode(response.error.code)) {
    const error = getErrorByCode(response.error.code);
    if (error.message !== _constants.STANDARD_ERROR_MAP[_constants.DEFAULT_ERROR].message && response.error.message === error.message) {
      return {
        valid: false,
        error: `Invalid error code message for JSON-RPC: ${response.error.code}`
      };
    }
  }
  return {
    valid: true
  };
}
function parseConnectionError(e, url, type) {
  return e.message.includes("getaddrinfo ENOTFOUND") || e.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e;
}
},{"./constants":"node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js"}],"node_modules/tslib/tslib.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__assign = void 0;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncValues = __asyncValues;
exports.__await = __await;
exports.__awaiter = __awaiter;
exports.__classPrivateFieldGet = __classPrivateFieldGet;
exports.__classPrivateFieldSet = __classPrivateFieldSet;
exports.__createBinding = __createBinding;
exports.__decorate = __decorate;
exports.__exportStar = __exportStar;
exports.__extends = __extends;
exports.__generator = __generator;
exports.__importDefault = __importDefault;
exports.__importStar = __importStar;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__metadata = __metadata;
exports.__param = __param;
exports.__read = __read;
exports.__rest = __rest;
exports.__spread = __spread;
exports.__spreadArrays = __spreadArrays;
exports.__values = __values;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
exports.__assign = __assign;
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
function __createBinding(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
}
function __exportStar(m, exports) {
  for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
}
;
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;
  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
    i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
;
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
},{}],"node_modules/@walletconnect/environment/dist/cjs/crypto.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
function getBrowerCrypto() {
    return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};
}
exports.getBrowerCrypto = getBrowerCrypto;
function getSubtleCrypto() {
    const browserCrypto = getBrowerCrypto();
    return browserCrypto.subtle || browserCrypto.webkitSubtle;
}
exports.getSubtleCrypto = getSubtleCrypto;
function isBrowserCryptoAvailable() {
    return !!getBrowerCrypto() && !!getSubtleCrypto();
}
exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;

},{}],"node_modules/@walletconnect/environment/dist/cjs/env.js":[function(require,module,exports) {
var process = require("process");
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
function isReactNative() {
    return (typeof document === "undefined" &&
        typeof navigator !== "undefined" &&
        navigator.product === "ReactNative");
}
exports.isReactNative = isReactNative;
function isNode() {
    return (typeof process !== "undefined" &&
        typeof process.versions !== "undefined" &&
        typeof process.versions.node !== "undefined");
}
exports.isNode = isNode;
function isBrowser() {
    return !isReactNative() && !isNode();
}
exports.isBrowser = isBrowser;

},{"process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/@walletconnect/environment/dist/cjs/index.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
tslib_1.__exportStar(require("./crypto"), exports);
tslib_1.__exportStar(require("./env"), exports);

},{"tslib":"node_modules/tslib/tslib.es6.js","./crypto":"node_modules/@walletconnect/environment/dist/cjs/crypto.js","./env":"node_modules/@walletconnect/environment/dist/cjs/env.js"}],"node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  isNodeJs: true
};
exports.isNodeJs = void 0;
var _environment = require("@walletconnect/environment");
Object.keys(_environment).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _environment[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _environment[key];
    }
  });
});
const isNodeJs = _environment.isNode;
exports.isNodeJs = isNodeJs;
},{"@walletconnect/environment":"node_modules/@walletconnect/environment/dist/cjs/index.js"}],"node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatErrorMessage = formatErrorMessage;
exports.formatJsonRpcError = formatJsonRpcError;
exports.formatJsonRpcRequest = formatJsonRpcRequest;
exports.formatJsonRpcResult = formatJsonRpcResult;
exports.getBigIntRpcId = getBigIntRpcId;
exports.payloadId = payloadId;
var _error = require("./error");
var _constants = require("./constants");
function payloadId(entropy = 3) {
  const date = Date.now() * Math.pow(10, entropy);
  const extra = Math.floor(Math.random() * Math.pow(10, entropy));
  return date + extra;
}
function getBigIntRpcId(entropy = 6) {
  return BigInt(payloadId(entropy));
}
function formatJsonRpcRequest(method, params, id) {
  return {
    id: id || payloadId(),
    jsonrpc: "2.0",
    method,
    params
  };
}
function formatJsonRpcResult(id, result) {
  return {
    id,
    jsonrpc: "2.0",
    result
  };
}
function formatJsonRpcError(id, error, data) {
  return {
    id,
    jsonrpc: "2.0",
    error: formatErrorMessage(error, data)
  };
}
function formatErrorMessage(error, data) {
  if (typeof error === "undefined") {
    return (0, _error.getError)(_constants.INTERNAL_ERROR);
  }
  if (typeof error === "string") {
    error = Object.assign(Object.assign({}, (0, _error.getError)(_constants.SERVER_ERROR)), {
      message: error
    });
  }
  if (typeof data !== "undefined") {
    error.data = data;
  }
  if ((0, _error.isReservedErrorCode)(error.code)) {
    error = (0, _error.getErrorByCode)(error.code);
  }
  return error;
}
},{"./error":"node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js","./constants":"node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js"}],"node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValidDefaultRoute = isValidDefaultRoute;
exports.isValidLeadingWildcardRoute = isValidLeadingWildcardRoute;
exports.isValidRoute = isValidRoute;
exports.isValidTrailingWildcardRoute = isValidTrailingWildcardRoute;
exports.isValidWildcardRoute = isValidWildcardRoute;
function isValidRoute(route) {
  if (route.includes("*")) {
    return isValidWildcardRoute(route);
  }
  if (/\W/g.test(route)) {
    return false;
  }
  return true;
}
function isValidDefaultRoute(route) {
  return route === "*";
}
function isValidWildcardRoute(route) {
  if (isValidDefaultRoute(route)) {
    return true;
  }
  if (!route.includes("*")) {
    return false;
  }
  if (route.split("*").length !== 2) {
    return false;
  }
  if (route.split("*").filter(x => x.trim() === "").length !== 1) {
    return false;
  }
  return true;
}
function isValidLeadingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
}
function isValidTrailingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
}
},{}],"node_modules/@walletconnect/jsonrpc-types/dist/esm/jsonrpc.js":[function(require,module,exports) {

},{}],"node_modules/@walletconnect/jsonrpc-types/dist/esm/misc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IEvents = void 0;
class IEvents {}
exports.IEvents = IEvents;
},{}],"node_modules/@walletconnect/jsonrpc-types/dist/esm/provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IJsonRpcProvider = exports.IJsonRpcConnection = exports.IBaseJsonRpcProvider = void 0;
var _misc = require("./misc");
class IJsonRpcConnection extends _misc.IEvents {
  constructor(opts) {
    super();
  }
}
exports.IJsonRpcConnection = IJsonRpcConnection;
class IBaseJsonRpcProvider extends _misc.IEvents {
  constructor() {
    super();
  }
}
exports.IBaseJsonRpcProvider = IBaseJsonRpcProvider;
class IJsonRpcProvider extends IBaseJsonRpcProvider {
  constructor(connection) {
    super();
  }
}
exports.IJsonRpcProvider = IJsonRpcProvider;
},{"./misc":"node_modules/@walletconnect/jsonrpc-types/dist/esm/misc.js"}],"node_modules/@walletconnect/jsonrpc-types/dist/esm/validator.js":[function(require,module,exports) {

},{}],"node_modules/@walletconnect/jsonrpc-types/dist/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsonrpc = require("./jsonrpc");
Object.keys(_jsonrpc).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _jsonrpc[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _jsonrpc[key];
    }
  });
});
var _misc = require("./misc");
Object.keys(_misc).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _misc[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _misc[key];
    }
  });
});
var _provider = require("./provider");
Object.keys(_provider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _provider[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _provider[key];
    }
  });
});
var _validator = require("./validator");
Object.keys(_validator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _validator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _validator[key];
    }
  });
});
},{"./jsonrpc":"node_modules/@walletconnect/jsonrpc-types/dist/esm/jsonrpc.js","./misc":"node_modules/@walletconnect/jsonrpc-types/dist/esm/misc.js","./provider":"node_modules/@walletconnect/jsonrpc-types/dist/esm/provider.js","./validator":"node_modules/@walletconnect/jsonrpc-types/dist/esm/validator.js"}],"node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsonrpcTypes = require("@walletconnect/jsonrpc-types");
Object.keys(_jsonrpcTypes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _jsonrpcTypes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _jsonrpcTypes[key];
    }
  });
});
},{"@walletconnect/jsonrpc-types":"node_modules/@walletconnect/jsonrpc-types/dist/esm/index.js"}],"node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isHttpUrl = isHttpUrl;
exports.isLocalhostUrl = isLocalhostUrl;
exports.isWsUrl = isWsUrl;
const HTTP_REGEX = "^https?:";
const WS_REGEX = "^wss?:";
function getUrlProtocol(url) {
  const matches = url.match(new RegExp(/^\w+:/, "gi"));
  if (!matches || !matches.length) return;
  return matches[0];
}
function matchRegexProtocol(url, regex) {
  const protocol = getUrlProtocol(url);
  if (typeof protocol === "undefined") return false;
  return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
  return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
  return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}
},{}],"node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isJsonRpcError = isJsonRpcError;
exports.isJsonRpcPayload = isJsonRpcPayload;
exports.isJsonRpcRequest = isJsonRpcRequest;
exports.isJsonRpcResponse = isJsonRpcResponse;
exports.isJsonRpcResult = isJsonRpcResult;
exports.isJsonRpcValidationInvalid = isJsonRpcValidationInvalid;
function isJsonRpcPayload(payload) {
  return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
  return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
  return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
  return "result" in payload;
}
function isJsonRpcError(payload) {
  return "error" in payload;
}
function isJsonRpcValidationInvalid(validation) {
  return "error" in validation && validation.valid === false;
}
},{}],"node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _constants = require("./constants");
Object.keys(_constants).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _constants[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constants[key];
    }
  });
});
var _error = require("./error");
Object.keys(_error).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _error[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _error[key];
    }
  });
});
var _env = require("./env");
Object.keys(_env).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _env[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _env[key];
    }
  });
});
var _format = require("./format");
Object.keys(_format).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _format[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _format[key];
    }
  });
});
var _routing = require("./routing");
Object.keys(_routing).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _routing[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _routing[key];
    }
  });
});
var _types = require("./types");
Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});
var _url = require("./url");
Object.keys(_url).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _url[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _url[key];
    }
  });
});
var _validators = require("./validators");
Object.keys(_validators).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _validators[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _validators[key];
    }
  });
});
},{"./constants":"node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js","./error":"node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js","./env":"node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js","./format":"node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js","./routing":"node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js","./types":"node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js","./url":"node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js","./validators":"node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js"}],"node_modules/@walletconnect/utils/dist/esm/misc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addHexPrefix = addHexPrefix;
exports.getInfuraRpcUrl = getInfuraRpcUrl;
exports.getRpcUrl = getRpcUrl;
exports.logDeprecationWarning = logDeprecationWarning;
exports.payloadId = void 0;
exports.removeHexLeadingZeros = removeHexLeadingZeros;
exports.removeHexPrefix = removeHexPrefix;
exports.sanitizeHex = sanitizeHex;
exports.uuid = uuid;
var encoding = _interopRequireWildcard(require("@walletconnect/encoding"));
var jsonRpcUtils = _interopRequireWildcard(require("@walletconnect/jsonrpc-utils"));
var _constants = require("./constants");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function sanitizeHex(hex) {
  return encoding.sanitizeHex(hex);
}
function addHexPrefix(hex) {
  return encoding.addHexPrefix(hex);
}
function removeHexPrefix(hex) {
  return encoding.removeHexPrefix(hex);
}
function removeHexLeadingZeros(hex) {
  return encoding.removeHexLeadingZeros(encoding.addHexPrefix(hex));
}
const payloadId = jsonRpcUtils.payloadId;
exports.payloadId = payloadId;
function uuid() {
  const result = ((a, b) => {
    for (b = a = ""; a++ < 36; b += a * 51 & 52 ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16) : "-") {}
    return b;
  })();
  return result;
}
function logDeprecationWarning() {
  console.warn("DEPRECATION WARNING: This WalletConnect client library will be deprecated in favor of @walletconnect/client. Please check docs.walletconnect.org to learn more about this migration!");
}
function getInfuraRpcUrl(chainId, infuraId) {
  let rpcUrl;
  const network = _constants.infuraNetworks[chainId];
  if (network) {
    rpcUrl = `https://${network}.infura.io/v3/${infuraId}`;
  }
  return rpcUrl;
}
function getRpcUrl(chainId, rpc) {
  let rpcUrl;
  const infuraUrl = getInfuraRpcUrl(chainId, rpc.infuraId);
  if (rpc.custom && rpc.custom[chainId]) {
    rpcUrl = rpc.custom[chainId];
  } else if (infuraUrl) {
    rpcUrl = infuraUrl;
  }
  return rpcUrl;
}
},{"@walletconnect/encoding":"node_modules/@walletconnect/encoding/dist/esm/index.js","@walletconnect/jsonrpc-utils":"node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js","./constants":"node_modules/@walletconnect/utils/dist/esm/constants.js"}],"node_modules/@walletconnect/utils/dist/esm/validators.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEncoding = getEncoding;
exports.getType = getType;
exports.isArrayBuffer = isArrayBuffer;
exports.isBuffer = isBuffer;
exports.isEmptyArray = isEmptyArray;
exports.isEmptyString = isEmptyString;
exports.isHexString = isHexString;
exports.isInternalEvent = isInternalEvent;
exports.isJsonRpcRequest = isJsonRpcRequest;
exports.isJsonRpcResponseError = isJsonRpcResponseError;
exports.isJsonRpcResponseSuccess = isJsonRpcResponseSuccess;
exports.isJsonRpcSubscription = isJsonRpcSubscription;
exports.isReservedEvent = isReservedEvent;
exports.isSilentPayload = isSilentPayload;
exports.isTypedArray = isTypedArray;
var encoding = _interopRequireWildcard(require("@walletconnect/encoding"));
var _constants = require("./constants");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function isEmptyString(value) {
  return value === "" || typeof value === "string" && value.trim() === "";
}
function isEmptyArray(array) {
  return !(array && array.length);
}
function isBuffer(val) {
  return encoding.isBuffer(val);
}
function isTypedArray(val) {
  return encoding.isTypedArray(val);
}
function isArrayBuffer(val) {
  return encoding.isArrayBuffer(val);
}
function getType(val) {
  return encoding.getType(val);
}
function getEncoding(val) {
  return encoding.getEncoding(val);
}
function isHexString(value, length) {
  return encoding.isHexString(value, length);
}
function isJsonRpcSubscription(object) {
  return typeof object.params === "object";
}
function isJsonRpcRequest(object) {
  return typeof object.method !== "undefined";
}
function isJsonRpcResponseSuccess(object) {
  return typeof object.result !== "undefined";
}
function isJsonRpcResponseError(object) {
  return typeof object.error !== "undefined";
}
function isInternalEvent(object) {
  return typeof object.event !== "undefined";
}
function isReservedEvent(event) {
  return _constants.reservedEvents.includes(event) || event.startsWith("wc_");
}
function isSilentPayload(request) {
  if (request.method.startsWith("wc_")) {
    return true;
  }
  if (_constants.signingMethods.includes(request.method)) {
    return false;
  }
  return true;
}
},{"@walletconnect/encoding":"node_modules/@walletconnect/encoding/dist/esm/index.js","./constants":"node_modules/@walletconnect/utils/dist/esm/constants.js"}],"node_modules/@walletconnect/utils/dist/esm/ethereum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValidAddress = void 0;
exports.parsePersonalSign = parsePersonalSign;
exports.parseTransactionData = parseTransactionData;
exports.toChecksumAddress = toChecksumAddress;
var _jsSha = require("js-sha3");
var _encoding = require("@walletconnect/encoding");
var _encoding2 = require("./encoding");
var _misc = require("./misc");
var _validators = require("./validators");
function toChecksumAddress(address) {
  address = (0, _encoding.removeHexPrefix)(address.toLowerCase());
  const hash = (0, _encoding.removeHexPrefix)((0, _jsSha.keccak_256)((0, _encoding2.convertUtf8ToBuffer)(address)));
  let checksum = "";
  for (let i = 0; i < address.length; i++) {
    if (parseInt(hash[i], 16) > 7) {
      checksum += address[i].toUpperCase();
    } else {
      checksum += address[i];
    }
  }
  return (0, _encoding.addHexPrefix)(checksum);
}
const isValidAddress = address => {
  if (!address) {
    return false;
  } else if (address.toLowerCase().substring(0, 2) !== "0x") {
    return false;
  } else if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
    return false;
  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
    return true;
  } else {
    return address === toChecksumAddress(address);
  }
};
exports.isValidAddress = isValidAddress;
function parsePersonalSign(params) {
  if (!(0, _validators.isEmptyArray)(params) && !(0, _validators.isHexString)(params[0])) {
    params[0] = (0, _encoding2.convertUtf8ToHex)(params[0]);
  }
  return params;
}
function parseTransactionData(txData) {
  if (typeof txData.type !== "undefined" && txData.type !== "0") return txData;
  if (typeof txData.from === "undefined" || !isValidAddress(txData.from)) {
    throw new Error(`Transaction object must include a valid 'from' value.`);
  }
  function parseHexValues(value) {
    let result = value;
    if (typeof value === "number" || typeof value === "string" && !(0, _validators.isEmptyString)(value)) {
      if (!(0, _validators.isHexString)(value)) {
        result = (0, _encoding2.convertNumberToHex)(value);
      } else if (typeof value === "string") {
        result = (0, _misc.sanitizeHex)(value);
      }
    }
    if (typeof result === "string") {
      result = (0, _misc.removeHexLeadingZeros)(result);
    }
    return result;
  }
  const txDataRPC = {
    from: (0, _misc.sanitizeHex)(txData.from),
    to: typeof txData.to === "undefined" ? undefined : (0, _misc.sanitizeHex)(txData.to),
    gasPrice: typeof txData.gasPrice === "undefined" ? "" : parseHexValues(txData.gasPrice),
    gas: typeof txData.gas === "undefined" ? typeof txData.gasLimit === "undefined" ? "" : parseHexValues(txData.gasLimit) : parseHexValues(txData.gas),
    value: typeof txData.value === "undefined" ? "" : parseHexValues(txData.value),
    nonce: typeof txData.nonce === "undefined" ? "" : parseHexValues(txData.nonce),
    data: typeof txData.data === "undefined" ? "" : (0, _misc.sanitizeHex)(txData.data) || "0x"
  };
  const prunable = ["gasPrice", "gas", "value", "nonce"];
  Object.keys(txDataRPC).forEach(key => {
    if ((typeof txDataRPC[key] === "undefined" || typeof txDataRPC[key] === "string" && !txDataRPC[key].trim().length) && prunable.includes(key)) {
      delete txDataRPC[key];
    }
  });
  return txDataRPC;
}
},{"js-sha3":"node_modules/js-sha3/src/sha3.js","@walletconnect/encoding":"node_modules/@walletconnect/encoding/dist/esm/index.js","./encoding":"node_modules/@walletconnect/utils/dist/esm/encoding.js","./misc":"node_modules/@walletconnect/utils/dist/esm/misc.js","./validators":"node_modules/@walletconnect/utils/dist/esm/validators.js"}],"node_modules/@walletconnect/utils/dist/esm/payload.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatRpcError = formatRpcError;
exports.promisify = promisify;
function promisify(originalFn, thisArg) {
  const promisifiedFunction = async (...callArgs) => {
    return new Promise((resolve, reject) => {
      const callback = (err, data) => {
        if (err === null || typeof err === "undefined") {
          reject(err);
        }
        resolve(data);
      };
      originalFn.apply(thisArg, [...callArgs, callback]);
    });
  };
  return promisifiedFunction;
}
function formatRpcError(error) {
  const message = error.message || "Failed or Rejected Request";
  let code = -32000;
  if (error && !error.code) {
    switch (message) {
      case "Parse error":
        code = -32700;
        break;
      case "Invalid request":
        code = -32600;
        break;
      case "Method not found":
        code = -32601;
        break;
      case "Invalid params":
        code = -32602;
        break;
      case "Internal error":
        code = -32603;
        break;
      default:
        code = -32000;
        break;
    }
  }
  const result = {
    code,
    message
  };
  if (error.data) {
    result.data = error.data;
  }
  return result;
}
},{}],"node_modules/@walletconnect/utils/node_modules/strict-uri-encode/index.js":[function(require,module,exports) {
'use strict';

module.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => "%".concat(x.charCodeAt(0).toString(16).toUpperCase()));
},{}],"node_modules/decode-uri-component/index.js":[function(require,module,exports) {
'use strict';

var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');
function decodeComponents(components, split) {
  try {
    // Try to decode the entire string first
    return [decodeURIComponent(components.join(''))];
  } catch (err) {
    // Do nothing
  }
  if (components.length === 1) {
    return components;
  }
  split = split || 1;

  // Split the array in 2 parts
  var left = components.slice(0, split);
  var right = components.slice(split);
  return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}
function decode(input) {
  try {
    return decodeURIComponent(input);
  } catch (err) {
    var tokens = input.match(singleMatcher) || [];
    for (var i = 1; i < tokens.length; i++) {
      input = decodeComponents(tokens, i).join('');
      tokens = input.match(singleMatcher) || [];
    }
    return input;
  }
}
function customDecodeURIComponent(input) {
  // Keep track of all the replacements and prefill the map with the `BOM`
  var replaceMap = {
    '%FE%FF': '\uFFFD\uFFFD',
    '%FF%FE': '\uFFFD\uFFFD'
  };
  var match = multiMatcher.exec(input);
  while (match) {
    try {
      // Decode as big chunks as possible
      replaceMap[match[0]] = decodeURIComponent(match[0]);
    } catch (err) {
      var result = decode(match[0]);
      if (result !== match[0]) {
        replaceMap[match[0]] = result;
      }
    }
    match = multiMatcher.exec(input);
  }

  // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
  replaceMap['%C2'] = '\uFFFD';
  var entries = Object.keys(replaceMap);
  for (var i = 0; i < entries.length; i++) {
    // Replace all decoded components
    var key = entries[i];
    input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
  }
  return input;
}
module.exports = function (encodedURI) {
  if (typeof encodedURI !== 'string') {
    throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
  }
  try {
    encodedURI = encodedURI.replace(/\+/g, ' ');

    // Try the built in decoder first
    return decodeURIComponent(encodedURI);
  } catch (err) {
    // Fallback to a more advanced decoder
    return customDecodeURIComponent(encodedURI);
  }
};
},{}],"node_modules/split-on-first/index.js":[function(require,module,exports) {
'use strict';

module.exports = function (string, separator) {
  if (!(typeof string === 'string' && typeof separator === 'string')) {
    throw new TypeError('Expected the arguments to be of type `string`');
  }
  if (separator === '') {
    return [string];
  }
  var separatorIndex = string.indexOf(separator);
  if (separatorIndex === -1) {
    return [string];
  }
  return [string.slice(0, separatorIndex), string.slice(separatorIndex + separator.length)];
};
},{}],"node_modules/@walletconnect/utils/node_modules/query-string/index.js":[function(require,module,exports) {
'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var strictUriEncode = require('strict-uri-encode');
var decodeComponent = require('decode-uri-component');
var splitOnFirst = require('split-on-first');
var isNullOrUndefined = function (value) {
  return value === null || value === undefined;
};
function encoderForArrayFormat(options) {
  switch (options.arrayFormat) {
    case 'index':
      return function (key) {
        return function (result, value) {
          var index = result.length;
          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {
            return result;
          }
          if (value === null) {
            return [].concat(_toConsumableArray(result), [[encode(key, options), '[', index, ']'].join('')]);
          }
          return [].concat(_toConsumableArray(result), [[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')]);
        };
      };
    case 'bracket':
      return function (key) {
        return function (result, value) {
          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {
            return result;
          }
          if (value === null) {
            return [].concat(_toConsumableArray(result), [[encode(key, options), '[]'].join('')]);
          }
          return [].concat(_toConsumableArray(result), [[encode(key, options), '[]=', encode(value, options)].join('')]);
        };
      };
    case 'comma':
    case 'separator':
      return function (key) {
        return function (result, value) {
          if (value === null || value === undefined || value.length === 0) {
            return result;
          }
          if (result.length === 0) {
            return [[encode(key, options), '=', encode(value, options)].join('')];
          }
          return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
        };
      };
    default:
      return function (key) {
        return function (result, value) {
          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {
            return result;
          }
          if (value === null) {
            return [].concat(_toConsumableArray(result), [encode(key, options)]);
          }
          return [].concat(_toConsumableArray(result), [[encode(key, options), '=', encode(value, options)].join('')]);
        };
      };
  }
}
function parserForArrayFormat(options) {
  var result;
  switch (options.arrayFormat) {
    case 'index':
      return function (key, value, accumulator) {
        result = /\[(\d*)\]$/.exec(key);
        key = key.replace(/\[\d*\]$/, '');
        if (!result) {
          accumulator[key] = value;
          return;
        }
        if (accumulator[key] === undefined) {
          accumulator[key] = {};
        }
        accumulator[key][result[1]] = value;
      };
    case 'bracket':
      return function (key, value, accumulator) {
        result = /(\[\])$/.exec(key);
        key = key.replace(/\[\]$/, '');
        if (!result) {
          accumulator[key] = value;
          return;
        }
        if (accumulator[key] === undefined) {
          accumulator[key] = [value];
          return;
        }
        accumulator[key] = [].concat(accumulator[key], value);
      };
    case 'comma':
    case 'separator':
      return function (key, value, accumulator) {
        var isArray = typeof value === 'string' && value.split('').indexOf(options.arrayFormatSeparator) > -1;
        var newValue = isArray ? value.split(options.arrayFormatSeparator).map(function (item) {
          return decode(item, options);
        }) : value === null ? value : decode(value, options);
        accumulator[key] = newValue;
      };
    default:
      return function (key, value, accumulator) {
        if (accumulator[key] === undefined) {
          accumulator[key] = value;
          return;
        }
        accumulator[key] = [].concat(accumulator[key], value);
      };
  }
}
function validateArrayFormatSeparator(value) {
  if (typeof value !== 'string' || value.length !== 1) {
    throw new TypeError('arrayFormatSeparator must be single character string');
  }
}
function encode(value, options) {
  if (options.encode) {
    return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
  }
  return value;
}
function decode(value, options) {
  if (options.decode) {
    return decodeComponent(value);
  }
  return value;
}
function keysSorter(input) {
  if (Array.isArray(input)) {
    return input.sort();
  }
  if (_typeof(input) === 'object') {
    return keysSorter(Object.keys(input)).sort(function (a, b) {
      return Number(a) - Number(b);
    }).map(function (key) {
      return input[key];
    });
  }
  return input;
}
function removeHash(input) {
  var hashStart = input.indexOf('#');
  if (hashStart !== -1) {
    input = input.slice(0, hashStart);
  }
  return input;
}
function getHash(url) {
  var hash = '';
  var hashStart = url.indexOf('#');
  if (hashStart !== -1) {
    hash = url.slice(hashStart);
  }
  return hash;
}
function extract(input) {
  input = removeHash(input);
  var queryStart = input.indexOf('?');
  if (queryStart === -1) {
    return '';
  }
  return input.slice(queryStart + 1);
}
function parseValue(value, options) {
  if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === 'string' && value.trim() !== '') {
    value = Number(value);
  } else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
    value = value.toLowerCase() === 'true';
  }
  return value;
}
function parse(input, options) {
  options = Object.assign({
    decode: true,
    sort: true,
    arrayFormat: 'none',
    arrayFormatSeparator: ',',
    parseNumbers: false,
    parseBooleans: false
  }, options);
  validateArrayFormatSeparator(options.arrayFormatSeparator);
  var formatter = parserForArrayFormat(options);

  // Create an object with no prototype
  var ret = Object.create(null);
  if (typeof input !== 'string') {
    return ret;
  }
  input = input.trim().replace(/^[?#&]/, '');
  if (!input) {
    return ret;
  }
  for (var param of input.split('&')) {
    var [key, value] = splitOnFirst(options.decode ? param.replace(/\+/g, ' ') : param, '=');

    // Missing `=` should be `null`:
    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
    value = value === undefined ? null : ['comma', 'separator'].includes(options.arrayFormat) ? value : decode(value, options);
    formatter(decode(key, options), value, ret);
  }
  for (var _key of Object.keys(ret)) {
    var _value = ret[_key];
    if (_typeof(_value) === 'object' && _value !== null) {
      for (var k of Object.keys(_value)) {
        _value[k] = parseValue(_value[k], options);
      }
    } else {
      ret[_key] = parseValue(_value, options);
    }
  }
  if (options.sort === false) {
    return ret;
  }
  return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce(function (result, key) {
    var value = ret[key];
    if (Boolean(value) && _typeof(value) === 'object' && !Array.isArray(value)) {
      // Sort object keys, not values
      result[key] = keysSorter(value);
    } else {
      result[key] = value;
    }
    return result;
  }, Object.create(null));
}
exports.extract = extract;
exports.parse = parse;
exports.stringify = function (object, options) {
  if (!object) {
    return '';
  }
  options = Object.assign({
    encode: true,
    strict: true,
    arrayFormat: 'none',
    arrayFormatSeparator: ','
  }, options);
  validateArrayFormatSeparator(options.arrayFormatSeparator);
  var shouldFilter = function (key) {
    return options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === '';
  };
  var formatter = encoderForArrayFormat(options);
  var objectCopy = {};
  for (var key of Object.keys(object)) {
    if (!shouldFilter(key)) {
      objectCopy[key] = object[key];
    }
  }
  var keys = Object.keys(objectCopy);
  if (options.sort !== false) {
    keys.sort(options.sort);
  }
  return keys.map(function (key) {
    var value = object[key];
    if (value === undefined) {
      return '';
    }
    if (value === null) {
      return encode(key, options);
    }
    if (Array.isArray(value)) {
      return value.reduce(formatter(key), []).join('&');
    }
    return encode(key, options) + '=' + encode(value, options);
  }).filter(function (x) {
    return x.length > 0;
  }).join('&');
};
exports.parseUrl = function (input, options) {
  options = Object.assign({
    decode: true
  }, options);
  var [url, hash] = splitOnFirst(input, '#');
  return Object.assign({
    url: url.split('?')[0] || '',
    query: parse(extract(input), options)
  }, options && options.parseFragmentIdentifier && hash ? {
    fragmentIdentifier: decode(hash, options)
  } : {});
};
exports.stringifyUrl = function (input, options) {
  options = Object.assign({
    encode: true,
    strict: true
  }, options);
  var url = removeHash(input.url).split('?')[0] || '';
  var queryFromUrl = exports.extract(input.url);
  var parsedQueryFromUrl = exports.parse(queryFromUrl, {
    sort: false
  });
  var query = Object.assign(parsedQueryFromUrl, input.query);
  var queryString = exports.stringify(query, options);
  if (queryString) {
    queryString = "?".concat(queryString);
  }
  var hash = getHash(input.url);
  if (input.fragmentIdentifier) {
    hash = "#".concat(encode(input.fragmentIdentifier, options));
  }
  return "".concat(url).concat(queryString).concat(hash);
};
},{"strict-uri-encode":"node_modules/@walletconnect/utils/node_modules/strict-uri-encode/index.js","decode-uri-component":"node_modules/decode-uri-component/index.js","split-on-first":"node_modules/split-on-first/index.js"}],"node_modules/@walletconnect/utils/dist/esm/url.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.appendToQueryString = appendToQueryString;
exports.formatQueryString = formatQueryString;
exports.getQueryString = getQueryString;
exports.parseQueryString = parseQueryString;
var queryStringUtils = _interopRequireWildcard(require("query-string"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function getQueryString(url) {
  const pathEnd = url.indexOf("?") !== -1 ? url.indexOf("?") : undefined;
  const queryString = typeof pathEnd !== "undefined" ? url.substr(pathEnd) : "";
  return queryString;
}
function appendToQueryString(queryString, newQueryParams) {
  let queryParams = parseQueryString(queryString);
  queryParams = Object.assign(Object.assign({}, queryParams), newQueryParams);
  queryString = formatQueryString(queryParams);
  return queryString;
}
function parseQueryString(queryString) {
  return queryStringUtils.parse(queryString);
}
function formatQueryString(queryParams) {
  return queryStringUtils.stringify(queryParams);
}
},{"query-string":"node_modules/@walletconnect/utils/node_modules/query-string/index.js"}],"node_modules/@walletconnect/utils/dist/esm/session.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWalletConnectSession = isWalletConnectSession;
exports.parseWalletConnectUri = parseWalletConnectUri;
var _url = require("./url");
function isWalletConnectSession(object) {
  return typeof object.bridge !== "undefined";
}
function parseWalletConnectUri(str) {
  const pathStart = str.indexOf(":");
  const pathEnd = str.indexOf("?") !== -1 ? str.indexOf("?") : undefined;
  const protocol = str.substring(0, pathStart);
  const path = str.substring(pathStart + 1, pathEnd);
  function parseRequiredParams(path) {
    const separator = "@";
    const values = path.split(separator);
    const requiredParams = {
      handshakeTopic: values[0],
      version: parseInt(values[1], 10)
    };
    return requiredParams;
  }
  const requiredParams = parseRequiredParams(path);
  const queryString = typeof pathEnd !== "undefined" ? str.substr(pathEnd) : "";
  function parseQueryParams(queryString) {
    const result = (0, _url.parseQueryString)(queryString);
    const parameters = {
      key: result.key || "",
      bridge: result.bridge || ""
    };
    return parameters;
  }
  const queryParams = parseQueryParams(queryString);
  const result = Object.assign(Object.assign({
    protocol
  }, requiredParams), queryParams);
  return result;
}
},{"./url":"node_modules/@walletconnect/utils/dist/esm/url.js"}],"node_modules/@walletconnect/utils/dist/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _browserUtils = require("@walletconnect/browser-utils");
Object.keys(_browserUtils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _browserUtils[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _browserUtils[key];
    }
  });
});
var _constants = require("./constants");
Object.keys(_constants).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _constants[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constants[key];
    }
  });
});
var _encoding = require("./encoding");
Object.keys(_encoding).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _encoding[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _encoding[key];
    }
  });
});
var _ethereum = require("./ethereum");
Object.keys(_ethereum).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _ethereum[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ethereum[key];
    }
  });
});
var _misc = require("./misc");
Object.keys(_misc).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _misc[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _misc[key];
    }
  });
});
var _payload = require("./payload");
Object.keys(_payload).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _payload[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _payload[key];
    }
  });
});
var _session = require("./session");
Object.keys(_session).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _session[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _session[key];
    }
  });
});
var _url = require("./url");
Object.keys(_url).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _url[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _url[key];
    }
  });
});
var _validators = require("./validators");
Object.keys(_validators).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _validators[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _validators[key];
    }
  });
});
},{"@walletconnect/browser-utils":"node_modules/@walletconnect/browser-utils/dist/esm/index.js","./constants":"node_modules/@walletconnect/utils/dist/esm/constants.js","./encoding":"node_modules/@walletconnect/utils/dist/esm/encoding.js","./ethereum":"node_modules/@walletconnect/utils/dist/esm/ethereum.js","./misc":"node_modules/@walletconnect/utils/dist/esm/misc.js","./payload":"node_modules/@walletconnect/utils/dist/esm/payload.js","./session":"node_modules/@walletconnect/utils/dist/esm/session.js","./url":"node_modules/@walletconnect/utils/dist/esm/url.js","./validators":"node_modules/@walletconnect/utils/dist/esm/validators.js"}],"node_modules/@walletconnect/socket-transport/dist/esm/network.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class NetworkMonitor {
  constructor() {
    this._eventEmitters = [];
    if (typeof window !== "undefined" && typeof window.addEventListener !== "undefined") {
      window.addEventListener("online", () => this.trigger("online"));
      window.addEventListener("offline", () => this.trigger("offline"));
    }
  }
  on(event, callback) {
    this._eventEmitters.push({
      event,
      callback
    });
  }
  trigger(event) {
    let eventEmitters = [];
    if (event) {
      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === event);
    }
    eventEmitters.forEach(eventEmitter => {
      eventEmitter.callback();
    });
  }
}
var _default = NetworkMonitor;
exports.default = _default;
},{}],"node_modules/@walletconnect/socket-transport/node_modules/ws/browser.js":[function(require,module,exports) {
'use strict';

module.exports = function () {
  throw new Error('ws does not work in the browser. Browser clients must use the native ' + 'WebSocket object');
};
},{}],"node_modules/@walletconnect/socket-transport/dist/esm/index.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = require("@walletconnect/utils");
var _network = _interopRequireDefault(require("./network"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const WS = typeof global.WebSocket !== "undefined" ? global.WebSocket : require("ws");
class SocketTransport {
  constructor(opts) {
    this.opts = opts;
    this._queue = [];
    this._events = [];
    this._subscriptions = [];
    this._protocol = opts.protocol;
    this._version = opts.version;
    this._url = "";
    this._netMonitor = null;
    this._socket = null;
    this._nextSocket = null;
    this._subscriptions = opts.subscriptions || [];
    this._netMonitor = opts.netMonitor || new _network.default();
    if (!opts.url || typeof opts.url !== "string") {
      throw new Error("Missing or invalid WebSocket url");
    }
    this._url = opts.url;
    this._netMonitor.on("online", () => this._socketCreate());
  }
  set readyState(value) {}
  get readyState() {
    return this._socket ? this._socket.readyState : -1;
  }
  set connecting(value) {}
  get connecting() {
    return this.readyState === 0;
  }
  set connected(value) {}
  get connected() {
    return this.readyState === 1;
  }
  set closing(value) {}
  get closing() {
    return this.readyState === 2;
  }
  set closed(value) {}
  get closed() {
    return this.readyState === 3;
  }
  open() {
    this._socketCreate();
  }
  close() {
    this._socketClose();
  }
  send(message, topic, silent) {
    if (!topic || typeof topic !== "string") {
      throw new Error("Missing or invalid topic field");
    }
    this._socketSend({
      topic: topic,
      type: "pub",
      payload: message,
      silent: !!silent
    });
  }
  subscribe(topic) {
    this._socketSend({
      topic: topic,
      type: "sub",
      payload: "",
      silent: true
    });
  }
  on(event, callback) {
    this._events.push({
      event,
      callback
    });
  }
  _socketCreate() {
    if (this._nextSocket) {
      return;
    }
    const url = getWebSocketUrl(this._url, this._protocol, this._version);
    this._nextSocket = new WS(url);
    if (!this._nextSocket) {
      throw new Error("Failed to create socket");
    }
    this._nextSocket.onmessage = event => this._socketReceive(event);
    this._nextSocket.onopen = () => this._socketOpen();
    this._nextSocket.onerror = event => this._socketError(event);
    this._nextSocket.onclose = () => {
      setTimeout(() => {
        this._nextSocket = null;
        this._socketCreate();
      }, 1000);
    };
  }
  _socketOpen() {
    this._socketClose();
    this._socket = this._nextSocket;
    this._nextSocket = null;
    this._queueSubscriptions();
    this._pushQueue();
  }
  _socketClose() {
    if (this._socket) {
      this._socket.onclose = () => {};
      this._socket.close();
    }
  }
  _socketSend(socketMessage) {
    const message = JSON.stringify(socketMessage);
    if (this._socket && this._socket.readyState === 1) {
      this._socket.send(message);
    } else {
      this._setToQueue(socketMessage);
      this._socketCreate();
    }
  }
  async _socketReceive(event) {
    let socketMessage;
    try {
      socketMessage = JSON.parse(event.data);
    } catch (error) {
      return;
    }
    this._socketSend({
      topic: socketMessage.topic,
      type: "ack",
      payload: "",
      silent: true
    });
    if (this._socket && this._socket.readyState === 1) {
      const events = this._events.filter(event => event.event === "message");
      if (events && events.length) {
        events.forEach(event => event.callback(socketMessage));
      }
    }
  }
  _socketError(e) {
    const events = this._events.filter(event => event.event === "error");
    if (events && events.length) {
      events.forEach(event => event.callback(e));
    }
  }
  _queueSubscriptions() {
    const subscriptions = this._subscriptions;
    subscriptions.forEach(topic => this._queue.push({
      topic: topic,
      type: "sub",
      payload: "",
      silent: true
    }));
    this._subscriptions = this.opts.subscriptions || [];
  }
  _setToQueue(socketMessage) {
    this._queue.push(socketMessage);
  }
  _pushQueue() {
    const queue = this._queue;
    queue.forEach(socketMessage => this._socketSend(socketMessage));
    this._queue = [];
  }
}
function getWebSocketUrl(_url, protocol, version) {
  var _a, _b;
  const url = _url.startsWith("https") ? _url.replace("https", "wss") : _url.startsWith("http") ? _url.replace("http", "ws") : _url;
  const splitUrl = url.split("?");
  const params = (0, _utils.isBrowser)() ? {
    protocol,
    version,
    env: "browser",
    host: ((_a = (0, _utils.getLocation)()) === null || _a === void 0 ? void 0 : _a.host) || ""
  } : {
    protocol,
    version,
    env: ((_b = (0, _utils.detectEnv)()) === null || _b === void 0 ? void 0 : _b.name) || ""
  };
  const queryString = (0, _utils.appendToQueryString)((0, _utils.getQueryString)(splitUrl[1] || ""), params);
  return splitUrl[0] + "?" + queryString;
}
var _default = SocketTransport;
exports.default = _default;
},{"@walletconnect/utils":"node_modules/@walletconnect/utils/dist/esm/index.js","./network":"node_modules/@walletconnect/socket-transport/dist/esm/network.js","ws":"node_modules/@walletconnect/socket-transport/node_modules/ws/browser.js"}],"node_modules/@walletconnect/core/dist/esm/errors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ERROR_SESSION_REJECTED = exports.ERROR_SESSION_DISCONNECTED = exports.ERROR_SESSION_CONNECTED = exports.ERROR_QRCODE_MODAL_USER_CLOSED = exports.ERROR_QRCODE_MODAL_NOT_PROVIDED = exports.ERROR_MISSING_RESULT = exports.ERROR_MISSING_REQUIRED = exports.ERROR_MISSING_METHOD = exports.ERROR_MISSING_JSON_RPC = exports.ERROR_MISSING_ID = exports.ERROR_MISSING_ERROR = exports.ERROR_INVALID_URI = exports.ERROR_INVALID_RESPONSE = void 0;
const ERROR_SESSION_CONNECTED = "Session currently connected";
exports.ERROR_SESSION_CONNECTED = ERROR_SESSION_CONNECTED;
const ERROR_SESSION_DISCONNECTED = "Session currently disconnected";
exports.ERROR_SESSION_DISCONNECTED = ERROR_SESSION_DISCONNECTED;
const ERROR_SESSION_REJECTED = "Session Rejected";
exports.ERROR_SESSION_REJECTED = ERROR_SESSION_REJECTED;
const ERROR_MISSING_JSON_RPC = "Missing JSON RPC response";
exports.ERROR_MISSING_JSON_RPC = ERROR_MISSING_JSON_RPC;
const ERROR_MISSING_RESULT = `JSON-RPC success response must include "result" field`;
exports.ERROR_MISSING_RESULT = ERROR_MISSING_RESULT;
const ERROR_MISSING_ERROR = `JSON-RPC error response must include "error" field`;
exports.ERROR_MISSING_ERROR = ERROR_MISSING_ERROR;
const ERROR_MISSING_METHOD = `JSON RPC request must have valid "method" value`;
exports.ERROR_MISSING_METHOD = ERROR_MISSING_METHOD;
const ERROR_MISSING_ID = `JSON RPC request must have valid "id" value`;
exports.ERROR_MISSING_ID = ERROR_MISSING_ID;
const ERROR_MISSING_REQUIRED = "Missing one of the required parameters: bridge / uri / session";
exports.ERROR_MISSING_REQUIRED = ERROR_MISSING_REQUIRED;
const ERROR_INVALID_RESPONSE = "JSON RPC response format is invalid";
exports.ERROR_INVALID_RESPONSE = ERROR_INVALID_RESPONSE;
const ERROR_INVALID_URI = "URI format is invalid";
exports.ERROR_INVALID_URI = ERROR_INVALID_URI;
const ERROR_QRCODE_MODAL_NOT_PROVIDED = "QRCode Modal not provided";
exports.ERROR_QRCODE_MODAL_NOT_PROVIDED = ERROR_QRCODE_MODAL_NOT_PROVIDED;
const ERROR_QRCODE_MODAL_USER_CLOSED = "User close QRCode Modal";
exports.ERROR_QRCODE_MODAL_USER_CLOSED = ERROR_QRCODE_MODAL_USER_CLOSED;
},{}],"node_modules/@walletconnect/core/dist/esm/events.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = require("@walletconnect/utils");
class EventManager {
  constructor() {
    this._eventEmitters = [];
  }
  subscribe(eventEmitter) {
    this._eventEmitters.push(eventEmitter);
  }
  unsubscribe(event) {
    this._eventEmitters = this._eventEmitters.filter(x => x.event !== event);
  }
  trigger(payload) {
    let eventEmitters = [];
    let event;
    if ((0, _utils.isJsonRpcRequest)(payload)) {
      event = payload.method;
    } else if ((0, _utils.isJsonRpcResponseSuccess)(payload) || (0, _utils.isJsonRpcResponseError)(payload)) {
      event = `response:${payload.id}`;
    } else if ((0, _utils.isInternalEvent)(payload)) {
      event = payload.event;
    } else {
      event = "";
    }
    if (event) {
      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === event);
    }
    if ((!eventEmitters || !eventEmitters.length) && !(0, _utils.isReservedEvent)(event) && !(0, _utils.isInternalEvent)(event)) {
      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === "call_request");
    }
    eventEmitters.forEach(eventEmitter => {
      if ((0, _utils.isJsonRpcResponseError)(payload)) {
        const error = new Error(payload.error.message);
        eventEmitter.callback(error, null);
      } else {
        eventEmitter.callback(null, payload);
      }
    });
  }
}
var _default = EventManager;
exports.default = _default;
},{"@walletconnect/utils":"node_modules/@walletconnect/utils/dist/esm/index.js"}],"node_modules/@walletconnect/core/dist/esm/storage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = require("@walletconnect/utils");
class SessionStorage {
  constructor(storageId = "walletconnect") {
    this.storageId = storageId;
  }
  getSession() {
    let session = null;
    const json = (0, _utils.getLocal)(this.storageId);
    if (json && (0, _utils.isWalletConnectSession)(json)) {
      session = json;
    }
    return session;
  }
  setSession(session) {
    (0, _utils.setLocal)(this.storageId, session);
    return session;
  }
  removeSession() {
    (0, _utils.removeLocal)(this.storageId);
  }
}
var _default = SessionStorage;
exports.default = _default;
},{"@walletconnect/utils":"node_modules/@walletconnect/utils/dist/esm/index.js"}],"node_modules/@walletconnect/core/dist/esm/url.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractHostname = extractHostname;
exports.extractRootDomain = extractRootDomain;
exports.getBridgeUrl = getBridgeUrl;
exports.randomBridgeIndex = randomBridgeIndex;
exports.selectRandomBridgeUrl = selectRandomBridgeUrl;
exports.shouldSelectRandomly = shouldSelectRandomly;
const domain = "walletconnect.org";
const alphanumerical = "abcdefghijklmnopqrstuvwxyz0123456789";
const bridges = alphanumerical.split("").map(char => `https://${char}.bridge.walletconnect.org`);
function extractHostname(url) {
  let hostname = url.indexOf("//") > -1 ? url.split("/")[2] : url.split("/")[0];
  hostname = hostname.split(":")[0];
  hostname = hostname.split("?")[0];
  return hostname;
}
function extractRootDomain(url) {
  return extractHostname(url).split(".").slice(-2).join(".");
}
function randomBridgeIndex() {
  return Math.floor(Math.random() * bridges.length);
}
function selectRandomBridgeUrl() {
  return bridges[randomBridgeIndex()];
}
function shouldSelectRandomly(url) {
  return extractRootDomain(url) === domain;
}
function getBridgeUrl(url) {
  if (shouldSelectRandomly(url)) {
    return selectRandomBridgeUrl();
  }
  return url;
}
},{}],"node_modules/@walletconnect/core/dist/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = require("@walletconnect/utils");
var _socketTransport = _interopRequireDefault(require("@walletconnect/socket-transport"));
var _errors = require("./errors");
var _events = _interopRequireDefault(require("./events"));
var _storage = _interopRequireDefault(require("./storage"));
var _url = require("./url");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Connector {
  constructor(opts) {
    this.protocol = "wc";
    this.version = 1;
    this._bridge = "";
    this._key = null;
    this._clientId = "";
    this._clientMeta = null;
    this._peerId = "";
    this._peerMeta = null;
    this._handshakeId = 0;
    this._handshakeTopic = "";
    this._connected = false;
    this._accounts = [];
    this._chainId = 0;
    this._networkId = 0;
    this._rpcUrl = "";
    this._eventManager = new _events.default();
    this._clientMeta = (0, _utils.getClientMeta)() || opts.connectorOpts.clientMeta || null;
    this._cryptoLib = opts.cryptoLib;
    this._sessionStorage = opts.sessionStorage || new _storage.default(opts.connectorOpts.storageId);
    this._qrcodeModal = opts.connectorOpts.qrcodeModal;
    this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;
    this._signingMethods = [..._utils.signingMethods, ...(opts.connectorOpts.signingMethods || [])];
    if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {
      throw new Error(_errors.ERROR_MISSING_REQUIRED);
    }
    if (opts.connectorOpts.bridge) {
      this.bridge = (0, _url.getBridgeUrl)(opts.connectorOpts.bridge);
    }
    if (opts.connectorOpts.uri) {
      this.uri = opts.connectorOpts.uri;
    }
    const session = opts.connectorOpts.session || this._getStorageSession();
    if (session) {
      this.session = session;
    }
    if (this.handshakeId) {
      this._subscribeToSessionResponse(this.handshakeId, "Session request rejected");
    }
    this._transport = opts.transport || new _socketTransport.default({
      protocol: this.protocol,
      version: this.version,
      url: this.bridge,
      subscriptions: [this.clientId]
    });
    this._subscribeToInternalEvents();
    this._initTransport();
    if (opts.connectorOpts.uri) {
      this._subscribeToSessionRequest();
    }
    if (opts.pushServerOpts) {
      this._registerPushServer(opts.pushServerOpts);
    }
  }
  set bridge(value) {
    if (!value) {
      return;
    }
    this._bridge = value;
  }
  get bridge() {
    return this._bridge;
  }
  set key(value) {
    if (!value) {
      return;
    }
    const key = (0, _utils.convertHexToArrayBuffer)(value);
    this._key = key;
  }
  get key() {
    if (this._key) {
      const key = (0, _utils.convertArrayBufferToHex)(this._key, true);
      return key;
    }
    return "";
  }
  set clientId(value) {
    if (!value) {
      return;
    }
    this._clientId = value;
  }
  get clientId() {
    let clientId = this._clientId;
    if (!clientId) {
      clientId = this._clientId = (0, _utils.uuid)();
    }
    return this._clientId;
  }
  set peerId(value) {
    if (!value) {
      return;
    }
    this._peerId = value;
  }
  get peerId() {
    return this._peerId;
  }
  set clientMeta(value) {}
  get clientMeta() {
    let clientMeta = this._clientMeta;
    if (!clientMeta) {
      clientMeta = this._clientMeta = (0, _utils.getClientMeta)();
    }
    return clientMeta;
  }
  set peerMeta(value) {
    this._peerMeta = value;
  }
  get peerMeta() {
    const peerMeta = this._peerMeta;
    return peerMeta;
  }
  set handshakeTopic(value) {
    if (!value) {
      return;
    }
    this._handshakeTopic = value;
  }
  get handshakeTopic() {
    return this._handshakeTopic;
  }
  set handshakeId(value) {
    if (!value) {
      return;
    }
    this._handshakeId = value;
  }
  get handshakeId() {
    return this._handshakeId;
  }
  get uri() {
    const _uri = this._formatUri();
    return _uri;
  }
  set uri(value) {
    if (!value) {
      return;
    }
    const {
      handshakeTopic,
      bridge,
      key
    } = this._parseUri(value);
    this.handshakeTopic = handshakeTopic;
    this.bridge = bridge;
    this.key = key;
  }
  set chainId(value) {
    this._chainId = value;
  }
  get chainId() {
    const chainId = this._chainId;
    return chainId;
  }
  set networkId(value) {
    this._networkId = value;
  }
  get networkId() {
    const networkId = this._networkId;
    return networkId;
  }
  set accounts(value) {
    this._accounts = value;
  }
  get accounts() {
    const accounts = this._accounts;
    return accounts;
  }
  set rpcUrl(value) {
    this._rpcUrl = value;
  }
  get rpcUrl() {
    const rpcUrl = this._rpcUrl;
    return rpcUrl;
  }
  set connected(value) {}
  get connected() {
    return this._connected;
  }
  set pending(value) {}
  get pending() {
    return !!this._handshakeTopic;
  }
  get session() {
    return {
      connected: this.connected,
      accounts: this.accounts,
      chainId: this.chainId,
      bridge: this.bridge,
      key: this.key,
      clientId: this.clientId,
      clientMeta: this.clientMeta,
      peerId: this.peerId,
      peerMeta: this.peerMeta,
      handshakeId: this.handshakeId,
      handshakeTopic: this.handshakeTopic
    };
  }
  set session(value) {
    if (!value) {
      return;
    }
    this._connected = value.connected;
    this.accounts = value.accounts;
    this.chainId = value.chainId;
    this.bridge = value.bridge;
    this.key = value.key;
    this.clientId = value.clientId;
    this.clientMeta = value.clientMeta;
    this.peerId = value.peerId;
    this.peerMeta = value.peerMeta;
    this.handshakeId = value.handshakeId;
    this.handshakeTopic = value.handshakeTopic;
  }
  on(event, callback) {
    const eventEmitter = {
      event,
      callback
    };
    this._eventManager.subscribe(eventEmitter);
  }
  off(event) {
    this._eventManager.unsubscribe(event);
  }
  async createInstantRequest(instantRequest) {
    this._key = await this._generateKey();
    const request = this._formatRequest({
      method: "wc_instantRequest",
      params: [{
        peerId: this.clientId,
        peerMeta: this.clientMeta,
        request: this._formatRequest(instantRequest)
      }]
    });
    this.handshakeId = request.id;
    this.handshakeTopic = (0, _utils.uuid)();
    this._eventManager.trigger({
      event: "display_uri",
      params: [this.uri]
    });
    this.on("modal_closed", () => {
      throw new Error(_errors.ERROR_QRCODE_MODAL_USER_CLOSED);
    });
    const endInstantRequest = () => {
      this.killSession();
    };
    try {
      const result = await this._sendCallRequest(request);
      if (result) {
        endInstantRequest();
      }
      return result;
    } catch (error) {
      endInstantRequest();
      throw error;
    }
  }
  async connect(opts) {
    if (!this._qrcodeModal) {
      throw new Error(_errors.ERROR_QRCODE_MODAL_NOT_PROVIDED);
    }
    if (this.connected) {
      return {
        chainId: this.chainId,
        accounts: this.accounts
      };
    }
    await this.createSession(opts);
    return new Promise(async (resolve, reject) => {
      this.on("modal_closed", () => reject(new Error(_errors.ERROR_QRCODE_MODAL_USER_CLOSED)));
      this.on("connect", (error, payload) => {
        if (error) {
          return reject(error);
        }
        resolve(payload.params[0]);
      });
    });
  }
  async createSession(opts) {
    if (this._connected) {
      throw new Error(_errors.ERROR_SESSION_CONNECTED);
    }
    if (this.pending) {
      return;
    }
    this._key = await this._generateKey();
    const request = this._formatRequest({
      method: "wc_sessionRequest",
      params: [{
        peerId: this.clientId,
        peerMeta: this.clientMeta,
        chainId: opts && opts.chainId ? opts.chainId : null
      }]
    });
    this.handshakeId = request.id;
    this.handshakeTopic = (0, _utils.uuid)();
    this._sendSessionRequest(request, "Session update rejected", {
      topic: this.handshakeTopic
    });
    this._eventManager.trigger({
      event: "display_uri",
      params: [this.uri]
    });
  }
  approveSession(sessionStatus) {
    if (this._connected) {
      throw new Error(_errors.ERROR_SESSION_CONNECTED);
    }
    this.chainId = sessionStatus.chainId;
    this.accounts = sessionStatus.accounts;
    this.networkId = sessionStatus.networkId || 0;
    this.rpcUrl = sessionStatus.rpcUrl || "";
    const sessionParams = {
      approved: true,
      chainId: this.chainId,
      networkId: this.networkId,
      accounts: this.accounts,
      rpcUrl: this.rpcUrl,
      peerId: this.clientId,
      peerMeta: this.clientMeta
    };
    const response = {
      id: this.handshakeId,
      jsonrpc: "2.0",
      result: sessionParams
    };
    this._sendResponse(response);
    this._connected = true;
    this._setStorageSession();
    this._eventManager.trigger({
      event: "connect",
      params: [{
        peerId: this.peerId,
        peerMeta: this.peerMeta,
        chainId: this.chainId,
        accounts: this.accounts
      }]
    });
  }
  rejectSession(sessionError) {
    if (this._connected) {
      throw new Error(_errors.ERROR_SESSION_CONNECTED);
    }
    const message = sessionError && sessionError.message ? sessionError.message : _errors.ERROR_SESSION_REJECTED;
    const response = this._formatResponse({
      id: this.handshakeId,
      error: {
        message
      }
    });
    this._sendResponse(response);
    this._connected = false;
    this._eventManager.trigger({
      event: "disconnect",
      params: [{
        message
      }]
    });
    this._removeStorageSession();
  }
  updateSession(sessionStatus) {
    if (!this._connected) {
      throw new Error(_errors.ERROR_SESSION_DISCONNECTED);
    }
    this.chainId = sessionStatus.chainId;
    this.accounts = sessionStatus.accounts;
    this.networkId = sessionStatus.networkId || 0;
    this.rpcUrl = sessionStatus.rpcUrl || "";
    const sessionParams = {
      approved: true,
      chainId: this.chainId,
      networkId: this.networkId,
      accounts: this.accounts,
      rpcUrl: this.rpcUrl
    };
    const request = this._formatRequest({
      method: "wc_sessionUpdate",
      params: [sessionParams]
    });
    this._sendSessionRequest(request, "Session update rejected");
    this._eventManager.trigger({
      event: "session_update",
      params: [{
        chainId: this.chainId,
        accounts: this.accounts
      }]
    });
    this._manageStorageSession();
  }
  async killSession(sessionError) {
    const message = sessionError ? sessionError.message : "Session Disconnected";
    const sessionParams = {
      approved: false,
      chainId: null,
      networkId: null,
      accounts: null
    };
    const request = this._formatRequest({
      method: "wc_sessionUpdate",
      params: [sessionParams]
    });
    await this._sendRequest(request);
    this._handleSessionDisconnect(message);
  }
  async sendTransaction(tx) {
    if (!this._connected) {
      throw new Error(_errors.ERROR_SESSION_DISCONNECTED);
    }
    const parsedTx = (0, _utils.parseTransactionData)(tx);
    const request = this._formatRequest({
      method: "eth_sendTransaction",
      params: [parsedTx]
    });
    const result = await this._sendCallRequest(request);
    return result;
  }
  async signTransaction(tx) {
    if (!this._connected) {
      throw new Error(_errors.ERROR_SESSION_DISCONNECTED);
    }
    const parsedTx = (0, _utils.parseTransactionData)(tx);
    const request = this._formatRequest({
      method: "eth_signTransaction",
      params: [parsedTx]
    });
    const result = await this._sendCallRequest(request);
    return result;
  }
  async signMessage(params) {
    if (!this._connected) {
      throw new Error(_errors.ERROR_SESSION_DISCONNECTED);
    }
    const request = this._formatRequest({
      method: "eth_sign",
      params
    });
    const result = await this._sendCallRequest(request);
    return result;
  }
  async signPersonalMessage(params) {
    if (!this._connected) {
      throw new Error(_errors.ERROR_SESSION_DISCONNECTED);
    }
    params = (0, _utils.parsePersonalSign)(params);
    const request = this._formatRequest({
      method: "personal_sign",
      params
    });
    const result = await this._sendCallRequest(request);
    return result;
  }
  async signTypedData(params) {
    if (!this._connected) {
      throw new Error(_errors.ERROR_SESSION_DISCONNECTED);
    }
    const request = this._formatRequest({
      method: "eth_signTypedData",
      params
    });
    const result = await this._sendCallRequest(request);
    return result;
  }
  async updateChain(chainParams) {
    if (!this._connected) {
      throw new Error("Session currently disconnected");
    }
    const request = this._formatRequest({
      method: "wallet_updateChain",
      params: [chainParams]
    });
    const result = await this._sendCallRequest(request);
    return result;
  }
  unsafeSend(request, options) {
    this._sendRequest(request, options);
    this._eventManager.trigger({
      event: "call_request_sent",
      params: [{
        request,
        options
      }]
    });
    return new Promise((resolve, reject) => {
      this._subscribeToResponse(request.id, (error, payload) => {
        if (error) {
          reject(error);
          return;
        }
        if (!payload) {
          throw new Error(_errors.ERROR_MISSING_JSON_RPC);
        }
        resolve(payload);
      });
    });
  }
  async sendCustomRequest(request, options) {
    if (!this._connected) {
      throw new Error(_errors.ERROR_SESSION_DISCONNECTED);
    }
    switch (request.method) {
      case "eth_accounts":
        return this.accounts;
      case "eth_chainId":
        return (0, _utils.convertNumberToHex)(this.chainId);
      case "eth_sendTransaction":
      case "eth_signTransaction":
        if (request.params) {
          request.params[0] = (0, _utils.parseTransactionData)(request.params[0]);
        }
        break;
      case "personal_sign":
        if (request.params) {
          request.params = (0, _utils.parsePersonalSign)(request.params);
        }
        break;
      default:
        break;
    }
    const formattedRequest = this._formatRequest(request);
    const result = await this._sendCallRequest(formattedRequest, options);
    return result;
  }
  approveRequest(response) {
    if ((0, _utils.isJsonRpcResponseSuccess)(response)) {
      const formattedResponse = this._formatResponse(response);
      this._sendResponse(formattedResponse);
    } else {
      throw new Error(_errors.ERROR_MISSING_RESULT);
    }
  }
  rejectRequest(response) {
    if ((0, _utils.isJsonRpcResponseError)(response)) {
      const formattedResponse = this._formatResponse(response);
      this._sendResponse(formattedResponse);
    } else {
      throw new Error(_errors.ERROR_MISSING_ERROR);
    }
  }
  transportClose() {
    this._transport.close();
  }
  async _sendRequest(request, options) {
    const callRequest = this._formatRequest(request);
    const encryptionPayload = await this._encrypt(callRequest);
    const topic = typeof (options === null || options === void 0 ? void 0 : options.topic) !== "undefined" ? options.topic : this.peerId;
    const payload = JSON.stringify(encryptionPayload);
    const silent = typeof (options === null || options === void 0 ? void 0 : options.forcePushNotification) !== "undefined" ? !options.forcePushNotification : (0, _utils.isSilentPayload)(callRequest);
    this._transport.send(payload, topic, silent);
  }
  async _sendResponse(response) {
    const encryptionPayload = await this._encrypt(response);
    const topic = this.peerId;
    const payload = JSON.stringify(encryptionPayload);
    const silent = true;
    this._transport.send(payload, topic, silent);
  }
  async _sendSessionRequest(request, errorMsg, options) {
    this._sendRequest(request, options);
    this._subscribeToSessionResponse(request.id, errorMsg);
  }
  _sendCallRequest(request, options) {
    this._sendRequest(request, options);
    this._eventManager.trigger({
      event: "call_request_sent",
      params: [{
        request,
        options
      }]
    });
    return this._subscribeToCallResponse(request.id);
  }
  _formatRequest(request) {
    if (typeof request.method === "undefined") {
      throw new Error(_errors.ERROR_MISSING_METHOD);
    }
    const formattedRequest = {
      id: typeof request.id === "undefined" ? (0, _utils.payloadId)() : request.id,
      jsonrpc: "2.0",
      method: request.method,
      params: typeof request.params === "undefined" ? [] : request.params
    };
    return formattedRequest;
  }
  _formatResponse(response) {
    if (typeof response.id === "undefined") {
      throw new Error(_errors.ERROR_MISSING_ID);
    }
    const baseResponse = {
      id: response.id,
      jsonrpc: "2.0"
    };
    if ((0, _utils.isJsonRpcResponseError)(response)) {
      const error = (0, _utils.formatRpcError)(response.error);
      const errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), {
        error
      });
      return errorResponse;
    } else if ((0, _utils.isJsonRpcResponseSuccess)(response)) {
      const successResponse = Object.assign(Object.assign({}, baseResponse), response);
      return successResponse;
    }
    throw new Error(_errors.ERROR_INVALID_RESPONSE);
  }
  _handleSessionDisconnect(errorMsg) {
    const message = errorMsg || "Session Disconnected";
    if (!this._connected) {
      if (this._qrcodeModal) {
        this._qrcodeModal.close();
      }
      (0, _utils.removeLocal)(_utils.mobileLinkChoiceKey);
    }
    if (this._connected) {
      this._connected = false;
    }
    if (this._handshakeId) {
      this._handshakeId = 0;
    }
    if (this._handshakeTopic) {
      this._handshakeTopic = "";
    }
    if (this._peerId) {
      this._peerId = "";
    }
    this._eventManager.trigger({
      event: "disconnect",
      params: [{
        message
      }]
    });
    this._removeStorageSession();
    this.transportClose();
  }
  _handleSessionResponse(errorMsg, sessionParams) {
    if (sessionParams) {
      if (sessionParams.approved) {
        if (!this._connected) {
          this._connected = true;
          if (sessionParams.chainId) {
            this.chainId = sessionParams.chainId;
          }
          if (sessionParams.accounts) {
            this.accounts = sessionParams.accounts;
          }
          if (sessionParams.peerId && !this.peerId) {
            this.peerId = sessionParams.peerId;
          }
          if (sessionParams.peerMeta && !this.peerMeta) {
            this.peerMeta = sessionParams.peerMeta;
          }
          this._eventManager.trigger({
            event: "connect",
            params: [{
              peerId: this.peerId,
              peerMeta: this.peerMeta,
              chainId: this.chainId,
              accounts: this.accounts
            }]
          });
        } else {
          if (sessionParams.chainId) {
            this.chainId = sessionParams.chainId;
          }
          if (sessionParams.accounts) {
            this.accounts = sessionParams.accounts;
          }
          this._eventManager.trigger({
            event: "session_update",
            params: [{
              chainId: this.chainId,
              accounts: this.accounts
            }]
          });
        }
        this._manageStorageSession();
      } else {
        this._handleSessionDisconnect(errorMsg);
      }
    } else {
      this._handleSessionDisconnect(errorMsg);
    }
  }
  async _handleIncomingMessages(socketMessage) {
    const activeTopics = [this.clientId, this.handshakeTopic];
    if (!activeTopics.includes(socketMessage.topic)) {
      return;
    }
    let encryptionPayload;
    try {
      encryptionPayload = JSON.parse(socketMessage.payload);
    } catch (error) {
      return;
    }
    const payload = await this._decrypt(encryptionPayload);
    if (payload) {
      this._eventManager.trigger(payload);
    }
  }
  _subscribeToSessionRequest() {
    this._transport.subscribe(this.handshakeTopic);
  }
  _subscribeToResponse(id, callback) {
    this.on(`response:${id}`, callback);
  }
  _subscribeToSessionResponse(id, errorMsg) {
    this._subscribeToResponse(id, (error, payload) => {
      if (error) {
        this._handleSessionResponse(error.message);
        return;
      }
      if ((0, _utils.isJsonRpcResponseSuccess)(payload)) {
        this._handleSessionResponse(errorMsg, payload.result);
      } else if (payload.error && payload.error.message) {
        this._handleSessionResponse(payload.error.message);
      } else {
        this._handleSessionResponse(errorMsg);
      }
    });
  }
  _subscribeToCallResponse(id) {
    return new Promise((resolve, reject) => {
      this._subscribeToResponse(id, (error, payload) => {
        if (error) {
          reject(error);
          return;
        }
        if ((0, _utils.isJsonRpcResponseSuccess)(payload)) {
          resolve(payload.result);
        } else if (payload.error && payload.error.message) {
          reject(payload.error);
        } else {
          reject(new Error(_errors.ERROR_INVALID_RESPONSE));
        }
      });
    });
  }
  _subscribeToInternalEvents() {
    this.on("display_uri", () => {
      if (this._qrcodeModal) {
        this._qrcodeModal.open(this.uri, () => {
          this._eventManager.trigger({
            event: "modal_closed",
            params: []
          });
        }, this._qrcodeModalOptions);
      }
    });
    this.on("connect", () => {
      if (this._qrcodeModal) {
        this._qrcodeModal.close();
      }
    });
    this.on("call_request_sent", (error, payload) => {
      const {
        request
      } = payload.params[0];
      if ((0, _utils.isMobile)() && this._signingMethods.includes(request.method)) {
        const mobileLinkUrl = (0, _utils.getLocal)(_utils.mobileLinkChoiceKey);
        if (mobileLinkUrl) {
          window.location.href = mobileLinkUrl.href;
        }
      }
    });
    this.on("wc_sessionRequest", (error, payload) => {
      if (error) {
        this._eventManager.trigger({
          event: "error",
          params: [{
            code: "SESSION_REQUEST_ERROR",
            message: error.toString()
          }]
        });
      }
      this.handshakeId = payload.id;
      this.peerId = payload.params[0].peerId;
      this.peerMeta = payload.params[0].peerMeta;
      const internalPayload = Object.assign(Object.assign({}, payload), {
        method: "session_request"
      });
      this._eventManager.trigger(internalPayload);
    });
    this.on("wc_sessionUpdate", (error, payload) => {
      if (error) {
        this._handleSessionResponse(error.message);
      }
      this._handleSessionResponse("Session disconnected", payload.params[0]);
    });
  }
  _initTransport() {
    this._transport.on("message", socketMessage => this._handleIncomingMessages(socketMessage));
    this._transport.on("open", () => this._eventManager.trigger({
      event: "transport_open",
      params: []
    }));
    this._transport.on("close", () => this._eventManager.trigger({
      event: "transport_close",
      params: []
    }));
    this._transport.on("error", () => this._eventManager.trigger({
      event: "transport_error",
      params: ["Websocket connection failed"]
    }));
    this._transport.open();
  }
  _formatUri() {
    const protocol = this.protocol;
    const handshakeTopic = this.handshakeTopic;
    const version = this.version;
    const bridge = encodeURIComponent(this.bridge);
    const key = this.key;
    const uri = `${protocol}:${handshakeTopic}@${version}?bridge=${bridge}&key=${key}`;
    return uri;
  }
  _parseUri(uri) {
    const result = (0, _utils.parseWalletConnectUri)(uri);
    if (result.protocol === this.protocol) {
      if (!result.handshakeTopic) {
        throw Error("Invalid or missing handshakeTopic parameter value");
      }
      const handshakeTopic = result.handshakeTopic;
      if (!result.bridge) {
        throw Error("Invalid or missing bridge url parameter value");
      }
      const bridge = decodeURIComponent(result.bridge);
      if (!result.key) {
        throw Error("Invalid or missing key parameter value");
      }
      const key = result.key;
      return {
        handshakeTopic,
        bridge,
        key
      };
    } else {
      throw new Error(_errors.ERROR_INVALID_URI);
    }
  }
  async _generateKey() {
    if (this._cryptoLib) {
      const result = await this._cryptoLib.generateKey();
      return result;
    }
    return null;
  }
  async _encrypt(data) {
    const key = this._key;
    if (this._cryptoLib && key) {
      const result = await this._cryptoLib.encrypt(data, key);
      return result;
    }
    return null;
  }
  async _decrypt(payload) {
    const key = this._key;
    if (this._cryptoLib && key) {
      const result = await this._cryptoLib.decrypt(payload, key);
      return result;
    }
    return null;
  }
  _getStorageSession() {
    let result = null;
    if (this._sessionStorage) {
      result = this._sessionStorage.getSession();
    }
    return result;
  }
  _setStorageSession() {
    if (this._sessionStorage) {
      this._sessionStorage.setSession(this.session);
    }
  }
  _removeStorageSession() {
    if (this._sessionStorage) {
      this._sessionStorage.removeSession();
    }
  }
  _manageStorageSession() {
    if (this._connected) {
      this._setStorageSession();
    } else {
      this._removeStorageSession();
    }
  }
  _registerPushServer(pushServerOpts) {
    if (!pushServerOpts.url || typeof pushServerOpts.url !== "string") {
      throw Error("Invalid or missing pushServerOpts.url parameter value");
    }
    if (!pushServerOpts.type || typeof pushServerOpts.type !== "string") {
      throw Error("Invalid or missing pushServerOpts.type parameter value");
    }
    if (!pushServerOpts.token || typeof pushServerOpts.token !== "string") {
      throw Error("Invalid or missing pushServerOpts.token parameter value");
    }
    const pushSubscription = {
      bridge: this.bridge,
      topic: this.clientId,
      type: pushServerOpts.type,
      token: pushServerOpts.token,
      peerName: "",
      language: pushServerOpts.language || ""
    };
    this.on("connect", async (error, payload) => {
      if (error) {
        throw error;
      }
      if (pushServerOpts.peerMeta) {
        const peerName = payload.params[0].peerMeta.name;
        pushSubscription.peerName = peerName;
      }
      try {
        const response = await fetch(`${pushServerOpts.url}/new`, {
          method: "POST",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json"
          },
          body: JSON.stringify(pushSubscription)
        });
        const json = await response.json();
        if (!json.success) {
          throw Error("Failed to register in Push Server");
        }
      } catch (error) {
        throw Error("Failed to register in Push Server");
      }
    });
  }
}
var _default = Connector;
exports.default = _default;
},{"@walletconnect/utils":"node_modules/@walletconnect/utils/dist/esm/index.js","@walletconnect/socket-transport":"node_modules/@walletconnect/socket-transport/dist/esm/index.js","./errors":"node_modules/@walletconnect/core/dist/esm/errors.js","./events":"node_modules/@walletconnect/core/dist/esm/events.js","./storage":"node_modules/@walletconnect/core/dist/esm/storage.js","./url":"node_modules/@walletconnect/core/dist/esm/url.js"}],"node_modules/@walletconnect/randombytes/dist/esm/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomBytes = randomBytes;
var env = _interopRequireWildcard(require("@walletconnect/environment"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function randomBytes(length) {
  const browserCrypto = env.getBrowerCrypto();
  return browserCrypto.getRandomValues(new Uint8Array(length));
}
},{"@walletconnect/environment":"node_modules/@walletconnect/environment/dist/cjs/index.js"}],"node_modules/@walletconnect/crypto/dist/esm/constants/length.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LENGTH_64 = exports.LENGTH_512 = exports.LENGTH_32 = exports.LENGTH_256 = exports.LENGTH_16 = exports.LENGTH_128 = exports.LENGTH_1024 = exports.LENGTH_1 = exports.LENGTH_0 = void 0;
const LENGTH_0 = 0;
exports.LENGTH_0 = LENGTH_0;
const LENGTH_1 = 1;
exports.LENGTH_1 = LENGTH_1;
const LENGTH_16 = 16;
exports.LENGTH_16 = LENGTH_16;
const LENGTH_32 = 32;
exports.LENGTH_32 = LENGTH_32;
const LENGTH_64 = 64;
exports.LENGTH_64 = LENGTH_64;
const LENGTH_128 = 128;
exports.LENGTH_128 = LENGTH_128;
const LENGTH_256 = 256;
exports.LENGTH_256 = LENGTH_256;
const LENGTH_512 = 512;
exports.LENGTH_512 = LENGTH_512;
const LENGTH_1024 = 1024;
exports.LENGTH_1024 = LENGTH_1024;
},{}],"node_modules/@walletconnect/crypto/dist/esm/constants/default.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SHA512_NODE_ALGO = exports.SHA512_BROWSER_ALGO = exports.SHA256_NODE_ALGO = exports.SHA256_BROWSER_ALGO = exports.RIPEMD160_NODE_ALGO = exports.PREFIX_LENGTH = exports.MAC_LENGTH = exports.KEY_LENGTH = exports.IV_LENGTH = exports.HMAC_NODE_ALGO = exports.HMAC_LENGTH = exports.HMAC_BROWSER_ALGO = exports.HMAC_BROWSER = exports.AES_NODE_ALGO = exports.AES_LENGTH = exports.AES_BROWSER_ALGO = void 0;
var _length = require("./length");
const AES_LENGTH = _length.LENGTH_256;
exports.AES_LENGTH = AES_LENGTH;
const HMAC_LENGTH = _length.LENGTH_256;
exports.HMAC_LENGTH = HMAC_LENGTH;
const AES_BROWSER_ALGO = "AES-CBC";
exports.AES_BROWSER_ALGO = AES_BROWSER_ALGO;
const HMAC_BROWSER_ALGO = `SHA-${AES_LENGTH}`;
exports.HMAC_BROWSER_ALGO = HMAC_BROWSER_ALGO;
const HMAC_BROWSER = "HMAC";
exports.HMAC_BROWSER = HMAC_BROWSER;
const SHA256_BROWSER_ALGO = "SHA-256";
exports.SHA256_BROWSER_ALGO = SHA256_BROWSER_ALGO;
const SHA512_BROWSER_ALGO = "SHA-512";
exports.SHA512_BROWSER_ALGO = SHA512_BROWSER_ALGO;
const AES_NODE_ALGO = `aes-${AES_LENGTH}-cbc`;
exports.AES_NODE_ALGO = AES_NODE_ALGO;
const HMAC_NODE_ALGO = `sha${HMAC_LENGTH}`;
exports.HMAC_NODE_ALGO = HMAC_NODE_ALGO;
const SHA256_NODE_ALGO = "sha256";
exports.SHA256_NODE_ALGO = SHA256_NODE_ALGO;
const SHA512_NODE_ALGO = "sha512";
exports.SHA512_NODE_ALGO = SHA512_NODE_ALGO;
const RIPEMD160_NODE_ALGO = "ripemd160";
exports.RIPEMD160_NODE_ALGO = RIPEMD160_NODE_ALGO;
const PREFIX_LENGTH = _length.LENGTH_1;
exports.PREFIX_LENGTH = PREFIX_LENGTH;
const KEY_LENGTH = _length.LENGTH_32;
exports.KEY_LENGTH = KEY_LENGTH;
const IV_LENGTH = _length.LENGTH_16;
exports.IV_LENGTH = IV_LENGTH;
const MAC_LENGTH = _length.LENGTH_32;
exports.MAC_LENGTH = MAC_LENGTH;
},{"./length":"node_modules/@walletconnect/crypto/dist/esm/constants/length.js"}],"node_modules/@walletconnect/crypto/dist/esm/constants/encoding.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UTF8_ENC = exports.HEX_ENC = void 0;
const HEX_ENC = "hex";
exports.HEX_ENC = HEX_ENC;
const UTF8_ENC = "utf8";
exports.UTF8_ENC = UTF8_ENC;
},{}],"node_modules/@walletconnect/crypto/dist/esm/constants/error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ERROR_BAD_MAC = void 0;
const ERROR_BAD_MAC = "Bad MAC";
exports.ERROR_BAD_MAC = ERROR_BAD_MAC;
},{}],"node_modules/@walletconnect/crypto/dist/esm/constants/operations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VERIFY_OP = exports.SIGN_OP = exports.ENCRYPT_OP = exports.DECRYPT_OP = void 0;
const ENCRYPT_OP = "encrypt";
exports.ENCRYPT_OP = ENCRYPT_OP;
const DECRYPT_OP = "decrypt";
exports.DECRYPT_OP = DECRYPT_OP;
const SIGN_OP = "sign";
exports.SIGN_OP = SIGN_OP;
const VERIFY_OP = "verify";
exports.VERIFY_OP = VERIFY_OP;
},{}],"node_modules/@walletconnect/crypto/dist/esm/constants/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _default = require("./default");
Object.keys(_default).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _default[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _default[key];
    }
  });
});
var _encoding = require("./encoding");
Object.keys(_encoding).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _encoding[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _encoding[key];
    }
  });
});
var _error = require("./error");
Object.keys(_error).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _error[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _error[key];
    }
  });
});
var _length = require("./length");
Object.keys(_length).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _length[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _length[key];
    }
  });
});
var _operations = require("./operations");
Object.keys(_operations).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _operations[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _operations[key];
    }
  });
});
},{"./default":"node_modules/@walletconnect/crypto/dist/esm/constants/default.js","./encoding":"node_modules/@walletconnect/crypto/dist/esm/constants/encoding.js","./error":"node_modules/@walletconnect/crypto/dist/esm/constants/error.js","./length":"node_modules/@walletconnect/crypto/dist/esm/constants/length.js","./operations":"node_modules/@walletconnect/crypto/dist/esm/constants/operations.js"}],"node_modules/@walletconnect/crypto/dist/esm/lib/browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.browserAesDecrypt = browserAesDecrypt;
exports.browserAesEncrypt = browserAesEncrypt;
exports.browserExportKey = browserExportKey;
exports.browserHmacSha256Sign = browserHmacSha256Sign;
exports.browserHmacSha512Sign = browserHmacSha512Sign;
exports.browserImportKey = browserImportKey;
exports.browserSha256 = browserSha256;
exports.browserSha512 = browserSha512;
exports.getAlgo = getAlgo;
exports.getOps = getOps;
var env = _interopRequireWildcard(require("@walletconnect/environment"));
var _constants = require("../constants");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function getAlgo(type) {
  return type === _constants.AES_BROWSER_ALGO ? {
    length: _constants.AES_LENGTH,
    name: _constants.AES_BROWSER_ALGO
  } : {
    hash: {
      name: _constants.HMAC_BROWSER_ALGO
    },
    name: _constants.HMAC_BROWSER
  };
}
function getOps(type) {
  return type === _constants.AES_BROWSER_ALGO ? [_constants.ENCRYPT_OP, _constants.DECRYPT_OP] : [_constants.SIGN_OP, _constants.VERIFY_OP];
}
async function browserExportKey(cryptoKey, type = _constants.AES_BROWSER_ALGO) {
  const subtle = env.getSubtleCrypto();
  return new Uint8Array(await subtle.exportKey("raw", cryptoKey));
}
async function browserImportKey(buffer, type = _constants.AES_BROWSER_ALGO) {
  return env.getSubtleCrypto().importKey("raw", buffer, getAlgo(type), true, getOps(type));
}
async function browserAesEncrypt(iv, key, data) {
  const subtle = env.getSubtleCrypto();
  const cryptoKey = await browserImportKey(key, _constants.AES_BROWSER_ALGO);
  const result = await subtle.encrypt({
    iv,
    name: _constants.AES_BROWSER_ALGO
  }, cryptoKey, data);
  return new Uint8Array(result);
}
async function browserAesDecrypt(iv, key, data) {
  const subtle = env.getSubtleCrypto();
  const cryptoKey = await browserImportKey(key, _constants.AES_BROWSER_ALGO);
  const result = await subtle.decrypt({
    iv,
    name: _constants.AES_BROWSER_ALGO
  }, cryptoKey, data);
  return new Uint8Array(result);
}
async function browserHmacSha256Sign(key, data) {
  const subtle = env.getSubtleCrypto();
  const cryptoKey = await browserImportKey(key, _constants.HMAC_BROWSER);
  const signature = await subtle.sign({
    length: _constants.HMAC_LENGTH,
    name: _constants.HMAC_BROWSER
  }, cryptoKey, data);
  return new Uint8Array(signature);
}
async function browserHmacSha512Sign(key, data) {
  const subtle = env.getSubtleCrypto();
  const cryptoKey = await browserImportKey(key, _constants.HMAC_BROWSER);
  const signature = await subtle.sign({
    length: _constants.LENGTH_512,
    name: _constants.HMAC_BROWSER
  }, cryptoKey, data);
  return new Uint8Array(signature);
}
async function browserSha256(data) {
  const subtle = env.getSubtleCrypto();
  const result = await subtle.digest({
    name: _constants.SHA256_BROWSER_ALGO
  }, data);
  return new Uint8Array(result);
}
async function browserSha512(data) {
  const subtle = env.getSubtleCrypto();
  const result = await subtle.digest({
    name: _constants.SHA512_BROWSER_ALGO
  }, data);
  return new Uint8Array(result);
}
},{"@walletconnect/environment":"node_modules/@walletconnect/environment/dist/cjs/index.js","../constants":"node_modules/@walletconnect/crypto/dist/esm/constants/index.js"}],"node_modules/@walletconnect/crypto/dist/esm/browser/aes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.aesCbcDecrypt = aesCbcDecrypt;
exports.aesCbcEncrypt = aesCbcEncrypt;
var _browser = require("../lib/browser");
function aesCbcEncrypt(iv, key, data) {
  return (0, _browser.browserAesEncrypt)(iv, key, data);
}
function aesCbcDecrypt(iv, key, data) {
  return (0, _browser.browserAesDecrypt)(iv, key, data);
}
},{"../lib/browser":"node_modules/@walletconnect/crypto/dist/esm/lib/browser.js"}],"node_modules/@walletconnect/crypto/dist/esm/helpers/env.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _environment = require("@walletconnect/environment");
Object.keys(_environment).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _environment[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _environment[key];
    }
  });
});
},{"@walletconnect/environment":"node_modules/@walletconnect/environment/dist/cjs/index.js"}],"node_modules/@walletconnect/crypto/dist/esm/helpers/pkcs7.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pkcs7 = void 0;
const PADDING = [[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16], [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15], [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14], [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13], [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12], [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [9, 9, 9, 9, 9, 9, 9, 9, 9], [8, 8, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5], [4, 4, 4, 4], [3, 3, 3], [2, 2], [1]];
const pkcs7 = {
  pad(plaintext) {
    const padding = PADDING[plaintext.byteLength % 16 || 0];
    const result = new Uint8Array(plaintext.byteLength + padding.length);
    result.set(plaintext);
    result.set(padding, plaintext.byteLength);
    return result;
  },
  unpad(padded) {
    return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);
  }
};
exports.pkcs7 = pkcs7;
},{}],"node_modules/@walletconnect/crypto/dist/esm/helpers/types.js":[function(require,module,exports) {

},{}],"node_modules/@walletconnect/crypto/dist/esm/helpers/validators.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assert = assert;
exports.isConstantTime = isConstantTime;
function assert(condition, message) {
  if (!condition) {
    throw new Error(message || "Assertion failed");
  }
}
function isConstantTime(arr1, arr2) {
  if (arr1.length !== arr2.length) {
    return false;
  }
  let res = 0;
  for (let i = 0; i < arr1.length; i++) {
    res |= arr1[i] ^ arr2[i];
  }
  return res === 0;
}
},{}],"node_modules/@walletconnect/crypto/dist/esm/helpers/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _env = require("./env");
Object.keys(_env).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _env[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _env[key];
    }
  });
});
var _pkcs = require("./pkcs7");
Object.keys(_pkcs).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _pkcs[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pkcs[key];
    }
  });
});
var _types = require("./types");
Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});
var _validators = require("./validators");
Object.keys(_validators).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _validators[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _validators[key];
    }
  });
});
},{"./env":"node_modules/@walletconnect/crypto/dist/esm/helpers/env.js","./pkcs7":"node_modules/@walletconnect/crypto/dist/esm/helpers/pkcs7.js","./types":"node_modules/@walletconnect/crypto/dist/esm/helpers/types.js","./validators":"node_modules/@walletconnect/crypto/dist/esm/helpers/validators.js"}],"node_modules/@walletconnect/crypto/dist/esm/browser/hmac.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hmacSha256Sign = hmacSha256Sign;
exports.hmacSha256Verify = hmacSha256Verify;
exports.hmacSha512Sign = hmacSha512Sign;
exports.hmacSha512Verify = hmacSha512Verify;
var _browser = require("../lib/browser");
var _helpers = require("../helpers");
async function hmacSha256Sign(key, msg) {
  const result = await (0, _browser.browserHmacSha256Sign)(key, msg);
  return result;
}
async function hmacSha256Verify(key, msg, sig) {
  const expectedSig = await (0, _browser.browserHmacSha256Sign)(key, msg);
  const result = (0, _helpers.isConstantTime)(expectedSig, sig);
  return result;
}
async function hmacSha512Sign(key, msg) {
  const result = await (0, _browser.browserHmacSha512Sign)(key, msg);
  return result;
}
async function hmacSha512Verify(key, msg, sig) {
  const expectedSig = await (0, _browser.browserHmacSha512Sign)(key, msg);
  const result = (0, _helpers.isConstantTime)(expectedSig, sig);
  return result;
}
},{"../lib/browser":"node_modules/@walletconnect/crypto/dist/esm/lib/browser.js","../helpers":"node_modules/@walletconnect/crypto/dist/esm/helpers/index.js"}],"node_modules/@walletconnect/crypto/dist/esm/browser/sha2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ripemd160 = ripemd160;
exports.sha256 = sha256;
exports.sha512 = sha512;
var _browser = require("../lib/browser");
async function sha256(msg) {
  const result = await (0, _browser.browserSha256)(msg);
  return result;
}
async function sha512(msg) {
  const result = await (0, _browser.browserSha512)(msg);
  return result;
}
async function ripemd160(msg) {
  throw new Error("Not supported for Browser async methods, use sync instead!");
}
},{"../lib/browser":"node_modules/@walletconnect/crypto/dist/esm/lib/browser.js"}],"node_modules/@walletconnect/crypto/dist/esm/browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _randombytes = require("@walletconnect/randombytes");
Object.keys(_randombytes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _randombytes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _randombytes[key];
    }
  });
});
var _aes = require("./aes");
Object.keys(_aes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _aes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _aes[key];
    }
  });
});
var _hmac = require("./hmac");
Object.keys(_hmac).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _hmac[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _hmac[key];
    }
  });
});
var _sha = require("./sha2");
Object.keys(_sha).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _sha[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _sha[key];
    }
  });
});
var _helpers = require("../helpers");
Object.keys(_helpers).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _helpers[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _helpers[key];
    }
  });
});
var _constants = require("../constants");
Object.keys(_constants).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _constants[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constants[key];
    }
  });
});
},{"@walletconnect/randombytes":"node_modules/@walletconnect/randombytes/dist/esm/browser/index.js","./aes":"node_modules/@walletconnect/crypto/dist/esm/browser/aes.js","./hmac":"node_modules/@walletconnect/crypto/dist/esm/browser/hmac.js","./sha2":"node_modules/@walletconnect/crypto/dist/esm/browser/sha2.js","../helpers":"node_modules/@walletconnect/crypto/dist/esm/helpers/index.js","../constants":"node_modules/@walletconnect/crypto/dist/esm/constants/index.js"}],"node_modules/@walletconnect/iso-crypto/dist/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decrypt = decrypt;
exports.encrypt = encrypt;
exports.generateKey = generateKey;
exports.verifyHmac = verifyHmac;
var crypto = _interopRequireWildcard(require("@walletconnect/crypto"));
var encoding = _interopRequireWildcard(require("@walletconnect/encoding"));
var _utils = require("@walletconnect/utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
async function generateKey(length) {
  const _length = (length || 256) / 8;
  const bytes = crypto.randomBytes(_length);
  const result = (0, _utils.convertBufferToArrayBuffer)(encoding.arrayToBuffer(bytes));
  return result;
}
async function verifyHmac(payload, key) {
  const cipherText = encoding.hexToArray(payload.data);
  const iv = encoding.hexToArray(payload.iv);
  const hmac = encoding.hexToArray(payload.hmac);
  const hmacHex = encoding.arrayToHex(hmac, false);
  const unsigned = encoding.concatArrays(cipherText, iv);
  const chmac = await crypto.hmacSha256Sign(key, unsigned);
  const chmacHex = encoding.arrayToHex(chmac, false);
  if (encoding.removeHexPrefix(hmacHex) === encoding.removeHexPrefix(chmacHex)) {
    return true;
  }
  return false;
}
async function encrypt(data, key, providedIv) {
  const _key = encoding.bufferToArray((0, _utils.convertArrayBufferToBuffer)(key));
  const ivArrayBuffer = providedIv || (await generateKey(128));
  const iv = encoding.bufferToArray((0, _utils.convertArrayBufferToBuffer)(ivArrayBuffer));
  const ivHex = encoding.arrayToHex(iv, false);
  const contentString = JSON.stringify(data);
  const content = encoding.utf8ToArray(contentString);
  const cipherText = await crypto.aesCbcEncrypt(iv, _key, content);
  const cipherTextHex = encoding.arrayToHex(cipherText, false);
  const unsigned = encoding.concatArrays(cipherText, iv);
  const hmac = await crypto.hmacSha256Sign(_key, unsigned);
  const hmacHex = encoding.arrayToHex(hmac, false);
  return {
    data: cipherTextHex,
    hmac: hmacHex,
    iv: ivHex
  };
}
async function decrypt(payload, key) {
  const _key = encoding.bufferToArray((0, _utils.convertArrayBufferToBuffer)(key));
  if (!_key) {
    throw new Error("Missing key: required for decryption");
  }
  const verified = await verifyHmac(payload, _key);
  if (!verified) {
    return null;
  }
  const cipherText = encoding.hexToArray(payload.data);
  const iv = encoding.hexToArray(payload.iv);
  const buffer = await crypto.aesCbcDecrypt(iv, _key, cipherText);
  const utf8 = encoding.arrayToUtf8(buffer);
  let data;
  try {
    data = JSON.parse(utf8);
  } catch (error) {
    return null;
  }
  return data;
}
},{"@walletconnect/crypto":"node_modules/@walletconnect/crypto/dist/esm/browser/index.js","@walletconnect/encoding":"node_modules/@walletconnect/encoding/dist/esm/index.js","@walletconnect/utils":"node_modules/@walletconnect/utils/dist/esm/index.js"}],"node_modules/@walletconnect/client/dist/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _core = _interopRequireDefault(require("@walletconnect/core"));
var cryptoLib = _interopRequireWildcard(require("@walletconnect/iso-crypto"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class WalletConnect extends _core.default {
  constructor(connectorOpts, pushServerOpts) {
    super({
      cryptoLib,
      connectorOpts,
      pushServerOpts
    });
  }
}
var _default = WalletConnect;
exports.default = _default;
},{"@walletconnect/core":"node_modules/@walletconnect/core/dist/esm/index.js","@walletconnect/iso-crypto":"node_modules/@walletconnect/iso-crypto/dist/esm/index.js"}],"node_modules/qrcode/lib/can-promise.js":[function(require,module,exports) {
// can-promise has a crash in some versions of react native that dont have
// standard global objects
// https://github.com/soldair/node-qrcode/issues/157

module.exports = function () {
  return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then;
};
},{}],"node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"node_modules/qrcode/lib/utils/typedarray-buffer.js":[function(require,module,exports) {

/**
 * Implementation of a subset of node.js Buffer methods for the browser.
 * Based on https://github.com/feross/buffer
 */

/* eslint-disable no-proto */

'use strict';

var isArray = require('isarray');
function typedArraySupport() {
  // Can typed array instances be augmented?
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function () {
        return 42;
      }
    };
    return arr.foo() === 42;
  } catch (e) {
    return false;
  }
}
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
var K_MAX_LENGTH = Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
function Buffer(arg, offset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, offset, length);
  }
  if (typeof arg === 'number') {
    return allocUnsafe(this, arg);
  }
  return from(this, arg, offset, length);
}
if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;

  // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true,
      enumerable: false,
      writable: false
    });
  }
}
function checked(length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
  }
  return length | 0;
}
function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}

function createBuffer(that, length) {
  var buf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    buf = new Uint8Array(length);
    buf.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    buf = that;
    if (buf === null) {
      buf = new Buffer(length);
    }
    buf.length = length;
  }
  return buf;
}
function allocUnsafe(that, size) {
  var buf = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      buf[i] = 0;
    }
  }
  return buf;
}
function fromString(that, string) {
  var length = byteLength(string) | 0;
  var buf = createBuffer(that, length);
  var actual = buf.write(string);
  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
  }
  return buf;
}
function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  var buf = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255;
  }
  return buf;
}
function fromArrayBuffer(that, array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }
  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }
  var buf;
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array);
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset);
  } else {
    buf = new Uint8Array(array, byteOffset, length);
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    buf.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    buf = fromArrayLike(that, buf);
  }
  return buf;
}
function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    var buf = createBuffer(that, len);
    if (buf.length === 0) {
      return buf;
    }
    obj.copy(buf, 0, 0, len);
    return buf;
  }
  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }
  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}
function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];
  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;
        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }
    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }
  return bytes;
}
function byteLength(string) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }
  var len = string.length;
  if (len === 0) return 0;
  return utf8ToBytes(string).length;
}
function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}
function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function from(that, value, offset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, offset, length);
  }
  if (typeof value === 'string') {
    return fromString(that, value, offset);
  }
  return fromObject(that, value);
}
Buffer.prototype.write = function write(string, offset, length) {
  // Buffer#write(string)
  if (offset === undefined) {
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
    } else {
      length = undefined;
    }
  }
  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;
  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }
  return utf8Write(this, string, offset, length);
};
Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;
  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }
  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }
  if (end < start) end = start;
  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }
  return newBuf;
};
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }
  var len = end - start;
  var i;
  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }
  return len;
};
Buffer.prototype.fill = function fill(val, start, end) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }
  if (end <= start) {
    return this;
  }
  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : new Buffer(val);
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }
  return this;
};
Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }
  if (list.length === 0) {
    return createBuffer(null, 0);
  }
  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }
  var buffer = allocUnsafe(null, length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};
Buffer.byteLength = byteLength;
Buffer.prototype._isBuffer = true;
Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};
module.exports.alloc = function (size) {
  var buffer = new Buffer(size);
  buffer.fill(0);
  return buffer;
};
module.exports.from = function (data) {
  return new Buffer(data);
};
},{"isarray":"node_modules/isarray/index.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/qrcode/lib/core/utils.js":[function(require,module,exports) {
var toSJISFunction;
var CODEWORDS_COUNT = [0,
// Not used
26, 44, 70, 100, 134, 172, 196, 242, 292, 346, 404, 466, 532, 581, 655, 733, 815, 901, 991, 1085, 1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185, 2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706];

/**
 * Returns the QR Code size for the specified version
 *
 * @param  {Number} version QR Code version
 * @return {Number}         size of QR code
 */
exports.getSymbolSize = function getSymbolSize(version) {
  if (!version) throw new Error('"version" cannot be null or undefined');
  if (version < 1 || version > 40) throw new Error('"version" should be in range from 1 to 40');
  return version * 4 + 17;
};

/**
 * Returns the total number of codewords used to store data and EC information.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Data length in bits
 */
exports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version) {
  return CODEWORDS_COUNT[version];
};

/**
 * Encode data with Bose-Chaudhuri-Hocquenghem
 *
 * @param  {Number} data Value to encode
 * @return {Number}      Encoded value
 */
exports.getBCHDigit = function (data) {
  var digit = 0;
  while (data !== 0) {
    digit++;
    data >>>= 1;
  }
  return digit;
};
exports.setToSJISFunction = function setToSJISFunction(f) {
  if (typeof f !== 'function') {
    throw new Error('"toSJISFunc" is not a valid function.');
  }
  toSJISFunction = f;
};
exports.isKanjiModeEnabled = function () {
  return typeof toSJISFunction !== 'undefined';
};
exports.toSJIS = function toSJIS(kanji) {
  return toSJISFunction(kanji);
};
},{}],"node_modules/qrcode/lib/core/error-correction-level.js":[function(require,module,exports) {
exports.L = {
  bit: 1
};
exports.M = {
  bit: 0
};
exports.Q = {
  bit: 3
};
exports.H = {
  bit: 2
};
function fromString(string) {
  if (typeof string !== 'string') {
    throw new Error('Param is not a string');
  }
  var lcStr = string.toLowerCase();
  switch (lcStr) {
    case 'l':
    case 'low':
      return exports.L;
    case 'm':
    case 'medium':
      return exports.M;
    case 'q':
    case 'quartile':
      return exports.Q;
    case 'h':
    case 'high':
      return exports.H;
    default:
      throw new Error('Unknown EC Level: ' + string);
  }
}
exports.isValid = function isValid(level) {
  return level && typeof level.bit !== 'undefined' && level.bit >= 0 && level.bit < 4;
};
exports.from = function from(value, defaultValue) {
  if (exports.isValid(value)) {
    return value;
  }
  try {
    return fromString(value);
  } catch (e) {
    return defaultValue;
  }
};
},{}],"node_modules/qrcode/lib/core/bit-buffer.js":[function(require,module,exports) {
function BitBuffer() {
  this.buffer = [];
  this.length = 0;
}
BitBuffer.prototype = {
  get: function (index) {
    var bufIndex = Math.floor(index / 8);
    return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;
  },
  put: function (num, length) {
    for (var i = 0; i < length; i++) {
      this.putBit((num >>> length - i - 1 & 1) === 1);
    }
  },
  getLengthInBits: function () {
    return this.length;
  },
  putBit: function (bit) {
    var bufIndex = Math.floor(this.length / 8);
    if (this.buffer.length <= bufIndex) {
      this.buffer.push(0);
    }
    if (bit) {
      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;
    }
    this.length++;
  }
};
module.exports = BitBuffer;
},{}],"node_modules/qrcode/lib/core/bit-matrix.js":[function(require,module,exports) {
var BufferUtil = require('../utils/buffer');

/**
 * Helper class to handle QR Code symbol modules
 *
 * @param {Number} size Symbol size
 */
function BitMatrix(size) {
  if (!size || size < 1) {
    throw new Error('BitMatrix size must be defined and greater than 0');
  }
  this.size = size;
  this.data = BufferUtil.alloc(size * size);
  this.reservedBit = BufferUtil.alloc(size * size);
}

/**
 * Set bit value at specified location
 * If reserved flag is set, this bit will be ignored during masking process
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 * @param {Boolean} reserved
 */
BitMatrix.prototype.set = function (row, col, value, reserved) {
  var index = row * this.size + col;
  this.data[index] = value;
  if (reserved) this.reservedBit[index] = true;
};

/**
 * Returns bit value at specified location
 *
 * @param  {Number}  row
 * @param  {Number}  col
 * @return {Boolean}
 */
BitMatrix.prototype.get = function (row, col) {
  return this.data[row * this.size + col];
};

/**
 * Applies xor operator at specified location
 * (used during masking process)
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 */
BitMatrix.prototype.xor = function (row, col, value) {
  this.data[row * this.size + col] ^= value;
};

/**
 * Check if bit at specified location is reserved
 *
 * @param {Number}   row
 * @param {Number}   col
 * @return {Boolean}
 */
BitMatrix.prototype.isReserved = function (row, col) {
  return this.reservedBit[row * this.size + col];
};
module.exports = BitMatrix;
},{"../utils/buffer":"node_modules/qrcode/lib/utils/typedarray-buffer.js"}],"node_modules/qrcode/lib/core/alignment-pattern.js":[function(require,module,exports) {
/**
 * Alignment pattern are fixed reference pattern in defined positions
 * in a matrix symbology, which enables the decode software to re-synchronise
 * the coordinate mapping of the image modules in the event of moderate amounts
 * of distortion of the image.
 *
 * Alignment patterns are present only in QR Code symbols of version 2 or larger
 * and their number depends on the symbol version.
 */

var getSymbolSize = require('./utils').getSymbolSize;

/**
 * Calculate the row/column coordinates of the center module of each alignment pattern
 * for the specified QR Code version.
 *
 * The alignment patterns are positioned symmetrically on either side of the diagonal
 * running from the top left corner of the symbol to the bottom right corner.
 *
 * Since positions are simmetrical only half of the coordinates are returned.
 * Each item of the array will represent in turn the x and y coordinate.
 * @see {@link getPositions}
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinate
 */
exports.getRowColCoords = function getRowColCoords(version) {
  if (version === 1) return [];
  var posCount = Math.floor(version / 7) + 2;
  var size = getSymbolSize(version);
  var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
  var positions = [size - 7]; // Last coord is always (size - 7)

  for (var i = 1; i < posCount - 1; i++) {
    positions[i] = positions[i - 1] - intervals;
  }
  positions.push(6); // First coord is always 6

  return positions.reverse();
};

/**
 * Returns an array containing the positions of each alignment pattern.
 * Each array's element represent the center point of the pattern as (x, y) coordinates
 *
 * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
 * and filtering out the items that overlaps with finder pattern
 *
 * @example
 * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
 * The alignment patterns, therefore, are to be centered on (row, column)
 * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
 * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
 * and are not therefore used for alignment patterns.
 *
 * var pos = getPositions(7)
 * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */
exports.getPositions = function getPositions(version) {
  var coords = [];
  var pos = exports.getRowColCoords(version);
  var posLength = pos.length;
  for (var i = 0; i < posLength; i++) {
    for (var j = 0; j < posLength; j++) {
      // Skip if position is occupied by finder patterns
      if (i === 0 && j === 0 ||
      // top-left
      i === 0 && j === posLength - 1 ||
      // bottom-left
      i === posLength - 1 && j === 0) {
        // top-right
        continue;
      }
      coords.push([pos[i], pos[j]]);
    }
  }
  return coords;
};
},{"./utils":"node_modules/qrcode/lib/core/utils.js"}],"node_modules/qrcode/lib/core/finder-pattern.js":[function(require,module,exports) {
var getSymbolSize = require('./utils').getSymbolSize;
var FINDER_PATTERN_SIZE = 7;

/**
 * Returns an array containing the positions of each finder pattern.
 * Each array's element represent the top-left point of the pattern as (x, y) coordinates
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */
exports.getPositions = function getPositions(version) {
  var size = getSymbolSize(version);
  return [
  // top-left
  [0, 0],
  // top-right
  [size - FINDER_PATTERN_SIZE, 0],
  // bottom-left
  [0, size - FINDER_PATTERN_SIZE]];
};
},{"./utils":"node_modules/qrcode/lib/core/utils.js"}],"node_modules/qrcode/lib/core/mask-pattern.js":[function(require,module,exports) {
/**
 * Data mask pattern reference
 * @type {Object}
 */
exports.Patterns = {
  PATTERN000: 0,
  PATTERN001: 1,
  PATTERN010: 2,
  PATTERN011: 3,
  PATTERN100: 4,
  PATTERN101: 5,
  PATTERN110: 6,
  PATTERN111: 7
};

/**
 * Weighted penalty scores for the undesirable features
 * @type {Object}
 */
var PenaltyScores = {
  N1: 3,
  N2: 3,
  N3: 40,
  N4: 10
};

/**
 * Check if mask pattern value is valid
 *
 * @param  {Number}  mask    Mask pattern
 * @return {Boolean}         true if valid, false otherwise
 */
exports.isValid = function isValid(mask) {
  return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7;
};

/**
 * Returns mask pattern from a value.
 * If value is not valid, returns undefined
 *
 * @param  {Number|String} value        Mask pattern value
 * @return {Number}                     Valid mask pattern or undefined
 */
exports.from = function from(value) {
  return exports.isValid(value) ? parseInt(value, 10) : undefined;
};

/**
* Find adjacent modules in row/column with the same color
* and assign a penalty value.
*
* Points: N1 + i
* i is the amount by which the number of adjacent modules of the same color exceeds 5
*/
exports.getPenaltyN1 = function getPenaltyN1(data) {
  var size = data.size;
  var points = 0;
  var sameCountCol = 0;
  var sameCountRow = 0;
  var lastCol = null;
  var lastRow = null;
  for (var row = 0; row < size; row++) {
    sameCountCol = sameCountRow = 0;
    lastCol = lastRow = null;
    for (var col = 0; col < size; col++) {
      var module = data.get(row, col);
      if (module === lastCol) {
        sameCountCol++;
      } else {
        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
        lastCol = module;
        sameCountCol = 1;
      }
      module = data.get(col, row);
      if (module === lastRow) {
        sameCountRow++;
      } else {
        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
        lastRow = module;
        sameCountRow = 1;
      }
    }
    if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
    if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
  }
  return points;
};

/**
 * Find 2x2 blocks with the same color and assign a penalty value
 *
 * Points: N2 * (m - 1) * (n - 1)
 */
exports.getPenaltyN2 = function getPenaltyN2(data) {
  var size = data.size;
  var points = 0;
  for (var row = 0; row < size - 1; row++) {
    for (var col = 0; col < size - 1; col++) {
      var last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);
      if (last === 4 || last === 0) points++;
    }
  }
  return points * PenaltyScores.N2;
};

/**
 * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
 * preceded or followed by light area 4 modules wide
 *
 * Points: N3 * number of pattern found
 */
exports.getPenaltyN3 = function getPenaltyN3(data) {
  var size = data.size;
  var points = 0;
  var bitsCol = 0;
  var bitsRow = 0;
  for (var row = 0; row < size; row++) {
    bitsCol = bitsRow = 0;
    for (var col = 0; col < size; col++) {
      bitsCol = bitsCol << 1 & 0x7FF | data.get(row, col);
      if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;
      bitsRow = bitsRow << 1 & 0x7FF | data.get(col, row);
      if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;
    }
  }
  return points * PenaltyScores.N3;
};

/**
 * Calculate proportion of dark modules in entire symbol
 *
 * Points: N4 * k
 *
 * k is the rating of the deviation of the proportion of dark modules
 * in the symbol from 50% in steps of 5%
 */
exports.getPenaltyN4 = function getPenaltyN4(data) {
  var darkCount = 0;
  var modulesCount = data.data.length;
  for (var i = 0; i < modulesCount; i++) darkCount += data.data[i];
  var k = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);
  return k * PenaltyScores.N4;
};

/**
 * Return mask value at given position
 *
 * @param  {Number} maskPattern Pattern reference value
 * @param  {Number} i           Row
 * @param  {Number} j           Column
 * @return {Boolean}            Mask value
 */
function getMaskAt(maskPattern, i, j) {
  switch (maskPattern) {
    case exports.Patterns.PATTERN000:
      return (i + j) % 2 === 0;
    case exports.Patterns.PATTERN001:
      return i % 2 === 0;
    case exports.Patterns.PATTERN010:
      return j % 3 === 0;
    case exports.Patterns.PATTERN011:
      return (i + j) % 3 === 0;
    case exports.Patterns.PATTERN100:
      return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;
    case exports.Patterns.PATTERN101:
      return i * j % 2 + i * j % 3 === 0;
    case exports.Patterns.PATTERN110:
      return (i * j % 2 + i * j % 3) % 2 === 0;
    case exports.Patterns.PATTERN111:
      return (i * j % 3 + (i + j) % 2) % 2 === 0;
    default:
      throw new Error('bad maskPattern:' + maskPattern);
  }
}

/**
 * Apply a mask pattern to a BitMatrix
 *
 * @param  {Number}    pattern Pattern reference number
 * @param  {BitMatrix} data    BitMatrix data
 */
exports.applyMask = function applyMask(pattern, data) {
  var size = data.size;
  for (var col = 0; col < size; col++) {
    for (var row = 0; row < size; row++) {
      if (data.isReserved(row, col)) continue;
      data.xor(row, col, getMaskAt(pattern, row, col));
    }
  }
};

/**
 * Returns the best mask pattern for data
 *
 * @param  {BitMatrix} data
 * @return {Number} Mask pattern reference number
 */
exports.getBestMask = function getBestMask(data, setupFormatFunc) {
  var numPatterns = Object.keys(exports.Patterns).length;
  var bestPattern = 0;
  var lowerPenalty = Infinity;
  for (var p = 0; p < numPatterns; p++) {
    setupFormatFunc(p);
    exports.applyMask(p, data);

    // Calculate penalty
    var penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data);

    // Undo previously applied mask
    exports.applyMask(p, data);
    if (penalty < lowerPenalty) {
      lowerPenalty = penalty;
      bestPattern = p;
    }
  }
  return bestPattern;
};
},{}],"node_modules/qrcode/lib/core/error-correction-code.js":[function(require,module,exports) {
var ECLevel = require('./error-correction-level');
var EC_BLOCKS_TABLE = [
// L  M  Q  H
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 4, 1, 2, 4, 4, 2, 4, 4, 4, 2, 4, 6, 5, 2, 4, 6, 6, 2, 5, 8, 8, 4, 5, 8, 8, 4, 5, 8, 11, 4, 8, 10, 11, 4, 9, 12, 16, 4, 9, 16, 16, 6, 10, 12, 18, 6, 10, 17, 16, 6, 11, 16, 19, 6, 13, 18, 21, 7, 14, 21, 25, 8, 16, 20, 25, 8, 17, 23, 25, 9, 17, 23, 34, 9, 18, 25, 30, 10, 20, 27, 32, 12, 21, 29, 35, 12, 23, 34, 37, 12, 25, 34, 40, 13, 26, 35, 42, 14, 28, 38, 45, 15, 29, 40, 48, 16, 31, 43, 51, 17, 33, 45, 54, 18, 35, 48, 57, 19, 37, 51, 60, 19, 38, 53, 63, 20, 40, 56, 66, 21, 43, 59, 70, 22, 45, 62, 74, 24, 47, 65, 77, 25, 49, 68, 81];
var EC_CODEWORDS_TABLE = [
// L  M  Q  H
7, 10, 13, 17, 10, 16, 22, 28, 15, 26, 36, 44, 20, 36, 52, 64, 26, 48, 72, 88, 36, 64, 96, 112, 40, 72, 108, 130, 48, 88, 132, 156, 60, 110, 160, 192, 72, 130, 192, 224, 80, 150, 224, 264, 96, 176, 260, 308, 104, 198, 288, 352, 120, 216, 320, 384, 132, 240, 360, 432, 144, 280, 408, 480, 168, 308, 448, 532, 180, 338, 504, 588, 196, 364, 546, 650, 224, 416, 600, 700, 224, 442, 644, 750, 252, 476, 690, 816, 270, 504, 750, 900, 300, 560, 810, 960, 312, 588, 870, 1050, 336, 644, 952, 1110, 360, 700, 1020, 1200, 390, 728, 1050, 1260, 420, 784, 1140, 1350, 450, 812, 1200, 1440, 480, 868, 1290, 1530, 510, 924, 1350, 1620, 540, 980, 1440, 1710, 570, 1036, 1530, 1800, 570, 1064, 1590, 1890, 600, 1120, 1680, 1980, 630, 1204, 1770, 2100, 660, 1260, 1860, 2220, 720, 1316, 1950, 2310, 750, 1372, 2040, 2430];

/**
 * Returns the number of error correction block that the QR Code should contain
 * for the specified version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction blocks
 */
exports.getBlocksCount = function getBlocksCount(version, errorCorrectionLevel) {
  switch (errorCorrectionLevel) {
    case ECLevel.L:
      return EC_BLOCKS_TABLE[(version - 1) * 4 + 0];
    case ECLevel.M:
      return EC_BLOCKS_TABLE[(version - 1) * 4 + 1];
    case ECLevel.Q:
      return EC_BLOCKS_TABLE[(version - 1) * 4 + 2];
    case ECLevel.H:
      return EC_BLOCKS_TABLE[(version - 1) * 4 + 3];
    default:
      return undefined;
  }
};

/**
 * Returns the number of error correction codewords to use for the specified
 * version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction codewords
 */
exports.getTotalCodewordsCount = function getTotalCodewordsCount(version, errorCorrectionLevel) {
  switch (errorCorrectionLevel) {
    case ECLevel.L:
      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0];
    case ECLevel.M:
      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1];
    case ECLevel.Q:
      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2];
    case ECLevel.H:
      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3];
    default:
      return undefined;
  }
};
},{"./error-correction-level":"node_modules/qrcode/lib/core/error-correction-level.js"}],"node_modules/qrcode/lib/core/galois-field.js":[function(require,module,exports) {
var BufferUtil = require('../utils/buffer');
var EXP_TABLE = BufferUtil.alloc(512);
var LOG_TABLE = BufferUtil.alloc(256)
/**
 * Precompute the log and anti-log tables for faster computation later
 *
 * For each possible value in the galois field 2^8, we will pre-compute
 * the logarithm and anti-logarithm (exponential) of this value
 *
 * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
 */;
(function initTables() {
  var x = 1;
  for (var i = 0; i < 255; i++) {
    EXP_TABLE[i] = x;
    LOG_TABLE[x] = i;
    x <<= 1; // multiply by 2

    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.
    // This means that when a number is 256 or larger, it should be XORed with 0x11D.
    if (x & 0x100) {
      // similar to x >= 256, but a lot faster (because 0x100 == 256)
      x ^= 0x11D;
    }
  }

  // Optimization: double the size of the anti-log table so that we don't need to mod 255 to
  // stay inside the bounds (because we will mainly use this table for the multiplication of
  // two GF numbers, no more).
  // @see {@link mul}
  for (i = 255; i < 512; i++) {
    EXP_TABLE[i] = EXP_TABLE[i - 255];
  }
})();

/**
 * Returns log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */
exports.log = function log(n) {
  if (n < 1) throw new Error('log(' + n + ')');
  return LOG_TABLE[n];
};

/**
 * Returns anti-log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */
exports.exp = function exp(n) {
  return EXP_TABLE[n];
};

/**
 * Multiplies two number inside Galois Field
 *
 * @param  {Number} x
 * @param  {Number} y
 * @return {Number}
 */
exports.mul = function mul(x, y) {
  if (x === 0 || y === 0) return 0;

  // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized
  // @see {@link initTables}
  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];
};
},{"../utils/buffer":"node_modules/qrcode/lib/utils/typedarray-buffer.js"}],"node_modules/qrcode/lib/core/polynomial.js":[function(require,module,exports) {
var BufferUtil = require('../utils/buffer');
var GF = require('./galois-field');

/**
 * Multiplies two polynomials inside Galois Field
 *
 * @param  {Buffer} p1 Polynomial
 * @param  {Buffer} p2 Polynomial
 * @return {Buffer}    Product of p1 and p2
 */
exports.mul = function mul(p1, p2) {
  var coeff = BufferUtil.alloc(p1.length + p2.length - 1);
  for (var i = 0; i < p1.length; i++) {
    for (var j = 0; j < p2.length; j++) {
      coeff[i + j] ^= GF.mul(p1[i], p2[j]);
    }
  }
  return coeff;
};

/**
 * Calculate the remainder of polynomials division
 *
 * @param  {Buffer} divident Polynomial
 * @param  {Buffer} divisor  Polynomial
 * @return {Buffer}          Remainder
 */
exports.mod = function mod(divident, divisor) {
  var result = BufferUtil.from(divident);
  while (result.length - divisor.length >= 0) {
    var coeff = result[0];
    for (var i = 0; i < divisor.length; i++) {
      result[i] ^= GF.mul(divisor[i], coeff);
    }

    // remove all zeros from buffer head
    var offset = 0;
    while (offset < result.length && result[offset] === 0) offset++;
    result = result.slice(offset);
  }
  return result;
};

/**
 * Generate an irreducible generator polynomial of specified degree
 * (used by Reed-Solomon encoder)
 *
 * @param  {Number} degree Degree of the generator polynomial
 * @return {Buffer}        Buffer containing polynomial coefficients
 */
exports.generateECPolynomial = function generateECPolynomial(degree) {
  var poly = BufferUtil.from([1]);
  for (var i = 0; i < degree; i++) {
    poly = exports.mul(poly, [1, GF.exp(i)]);
  }
  return poly;
};
},{"../utils/buffer":"node_modules/qrcode/lib/utils/typedarray-buffer.js","./galois-field":"node_modules/qrcode/lib/core/galois-field.js"}],"node_modules/qrcode/lib/core/reed-solomon-encoder.js":[function(require,module,exports) {

var BufferUtil = require('../utils/buffer');
var Polynomial = require('./polynomial');
var Buffer = require('buffer').Buffer;
function ReedSolomonEncoder(degree) {
  this.genPoly = undefined;
  this.degree = degree;
  if (this.degree) this.initialize(this.degree);
}

/**
 * Initialize the encoder.
 * The input param should correspond to the number of error correction codewords.
 *
 * @param  {Number} degree
 */
ReedSolomonEncoder.prototype.initialize = function initialize(degree) {
  // create an irreducible generator polynomial
  this.degree = degree;
  this.genPoly = Polynomial.generateECPolynomial(this.degree);
};

/**
 * Encodes a chunk of data
 *
 * @param  {Buffer} data Buffer containing input data
 * @return {Buffer}      Buffer containing encoded data
 */
ReedSolomonEncoder.prototype.encode = function encode(data) {
  if (!this.genPoly) {
    throw new Error('Encoder not initialized');
  }

  // Calculate EC for this data block
  // extends data size to data+genPoly size
  var pad = BufferUtil.alloc(this.degree);
  var paddedData = Buffer.concat([data, pad], data.length + this.degree);

  // The error correction codewords are the remainder after dividing the data codewords
  // by a generator polynomial
  var remainder = Polynomial.mod(paddedData, this.genPoly);

  // return EC data blocks (last n byte, where n is the degree of genPoly)
  // If coefficients number in remainder are less than genPoly degree,
  // pad with 0s to the left to reach the needed number of coefficients
  var start = this.degree - remainder.length;
  if (start > 0) {
    var buff = BufferUtil.alloc(this.degree);
    remainder.copy(buff, start);
    return buff;
  }
  return remainder;
};
module.exports = ReedSolomonEncoder;
},{"../utils/buffer":"node_modules/qrcode/lib/utils/typedarray-buffer.js","./polynomial":"node_modules/qrcode/lib/core/polynomial.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/qrcode/lib/core/version-check.js":[function(require,module,exports) {
/**
 * Check if QR Code version is valid
 *
 * @param  {Number}  version QR Code version
 * @return {Boolean}         true if valid version, false otherwise
 */
exports.isValid = function isValid(version) {
  return !isNaN(version) && version >= 1 && version <= 40;
};
},{}],"node_modules/qrcode/lib/core/regex.js":[function(require,module,exports) {
var numeric = '[0-9]+';
var alphanumeric = '[A-Z $%*+\\-./:]+';
var kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' + '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' + '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' + '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+';
kanji = kanji.replace(/u/g, "\\u");
var byte = '(?:(?![A-Z0-9 $%*+\\-./:]|' + kanji + ')(?:.|[\r\n]))+';
exports.KANJI = new RegExp(kanji, 'g');
exports.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g');
exports.BYTE = new RegExp(byte, 'g');
exports.NUMERIC = new RegExp(numeric, 'g');
exports.ALPHANUMERIC = new RegExp(alphanumeric, 'g');
var TEST_KANJI = new RegExp('^' + kanji + '$');
var TEST_NUMERIC = new RegExp('^' + numeric + '$');
var TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\-./:]+$');
exports.testKanji = function testKanji(str) {
  return TEST_KANJI.test(str);
};
exports.testNumeric = function testNumeric(str) {
  return TEST_NUMERIC.test(str);
};
exports.testAlphanumeric = function testAlphanumeric(str) {
  return TEST_ALPHANUMERIC.test(str);
};
},{}],"node_modules/qrcode/lib/core/mode.js":[function(require,module,exports) {
var VersionCheck = require('./version-check');
var Regex = require('./regex');

/**
 * Numeric mode encodes data from the decimal digit set (0 - 9)
 * (byte values 30HEX to 39HEX).
 * Normally, 3 data characters are represented by 10 bits.
 *
 * @type {Object}
 */
exports.NUMERIC = {
  id: 'Numeric',
  bit: 1 << 0,
  ccBits: [10, 12, 14]
};

/**
 * Alphanumeric mode encodes data from a set of 45 characters,
 * i.e. 10 numeric digits (0 - 9),
 *      26 alphabetic characters (A - Z),
 *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
 * Normally, two input characters are represented by 11 bits.
 *
 * @type {Object}
 */
exports.ALPHANUMERIC = {
  id: 'Alphanumeric',
  bit: 1 << 1,
  ccBits: [9, 11, 13]
};

/**
 * In byte mode, data is encoded at 8 bits per character.
 *
 * @type {Object}
 */
exports.BYTE = {
  id: 'Byte',
  bit: 1 << 2,
  ccBits: [8, 16, 16]
};

/**
 * The Kanji mode efficiently encodes Kanji characters in accordance with
 * the Shift JIS system based on JIS X 0208.
 * The Shift JIS values are shifted from the JIS X 0208 values.
 * JIS X 0208 gives details of the shift coded representation.
 * Each two-byte character value is compacted to a 13-bit binary codeword.
 *
 * @type {Object}
 */
exports.KANJI = {
  id: 'Kanji',
  bit: 1 << 3,
  ccBits: [8, 10, 12]
};

/**
 * Mixed mode will contain a sequences of data in a combination of any of
 * the modes described above
 *
 * @type {Object}
 */
exports.MIXED = {
  bit: -1
};

/**
 * Returns the number of bits needed to store the data length
 * according to QR Code specifications.
 *
 * @param  {Mode}   mode    Data mode
 * @param  {Number} version QR Code version
 * @return {Number}         Number of bits
 */
exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {
  if (!mode.ccBits) throw new Error('Invalid mode: ' + mode);
  if (!VersionCheck.isValid(version)) {
    throw new Error('Invalid version: ' + version);
  }
  if (version >= 1 && version < 10) return mode.ccBits[0];else if (version < 27) return mode.ccBits[1];
  return mode.ccBits[2];
};

/**
 * Returns the most efficient mode to store the specified data
 *
 * @param  {String} dataStr Input data string
 * @return {Mode}           Best mode
 */
exports.getBestModeForData = function getBestModeForData(dataStr) {
  if (Regex.testNumeric(dataStr)) return exports.NUMERIC;else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;else if (Regex.testKanji(dataStr)) return exports.KANJI;else return exports.BYTE;
};

/**
 * Return mode name as string
 *
 * @param {Mode} mode Mode object
 * @returns {String}  Mode name
 */
exports.toString = function toString(mode) {
  if (mode && mode.id) return mode.id;
  throw new Error('Invalid mode');
};

/**
 * Check if input param is a valid mode object
 *
 * @param   {Mode}    mode Mode object
 * @returns {Boolean} True if valid mode, false otherwise
 */
exports.isValid = function isValid(mode) {
  return mode && mode.bit && mode.ccBits;
};

/**
 * Get mode object from its name
 *
 * @param   {String} string Mode name
 * @returns {Mode}          Mode object
 */
function fromString(string) {
  if (typeof string !== 'string') {
    throw new Error('Param is not a string');
  }
  var lcStr = string.toLowerCase();
  switch (lcStr) {
    case 'numeric':
      return exports.NUMERIC;
    case 'alphanumeric':
      return exports.ALPHANUMERIC;
    case 'kanji':
      return exports.KANJI;
    case 'byte':
      return exports.BYTE;
    default:
      throw new Error('Unknown mode: ' + string);
  }
}

/**
 * Returns mode from a value.
 * If value is not a valid mode, returns defaultValue
 *
 * @param  {Mode|String} value        Encoding mode
 * @param  {Mode}        defaultValue Fallback value
 * @return {Mode}                     Encoding mode
 */
exports.from = function from(value, defaultValue) {
  if (exports.isValid(value)) {
    return value;
  }
  try {
    return fromString(value);
  } catch (e) {
    return defaultValue;
  }
};
},{"./version-check":"node_modules/qrcode/lib/core/version-check.js","./regex":"node_modules/qrcode/lib/core/regex.js"}],"node_modules/qrcode/lib/core/version.js":[function(require,module,exports) {
var Utils = require('./utils');
var ECCode = require('./error-correction-code');
var ECLevel = require('./error-correction-level');
var Mode = require('./mode');
var VersionCheck = require('./version-check');
var isArray = require('isarray');

// Generator polynomial used to encode version information
var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
var G18_BCH = Utils.getBCHDigit(G18);
function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {
  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
      return currentVersion;
    }
  }
  return undefined;
}
function getReservedBitsCount(mode, version) {
  // Character count indicator + mode indicator bits
  return Mode.getCharCountIndicator(mode, version) + 4;
}
function getTotalBitsFromDataArray(segments, version) {
  var totalBits = 0;
  segments.forEach(function (data) {
    var reservedBits = getReservedBitsCount(data.mode, version);
    totalBits += reservedBits + data.getBitsLength();
  });
  return totalBits;
}
function getBestVersionForMixedData(segments, errorCorrectionLevel) {
  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
    var length = getTotalBitsFromDataArray(segments, currentVersion);
    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {
      return currentVersion;
    }
  }
  return undefined;
}

/**
 * Returns version number from a value.
 * If value is not a valid version, returns defaultValue
 *
 * @param  {Number|String} value        QR Code version
 * @param  {Number}        defaultValue Fallback value
 * @return {Number}                     QR Code version number
 */
exports.from = function from(value, defaultValue) {
  if (VersionCheck.isValid(value)) {
    return parseInt(value, 10);
  }
  return defaultValue;
};

/**
 * Returns how much data can be stored with the specified QR code version
 * and error correction level
 *
 * @param  {Number} version              QR Code version (1-40)
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Mode}   mode                 Data mode
 * @return {Number}                      Quantity of storable data
 */
exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {
  if (!VersionCheck.isValid(version)) {
    throw new Error('Invalid QR Code version');
  }

  // Use Byte mode as default
  if (typeof mode === 'undefined') mode = Mode.BYTE;

  // Total codewords for this QR code version (Data + Error correction)
  var totalCodewords = Utils.getSymbolTotalCodewords(version);

  // Total number of error correction codewords
  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);

  // Total number of data codewords
  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
  if (mode === Mode.MIXED) return dataTotalCodewordsBits;
  var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version);

  // Return max number of storable codewords
  switch (mode) {
    case Mode.NUMERIC:
      return Math.floor(usableBits / 10 * 3);
    case Mode.ALPHANUMERIC:
      return Math.floor(usableBits / 11 * 2);
    case Mode.KANJI:
      return Math.floor(usableBits / 13);
    case Mode.BYTE:
    default:
      return Math.floor(usableBits / 8);
  }
};

/**
 * Returns the minimum version needed to contain the amount of data
 *
 * @param  {Segment} data                    Segment of data
 * @param  {Number} [errorCorrectionLevel=H] Error correction level
 * @param  {Mode} mode                       Data mode
 * @return {Number}                          QR Code version
 */
exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {
  var seg;
  var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);
  if (isArray(data)) {
    if (data.length > 1) {
      return getBestVersionForMixedData(data, ecl);
    }
    if (data.length === 0) {
      return 1;
    }
    seg = data[0];
  } else {
    seg = data;
  }
  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);
};

/**
 * Returns version information with relative error correction bits
 *
 * The version information is included in QR Code symbols of version 7 or larger.
 * It consists of an 18-bit sequence containing 6 data bits,
 * with 12 error correction bits calculated using the (18, 6) Golay code.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Encoded version info bits
 */
exports.getEncodedBits = function getEncodedBits(version) {
  if (!VersionCheck.isValid(version) || version < 7) {
    throw new Error('Invalid QR Code version');
  }
  var d = version << 12;
  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {
    d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;
  }
  return version << 12 | d;
};
},{"./utils":"node_modules/qrcode/lib/core/utils.js","./error-correction-code":"node_modules/qrcode/lib/core/error-correction-code.js","./error-correction-level":"node_modules/qrcode/lib/core/error-correction-level.js","./mode":"node_modules/qrcode/lib/core/mode.js","./version-check":"node_modules/qrcode/lib/core/version-check.js","isarray":"node_modules/isarray/index.js"}],"node_modules/qrcode/lib/core/format-info.js":[function(require,module,exports) {
var Utils = require('./utils');
var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
var G15_BCH = Utils.getBCHDigit(G15);

/**
 * Returns format information with relative error correction bits
 *
 * The format information is a 15-bit sequence containing 5 data bits,
 * with 10 error correction bits calculated using the (15, 5) BCH code.
 *
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Number} mask                 Mask pattern
 * @return {Number}                      Encoded format information bits
 */
exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {
  var data = errorCorrectionLevel.bit << 3 | mask;
  var d = data << 10;
  while (Utils.getBCHDigit(d) - G15_BCH >= 0) {
    d ^= G15 << Utils.getBCHDigit(d) - G15_BCH;
  }

  // xor final data with mask pattern in order to ensure that
  // no combination of Error Correction Level and data mask pattern
  // will result in an all-zero data string
  return (data << 10 | d) ^ G15_MASK;
};
},{"./utils":"node_modules/qrcode/lib/core/utils.js"}],"node_modules/qrcode/lib/core/numeric-data.js":[function(require,module,exports) {
var Mode = require('./mode');
function NumericData(data) {
  this.mode = Mode.NUMERIC;
  this.data = data.toString();
}
NumericData.getBitsLength = function getBitsLength(length) {
  return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);
};
NumericData.prototype.getLength = function getLength() {
  return this.data.length;
};
NumericData.prototype.getBitsLength = function getBitsLength() {
  return NumericData.getBitsLength(this.data.length);
};
NumericData.prototype.write = function write(bitBuffer) {
  var i, group, value;

  // The input data string is divided into groups of three digits,
  // and each group is converted to its 10-bit binary equivalent.
  for (i = 0; i + 3 <= this.data.length; i += 3) {
    group = this.data.substr(i, 3);
    value = parseInt(group, 10);
    bitBuffer.put(value, 10);
  }

  // If the number of input digits is not an exact multiple of three,
  // the final one or two digits are converted to 4 or 7 bits respectively.
  var remainingNum = this.data.length - i;
  if (remainingNum > 0) {
    group = this.data.substr(i);
    value = parseInt(group, 10);
    bitBuffer.put(value, remainingNum * 3 + 1);
  }
};
module.exports = NumericData;
},{"./mode":"node_modules/qrcode/lib/core/mode.js"}],"node_modules/qrcode/lib/core/alphanumeric-data.js":[function(require,module,exports) {
var Mode = require('./mode');

/**
 * Array of characters available in alphanumeric mode
 *
 * As per QR Code specification, to each character
 * is assigned a value from 0 to 44 which in this case coincides
 * with the array index
 *
 * @type {Array}
 */
var ALPHA_NUM_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':'];
function AlphanumericData(data) {
  this.mode = Mode.ALPHANUMERIC;
  this.data = data;
}
AlphanumericData.getBitsLength = function getBitsLength(length) {
  return 11 * Math.floor(length / 2) + 6 * (length % 2);
};
AlphanumericData.prototype.getLength = function getLength() {
  return this.data.length;
};
AlphanumericData.prototype.getBitsLength = function getBitsLength() {
  return AlphanumericData.getBitsLength(this.data.length);
};
AlphanumericData.prototype.write = function write(bitBuffer) {
  var i;

  // Input data characters are divided into groups of two characters
  // and encoded as 11-bit binary codes.
  for (i = 0; i + 2 <= this.data.length; i += 2) {
    // The character value of the first character is multiplied by 45
    var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;

    // The character value of the second digit is added to the product
    value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);

    // The sum is then stored as 11-bit binary number
    bitBuffer.put(value, 11);
  }

  // If the number of input data characters is not a multiple of two,
  // the character value of the final character is encoded as a 6-bit binary number.
  if (this.data.length % 2) {
    bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
  }
};
module.exports = AlphanumericData;
},{"./mode":"node_modules/qrcode/lib/core/mode.js"}],"node_modules/qrcode/lib/core/byte-data.js":[function(require,module,exports) {
var BufferUtil = require('../utils/buffer');
var Mode = require('./mode');
function ByteData(data) {
  this.mode = Mode.BYTE;
  this.data = BufferUtil.from(data);
}
ByteData.getBitsLength = function getBitsLength(length) {
  return length * 8;
};
ByteData.prototype.getLength = function getLength() {
  return this.data.length;
};
ByteData.prototype.getBitsLength = function getBitsLength() {
  return ByteData.getBitsLength(this.data.length);
};
ByteData.prototype.write = function (bitBuffer) {
  for (var i = 0, l = this.data.length; i < l; i++) {
    bitBuffer.put(this.data[i], 8);
  }
};
module.exports = ByteData;
},{"../utils/buffer":"node_modules/qrcode/lib/utils/typedarray-buffer.js","./mode":"node_modules/qrcode/lib/core/mode.js"}],"node_modules/qrcode/lib/core/kanji-data.js":[function(require,module,exports) {
var Mode = require('./mode');
var Utils = require('./utils');
function KanjiData(data) {
  this.mode = Mode.KANJI;
  this.data = data;
}
KanjiData.getBitsLength = function getBitsLength(length) {
  return length * 13;
};
KanjiData.prototype.getLength = function getLength() {
  return this.data.length;
};
KanjiData.prototype.getBitsLength = function getBitsLength() {
  return KanjiData.getBitsLength(this.data.length);
};
KanjiData.prototype.write = function (bitBuffer) {
  var i;

  // In the Shift JIS system, Kanji characters are represented by a two byte combination.
  // These byte values are shifted from the JIS X 0208 values.
  // JIS X 0208 gives details of the shift coded representation.
  for (i = 0; i < this.data.length; i++) {
    var value = Utils.toSJIS(this.data[i]);

    // For characters with Shift JIS values from 0x8140 to 0x9FFC:
    if (value >= 0x8140 && value <= 0x9FFC) {
      // Subtract 0x8140 from Shift JIS value
      value -= 0x8140;

      // For characters with Shift JIS values from 0xE040 to 0xEBBF
    } else if (value >= 0xE040 && value <= 0xEBBF) {
      // Subtract 0xC140 from Shift JIS value
      value -= 0xC140;
    } else {
      throw new Error('Invalid SJIS character: ' + this.data[i] + '\n' + 'Make sure your charset is UTF-8');
    }

    // Multiply most significant byte of result by 0xC0
    // and add least significant byte to product
    value = (value >>> 8 & 0xff) * 0xC0 + (value & 0xff);

    // Convert result to a 13-bit binary string
    bitBuffer.put(value, 13);
  }
};
module.exports = KanjiData;
},{"./mode":"node_modules/qrcode/lib/core/mode.js","./utils":"node_modules/qrcode/lib/core/utils.js"}],"node_modules/dijkstrajs/dijkstra.js":[function(require,module,exports) {
'use strict';

/******************************************************************************
 * Created 2008-08-19.
 *
 * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
 *
 * Copyright (C) 2008
 *   Wyatt Baldwin <self@wyattbaldwin.com>
 *   All rights reserved
 *
 * Licensed under the MIT license.
 *
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *****************************************************************************/
var dijkstra = {
  single_source_shortest_paths: function(graph, s, d) {
    // Predecessor map for each node that has been encountered.
    // node ID => predecessor node ID
    var predecessors = {};

    // Costs of shortest paths from s to all nodes encountered.
    // node ID => cost
    var costs = {};
    costs[s] = 0;

    // Costs of shortest paths from s to all nodes encountered; differs from
    // `costs` in that it provides easy access to the node that currently has
    // the known shortest path from s.
    // XXX: Do we actually need both `costs` and `open`?
    var open = dijkstra.PriorityQueue.make();
    open.push(s, 0);

    var closest,
        u, v,
        cost_of_s_to_u,
        adjacent_nodes,
        cost_of_e,
        cost_of_s_to_u_plus_cost_of_e,
        cost_of_s_to_v,
        first_visit;
    while (!open.empty()) {
      // In the nodes remaining in graph that have a known cost from s,
      // find the node, u, that currently has the shortest path from s.
      closest = open.pop();
      u = closest.value;
      cost_of_s_to_u = closest.cost;

      // Get nodes adjacent to u...
      adjacent_nodes = graph[u] || {};

      // ...and explore the edges that connect u to those nodes, updating
      // the cost of the shortest paths to any or all of those nodes as
      // necessary. v is the node across the current edge from u.
      for (v in adjacent_nodes) {
        if (adjacent_nodes.hasOwnProperty(v)) {
          // Get the cost of the edge running from u to v.
          cost_of_e = adjacent_nodes[v];

          // Cost of s to u plus the cost of u to v across e--this is *a*
          // cost from s to v that may or may not be less than the current
          // known cost to v.
          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;

          // If we haven't visited v yet OR if the current known cost from s to
          // v is greater than the new cost we just found (cost of s to u plus
          // cost of u to v across e), update v's cost in the cost list and
          // update v's predecessor in the predecessor list (it's now u).
          cost_of_s_to_v = costs[v];
          first_visit = (typeof costs[v] === 'undefined');
          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
            costs[v] = cost_of_s_to_u_plus_cost_of_e;
            open.push(v, cost_of_s_to_u_plus_cost_of_e);
            predecessors[v] = u;
          }
        }
      }
    }

    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {
      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');
      throw new Error(msg);
    }

    return predecessors;
  },

  extract_shortest_path_from_predecessor_list: function(predecessors, d) {
    var nodes = [];
    var u = d;
    var predecessor;
    while (u) {
      nodes.push(u);
      predecessor = predecessors[u];
      u = predecessors[u];
    }
    nodes.reverse();
    return nodes;
  },

  find_path: function(graph, s, d) {
    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
    return dijkstra.extract_shortest_path_from_predecessor_list(
      predecessors, d);
  },

  /**
   * A very naive priority queue implementation.
   */
  PriorityQueue: {
    make: function (opts) {
      var T = dijkstra.PriorityQueue,
          t = {},
          key;
      opts = opts || {};
      for (key in T) {
        if (T.hasOwnProperty(key)) {
          t[key] = T[key];
        }
      }
      t.queue = [];
      t.sorter = opts.sorter || T.default_sorter;
      return t;
    },

    default_sorter: function (a, b) {
      return a.cost - b.cost;
    },

    /**
     * Add a new item to the queue and ensure the highest priority element
     * is at the front of the queue.
     */
    push: function (value, cost) {
      var item = {value: value, cost: cost};
      this.queue.push(item);
      this.queue.sort(this.sorter);
    },

    /**
     * Return the highest priority element in the queue.
     */
    pop: function () {
      return this.queue.shift();
    },

    empty: function () {
      return this.queue.length === 0;
    }
  }
};


// node.js module exports
if (typeof module !== 'undefined') {
  module.exports = dijkstra;
}

},{}],"node_modules/qrcode/lib/core/segments.js":[function(require,module,exports) {
var Mode = require('./mode');
var NumericData = require('./numeric-data');
var AlphanumericData = require('./alphanumeric-data');
var ByteData = require('./byte-data');
var KanjiData = require('./kanji-data');
var Regex = require('./regex');
var Utils = require('./utils');
var dijkstra = require('dijkstrajs');

/**
 * Returns UTF8 byte length
 *
 * @param  {String} str Input string
 * @return {Number}     Number of byte
 */
function getStringByteLength(str) {
  return unescape(encodeURIComponent(str)).length;
}

/**
 * Get a list of segments of the specified mode
 * from a string
 *
 * @param  {Mode}   mode Segment mode
 * @param  {String} str  String to process
 * @return {Array}       Array of object with segments data
 */
function getSegments(regex, mode, str) {
  var segments = [];
  var result;
  while ((result = regex.exec(str)) !== null) {
    segments.push({
      data: result[0],
      index: result.index,
      mode: mode,
      length: result[0].length
    });
  }
  return segments;
}

/**
 * Extracts a series of segments with the appropriate
 * modes from a string
 *
 * @param  {String} dataStr Input string
 * @return {Array}          Array of object with segments data
 */
function getSegmentsFromString(dataStr) {
  var numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);
  var alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);
  var byteSegs;
  var kanjiSegs;
  if (Utils.isKanjiModeEnabled()) {
    byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);
    kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);
  } else {
    byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);
    kanjiSegs = [];
  }
  var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);
  return segs.sort(function (s1, s2) {
    return s1.index - s2.index;
  }).map(function (obj) {
    return {
      data: obj.data,
      mode: obj.mode,
      length: obj.length
    };
  });
}

/**
 * Returns how many bits are needed to encode a string of
 * specified length with the specified mode
 *
 * @param  {Number} length String length
 * @param  {Mode} mode     Segment mode
 * @return {Number}        Bit length
 */
function getSegmentBitsLength(length, mode) {
  switch (mode) {
    case Mode.NUMERIC:
      return NumericData.getBitsLength(length);
    case Mode.ALPHANUMERIC:
      return AlphanumericData.getBitsLength(length);
    case Mode.KANJI:
      return KanjiData.getBitsLength(length);
    case Mode.BYTE:
      return ByteData.getBitsLength(length);
  }
}

/**
 * Merges adjacent segments which have the same mode
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */
function mergeSegments(segs) {
  return segs.reduce(function (acc, curr) {
    var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
    if (prevSeg && prevSeg.mode === curr.mode) {
      acc[acc.length - 1].data += curr.data;
      return acc;
    }
    acc.push(curr);
    return acc;
  }, []);
}

/**
 * Generates a list of all possible nodes combination which
 * will be used to build a segments graph.
 *
 * Nodes are divided by groups. Each group will contain a list of all the modes
 * in which is possible to encode the given text.
 *
 * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
 * The group for '12345' will contain then 3 objects, one for each
 * possible encoding mode.
 *
 * Each node represents a possible segment.
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */
function buildNodes(segs) {
  var nodes = [];
  for (var i = 0; i < segs.length; i++) {
    var seg = segs[i];
    switch (seg.mode) {
      case Mode.NUMERIC:
        nodes.push([seg, {
          data: seg.data,
          mode: Mode.ALPHANUMERIC,
          length: seg.length
        }, {
          data: seg.data,
          mode: Mode.BYTE,
          length: seg.length
        }]);
        break;
      case Mode.ALPHANUMERIC:
        nodes.push([seg, {
          data: seg.data,
          mode: Mode.BYTE,
          length: seg.length
        }]);
        break;
      case Mode.KANJI:
        nodes.push([seg, {
          data: seg.data,
          mode: Mode.BYTE,
          length: getStringByteLength(seg.data)
        }]);
        break;
      case Mode.BYTE:
        nodes.push([{
          data: seg.data,
          mode: Mode.BYTE,
          length: getStringByteLength(seg.data)
        }]);
    }
  }
  return nodes;
}

/**
 * Builds a graph from a list of nodes.
 * All segments in each node group will be connected with all the segments of
 * the next group and so on.
 *
 * At each connection will be assigned a weight depending on the
 * segment's byte length.
 *
 * @param  {Array} nodes    Array of object with segments data
 * @param  {Number} version QR Code version
 * @return {Object}         Graph of all possible segments
 */
function buildGraph(nodes, version) {
  var table = {};
  var graph = {
    'start': {}
  };
  var prevNodeIds = ['start'];
  for (var i = 0; i < nodes.length; i++) {
    var nodeGroup = nodes[i];
    var currentNodeIds = [];
    for (var j = 0; j < nodeGroup.length; j++) {
      var node = nodeGroup[j];
      var key = '' + i + j;
      currentNodeIds.push(key);
      table[key] = {
        node: node,
        lastCount: 0
      };
      graph[key] = {};
      for (var n = 0; n < prevNodeIds.length; n++) {
        var prevNodeId = prevNodeIds[n];
        if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
          graph[prevNodeId][key] = getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);
          table[prevNodeId].lastCount += node.length;
        } else {
          if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;
          graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version); // switch cost
        }
      }
    }

    prevNodeIds = currentNodeIds;
  }
  for (n = 0; n < prevNodeIds.length; n++) {
    graph[prevNodeIds[n]]['end'] = 0;
  }
  return {
    map: graph,
    table: table
  };
}

/**
 * Builds a segment from a specified data and mode.
 * If a mode is not specified, the more suitable will be used.
 *
 * @param  {String} data             Input data
 * @param  {Mode | String} modesHint Data mode
 * @return {Segment}                 Segment
 */
function buildSingleSegment(data, modesHint) {
  var mode;
  var bestMode = Mode.getBestModeForData(data);
  mode = Mode.from(modesHint, bestMode);

  // Make sure data can be encoded
  if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {
    throw new Error('"' + data + '"' + ' cannot be encoded with mode ' + Mode.toString(mode) + '.\n Suggested mode is: ' + Mode.toString(bestMode));
  }

  // Use Mode.BYTE if Kanji support is disabled
  if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {
    mode = Mode.BYTE;
  }
  switch (mode) {
    case Mode.NUMERIC:
      return new NumericData(data);
    case Mode.ALPHANUMERIC:
      return new AlphanumericData(data);
    case Mode.KANJI:
      return new KanjiData(data);
    case Mode.BYTE:
      return new ByteData(data);
  }
}

/**
 * Builds a list of segments from an array.
 * Array can contain Strings or Objects with segment's info.
 *
 * For each item which is a string, will be generated a segment with the given
 * string and the more appropriate encoding mode.
 *
 * For each item which is an object, will be generated a segment with the given
 * data and mode.
 * Objects must contain at least the property "data".
 * If property "mode" is not present, the more suitable mode will be used.
 *
 * @param  {Array} array Array of objects with segments data
 * @return {Array}       Array of Segments
 */
exports.fromArray = function fromArray(array) {
  return array.reduce(function (acc, seg) {
    if (typeof seg === 'string') {
      acc.push(buildSingleSegment(seg, null));
    } else if (seg.data) {
      acc.push(buildSingleSegment(seg.data, seg.mode));
    }
    return acc;
  }, []);
};

/**
 * Builds an optimized sequence of segments from a string,
 * which will produce the shortest possible bitstream.
 *
 * @param  {String} data    Input string
 * @param  {Number} version QR Code version
 * @return {Array}          Array of segments
 */
exports.fromString = function fromString(data, version) {
  var segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());
  var nodes = buildNodes(segs);
  var graph = buildGraph(nodes, version);
  var path = dijkstra.find_path(graph.map, 'start', 'end');
  var optimizedSegs = [];
  for (var i = 1; i < path.length - 1; i++) {
    optimizedSegs.push(graph.table[path[i]].node);
  }
  return exports.fromArray(mergeSegments(optimizedSegs));
};

/**
 * Splits a string in various segments with the modes which
 * best represent their content.
 * The produced segments are far from being optimized.
 * The output of this function is only used to estimate a QR Code version
 * which may contain the data.
 *
 * @param  {string} data Input string
 * @return {Array}       Array of segments
 */
exports.rawSplit = function rawSplit(data) {
  return exports.fromArray(getSegmentsFromString(data, Utils.isKanjiModeEnabled()));
};
},{"./mode":"node_modules/qrcode/lib/core/mode.js","./numeric-data":"node_modules/qrcode/lib/core/numeric-data.js","./alphanumeric-data":"node_modules/qrcode/lib/core/alphanumeric-data.js","./byte-data":"node_modules/qrcode/lib/core/byte-data.js","./kanji-data":"node_modules/qrcode/lib/core/kanji-data.js","./regex":"node_modules/qrcode/lib/core/regex.js","./utils":"node_modules/qrcode/lib/core/utils.js","dijkstrajs":"node_modules/dijkstrajs/dijkstra.js"}],"node_modules/qrcode/lib/core/qrcode.js":[function(require,module,exports) {
var BufferUtil = require('../utils/buffer');
var Utils = require('./utils');
var ECLevel = require('./error-correction-level');
var BitBuffer = require('./bit-buffer');
var BitMatrix = require('./bit-matrix');
var AlignmentPattern = require('./alignment-pattern');
var FinderPattern = require('./finder-pattern');
var MaskPattern = require('./mask-pattern');
var ECCode = require('./error-correction-code');
var ReedSolomonEncoder = require('./reed-solomon-encoder');
var Version = require('./version');
var FormatInfo = require('./format-info');
var Mode = require('./mode');
var Segments = require('./segments');
var isArray = require('isarray');

/**
 * QRCode for JavaScript
 *
 * modified by Ryan Day for nodejs support
 * Copyright (c) 2011 Ryan Day
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
//---------------------------------------------------------------------
// QRCode for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase
//
// URL: http://www.d-project.com/
//
// Licensed under the MIT license:
//   http://www.opensource.org/licenses/mit-license.php
//
// The word "QR Code" is registered trademark of
// DENSO WAVE INCORPORATED
//   http://www.denso-wave.com/qrcode/faqpatent-e.html
//
//---------------------------------------------------------------------
*/

/**
 * Add finder patterns bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */
function setupFinderPattern(matrix, version) {
  var size = matrix.size;
  var pos = FinderPattern.getPositions(version);
  for (var i = 0; i < pos.length; i++) {
    var row = pos[i][0];
    var col = pos[i][1];
    for (var r = -1; r <= 7; r++) {
      if (row + r <= -1 || size <= row + r) continue;
      for (var c = -1; c <= 7; c++) {
        if (col + c <= -1 || size <= col + c) continue;
        if (r >= 0 && r <= 6 && (c === 0 || c === 6) || c >= 0 && c <= 6 && (r === 0 || r === 6) || r >= 2 && r <= 4 && c >= 2 && c <= 4) {
          matrix.set(row + r, col + c, true, true);
        } else {
          matrix.set(row + r, col + c, false, true);
        }
      }
    }
  }
}

/**
 * Add timing pattern bits to matrix
 *
 * Note: this function must be called before {@link setupAlignmentPattern}
 *
 * @param  {BitMatrix} matrix Modules matrix
 */
function setupTimingPattern(matrix) {
  var size = matrix.size;
  for (var r = 8; r < size - 8; r++) {
    var value = r % 2 === 0;
    matrix.set(r, 6, value, true);
    matrix.set(6, r, value, true);
  }
}

/**
 * Add alignment patterns bits to matrix
 *
 * Note: this function must be called after {@link setupTimingPattern}
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */
function setupAlignmentPattern(matrix, version) {
  var pos = AlignmentPattern.getPositions(version);
  for (var i = 0; i < pos.length; i++) {
    var row = pos[i][0];
    var col = pos[i][1];
    for (var r = -2; r <= 2; r++) {
      for (var c = -2; c <= 2; c++) {
        if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {
          matrix.set(row + r, col + c, true, true);
        } else {
          matrix.set(row + r, col + c, false, true);
        }
      }
    }
  }
}

/**
 * Add version info bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */
function setupVersionInfo(matrix, version) {
  var size = matrix.size;
  var bits = Version.getEncodedBits(version);
  var row, col, mod;
  for (var i = 0; i < 18; i++) {
    row = Math.floor(i / 3);
    col = i % 3 + size - 8 - 3;
    mod = (bits >> i & 1) === 1;
    matrix.set(row, col, mod, true);
    matrix.set(col, row, mod, true);
  }
}

/**
 * Add format info bits to matrix
 *
 * @param  {BitMatrix} matrix               Modules matrix
 * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
 * @param  {Number}    maskPattern          Mask pattern reference value
 */
function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {
  var size = matrix.size;
  var bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
  var i, mod;
  for (i = 0; i < 15; i++) {
    mod = (bits >> i & 1) === 1;

    // vertical
    if (i < 6) {
      matrix.set(i, 8, mod, true);
    } else if (i < 8) {
      matrix.set(i + 1, 8, mod, true);
    } else {
      matrix.set(size - 15 + i, 8, mod, true);
    }

    // horizontal
    if (i < 8) {
      matrix.set(8, size - i - 1, mod, true);
    } else if (i < 9) {
      matrix.set(8, 15 - i - 1 + 1, mod, true);
    } else {
      matrix.set(8, 15 - i - 1, mod, true);
    }
  }

  // fixed module
  matrix.set(size - 8, 8, 1, true);
}

/**
 * Add encoded data bits to matrix
 *
 * @param  {BitMatrix} matrix Modules matrix
 * @param  {Buffer}    data   Data codewords
 */
function setupData(matrix, data) {
  var size = matrix.size;
  var inc = -1;
  var row = size - 1;
  var bitIndex = 7;
  var byteIndex = 0;
  for (var col = size - 1; col > 0; col -= 2) {
    if (col === 6) col--;
    while (true) {
      for (var c = 0; c < 2; c++) {
        if (!matrix.isReserved(row, col - c)) {
          var dark = false;
          if (byteIndex < data.length) {
            dark = (data[byteIndex] >>> bitIndex & 1) === 1;
          }
          matrix.set(row, col - c, dark);
          bitIndex--;
          if (bitIndex === -1) {
            byteIndex++;
            bitIndex = 7;
          }
        }
      }
      row += inc;
      if (row < 0 || size <= row) {
        row -= inc;
        inc = -inc;
        break;
      }
    }
  }
}

/**
 * Create encoded codewords from data input
 *
 * @param  {Number}   version              QR Code version
 * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
 * @param  {ByteData} data                 Data input
 * @return {Buffer}                        Buffer containing encoded codewords
 */
function createData(version, errorCorrectionLevel, segments) {
  // Prepare data buffer
  var buffer = new BitBuffer();
  segments.forEach(function (data) {
    // prefix data with mode indicator (4 bits)
    buffer.put(data.mode.bit, 4);

    // Prefix data with character count indicator.
    // The character count indicator is a string of bits that represents the
    // number of characters that are being encoded.
    // The character count indicator must be placed after the mode indicator
    // and must be a certain number of bits long, depending on the QR version
    // and data mode
    // @see {@link Mode.getCharCountIndicator}.
    buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version));

    // add binary data sequence to buffer
    data.write(buffer);
  });

  // Calculate required number of bits
  var totalCodewords = Utils.getSymbolTotalCodewords(version);
  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);
  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

  // Add a terminator.
  // If the bit string is shorter than the total number of required bits,
  // a terminator of up to four 0s must be added to the right side of the string.
  // If the bit string is more than four bits shorter than the required number of bits,
  // add four 0s to the end.
  if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
    buffer.put(0, 4);
  }

  // If the bit string is fewer than four bits shorter, add only the number of 0s that
  // are needed to reach the required number of bits.

  // After adding the terminator, if the number of bits in the string is not a multiple of 8,
  // pad the string on the right with 0s to make the string's length a multiple of 8.
  while (buffer.getLengthInBits() % 8 !== 0) {
    buffer.putBit(0);
  }

  // Add pad bytes if the string is still shorter than the total number of required bits.
  // Extend the buffer to fill the data capacity of the symbol corresponding to
  // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)
  // and 00010001 (0x11) alternately.
  var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
  for (var i = 0; i < remainingByte; i++) {
    buffer.put(i % 2 ? 0x11 : 0xEC, 8);
  }
  return createCodewords(buffer, version, errorCorrectionLevel);
}

/**
 * Encode input data with Reed-Solomon and return codewords with
 * relative error correction bits
 *
 * @param  {BitBuffer} bitBuffer            Data to encode
 * @param  {Number}    version              QR Code version
 * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
 * @return {Buffer}                         Buffer containing encoded codewords
 */
function createCodewords(bitBuffer, version, errorCorrectionLevel) {
  // Total codewords for this QR code version (Data + Error correction)
  var totalCodewords = Utils.getSymbolTotalCodewords(version);

  // Total number of error correction codewords
  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);

  // Total number of data codewords
  var dataTotalCodewords = totalCodewords - ecTotalCodewords;

  // Total number of blocks
  var ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel);

  // Calculate how many blocks each group should contain
  var blocksInGroup2 = totalCodewords % ecTotalBlocks;
  var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;
  var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);
  var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
  var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;

  // Number of EC codewords is the same for both groups
  var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;

  // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount
  var rs = new ReedSolomonEncoder(ecCount);
  var offset = 0;
  var dcData = new Array(ecTotalBlocks);
  var ecData = new Array(ecTotalBlocks);
  var maxDataSize = 0;
  var buffer = BufferUtil.from(bitBuffer.buffer);

  // Divide the buffer into the required number of blocks
  for (var b = 0; b < ecTotalBlocks; b++) {
    var dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;

    // extract a block of data from buffer
    dcData[b] = buffer.slice(offset, offset + dataSize);

    // Calculate EC codewords for this data block
    ecData[b] = rs.encode(dcData[b]);
    offset += dataSize;
    maxDataSize = Math.max(maxDataSize, dataSize);
  }

  // Create final data
  // Interleave the data and error correction codewords from each block
  var data = BufferUtil.alloc(totalCodewords);
  var index = 0;
  var i, r;

  // Add data codewords
  for (i = 0; i < maxDataSize; i++) {
    for (r = 0; r < ecTotalBlocks; r++) {
      if (i < dcData[r].length) {
        data[index++] = dcData[r][i];
      }
    }
  }

  // Apped EC codewords
  for (i = 0; i < ecCount; i++) {
    for (r = 0; r < ecTotalBlocks; r++) {
      data[index++] = ecData[r][i];
    }
  }
  return data;
}

/**
 * Build QR Code symbol
 *
 * @param  {String} data                 Input string
 * @param  {Number} version              QR Code version
 * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
 * @param  {MaskPattern} maskPattern     Mask pattern
 * @return {Object}                      Object containing symbol data
 */
function createSymbol(data, version, errorCorrectionLevel, maskPattern) {
  var segments;
  if (isArray(data)) {
    segments = Segments.fromArray(data);
  } else if (typeof data === 'string') {
    var estimatedVersion = version;
    if (!estimatedVersion) {
      var rawSegments = Segments.rawSplit(data);

      // Estimate best version that can contain raw splitted segments
      estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel);
    }

    // Build optimized segments
    // If estimated version is undefined, try with the highest version
    segments = Segments.fromString(data, estimatedVersion || 40);
  } else {
    throw new Error('Invalid data');
  }

  // Get the min version that can contain data
  var bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel);

  // If no version is found, data cannot be stored
  if (!bestVersion) {
    throw new Error('The amount of data is too big to be stored in a QR Code');
  }

  // If not specified, use min version as default
  if (!version) {
    version = bestVersion;

    // Check if the specified version can contain the data
  } else if (version < bestVersion) {
    throw new Error('\n' + 'The chosen QR Code version cannot contain this amount of data.\n' + 'Minimum version required to store current data is: ' + bestVersion + '.\n');
  }
  var dataBits = createData(version, errorCorrectionLevel, segments);

  // Allocate matrix buffer
  var moduleCount = Utils.getSymbolSize(version);
  var modules = new BitMatrix(moduleCount);

  // Add function modules
  setupFinderPattern(modules, version);
  setupTimingPattern(modules);
  setupAlignmentPattern(modules, version);

  // Add temporary dummy bits for format info just to set them as reserved.
  // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}
  // since the masking operation must be performed only on the encoding region.
  // These blocks will be replaced with correct values later in code.
  setupFormatInfo(modules, errorCorrectionLevel, 0);
  if (version >= 7) {
    setupVersionInfo(modules, version);
  }

  // Add data codewords
  setupData(modules, dataBits);
  if (isNaN(maskPattern)) {
    // Find best mask pattern
    maskPattern = MaskPattern.getBestMask(modules, setupFormatInfo.bind(null, modules, errorCorrectionLevel));
  }

  // Apply mask pattern
  MaskPattern.applyMask(maskPattern, modules);

  // Replace format info bits with correct values
  setupFormatInfo(modules, errorCorrectionLevel, maskPattern);
  return {
    modules: modules,
    version: version,
    errorCorrectionLevel: errorCorrectionLevel,
    maskPattern: maskPattern,
    segments: segments
  };
}

/**
 * QR Code
 *
 * @param {String | Array} data                 Input data
 * @param {Object} options                      Optional configurations
 * @param {Number} options.version              QR Code version
 * @param {String} options.errorCorrectionLevel Error correction level
 * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
 */
exports.create = function create(data, options) {
  if (typeof data === 'undefined' || data === '') {
    throw new Error('No input text');
  }
  var errorCorrectionLevel = ECLevel.M;
  var version;
  var mask;
  if (typeof options !== 'undefined') {
    // Use higher error correction level as default
    errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);
    version = Version.from(options.version);
    mask = MaskPattern.from(options.maskPattern);
    if (options.toSJISFunc) {
      Utils.setToSJISFunction(options.toSJISFunc);
    }
  }
  return createSymbol(data, version, errorCorrectionLevel, mask);
};
},{"../utils/buffer":"node_modules/qrcode/lib/utils/typedarray-buffer.js","./utils":"node_modules/qrcode/lib/core/utils.js","./error-correction-level":"node_modules/qrcode/lib/core/error-correction-level.js","./bit-buffer":"node_modules/qrcode/lib/core/bit-buffer.js","./bit-matrix":"node_modules/qrcode/lib/core/bit-matrix.js","./alignment-pattern":"node_modules/qrcode/lib/core/alignment-pattern.js","./finder-pattern":"node_modules/qrcode/lib/core/finder-pattern.js","./mask-pattern":"node_modules/qrcode/lib/core/mask-pattern.js","./error-correction-code":"node_modules/qrcode/lib/core/error-correction-code.js","./reed-solomon-encoder":"node_modules/qrcode/lib/core/reed-solomon-encoder.js","./version":"node_modules/qrcode/lib/core/version.js","./format-info":"node_modules/qrcode/lib/core/format-info.js","./mode":"node_modules/qrcode/lib/core/mode.js","./segments":"node_modules/qrcode/lib/core/segments.js","isarray":"node_modules/isarray/index.js"}],"node_modules/qrcode/lib/renderer/utils.js":[function(require,module,exports) {
function hex2rgba(hex) {
  if (typeof hex === 'number') {
    hex = hex.toString();
  }
  if (typeof hex !== 'string') {
    throw new Error('Color should be defined as hex string');
  }
  var hexCode = hex.slice().replace('#', '').split('');
  if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
    throw new Error('Invalid hex color: ' + hex);
  }

  // Convert from short to long form (fff -> ffffff)
  if (hexCode.length === 3 || hexCode.length === 4) {
    hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {
      return [c, c];
    }));
  }

  // Add default alpha value
  if (hexCode.length === 6) hexCode.push('F', 'F');
  var hexValue = parseInt(hexCode.join(''), 16);
  return {
    r: hexValue >> 24 & 255,
    g: hexValue >> 16 & 255,
    b: hexValue >> 8 & 255,
    a: hexValue & 255,
    hex: '#' + hexCode.slice(0, 6).join('')
  };
}
exports.getOptions = function getOptions(options) {
  if (!options) options = {};
  if (!options.color) options.color = {};
  var margin = typeof options.margin === 'undefined' || options.margin === null || options.margin < 0 ? 4 : options.margin;
  var width = options.width && options.width >= 21 ? options.width : undefined;
  var scale = options.scale || 4;
  return {
    width: width,
    scale: width ? 4 : scale,
    margin: margin,
    color: {
      dark: hex2rgba(options.color.dark || '#000000ff'),
      light: hex2rgba(options.color.light || '#ffffffff')
    },
    type: options.type,
    rendererOpts: options.rendererOpts || {}
  };
};
exports.getScale = function getScale(qrSize, opts) {
  return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;
};
exports.getImageWidth = function getImageWidth(qrSize, opts) {
  var scale = exports.getScale(qrSize, opts);
  return Math.floor((qrSize + opts.margin * 2) * scale);
};
exports.qrToImageData = function qrToImageData(imgData, qr, opts) {
  var size = qr.modules.size;
  var data = qr.modules.data;
  var scale = exports.getScale(size, opts);
  var symbolSize = Math.floor((size + opts.margin * 2) * scale);
  var scaledMargin = opts.margin * scale;
  var palette = [opts.color.light, opts.color.dark];
  for (var i = 0; i < symbolSize; i++) {
    for (var j = 0; j < symbolSize; j++) {
      var posDst = (i * symbolSize + j) * 4;
      var pxColor = opts.color.light;
      if (i >= scaledMargin && j >= scaledMargin && i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
        var iSrc = Math.floor((i - scaledMargin) / scale);
        var jSrc = Math.floor((j - scaledMargin) / scale);
        pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
      }
      imgData[posDst++] = pxColor.r;
      imgData[posDst++] = pxColor.g;
      imgData[posDst++] = pxColor.b;
      imgData[posDst] = pxColor.a;
    }
  }
};
},{}],"node_modules/qrcode/lib/renderer/canvas.js":[function(require,module,exports) {
var Utils = require('./utils');
function clearCanvas(ctx, canvas, size) {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  if (!canvas.style) canvas.style = {};
  canvas.height = size;
  canvas.width = size;
  canvas.style.height = size + 'px';
  canvas.style.width = size + 'px';
}
function getCanvasElement() {
  try {
    return document.createElement('canvas');
  } catch (e) {
    throw new Error('You need to specify a canvas element');
  }
}
exports.render = function render(qrData, canvas, options) {
  var opts = options;
  var canvasEl = canvas;
  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
    opts = canvas;
    canvas = undefined;
  }
  if (!canvas) {
    canvasEl = getCanvasElement();
  }
  opts = Utils.getOptions(opts);
  var size = Utils.getImageWidth(qrData.modules.size, opts);
  var ctx = canvasEl.getContext('2d');
  var image = ctx.createImageData(size, size);
  Utils.qrToImageData(image.data, qrData, opts);
  clearCanvas(ctx, canvasEl, size);
  ctx.putImageData(image, 0, 0);
  return canvasEl;
};
exports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {
  var opts = options;
  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
    opts = canvas;
    canvas = undefined;
  }
  if (!opts) opts = {};
  var canvasEl = exports.render(qrData, canvas, opts);
  var type = opts.type || 'image/png';
  var rendererOpts = opts.rendererOpts || {};
  return canvasEl.toDataURL(type, rendererOpts.quality);
};
},{"./utils":"node_modules/qrcode/lib/renderer/utils.js"}],"node_modules/qrcode/lib/renderer/svg-tag.js":[function(require,module,exports) {
var Utils = require('./utils');
function getColorAttrib(color, attrib) {
  var alpha = color.a / 255;
  var str = attrib + '="' + color.hex + '"';
  return alpha < 1 ? str + ' ' + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"' : str;
}
function svgCmd(cmd, x, y) {
  var str = cmd + x;
  if (typeof y !== 'undefined') str += ' ' + y;
  return str;
}
function qrToPath(data, size, margin) {
  var path = '';
  var moveBy = 0;
  var newRow = false;
  var lineLength = 0;
  for (var i = 0; i < data.length; i++) {
    var col = Math.floor(i % size);
    var row = Math.floor(i / size);
    if (!col && !newRow) newRow = true;
    if (data[i]) {
      lineLength++;
      if (!(i > 0 && col > 0 && data[i - 1])) {
        path += newRow ? svgCmd('M', col + margin, 0.5 + row + margin) : svgCmd('m', moveBy, 0);
        moveBy = 0;
        newRow = false;
      }
      if (!(col + 1 < size && data[i + 1])) {
        path += svgCmd('h', lineLength);
        lineLength = 0;
      }
    } else {
      moveBy++;
    }
  }
  return path;
}
exports.render = function render(qrData, options, cb) {
  var opts = Utils.getOptions(options);
  var size = qrData.modules.size;
  var data = qrData.modules.data;
  var qrcodesize = size + opts.margin * 2;
  var bg = !opts.color.light.a ? '' : '<path ' + getColorAttrib(opts.color.light, 'fill') + ' d="M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z"/>';
  var path = '<path ' + getColorAttrib(opts.color.dark, 'stroke') + ' d="' + qrToPath(data, size, opts.margin) + '"/>';
  var viewBox = 'viewBox="' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '"';
  var width = !opts.width ? '' : 'width="' + opts.width + '" height="' + opts.width + '" ';
  var svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + '</svg>\n';
  if (typeof cb === 'function') {
    cb(null, svgTag);
  }
  return svgTag;
};
},{"./utils":"node_modules/qrcode/lib/renderer/utils.js"}],"node_modules/qrcode/lib/browser.js":[function(require,module,exports) {
var canPromise = require('./can-promise');
var QRCode = require('./core/qrcode');
var CanvasRenderer = require('./renderer/canvas');
var SvgRenderer = require('./renderer/svg-tag.js');
function renderCanvas(renderFunc, canvas, text, opts, cb) {
  var args = [].slice.call(arguments, 1);
  var argsNum = args.length;
  var isLastArgCb = typeof args[argsNum - 1] === 'function';
  if (!isLastArgCb && !canPromise()) {
    throw new Error('Callback required as last argument');
  }
  if (isLastArgCb) {
    if (argsNum < 2) {
      throw new Error('Too few arguments provided');
    }
    if (argsNum === 2) {
      cb = text;
      text = canvas;
      canvas = opts = undefined;
    } else if (argsNum === 3) {
      if (canvas.getContext && typeof cb === 'undefined') {
        cb = opts;
        opts = undefined;
      } else {
        cb = opts;
        opts = text;
        text = canvas;
        canvas = undefined;
      }
    }
  } else {
    if (argsNum < 1) {
      throw new Error('Too few arguments provided');
    }
    if (argsNum === 1) {
      text = canvas;
      canvas = opts = undefined;
    } else if (argsNum === 2 && !canvas.getContext) {
      opts = text;
      text = canvas;
      canvas = undefined;
    }
    return new Promise(function (resolve, reject) {
      try {
        var data = QRCode.create(text, opts);
        resolve(renderFunc(data, canvas, opts));
      } catch (e) {
        reject(e);
      }
    });
  }
  try {
    var data = QRCode.create(text, opts);
    cb(null, renderFunc(data, canvas, opts));
  } catch (e) {
    cb(e);
  }
}
exports.create = QRCode.create;
exports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);
exports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);

// only svg for now.
exports.toString = renderCanvas.bind(null, function (data, _, opts) {
  return SvgRenderer.render(data, opts);
});
},{"./can-promise":"node_modules/qrcode/lib/can-promise.js","./core/qrcode":"node_modules/qrcode/lib/core/qrcode.js","./renderer/canvas":"node_modules/qrcode/lib/renderer/canvas.js","./renderer/svg-tag.js":"node_modules/qrcode/lib/renderer/svg-tag.js"}],"node_modules/toggle-selection/index.js":[function(require,module,exports) {

module.exports = function () {
  var selection = document.getSelection();
  if (!selection.rangeCount) {
    return function () {};
  }
  var active = document.activeElement;

  var ranges = [];
  for (var i = 0; i < selection.rangeCount; i++) {
    ranges.push(selection.getRangeAt(i));
  }

  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML
    case 'INPUT':
    case 'TEXTAREA':
      active.blur();
      break;

    default:
      active = null;
      break;
  }

  selection.removeAllRanges();
  return function () {
    selection.type === 'Caret' &&
    selection.removeAllRanges();

    if (!selection.rangeCount) {
      ranges.forEach(function(range) {
        selection.addRange(range);
      });
    }

    active &&
    active.focus();
  };
};

},{}],"node_modules/copy-to-clipboard/index.js":[function(require,module,exports) {
"use strict";

var deselectCurrent = require("toggle-selection");

var clipboardToIE11Formatting = {
  "text/plain": "Text",
  "text/html": "Url",
  "default": "Text"
}

var defaultMessage = "Copy to clipboard: #{key}, Enter";

function format(message) {
  var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
  return message.replace(/#{\s*key\s*}/g, copyKey);
}

function copy(text, options) {
  var debug,
    message,
    reselectPrevious,
    range,
    selection,
    mark,
    success = false;
  if (!options) {
    options = {};
  }
  debug = options.debug || false;
  try {
    reselectPrevious = deselectCurrent();

    range = document.createRange();
    selection = document.getSelection();

    mark = document.createElement("span");
    mark.textContent = text;
    // avoid screen readers from reading out loud the text
    mark.ariaHidden = "true"
    // reset user styles for span element
    mark.style.all = "unset";
    // prevents scrolling to the end of the page
    mark.style.position = "fixed";
    mark.style.top = 0;
    mark.style.clip = "rect(0, 0, 0, 0)";
    // used to preserve spaces and line breaks
    mark.style.whiteSpace = "pre";
    // do not inherit user-select (it may be `none`)
    mark.style.webkitUserSelect = "text";
    mark.style.MozUserSelect = "text";
    mark.style.msUserSelect = "text";
    mark.style.userSelect = "text";
    mark.addEventListener("copy", function(e) {
      e.stopPropagation();
      if (options.format) {
        e.preventDefault();
        if (typeof e.clipboardData === "undefined") { // IE 11
          debug && console.warn("unable to use e.clipboardData");
          debug && console.warn("trying IE specific stuff");
          window.clipboardData.clearData();
          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"]
          window.clipboardData.setData(format, text);
        } else { // all other browsers
          e.clipboardData.clearData();
          e.clipboardData.setData(options.format, text);
        }
      }
      if (options.onCopy) {
        e.preventDefault();
        options.onCopy(e.clipboardData);
      }
    });

    document.body.appendChild(mark);

    range.selectNodeContents(mark);
    selection.addRange(range);

    var successful = document.execCommand("copy");
    if (!successful) {
      throw new Error("copy command was unsuccessful");
    }
    success = true;
  } catch (err) {
    debug && console.error("unable to copy using execCommand: ", err);
    debug && console.warn("trying IE specific stuff");
    try {
      window.clipboardData.setData(options.format || "text", text);
      options.onCopy && options.onCopy(window.clipboardData);
      success = true;
    } catch (err) {
      debug && console.error("unable to copy using clipboardData: ", err);
      debug && console.error("falling back to prompt");
      message = format("message" in options ? options.message : defaultMessage);
      window.prompt(message, text);
    }
  } finally {
    if (selection) {
      if (typeof selection.removeRange == "function") {
        selection.removeRange(range);
      } else {
        selection.removeAllRanges();
      }
    }

    if (mark) {
      document.body.removeChild(mark);
    }
    reselectPrevious();
  }

  return success;
}

module.exports = copy;

},{"toggle-selection":"node_modules/toggle-selection/index.js"}],"node_modules/preact/dist/preact.module.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = m;
exports.Fragment = d;
exports._unmount = D;
exports.cloneElement = L;
exports.createContext = M;
exports.h = exports.createElement = h;
exports.createRef = y;
exports.hydrate = I;
exports.options = exports.isValidElement = void 0;
exports.render = H;
exports.toChildArray = x;
var n,
  l,
  u,
  i,
  t,
  r,
  o,
  f,
  e = {},
  c = [],
  s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;
exports.isValidElement = l;
exports.options = n;
function a(n, l) {
  for (var u in l) n[u] = l[u];
  return n;
}
function v(n) {
  var l = n.parentNode;
  l && l.removeChild(n);
}
function h(n, l, u) {
  var i,
    t = arguments,
    r = {};
  for (i in l) "key" !== i && "ref" !== i && (r[i] = l[i]);
  if (arguments.length > 3) for (u = [u], i = 3; i < arguments.length; i++) u.push(t[i]);
  if (null != u && (r.children = u), "function" == typeof n && null != n.defaultProps) for (i in n.defaultProps) void 0 === r[i] && (r[i] = n.defaultProps[i]);
  return p(n, r, l && l.key, l && l.ref, null);
}
function p(l, u, i, t, r) {
  var o = {
    type: l,
    props: u,
    key: i,
    ref: t,
    __k: null,
    __: null,
    __b: 0,
    __e: null,
    __d: void 0,
    __c: null,
    constructor: void 0,
    __v: r
  };
  return null == r && (o.__v = o), n.vnode && n.vnode(o), o;
}
function y() {
  return {};
}
function d(n) {
  return n.children;
}
function m(n, l) {
  this.props = n, this.context = l;
}
function w(n, l) {
  if (null == l) return n.__ ? w(n.__, n.__.__k.indexOf(n) + 1) : null;
  for (var u; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) return u.__e;
  return "function" == typeof n.type ? w(n) : null;
}
function k(n) {
  var l, u;
  if (null != (n = n.__) && null != n.__c) {
    for (n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) {
      n.__e = n.__c.base = u.__e;
      break;
    }
    return k(n);
  }
}
function g(l) {
  (!l.__d && (l.__d = !0) && u.push(l) && !i++ || r !== n.debounceRendering) && ((r = n.debounceRendering) || t)(_);
}
function _() {
  for (var n; i = u.length;) n = u.sort(function (n, l) {
    return n.__v.__b - l.__v.__b;
  }), u = [], n.some(function (n) {
    var l, u, i, t, r, o, f;
    n.__d && (o = (r = (l = n).__v).__e, (f = l.__P) && (u = [], (i = a({}, r)).__v = i, t = A(f, r, i, l.__n, void 0 !== f.ownerSVGElement, null, u, null == o ? w(r) : o), T(u, r), t != o && k(r)));
  });
}
function b(n, l, u, i, t, r, o, f, s) {
  var a,
    h,
    p,
    y,
    d,
    m,
    k,
    g = u && u.__k || c,
    _ = g.length;
  if (f == e && (f = null != r ? r[0] : _ ? w(u, 0) : null), a = 0, l.__k = x(l.__k, function (u) {
    if (null != u) {
      if (u.__ = l, u.__b = l.__b + 1, null === (p = g[a]) || p && u.key == p.key && u.type === p.type) g[a] = void 0;else for (h = 0; h < _; h++) {
        if ((p = g[h]) && u.key == p.key && u.type === p.type) {
          g[h] = void 0;
          break;
        }
        p = null;
      }
      if (y = A(n, u, p = p || e, i, t, r, o, f, s), (h = u.ref) && p.ref != h && (k || (k = []), p.ref && k.push(p.ref, null, u), k.push(h, u.__c || y, u)), null != y) {
        var c;
        if (null == m && (m = y), void 0 !== u.__d) c = u.__d, u.__d = void 0;else if (r == p || y != f || null == y.parentNode) {
          n: if (null == f || f.parentNode !== n) n.appendChild(y), c = null;else {
            for (d = f, h = 0; (d = d.nextSibling) && h < _; h += 2) if (d == y) break n;
            n.insertBefore(y, f), c = f;
          }
          "option" == l.type && (n.value = "");
        }
        f = void 0 !== c ? c : y.nextSibling, "function" == typeof l.type && (l.__d = f);
      } else f && p.__e == f && f.parentNode != n && (f = w(p));
    }
    return a++, u;
  }), l.__e = m, null != r && "function" != typeof l.type) for (a = r.length; a--;) null != r[a] && v(r[a]);
  for (a = _; a--;) null != g[a] && D(g[a], g[a]);
  if (k) for (a = 0; a < k.length; a++) j(k[a], k[++a], k[++a]);
}
function x(n, l, u) {
  if (null == u && (u = []), null == n || "boolean" == typeof n) l && u.push(l(null));else if (Array.isArray(n)) for (var i = 0; i < n.length; i++) x(n[i], l, u);else u.push(l ? l("string" == typeof n || "number" == typeof n ? p(null, n, null, null, n) : null != n.__e || null != n.__c ? p(n.type, n.props, n.key, null, n.__v) : n) : n);
  return u;
}
function P(n, l, u, i, t) {
  var r;
  for (r in u) "children" === r || "key" === r || r in l || N(n, r, null, u[r], i);
  for (r in l) t && "function" != typeof l[r] || "children" === r || "key" === r || "value" === r || "checked" === r || u[r] === l[r] || N(n, r, l[r], u[r], i);
}
function C(n, l, u) {
  "-" === l[0] ? n.setProperty(l, u) : n[l] = "number" == typeof u && !1 === s.test(l) ? u + "px" : null == u ? "" : u;
}
function N(n, l, u, i, t) {
  var r, o, f, e, c;
  if (t ? "className" === l && (l = "class") : "class" === l && (l = "className"), "style" === l) {
    if (r = n.style, "string" == typeof u) r.cssText = u;else {
      if ("string" == typeof i && (r.cssText = "", i = null), i) for (e in i) u && e in u || C(r, e, "");
      if (u) for (c in u) i && u[c] === i[c] || C(r, c, u[c]);
    }
  } else "o" === l[0] && "n" === l[1] ? (o = l !== (l = l.replace(/Capture$/, "")), f = l.toLowerCase(), l = (f in n ? f : l).slice(2), u ? (i || n.addEventListener(l, z, o), (n.l || (n.l = {}))[l] = u) : n.removeEventListener(l, z, o)) : "list" !== l && "tagName" !== l && "form" !== l && "type" !== l && "size" !== l && !t && l in n ? n[l] = null == u ? "" : u : "function" != typeof u && "dangerouslySetInnerHTML" !== l && (l !== (l = l.replace(/^xlink:?/, "")) ? null == u || !1 === u ? n.removeAttributeNS("http://www.w3.org/1999/xlink", l.toLowerCase()) : n.setAttributeNS("http://www.w3.org/1999/xlink", l.toLowerCase(), u) : null == u || !1 === u && !/^ar/.test(l) ? n.removeAttribute(l) : n.setAttribute(l, u));
}
function z(l) {
  this.l[l.type](n.event ? n.event(l) : l);
}
function A(l, u, i, t, r, o, f, e, c) {
  var s,
    v,
    h,
    p,
    y,
    w,
    k,
    g,
    _,
    x,
    P = u.type;
  if (void 0 !== u.constructor) return null;
  (s = n.__b) && s(u);
  try {
    n: if ("function" == typeof P) {
      if (g = u.props, _ = (s = P.contextType) && t[s.__c], x = s ? _ ? _.props.value : s.__ : t, i.__c ? k = (v = u.__c = i.__c).__ = v.__E : ("prototype" in P && P.prototype.render ? u.__c = v = new P(g, x) : (u.__c = v = new m(g, x), v.constructor = P, v.render = E), _ && _.sub(v), v.props = g, v.state || (v.state = {}), v.context = x, v.__n = t, h = v.__d = !0, v.__h = []), null == v.__s && (v.__s = v.state), null != P.getDerivedStateFromProps && (v.__s == v.state && (v.__s = a({}, v.__s)), a(v.__s, P.getDerivedStateFromProps(g, v.__s))), p = v.props, y = v.state, h) null == P.getDerivedStateFromProps && null != v.componentWillMount && v.componentWillMount(), null != v.componentDidMount && v.__h.push(v.componentDidMount);else {
        if (null == P.getDerivedStateFromProps && g !== p && null != v.componentWillReceiveProps && v.componentWillReceiveProps(g, x), !v.__e && null != v.shouldComponentUpdate && !1 === v.shouldComponentUpdate(g, v.__s, x) || u.__v === i.__v && !v.__) {
          for (v.props = g, v.state = v.__s, u.__v !== i.__v && (v.__d = !1), v.__v = u, u.__e = i.__e, u.__k = i.__k, v.__h.length && f.push(v), s = 0; s < u.__k.length; s++) u.__k[s] && (u.__k[s].__ = u);
          break n;
        }
        null != v.componentWillUpdate && v.componentWillUpdate(g, v.__s, x), null != v.componentDidUpdate && v.__h.push(function () {
          v.componentDidUpdate(p, y, w);
        });
      }
      v.context = x, v.props = g, v.state = v.__s, (s = n.__r) && s(u), v.__d = !1, v.__v = u, v.__P = l, s = v.render(v.props, v.state, v.context), u.__k = null != s && s.type == d && null == s.key ? s.props.children : Array.isArray(s) ? s : [s], null != v.getChildContext && (t = a(a({}, t), v.getChildContext())), h || null == v.getSnapshotBeforeUpdate || (w = v.getSnapshotBeforeUpdate(p, y)), b(l, u, i, t, r, o, f, e, c), v.base = u.__e, v.__h.length && f.push(v), k && (v.__E = v.__ = null), v.__e = !1;
    } else null == o && u.__v === i.__v ? (u.__k = i.__k, u.__e = i.__e) : u.__e = $(i.__e, u, i, t, r, o, f, c);
    (s = n.diffed) && s(u);
  } catch (l) {
    u.__v = null, n.__e(l, u, i);
  }
  return u.__e;
}
function T(l, u) {
  n.__c && n.__c(u, l), l.some(function (u) {
    try {
      l = u.__h, u.__h = [], l.some(function (n) {
        n.call(u);
      });
    } catch (l) {
      n.__e(l, u.__v);
    }
  });
}
function $(n, l, u, i, t, r, o, f) {
  var s,
    a,
    v,
    h,
    p,
    y = u.props,
    d = l.props;
  if (t = "svg" === l.type || t, null != r) for (s = 0; s < r.length; s++) if (null != (a = r[s]) && ((null === l.type ? 3 === a.nodeType : a.localName === l.type) || n == a)) {
    n = a, r[s] = null;
    break;
  }
  if (null == n) {
    if (null === l.type) return document.createTextNode(d);
    n = t ? document.createElementNS("http://www.w3.org/2000/svg", l.type) : document.createElement(l.type, d.is && {
      is: d.is
    }), r = null, f = !1;
  }
  if (null === l.type) y !== d && n.data != d && (n.data = d);else {
    if (null != r && (r = c.slice.call(n.childNodes)), v = (y = u.props || e).dangerouslySetInnerHTML, h = d.dangerouslySetInnerHTML, !f) {
      if (y === e) for (y = {}, p = 0; p < n.attributes.length; p++) y[n.attributes[p].name] = n.attributes[p].value;
      (h || v) && (h && v && h.__html == v.__html || (n.innerHTML = h && h.__html || ""));
    }
    P(n, d, y, t, f), h ? l.__k = [] : (l.__k = l.props.children, b(n, l, u, i, "foreignObject" !== l.type && t, r, o, e, f)), f || ("value" in d && void 0 !== (s = d.value) && s !== n.value && N(n, "value", s, y.value, !1), "checked" in d && void 0 !== (s = d.checked) && s !== n.checked && N(n, "checked", s, y.checked, !1));
  }
  return n;
}
function j(l, u, i) {
  try {
    "function" == typeof l ? l(u) : l.current = u;
  } catch (l) {
    n.__e(l, i);
  }
}
function D(l, u, i) {
  var t, r, o;
  if (n.unmount && n.unmount(l), (t = l.ref) && (t.current && t.current !== l.__e || j(t, null, u)), i || "function" == typeof l.type || (i = null != (r = l.__e)), l.__e = l.__d = void 0, null != (t = l.__c)) {
    if (t.componentWillUnmount) try {
      t.componentWillUnmount();
    } catch (l) {
      n.__e(l, u);
    }
    t.base = t.__P = null;
  }
  if (t = l.__k) for (o = 0; o < t.length; o++) t[o] && D(t[o], u, i);
  null != r && v(r);
}
function E(n, l, u) {
  return this.constructor(n, u);
}
function H(l, u, i) {
  var t, r, f;
  n.__ && n.__(l, u), r = (t = i === o) ? null : i && i.__k || u.__k, l = h(d, null, [l]), f = [], A(u, (t ? u : i || u).__k = l, r || e, e, void 0 !== u.ownerSVGElement, i && !t ? [i] : r ? null : c.slice.call(u.childNodes), f, i || e, t), T(f, l);
}
function I(n, l) {
  H(n, l, o);
}
function L(n, l) {
  var u, i;
  for (i in l = a(a({}, n.props), l), arguments.length > 2 && (l.children = c.slice.call(arguments, 2)), u = {}, l) "key" !== i && "ref" !== i && (u[i] = l[i]);
  return p(n.type, u, l.key || n.key, l.ref || n.ref, null);
}
function M(n) {
  var l = {},
    u = {
      __c: "__cC" + f++,
      __: n,
      Consumer: function (n, l) {
        return n.children(l);
      },
      Provider: function (n) {
        var i,
          t = this;
        return this.getChildContext || (i = [], this.getChildContext = function () {
          return l[u.__c] = t, l;
        }, this.shouldComponentUpdate = function (n) {
          t.props.value !== n.value && i.some(function (l) {
            l.context = n.value, g(l);
          });
        }, this.sub = function (n) {
          i.push(n);
          var l = n.componentWillUnmount;
          n.componentWillUnmount = function () {
            i.splice(i.indexOf(n), 1), l && l.call(n);
          };
        }), n.children;
      }
    };
  return u.Consumer.contextType = u, u.Provider.__ = u, u;
}
exports.options = n = {
  __e: function (n, l) {
    for (var u, i; l = l.__;) if ((u = l.__c) && !u.__) try {
      if (u.constructor && null != u.constructor.getDerivedStateFromError && (i = !0, u.setState(u.constructor.getDerivedStateFromError(n))), null != u.componentDidCatch && (i = !0, u.componentDidCatch(n)), i) return g(u.__E = u);
    } catch (l) {
      n = l;
    }
    throw n;
  }
}, exports.isValidElement = l = function (n) {
  return null != n && void 0 === n.constructor;
}, m.prototype.setState = function (n, l) {
  var u;
  u = this.__s !== this.state ? this.__s : this.__s = a({}, this.state), "function" == typeof n && (n = n(u, this.props)), n && a(u, n), null != n && this.__v && (l && this.__h.push(l), g(this));
}, m.prototype.forceUpdate = function (n) {
  this.__v && (this.__e = !0, n && this.__h.push(n), g(this));
}, m.prototype.render = d, u = [], i = 0, t = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, o = e, f = 0;
},{}],"node_modules/preact/hooks/dist/hooks.module.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCallback = T;
exports.useContext = w;
exports.useDebugValue = A;
exports.useEffect = l;
exports.useErrorBoundary = F;
exports.useImperativeHandle = s;
exports.useLayoutEffect = y;
exports.useMemo = h;
exports.useReducer = p;
exports.useRef = d;
exports.useState = m;
var _preact = require("preact");
var t,
  u,
  r,
  i = 0,
  o = [],
  c = _preact.options.__r,
  f = _preact.options.diffed,
  e = _preact.options.__c,
  a = _preact.options.unmount;
function v(t, r) {
  _preact.options.__h && _preact.options.__h(u, t, i || r), i = 0;
  var o = u.__H || (u.__H = {
    __: [],
    __h: []
  });
  return t >= o.__.length && o.__.push({}), o.__[t];
}
function m(n) {
  return i = 1, p(E, n);
}
function p(n, r, i) {
  var o = v(t++, 2);
  return o.__c || (o.__c = u, o.__ = [i ? i(r) : E(void 0, r), function (t) {
    var u = n(o.__[0], t);
    o.__[0] !== u && (o.__[0] = u, o.__c.setState({}));
  }]), o.__;
}
function l(r, i) {
  var o = v(t++, 3);
  !_preact.options.__s && x(o.__H, i) && (o.__ = r, o.__H = i, u.__H.__h.push(o));
}
function y(r, i) {
  var o = v(t++, 4);
  !_preact.options.__s && x(o.__H, i) && (o.__ = r, o.__H = i, u.__h.push(o));
}
function d(n) {
  return i = 5, h(function () {
    return {
      current: n
    };
  }, []);
}
function s(n, t, u) {
  i = 6, y(function () {
    "function" == typeof n ? n(t()) : n && (n.current = t());
  }, null == u ? u : u.concat(n));
}
function h(n, u) {
  var r = v(t++, 7);
  return x(r.__H, u) ? (r.__H = u, r.__h = n, r.__ = n()) : r.__;
}
function T(n, t) {
  return i = 8, h(function () {
    return n;
  }, t);
}
function w(n) {
  var r = u.context[n.__c],
    i = v(t++, 9);
  return i.__c = n, r ? (null == i.__ && (i.__ = !0, r.sub(u)), r.props.value) : n.__;
}
function A(t, u) {
  _preact.options.useDebugValue && _preact.options.useDebugValue(u ? u(t) : t);
}
function F(n) {
  var r = v(t++, 10),
    i = m();
  return r.__ = n, u.componentDidCatch || (u.componentDidCatch = function (n) {
    r.__ && r.__(n), i[1](n);
  }), [i[0], function () {
    i[1](void 0);
  }];
}
function _() {
  o.some(function (t) {
    if (t.__P) try {
      t.__H.__h.forEach(g), t.__H.__h.forEach(q), t.__H.__h = [];
    } catch (u) {
      return t.__H.__h = [], _preact.options.__e(u, t.__v), !0;
    }
  }), o = [];
}
function g(n) {
  n.t && n.t();
}
function q(n) {
  var t = n.__();
  "function" == typeof t && (n.t = t);
}
function x(n, t) {
  return !n || t.some(function (t, u) {
    return t !== n[u];
  });
}
function E(n, t) {
  return "function" == typeof t ? t(n) : t;
}
_preact.options.__r = function (n) {
  c && c(n), t = 0, (u = n.__c).__H && (u.__H.__h.forEach(g), u.__H.__h.forEach(q), u.__H.__h = []);
}, _preact.options.diffed = function (t) {
  f && f(t);
  var u = t.__c;
  if (u) {
    var i = u.__H;
    i && i.__h.length && (1 !== o.push(u) && r === _preact.options.requestAnimationFrame || ((r = _preact.options.requestAnimationFrame) || function (n) {
      var t,
        u = function () {
          clearTimeout(r), cancelAnimationFrame(t), setTimeout(n);
        },
        r = setTimeout(u, 100);
      "undefined" != typeof window && (t = requestAnimationFrame(u));
    })(_));
  }
}, _preact.options.__c = function (t, u) {
  u.some(function (t) {
    try {
      t.__h.forEach(g), t.__h = t.__h.filter(function (n) {
        return !n.__ || q(n);
      });
    } catch (r) {
      u.some(function (n) {
        n.__h && (n.__h = []);
      }), u = [], _preact.options.__e(r, t.__v);
    }
  }), e && e(t, u);
}, _preact.options.unmount = function (t) {
  a && a(t);
  var u = t.__c;
  if (u) {
    var r = u.__H;
    if (r) try {
      r.__.forEach(function (n) {
        return n.t && n.t();
      });
    } catch (t) {
      _preact.options.__e(t, u.__v);
    }
  }
};
},{"preact":"node_modules/preact/dist/preact.module.js"}],"node_modules/preact/compat/dist/compat.module.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  version: true,
  Children: true,
  render: true,
  hydrate: true,
  unmountComponentAtNode: true,
  createPortal: true,
  createFactory: true,
  cloneElement: true,
  isValidElement: true,
  findDOMNode: true,
  PureComponent: true,
  memo: true,
  forwardRef: true,
  unstable_batchedUpdates: true,
  Suspense: true,
  SuspenseList: true,
  lazy: true,
  createElement: true,
  createContext: true,
  createRef: true,
  Fragment: true,
  Component: true
};
exports.Children = void 0;
Object.defineProperty(exports, "Component", {
  enumerable: true,
  get: function () {
    return _preact.Component;
  }
});
Object.defineProperty(exports, "Fragment", {
  enumerable: true,
  get: function () {
    return _preact.Fragment;
  }
});
exports.PureComponent = void 0;
exports.Suspense = U;
exports.SuspenseList = O;
exports.cloneElement = K;
Object.defineProperty(exports, "createContext", {
  enumerable: true,
  get: function () {
    return _preact.createContext;
  }
});
Object.defineProperty(exports, "createElement", {
  enumerable: true,
  get: function () {
    return _preact.createElement;
  }
});
exports.createFactory = G;
exports.createPortal = z;
Object.defineProperty(exports, "createRef", {
  enumerable: true,
  get: function () {
    return _preact.createRef;
  }
});
exports.default = void 0;
exports.findDOMNode = X;
exports.forwardRef = S;
exports.hydrate = V;
exports.isValidElement = J;
exports.lazy = L;
exports.memo = _;
exports.render = T;
exports.unmountComponentAtNode = Q;
exports.version = exports.unstable_batchedUpdates = void 0;
var _hooks = require("preact/hooks");
Object.keys(_hooks).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _hooks[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _hooks[key];
    }
  });
});
var _preact = require("preact");
function E(n, t) {
  for (var e in t) n[e] = t[e];
  return n;
}
function w(n, t) {
  for (var e in n) if ("__source" !== e && !(e in t)) return !0;
  for (var r in t) if ("__source" !== r && n[r] !== t[r]) return !0;
  return !1;
}
var C = function (n) {
  var t, e;
  function r(t) {
    var e;
    return (e = n.call(this, t) || this).isPureReactComponent = !0, e;
  }
  return e = n, (t = r).prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e, r.prototype.shouldComponentUpdate = function (n, t) {
    return w(this.props, n) || w(this.state, t);
  }, r;
}(_preact.Component);
exports.PureComponent = C;
function _(n, t) {
  function e(n) {
    var e = this.props.ref,
      r = e == n.ref;
    return !r && e && (e.call ? e(null) : e.current = null), t ? !t(this.props, n) || !r : w(this.props, n);
  }
  function r(t) {
    return this.shouldComponentUpdate = e, (0, _preact.createElement)(n, E({}, t));
  }
  return r.prototype.isReactComponent = !0, r.displayName = "Memo(" + (n.displayName || n.name) + ")", r.t = !0, r;
}
var A = _preact.options.__b;
function S(n) {
  function t(t) {
    var e = E({}, t);
    return delete e.ref, n(e, t.ref);
  }
  return t.prototype.isReactComponent = t.t = !0, t.displayName = "ForwardRef(" + (n.displayName || n.name) + ")", t;
}
_preact.options.__b = function (n) {
  n.type && n.type.t && n.ref && (n.props.ref = n.ref, n.ref = null), A && A(n);
};
var k = function (n, t) {
    return n ? (0, _preact.toChildArray)(n).reduce(function (n, e, r) {
      return n.concat(t(e, r));
    }, []) : null;
  },
  R = {
    map: k,
    forEach: k,
    count: function (n) {
      return n ? (0, _preact.toChildArray)(n).length : 0;
    },
    only: function (n) {
      if (1 !== (n = (0, _preact.toChildArray)(n)).length) throw new Error("Children.only() expects only one child.");
      return n[0];
    },
    toArray: _preact.toChildArray
  },
  F = _preact.options.__e;
exports.Children = R;
function N(n) {
  return n && ((n = E({}, n)).__c = null, n.__k = n.__k && n.__k.map(N)), n;
}
function U() {
  this.__u = 0, this.o = null, this.__b = null;
}
function M(n) {
  var t = n.__.__c;
  return t && t.u && t.u(n);
}
function L(n) {
  var t, e, r;
  function o(o) {
    if (t || (t = n()).then(function (n) {
      e = n.default || n;
    }, function (n) {
      r = n;
    }), r) throw r;
    if (!e) throw t;
    return (0, _preact.createElement)(e, o);
  }
  return o.displayName = "Lazy", o.t = !0, o;
}
function O() {
  this.i = null, this.l = null;
}
_preact.options.__e = function (n, t, e) {
  if (n.then) for (var r, o = t; o = o.__;) if ((r = o.__c) && r.__c) return r.__c(n, t.__c);
  F(n, t, e);
}, (U.prototype = new _preact.Component()).__c = function (n, t) {
  var e = this;
  null == e.o && (e.o = []), e.o.push(t);
  var r = M(e.__v),
    o = !1,
    u = function () {
      o || (o = !0, r ? r(i) : i());
    };
  t.__c = t.componentWillUnmount, t.componentWillUnmount = function () {
    u(), t.__c && t.__c();
  };
  var i = function () {
    var n;
    if (! --e.__u) for (e.__v.__k[0] = e.state.u, e.setState({
      u: e.__b = null
    }); n = e.o.pop();) n.forceUpdate();
  };
  e.__u++ || e.setState({
    u: e.__b = e.__v.__k[0]
  }), n.then(u, u);
}, U.prototype.render = function (n, t) {
  return this.__b && (this.__v.__k[0] = N(this.__b), this.__b = null), [(0, _preact.createElement)(_preact.Component, null, t.u ? null : n.children), t.u && n.fallback];
};
var P = function (n, t, e) {
  if (++e[1] === e[0] && n.l.delete(t), n.props.revealOrder && ("t" !== n.props.revealOrder[0] || !n.l.size)) for (e = n.i; e;) {
    for (; e.length > 3;) e.pop()();
    if (e[1] < e[0]) break;
    n.i = e = e[2];
  }
};
(O.prototype = new _preact.Component()).u = function (n) {
  var t = this,
    e = M(t.__v),
    r = t.l.get(n);
  return r[0]++, function (o) {
    var u = function () {
      t.props.revealOrder ? (r.push(o), P(t, n, r)) : o();
    };
    e ? e(u) : u();
  };
}, O.prototype.render = function (n) {
  this.i = null, this.l = new Map();
  var t = (0, _preact.toChildArray)(n.children);
  n.revealOrder && "b" === n.revealOrder[0] && t.reverse();
  for (var e = t.length; e--;) this.l.set(t[e], this.i = [1, 0, this.i]);
  return n.children;
}, O.prototype.componentDidUpdate = O.prototype.componentDidMount = function () {
  var n = this;
  n.l.forEach(function (t, e) {
    P(n, e, t);
  });
};
var W = function () {
  function n() {}
  var t = n.prototype;
  return t.getChildContext = function () {
    return this.props.context;
  }, t.render = function (n) {
    return n.children;
  }, n;
}();
function j(n) {
  var t = this,
    e = n.container,
    r = (0, _preact.createElement)(W, {
      context: t.context
    }, n.vnode);
  return t.s && t.s !== e && (t.v.parentNode && t.s.removeChild(t.v), (0, _preact._unmount)(t.h), t.p = !1), n.vnode ? t.p ? (e.__k = t.__k, (0, _preact.render)(r, e), t.__k = e.__k) : (t.v = document.createTextNode(""), (0, _preact.hydrate)("", e), e.appendChild(t.v), t.p = !0, t.s = e, (0, _preact.render)(r, e, t.v), t.__k = t.v.__k) : t.p && (t.v.parentNode && t.s.removeChild(t.v), (0, _preact._unmount)(t.h)), t.h = r, t.componentWillUnmount = function () {
    t.v.parentNode && t.s.removeChild(t.v), (0, _preact._unmount)(t.h);
  }, null;
}
function z(n, t) {
  return (0, _preact.createElement)(j, {
    vnode: n,
    container: t
  });
}
var D = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;
_preact.Component.prototype.isReactComponent = {};
var H = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103;
function T(n, t, e) {
  if (null == t.__k) for (; t.firstChild;) t.removeChild(t.firstChild);
  return (0, _preact.render)(n, t), "function" == typeof e && e(), n ? n.__c : null;
}
function V(n, t, e) {
  return (0, _preact.hydrate)(n, t), "function" == typeof e && e(), n ? n.__c : null;
}
var Z = _preact.options.event;
function I(n, t) {
  n["UNSAFE_" + t] && !n[t] && Object.defineProperty(n, t, {
    configurable: !1,
    get: function () {
      return this["UNSAFE_" + t];
    },
    set: function (n) {
      this["UNSAFE_" + t] = n;
    }
  });
}
_preact.options.event = function (n) {
  Z && (n = Z(n)), n.persist = function () {};
  var t = !1,
    e = !1,
    r = n.stopPropagation;
  n.stopPropagation = function () {
    r.call(n), t = !0;
  };
  var o = n.preventDefault;
  return n.preventDefault = function () {
    o.call(n), e = !0;
  }, n.isPropagationStopped = function () {
    return t;
  }, n.isDefaultPrevented = function () {
    return e;
  }, n.nativeEvent = n;
};
var $ = {
    configurable: !0,
    get: function () {
      return this.class;
    }
  },
  q = _preact.options.vnode;
_preact.options.vnode = function (n) {
  n.$$typeof = H;
  var t = n.type,
    e = n.props;
  if (t) {
    if (e.class != e.className && ($.enumerable = "className" in e, null != e.className && (e.class = e.className), Object.defineProperty(e, "className", $)), "function" != typeof t) {
      var r, o, u;
      for (u in e.defaultValue && void 0 !== e.value && (e.value || 0 === e.value || (e.value = e.defaultValue), delete e.defaultValue), Array.isArray(e.value) && e.multiple && "select" === t && ((0, _preact.toChildArray)(e.children).forEach(function (n) {
        -1 != e.value.indexOf(n.props.value) && (n.props.selected = !0);
      }), delete e.value), e) if (r = D.test(u)) break;
      if (r) for (u in o = n.props = {}, e) o[D.test(u) ? u.replace(/[A-Z0-9]/, "-$&").toLowerCase() : u] = e[u];
    }
    !function (t) {
      var e = n.type,
        r = n.props;
      if (r && "string" == typeof e) {
        var o = {};
        for (var u in r) /^on(Ani|Tra|Tou)/.test(u) && (r[u.toLowerCase()] = r[u], delete r[u]), o[u.toLowerCase()] = u;
        if (o.ondoubleclick && (r.ondblclick = r[o.ondoubleclick], delete r[o.ondoubleclick]), o.onbeforeinput && (r.onbeforeinput = r[o.onbeforeinput], delete r[o.onbeforeinput]), o.onchange && ("textarea" === e || "input" === e.toLowerCase() && !/^fil|che|ra/i.test(r.type))) {
          var i = o.oninput || "oninput";
          r[i] || (r[i] = r[o.onchange], delete r[o.onchange]);
        }
      }
    }(), "function" == typeof t && !t.m && t.prototype && (I(t.prototype, "componentWillMount"), I(t.prototype, "componentWillReceiveProps"), I(t.prototype, "componentWillUpdate"), t.m = !0);
  }
  q && q(n);
};
var B = "16.8.0";
exports.version = B;
function G(n) {
  return _preact.createElement.bind(null, n);
}
function J(n) {
  return !!n && n.$$typeof === H;
}
function K(n) {
  return J(n) ? _preact.cloneElement.apply(null, arguments) : n;
}
function Q(n) {
  return !!n.__k && ((0, _preact.render)(null, n), !0);
}
function X(n) {
  return n && (n.base || 1 === n.nodeType && n) || null;
}
var Y = function (n, t) {
  return n(t);
};
exports.unstable_batchedUpdates = Y;
var _default = {
  useState: _hooks.useState,
  useReducer: _hooks.useReducer,
  useEffect: _hooks.useEffect,
  useLayoutEffect: _hooks.useLayoutEffect,
  useRef: _hooks.useRef,
  useImperativeHandle: _hooks.useImperativeHandle,
  useMemo: _hooks.useMemo,
  useCallback: _hooks.useCallback,
  useContext: _hooks.useContext,
  useDebugValue: _hooks.useDebugValue,
  version: "16.8.0",
  Children: R,
  render: T,
  hydrate: T,
  unmountComponentAtNode: Q,
  createPortal: z,
  createElement: _preact.createElement,
  createContext: _preact.createContext,
  createFactory: G,
  cloneElement: K,
  createRef: _preact.createRef,
  Fragment: _preact.Fragment,
  isValidElement: J,
  findDOMNode: X,
  Component: _preact.Component,
  PureComponent: C,
  memo: _,
  forwardRef: S,
  unstable_batchedUpdates: Y,
  Suspense: U,
  SuspenseList: O,
  lazy: L
};
exports.default = _default;
},{"preact/hooks":"node_modules/preact/hooks/dist/hooks.module.js","preact":"node_modules/preact/dist/preact.module.js"}],"node_modules/@walletconnect/qrcode-modal/dist/cjs/index.js":[function(require,module,exports) {
var process = require("process");
function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var browserUtils = require('@walletconnect/browser-utils');
var QRCode = _interopDefault(require('qrcode'));
var copy = _interopDefault(require('copy-to-clipboard'));
var React = require('preact/compat');

function open(uri) {
  QRCode.toString(uri, {
    type: "terminal"
  }).then(console.log);
}

var WALLETCONNECT_STYLE_SHEET = ":root {\n  --animation-duration: 300ms;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.animated {\n  animation-duration: var(--animation-duration);\n  animation-fill-mode: both;\n}\n\n.fadeIn {\n  animation-name: fadeIn;\n}\n\n.fadeOut {\n  animation-name: fadeOut;\n}\n\n#walletconnect-wrapper {\n  -webkit-user-select: none;\n  align-items: center;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  user-select: none;\n  width: 100%;\n  z-index: 99999999999999;\n}\n\n.walletconnect-modal__headerLogo {\n  height: 21px;\n}\n\n.walletconnect-modal__header p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n  align-items: flex-start;\n  display: flex;\n  flex: 1;\n  margin-left: 5px;\n}\n\n.walletconnect-modal__close__wrapper {\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  z-index: 10000;\n  background: white;\n  border-radius: 26px;\n  padding: 6px;\n  box-sizing: border-box;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n}\n\n.walletconnect-modal__close__icon {\n  position: relative;\n  top: 7px;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transform: rotate(45deg);\n}\n\n.walletconnect-modal__close__line1 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n}\n\n.walletconnect-modal__close__line2 {\n  position: absolute;\n  width: 100%;\n  border: 1px solid rgb(48, 52, 59);\n  transform: rotate(90deg);\n}\n\n.walletconnect-qrcode__base {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  background: rgba(37, 41, 46, 0.95);\n  height: 100%;\n  left: 0;\n  pointer-events: auto;\n  position: fixed;\n  top: 0;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  width: 100%;\n  will-change: opacity;\n  padding: 40px;\n  box-sizing: border-box;\n}\n\n.walletconnect-qrcode__text {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 10px 0 20px 0;\n  text-align: center;\n  width: 100%;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-qrcode__text {\n    font-size: 4vw;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-qrcode__text {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-qrcode__image {\n  width: calc(100% - 30px);\n  box-sizing: border-box;\n  cursor: none;\n  margin: 0 auto;\n}\n\n.walletconnect-qrcode__notification {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  font-size: 16px;\n  padding: 16px 20px;\n  border-radius: 16px;\n  text-align: center;\n  transition: all 0.1s ease-in-out;\n  background: white;\n  color: black;\n  margin-bottom: -60px;\n  opacity: 0;\n}\n\n.walletconnect-qrcode__notification.notification__show {\n  opacity: 1;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__header {\n    height: 130px;\n  }\n  .walletconnect-modal__base {\n    overflow: auto;\n  }\n}\n\n@media only screen and (min-device-width: 415px) and (max-width: 768px) {\n  #content {\n    max-width: 768px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 375px) and (max-width: 415px) {\n  #content {\n    max-width: 414px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (min-width: 320px) and (max-width: 375px) {\n  #content {\n    max-width: 375px;\n    box-sizing: border-box;\n  }\n}\n\n@media only screen and (max-width: 320px) {\n  #content {\n    max-width: 320px;\n    box-sizing: border-box;\n  }\n}\n\n.walletconnect-modal__base {\n  -webkit-font-smoothing: antialiased;\n  background: #ffffff;\n  border-radius: 24px;\n  box-shadow: 0 10px 50px 5px rgba(0, 0, 0, 0.4);\n  font-family: ui-rounded, \"SF Pro Rounded\", \"SF Pro Text\", medium-content-sans-serif-font,\n    -apple-system, BlinkMacSystemFont, ui-sans-serif, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell,\n    \"Open Sans\", \"Helvetica Neue\", sans-serif;\n  margin-top: 41px;\n  padding: 24px 24px 22px;\n  pointer-events: auto;\n  position: relative;\n  text-align: center;\n  transition: 0.4s cubic-bezier(0.19, 1, 0.22, 1);\n  will-change: transform;\n  overflow: visible;\n  transform: translateY(-50%);\n  top: 50%;\n  max-width: 500px;\n  margin: auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__base {\n    padding: 24px 12px;\n  }\n}\n\n.walletconnect-modal__base .hidden {\n  transform: translateY(150%);\n  transition: 0.125s cubic-bezier(0.4, 0, 1, 1);\n}\n\n.walletconnect-modal__header {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  left: 0;\n  justify-content: space-between;\n  position: absolute;\n  top: -42px;\n  width: 100%;\n}\n\n.walletconnect-modal__base .wc-logo {\n  align-items: center;\n  display: flex;\n  height: 26px;\n  margin-top: 15px;\n  padding-bottom: 15px;\n  pointer-events: auto;\n}\n\n.walletconnect-modal__base .wc-logo div {\n  background-color: #3399ff;\n  height: 21px;\n  margin-right: 5px;\n  mask-image: url(\"images/wc-logo.svg\") center no-repeat;\n  width: 32px;\n}\n\n.walletconnect-modal__base .wc-logo p {\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n}\n\n.walletconnect-modal__base h2 {\n  color: rgba(60, 66, 82, 0.6);\n  font-size: 16px;\n  font-weight: 600;\n  letter-spacing: 0;\n  line-height: 1.1875em;\n  margin: 0 0 19px 0;\n  text-align: center;\n  width: 100%;\n}\n\n.walletconnect-modal__base__row {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  align-items: center;\n  border-radius: 20px;\n  cursor: pointer;\n  display: flex;\n  height: 56px;\n  justify-content: space-between;\n  padding: 0 15px;\n  position: relative;\n  margin: 0px 0px 8px;\n  text-align: left;\n  transition: 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  will-change: transform;\n  text-decoration: none;\n}\n\n.walletconnect-modal__base__row:hover {\n  background: rgba(60, 66, 82, 0.06);\n}\n\n.walletconnect-modal__base__row:active {\n  background: rgba(60, 66, 82, 0.06);\n  transform: scale(0.975);\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n.walletconnect-modal__base__row__h3 {\n  color: #25292e;\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0;\n  padding-bottom: 3px;\n}\n\n.walletconnect-modal__base__row__right {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.walletconnect-modal__base__row__right__app-icon {\n  border-radius: 8px;\n  height: 34px;\n  margin: 0 11px 2px 0;\n  width: 34px;\n  background-size: 100%;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-modal__base__row__right__caret {\n  height: 18px;\n  opacity: 0.3;\n  transition: 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  width: 8px;\n  will-change: opacity;\n}\n\n.walletconnect-modal__base__row:hover .caret,\n.walletconnect-modal__base__row:active .caret {\n  opacity: 0.6;\n}\n\n.walletconnect-modal__mobile__toggle {\n  width: 80%;\n  display: flex;\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n  margin-bottom: 18px;\n  background: #d4d5d9;\n}\n\n.walletconnect-modal__single_wallet {\n  display: flex;\n  justify-content: center;\n  margin-top: 7px;\n  margin-bottom: 18px;\n}\n\n.walletconnect-modal__single_wallet a {\n  cursor: pointer;\n  color: rgb(64, 153, 255);\n  font-size: 21px;\n  font-weight: 800;\n  text-decoration: none !important;\n  margin: 0 auto;\n}\n\n.walletconnect-modal__mobile__toggle_selector {\n  width: calc(50% - 8px);\n  background: white;\n  position: absolute;\n  border-radius: 5px;\n  height: calc(100% - 8px);\n  top: 4px;\n  transition: all 0.2s ease-in-out;\n  transform: translate3d(4px, 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle.right__selected .walletconnect-modal__mobile__toggle_selector {\n  transform: translate3d(calc(100% + 12px), 0, 0);\n}\n\n.walletconnect-modal__mobile__toggle a {\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  padding: 8px;\n  margin: 0;\n  font-weight: 600;\n  z-index: 1;\n}\n\n.walletconnect-modal__footer {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n@media only screen and (max-width: 768px) {\n  .walletconnect-modal__footer {\n    margin-top: 5vw;\n  }\n}\n\n.walletconnect-modal__footer a {\n  cursor: pointer;\n  color: #898d97;\n  font-size: 15px;\n  margin: 0 auto;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-modal__footer a {\n    font-size: 14px;\n  }\n}\n\n.walletconnect-connect__buttons__wrapper {\n  max-height: 44vh;\n}\n\n.walletconnect-connect__buttons__wrapper__android {\n  margin: 50% 0;\n}\n\n.walletconnect-connect__buttons__wrapper__wrap {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  margin: 10px 0;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__buttons__wrapper__wrap {\n    margin-top: 40px;\n  }\n}\n\n.walletconnect-connect__button {\n  background-color: rgb(64, 153, 255);\n  padding: 12px;\n  border-radius: 8px;\n  text-decoration: none;\n  color: rgb(255, 255, 255);\n  font-weight: 500;\n}\n\n.walletconnect-connect__button__icon_anchor {\n  cursor: pointer;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  margin: 8px;\n  width: 42px;\n  justify-self: center;\n  flex-direction: column;\n  text-decoration: none !important;\n}\n\n@media only screen and (max-width: 320px) {\n  .walletconnect-connect__button__icon_anchor {\n    margin: 4px;\n  }\n}\n\n.walletconnect-connect__button__icon {\n  border-radius: 10px;\n  height: 42px;\n  margin: 0;\n  width: 42px;\n  background-size: cover !important;\n  box-shadow: 0 4px 12px 0 rgba(37, 41, 46, 0.25);\n}\n\n.walletconnect-connect__button__text {\n  color: #424952;\n  font-size: 2.7vw;\n  text-decoration: none !important;\n  padding: 0;\n  margin-top: 1.8vw;\n  font-weight: 600;\n}\n\n@media only screen and (min-width: 768px) {\n  .walletconnect-connect__button__text {\n    font-size: 16px;\n    margin-top: 12px;\n  }\n}\n\n.walletconnect-search__input {\n  border: none;\n  background: #d4d5d9;\n  border-style: none;\n  padding: 8px 16px;\n  outline: none;\n  font-style: normal;\n  font-stretch: normal;\n  font-size: 16px;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  text-align: left;\n  border-radius: 8px;\n  width: calc(100% - 16px);\n  margin: 0;\n  margin-bottom: 8px;\n}\n";

// A type of promise-like that resolves synchronously and supports only one observer
var _iteratorSymbol = /*#__PURE__*/typeof Symbol !== "undefined" ? Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator")) : "@@iterator"; // Asynchronously iterate through an object's values
var _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== "undefined" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator")) : "@@asyncIterator"; // Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing

function _catch(body, recover) {
  try {
    var result = body();
  } catch (e) {
    return recover(e);
  }

  if (result && result.then) {
    return result.then(void 0, recover);
  }

  return result;
} // Asynchronously await a promise and pass the result to a finally continuation

var WALLETCONNECT_LOGO_SVG_URL = "data:image/svg+xml,%3Csvg height='185' viewBox='0 0 300 185' width='300' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='m61.4385429 36.2562612c48.9112241-47.8881663 128.2119871-47.8881663 177.1232091 0l5.886545 5.7634174c2.445561 2.3944081 2.445561 6.2765112 0 8.6709204l-20.136695 19.715503c-1.222781 1.1972051-3.2053 1.1972051-4.428081 0l-8.100584-7.9311479c-34.121692-33.4079817-89.443886-33.4079817-123.5655788 0l-8.6750562 8.4936051c-1.2227816 1.1972041-3.205301 1.1972041-4.4280806 0l-20.1366949-19.7155031c-2.4455612-2.3944092-2.4455612-6.2765122 0-8.6709204zm218.7677961 40.7737449 17.921697 17.546897c2.445549 2.3943969 2.445563 6.2764769.000031 8.6708899l-80.810171 79.121134c-2.445544 2.394426-6.410582 2.394453-8.85616.000062-.00001-.00001-.000022-.000022-.000032-.000032l-57.354143-56.154572c-.61139-.598602-1.60265-.598602-2.21404 0-.000004.000004-.000007.000008-.000011.000011l-57.3529212 56.154531c-2.4455368 2.394432-6.4105755 2.394472-8.8561612.000087-.0000143-.000014-.0000296-.000028-.0000449-.000044l-80.81241943-79.122185c-2.44556021-2.394408-2.44556021-6.2765115 0-8.6709197l17.92172963-17.5468673c2.4455602-2.3944082 6.4105989-2.3944082 8.8561602 0l57.3549775 56.155357c.6113908.598602 1.602649.598602 2.2140398 0 .0000092-.000009.0000174-.000017.0000265-.000024l57.3521031-56.155333c2.445505-2.3944633 6.410544-2.3945531 8.856161-.0002.000034.0000336.000068.0000673.000101.000101l57.354902 56.155432c.61139.598601 1.60265.598601 2.21404 0l57.353975-56.1543249c2.445561-2.3944092 6.410599-2.3944092 8.85616 0z' fill='%233b99fc'/%3E%3C/svg%3E";

var WALLETCONNECT_HEADER_TEXT = "WalletConnect";
var ANIMATION_DURATION = 300;
var DEFAULT_BUTTON_COLOR = "rgb(64, 153, 255)";
var WALLETCONNECT_WRAPPER_ID = "walletconnect-wrapper";
var WALLETCONNECT_STYLE_ID = "walletconnect-style-sheet";
var WALLETCONNECT_MODAL_ID = "walletconnect-qrcode-modal";
var WALLETCONNECT_CLOSE_BUTTON_ID = "walletconnect-qrcode-close";
var WALLETCONNECT_CTA_TEXT_ID = "walletconnect-qrcode-text";
var WALLETCONNECT_CONNECT_BUTTON_ID = "walletconnect-connect-button";

function Header(props) {
  return React.createElement("div", {
    className: "walletconnect-modal__header"
  }, React.createElement("img", {
    src: WALLETCONNECT_LOGO_SVG_URL,
    className: "walletconnect-modal__headerLogo"
  }), React.createElement("p", null, WALLETCONNECT_HEADER_TEXT), React.createElement("div", {
    className: "walletconnect-modal__close__wrapper",
    onClick: props.onClose
  }, React.createElement("div", {
    id: WALLETCONNECT_CLOSE_BUTTON_ID,
    className: "walletconnect-modal__close__icon"
  }, React.createElement("div", {
    className: "walletconnect-modal__close__line1"
  }), React.createElement("div", {
    className: "walletconnect-modal__close__line2"
  }))));
}

function ConnectButton(props) {
  return React.createElement("a", {
    className: "walletconnect-connect__button",
    href: props.href,
    id: (WALLETCONNECT_CONNECT_BUTTON_ID + "-" + (props.name)),
    onClick: props.onClick,
    rel: "noopener noreferrer",
    style: {
      backgroundColor: props.color
    },
    target: "_blank"
  }, props.name);
}

var CARET_SVG_URL = "data:image/svg+xml,%3Csvg fill='none' height='18' viewBox='0 0 8 18' width='8' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath clip-rule='evenodd' d='m.586301.213898c-.435947.33907-.5144813.967342-.175411 1.403292l4.87831 6.27212c.28087.36111.28087.86677 0 1.22788l-4.878311 6.27211c-.33907.436-.260536 1.0642.175412 1.4033.435949.3391 1.064219.2605 1.403289-.1754l4.87832-6.2721c.84259-1.08336.84259-2.60034 0-3.68367l-4.87832-6.27212c-.33907-.4359474-.96734-.514482-1.403289-.175412z' fill='%233c4252' fill-rule='evenodd'/%3E%3C/svg%3E";

function WalletButton(props) {
  var color = props.color;
  var href = props.href;
  var name = props.name;
  var logo = props.logo;
  var onClick = props.onClick;
  return React.createElement("a", {
    className: "walletconnect-modal__base__row",
    href: href,
    onClick: onClick,
    rel: "noopener noreferrer",
    target: "_blank"
  }, React.createElement("h3", {
    className: "walletconnect-modal__base__row__h3"
  }, name), React.createElement("div", {
    className: "walletconnect-modal__base__row__right"
  }, React.createElement("div", {
    className: "walletconnect-modal__base__row__right__app-icon",
    style: {
      background: ("url('" + logo + "') " + color),
      backgroundSize: "100%"
    }
  }), React.createElement("img", {
    src: CARET_SVG_URL,
    className: "walletconnect-modal__base__row__right__caret"
  })));
}

function WalletIcon(props) {
  var color = props.color;
  var href = props.href;
  var name = props.name;
  var logo = props.logo;
  var onClick = props.onClick;
  var fontSize = window.innerWidth < 768 ? ((name.length > 8 ? 2.5 : 2.7) + "vw") : "inherit";
  return React.createElement("a", {
    className: "walletconnect-connect__button__icon_anchor",
    href: href,
    onClick: onClick,
    rel: "noopener noreferrer",
    target: "_blank"
  }, React.createElement("div", {
    className: "walletconnect-connect__button__icon",
    style: {
      background: ("url('" + logo + "') " + color),
      backgroundSize: "100%"
    }
  }), React.createElement("div", {
    style: {
      fontSize: fontSize
    },
    className: "walletconnect-connect__button__text"
  }, name));
}

var GRID_MIN_COUNT = 5;
var LINKS_PER_PAGE = 12;

function LinkDisplay(props) {
  var android = browserUtils.isAndroid();
  var ref = React.useState("");
  var input = ref[0];
  var setInput = ref[1];
  var ref$1 = React.useState("");
  var filter = ref$1[0];
  var setFilter = ref$1[1];
  var ref$2 = React.useState(1);
  var page = ref$2[0];
  var setPage = ref$2[1];
  var links = filter ? props.links.filter(function (link) { return link.name.toLowerCase().includes(filter.toLowerCase()); }) : props.links;
  var errorMessage = props.errorMessage;
  var grid = filter || links.length > GRID_MIN_COUNT;
  var pages = Math.ceil(links.length / LINKS_PER_PAGE);
  var range = [(page - 1) * LINKS_PER_PAGE + 1, page * LINKS_PER_PAGE];
  var pageLinks = links.length ? links.filter(function (_, index) { return index + 1 >= range[0] && index + 1 <= range[1]; }) : [];
  var hasPaging = !!(!android && pages > 1);
  var filterTimeout = undefined;

  function handleInput(e) {
    setInput(e.target.value);
    clearTimeout(filterTimeout);

    if (e.target.value) {
      filterTimeout = setTimeout(function () {
        setFilter(e.target.value);
        setPage(1);
      }, 1000);
    } else {
      setInput("");
      setFilter("");
      setPage(1);
    }
  }

  return React.createElement("div", null, React.createElement("p", {
    id: WALLETCONNECT_CTA_TEXT_ID,
    className: "walletconnect-qrcode__text"
  }, android ? props.text.connect_mobile_wallet : props.text.choose_preferred_wallet), !android && React.createElement("input", {
    className: "walletconnect-search__input",
    placeholder: "Search",
    value: input,
    onChange: handleInput
  }), React.createElement("div", {
    className: ("walletconnect-connect__buttons__wrapper" + (android ? "__android" : grid && links.length ? "__wrap" : ""))
  }, !android ? pageLinks.length ? pageLinks.map(function (entry) {
    var color = entry.color;
    var name = entry.name;
    var shortName = entry.shortName;
    var logo = entry.logo;
    var href = browserUtils.formatIOSMobile(props.uri, entry);
    var handleClickIOS = React.useCallback(function () {
      browserUtils.saveMobileLinkInfo({
        name: name,
        href: href
      });
    }, [pageLinks]);
    return !grid ? React.createElement(WalletButton, {
      color: color,
      href: href,
      name: name,
      logo: logo,
      onClick: handleClickIOS
    }) : React.createElement(WalletIcon, {
      color: color,
      href: href,
      name: shortName || name,
      logo: logo,
      onClick: handleClickIOS
    });
  }) : React.createElement(React.Fragment, null, React.createElement("p", null, errorMessage.length ? props.errorMessage : !!props.links.length && !links.length ? props.text.no_wallets_found : props.text.loading)) : React.createElement(ConnectButton, {
    name: props.text.connect,
    color: DEFAULT_BUTTON_COLOR,
    href: props.uri,
    onClick: React.useCallback(function () {
      browserUtils.saveMobileLinkInfo({
        name: "Unknown",
        href: props.uri
      });
    }, [])
  })), hasPaging && React.createElement("div", {
    className: "walletconnect-modal__footer"
  }, Array(pages).fill(0).map(function (_, index) {
    var pageNumber = index + 1;
    var selected = page === pageNumber;
    return React.createElement("a", {
      style: {
        margin: "auto 10px",
        fontWeight: selected ? "bold" : "normal"
      },
      onClick: function () { return setPage(pageNumber); }
    }, pageNumber);
  })));
}

function Notification(props) {
  var show = !!props.message.trim();
  return React.createElement("div", {
    className: ("walletconnect-qrcode__notification" + (show ? " notification__show" : ""))
  }, props.message);
}

var formatQRCodeImage = function (data) {
  try {
    var result = "";
    return Promise.resolve(QRCode.toString(data, {
      margin: 0,
      type: "svg"
    })).then(function (dataString) {
      if (typeof dataString === "string") {
        result = dataString.replace("<svg", "<svg class=\"walletconnect-qrcode__image\"");
      }

      return result;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

function QRCodeDisplay(props) {
  var ref = React.useState("");
  var notification = ref[0];
  var setNotification = ref[1];
  var ref$1 = React.useState("");
  var svg = ref$1[0];
  var setSvg = ref$1[1];
  React.useEffect(function () {
    try {
      return Promise.resolve(formatQRCodeImage(props.uri)).then(function (_formatQRCodeImage) {
        setSvg(_formatQRCodeImage);
      });
    } catch (e) {
      Promise.reject(e);
    }
  }, []);

  var copyToClipboard = function () {
    var success = copy(props.uri);

    if (success) {
      setNotification(props.text.copied_to_clipboard);
      setInterval(function () { return setNotification(""); }, 1200);
    } else {
      setNotification("Error");
      setInterval(function () { return setNotification(""); }, 1200);
    }
  };

  return React.createElement("div", null, React.createElement("p", {
    id: WALLETCONNECT_CTA_TEXT_ID,
    className: "walletconnect-qrcode__text"
  }, props.text.scan_qrcode_with_wallet), React.createElement("div", {
    dangerouslySetInnerHTML: {
      __html: svg
    }
  }), React.createElement("div", {
    className: "walletconnect-modal__footer"
  }, React.createElement("a", {
    onClick: copyToClipboard
  }, props.text.copy_to_clipboard)), React.createElement(Notification, {
    message: notification
  }));
}

function Modal(props) {
  var android = browserUtils.isAndroid();
  var mobile = browserUtils.isMobile();
  var whitelist = mobile ? props.qrcodeModalOptions && props.qrcodeModalOptions.mobileLinks ? props.qrcodeModalOptions.mobileLinks : undefined : props.qrcodeModalOptions && props.qrcodeModalOptions.desktopLinks ? props.qrcodeModalOptions.desktopLinks : undefined;
  var ref = React.useState(false);
  var loading = ref[0];
  var setLoading = ref[1];
  var ref$1 = React.useState(false);
  var fetched = ref$1[0];
  var setFetched = ref$1[1];
  var ref$2 = React.useState(!mobile);
  var displayQRCode = ref$2[0];
  var setDisplayQRCode = ref$2[1];
  var displayProps = {
    mobile: mobile,
    text: props.text,
    uri: props.uri,
    qrcodeModalOptions: props.qrcodeModalOptions
  };
  var ref$3 = React.useState("");
  var singleLinkHref = ref$3[0];
  var setSingleLinkHref = ref$3[1];
  var ref$4 = React.useState(false);
  var hasSingleLink = ref$4[0];
  var setHasSingleLink = ref$4[1];
  var ref$5 = React.useState([]);
  var links = ref$5[0];
  var setLinks = ref$5[1];
  var ref$6 = React.useState("");
  var errorMessage = ref$6[0];
  var setErrorMessage = ref$6[1];

  var getLinksIfNeeded = function () {
    if (fetched || loading || whitelist && !whitelist.length || links.length > 0) {
      return;
    }

    React.useEffect(function () {
      var initLinks = function () {
        try {
          if (android) { return Promise.resolve(); }
          setLoading(true);

          var _temp = _catch(function () {
            var url = props.qrcodeModalOptions && props.qrcodeModalOptions.registryUrl ? props.qrcodeModalOptions.registryUrl : browserUtils.getWalletRegistryUrl();
            return Promise.resolve(fetch(url)).then(function (registryResponse) {
              return Promise.resolve(registryResponse.json()).then(function (_registryResponse$jso) {
                var registry = _registryResponse$jso.listings;
                var platform = mobile ? "mobile" : "desktop";

                var _links = browserUtils.getMobileLinkRegistry(browserUtils.formatMobileRegistry(registry, platform), whitelist);

                setLoading(false);
                setFetched(true);
                setErrorMessage(!_links.length ? props.text.no_supported_wallets : "");
                setLinks(_links);
                var hasSingleLink = _links.length === 1;

                if (hasSingleLink) {
                  setSingleLinkHref(browserUtils.formatIOSMobile(props.uri, _links[0]));
                  setDisplayQRCode(true);
                }

                setHasSingleLink(hasSingleLink);
              });
            });
          }, function (e) {
            setLoading(false);
            setFetched(true);
            setErrorMessage(props.text.something_went_wrong);
            console.error(e);
          });

          return Promise.resolve(_temp && _temp.then ? _temp.then(function () {}) : void 0);
        } catch (e) {
          return Promise.reject(e);
        }
      };

      initLinks();
    });
  };

  getLinksIfNeeded();
  var rightSelected = mobile ? displayQRCode : !displayQRCode;
  return React.createElement("div", {
    id: WALLETCONNECT_MODAL_ID,
    className: "walletconnect-qrcode__base animated fadeIn"
  }, React.createElement("div", {
    className: "walletconnect-modal__base"
  }, React.createElement(Header, {
    onClose: props.onClose
  }), hasSingleLink && displayQRCode ? React.createElement("div", {
    className: "walletconnect-modal__single_wallet"
  }, React.createElement("a", {
    onClick: function () { return browserUtils.saveMobileLinkInfo({
      name: links[0].name,
      href: singleLinkHref
    }); },
    href: singleLinkHref,
    rel: "noopener noreferrer",
    target: "_blank"
  }, props.text.connect_with + " " + (hasSingleLink ? links[0].name : "") + " ›")) : android || loading || !loading && links.length ? React.createElement("div", {
    className: ("walletconnect-modal__mobile__toggle" + (rightSelected ? " right__selected" : ""))
  }, React.createElement("div", {
    className: "walletconnect-modal__mobile__toggle_selector"
  }), mobile ? React.createElement(React.Fragment, null, React.createElement("a", {
    onClick: function () { return (setDisplayQRCode(false), getLinksIfNeeded()); }
  }, props.text.mobile), React.createElement("a", {
    onClick: function () { return setDisplayQRCode(true); }
  }, props.text.qrcode)) : React.createElement(React.Fragment, null, React.createElement("a", {
    onClick: function () { return setDisplayQRCode(true); }
  }, props.text.qrcode), React.createElement("a", {
    onClick: function () { return (setDisplayQRCode(false), getLinksIfNeeded()); }
  }, props.text.desktop))) : null, React.createElement("div", null, displayQRCode || !android && !loading && !links.length ? React.createElement(QRCodeDisplay, Object.assign({}, displayProps)) : React.createElement(LinkDisplay, Object.assign({}, displayProps,
    {links: links,
    errorMessage: errorMessage})))));
}

var de = {
  choose_preferred_wallet: "Wähle bevorzugte Wallet",
  connect_mobile_wallet: "Verbinde mit Mobile Wallet",
  scan_qrcode_with_wallet: "Scanne den QR-code mit einer WalletConnect kompatiblen Wallet",
  connect: "Verbinden",
  qrcode: "QR-Code",
  mobile: "Mobile",
  desktop: "Desktop",
  copy_to_clipboard: "In die Zwischenablage kopieren",
  copied_to_clipboard: "In die Zwischenablage kopiert!",
  connect_with: "Verbinden mit Hilfe von",
  loading: "Laden...",
  something_went_wrong: "Etwas ist schief gelaufen",
  no_supported_wallets: "Es gibt noch keine unterstützten Wallet",
  no_wallets_found: "keine Wallet gefunden"
};

var en = {
  choose_preferred_wallet: "Choose your preferred wallet",
  connect_mobile_wallet: "Connect to Mobile Wallet",
  scan_qrcode_with_wallet: "Scan QR code with a WalletConnect-compatible wallet",
  connect: "Connect",
  qrcode: "QR Code",
  mobile: "Mobile",
  desktop: "Desktop",
  copy_to_clipboard: "Copy to clipboard",
  copied_to_clipboard: "Copied to clipboard!",
  connect_with: "Connect with",
  loading: "Loading...",
  something_went_wrong: "Something went wrong",
  no_supported_wallets: "There are no supported wallets yet",
  no_wallets_found: "No wallets found"
};

var es = {
  choose_preferred_wallet: "Elige tu billetera preferida",
  connect_mobile_wallet: "Conectar a billetera móvil",
  scan_qrcode_with_wallet: "Escanea el código QR con una billetera compatible con WalletConnect",
  connect: "Conectar",
  qrcode: "Código QR",
  mobile: "Móvil",
  desktop: "Desktop",
  copy_to_clipboard: "Copiar",
  copied_to_clipboard: "Copiado!",
  connect_with: "Conectar mediante",
  loading: "Cargando...",
  something_went_wrong: "Algo salió mal",
  no_supported_wallets: "Todavía no hay billeteras compatibles",
  no_wallets_found: "No se encontraron billeteras"
};

var fr = {
  choose_preferred_wallet: "Choisissez votre portefeuille préféré",
  connect_mobile_wallet: "Se connecter au portefeuille mobile",
  scan_qrcode_with_wallet: "Scannez le QR code avec un portefeuille compatible WalletConnect",
  connect: "Se connecter",
  qrcode: "QR Code",
  mobile: "Mobile",
  desktop: "Desktop",
  copy_to_clipboard: "Copier",
  copied_to_clipboard: "Copié!",
  connect_with: "Connectez-vous à l'aide de",
  loading: "Chargement...",
  something_went_wrong: "Quelque chose a mal tourné",
  no_supported_wallets: "Il n'y a pas encore de portefeuilles pris en charge",
  no_wallets_found: "Aucun portefeuille trouvé"
};

var ko = {
  choose_preferred_wallet: "원하는 지갑을 선택하세요",
  connect_mobile_wallet: "모바일 지갑과 연결",
  scan_qrcode_with_wallet: "WalletConnect 지원 지갑에서 QR코드를 스캔하세요",
  connect: "연결",
  qrcode: "QR 코드",
  mobile: "모바일",
  desktop: "데스크탑",
  copy_to_clipboard: "클립보드에 복사",
  copied_to_clipboard: "클립보드에 복사되었습니다!",
  connect_with: "와 연결하다",
  loading: "로드 중...",
  something_went_wrong: "문제가 발생했습니다.",
  no_supported_wallets: "아직 지원되는 지갑이 없습니다",
  no_wallets_found: "지갑을 찾을 수 없습니다"
};

var pt = {
  choose_preferred_wallet: "Escolha sua carteira preferida",
  connect_mobile_wallet: "Conectar-se à carteira móvel",
  scan_qrcode_with_wallet: "Ler o código QR com uma carteira compatível com WalletConnect",
  connect: "Conectar",
  qrcode: "Código QR",
  mobile: "Móvel",
  desktop: "Desktop",
  copy_to_clipboard: "Copiar",
  copied_to_clipboard: "Copiado!",
  connect_with: "Ligar por meio de",
  loading: "Carregamento...",
  something_went_wrong: "Algo correu mal",
  no_supported_wallets: "Ainda não há carteiras suportadas",
  no_wallets_found: "Nenhuma carteira encontrada"
};

var zh = {
  choose_preferred_wallet: "选择你的钱包",
  connect_mobile_wallet: "连接至移动端钱包",
  scan_qrcode_with_wallet: "使用兼容 WalletConnect 的钱包扫描二维码",
  connect: "连接",
  qrcode: "二维码",
  mobile: "移动",
  desktop: "桌面",
  copy_to_clipboard: "复制到剪贴板",
  copied_to_clipboard: "复制到剪贴板成功！",
  connect_with: "通过以下方式连接",
  loading: "正在加载...",
  something_went_wrong: "出了问题",
  no_supported_wallets: "目前还没有支持的钱包",
  no_wallets_found: "没有找到钱包"
};

var fa = {
  choose_preferred_wallet: "کیف پول مورد نظر خود را انتخاب کنید",
  connect_mobile_wallet: "به کیف پول موبایل وصل شوید",
  scan_qrcode_with_wallet: "کد QR را با یک کیف پول سازگار با WalletConnect اسکن کنید",
  connect: "اتصال",
  qrcode: "کد QR",
  mobile: "سیار",
  desktop: "دسکتاپ",
  copy_to_clipboard: "کپی به کلیپ بورد",
  copied_to_clipboard: "در کلیپ بورد کپی شد!",
  connect_with: "ارتباط با",
  loading: "...بارگذاری",
  something_went_wrong: "مشکلی پیش آمد",
  no_supported_wallets: "هنوز هیچ کیف پول پشتیبانی شده ای وجود ندارد",
  no_wallets_found: "هیچ کیف پولی پیدا نشد"
};

var languages = {
  de: de,
  en: en,
  es: es,
  fr: fr,
  ko: ko,
  pt: pt,
  zh: zh,
  fa: fa
};

function injectStyleSheet() {
  var doc = browserUtils.getDocumentOrThrow();
  var prev = doc.getElementById(WALLETCONNECT_STYLE_ID);

  if (prev) {
    doc.head.removeChild(prev);
  }

  var style = doc.createElement("style");
  style.setAttribute("id", WALLETCONNECT_STYLE_ID);
  style.innerText = WALLETCONNECT_STYLE_SHEET;
  doc.head.appendChild(style);
}

function renderWrapper() {
  var doc = browserUtils.getDocumentOrThrow();
  var wrapper = doc.createElement("div");
  wrapper.setAttribute("id", WALLETCONNECT_WRAPPER_ID);
  doc.body.appendChild(wrapper);
  return wrapper;
}

function triggerCloseAnimation() {
  var doc = browserUtils.getDocumentOrThrow();
  var modal = doc.getElementById(WALLETCONNECT_MODAL_ID);

  if (modal) {
    modal.className = modal.className.replace("fadeIn", "fadeOut");
    setTimeout(function () {
      var wrapper = doc.getElementById(WALLETCONNECT_WRAPPER_ID);

      if (wrapper) {
        doc.body.removeChild(wrapper);
      }
    }, ANIMATION_DURATION);
  }
}

function getWrappedCallback(cb) {
  return function () {
    triggerCloseAnimation();

    if (cb) {
      cb();
    }
  };
}

function getText() {
  var lang = browserUtils.getNavigatorOrThrow().language.split("-")[0] || "en";
  return languages[lang] || languages["en"];
}

function open$1(uri, cb, qrcodeModalOptions) {
  injectStyleSheet();
  var wrapper = renderWrapper();
  React.render(React.createElement(Modal, {
    text: getText(),
    uri: uri,
    onClose: getWrappedCallback(cb),
    qrcodeModalOptions: qrcodeModalOptions
  }), wrapper);
}
function close$1() {
  triggerCloseAnimation();
}

var isNode = function () { return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined"; };

function open$2(uri, cb, qrcodeModalOptions) {
  console.log(uri);

  if (isNode()) {
    open(uri);
  } else {
    open$1(uri, cb, qrcodeModalOptions);
  }
}

function close$2() {
  if (isNode()) ; else {
    close$1();
  }
}

var index = {
  open: open$2,
  close: close$2
};

module.exports = index;


},{"@walletconnect/browser-utils":"node_modules/@walletconnect/browser-utils/dist/esm/index.js","qrcode":"node_modules/qrcode/lib/browser.js","copy-to-clipboard":"node_modules/copy-to-clipboard/index.js","preact/compat":"node_modules/preact/compat/dist/compat.module.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/@walletconnect/http-connection/node_modules/eventemitter3/index.js":[function(require,module,exports) {
'use strict';

var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
  module.exports = EventEmitter;
}

},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/stream-http/lib/capability.js":[function(require,module,exports) {
var global = arguments[3];
exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

exports.writableStream = isFunction(global.WritableStream)

exports.abortController = isFunction(global.AbortController)

exports.blobConstructor = false
try {
	new Blob([new ArrayBuffer(1)])
	exports.blobConstructor = true
} catch (e) {}

// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr
function getXHR () {
	// Cache the xhr value
	if (xhr !== undefined) return xhr

	if (global.XMLHttpRequest) {
		xhr = new global.XMLHttpRequest()
		// If XDomainRequest is available (ie only, where xhr might not work
		// cross domain), use the page location. Otherwise use example.com
		// Note: this doesn't actually make an http request.
		try {
			xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
		} catch(e) {
			xhr = null
		}
	} else {
		// Service workers don't have XHR
		xhr = null
	}
	return xhr
}

function checkTypeSupport (type) {
	var xhr = getXHR()
	if (!xhr) return false
	try {
		xhr.responseType = type
		return xhr.responseType === type
	} catch (e) {}
	return false
}

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.
var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))

// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
	checkTypeSupport('moz-chunked-arraybuffer')

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

exports.vbArray = isFunction(global.VBArray)

function isFunction (value) {
	return typeof value === 'function'
}

xhr = null // Help gc

},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js":[function(require,module,exports) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process-nextick-args/index.js":[function(require,module,exports) {
var process = require("process");
'use strict';

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


},{"process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/events/events.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}
function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};
function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});
EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};
function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0) er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;
  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }
  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }
  return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}
function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;
  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;
    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }
    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }
  return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this;

  // not listening for removeListener, no need to emit
  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;
    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }
  listeners = events[type];
  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }
  return this;
};
function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};
EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events !== undefined) {
    var evlistener = events[type];
    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i) copy[i] = arr[i];
  return copy;
}
function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];
  list.pop();
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }
    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}
},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/stream-browser.js":[function(require,module,exports) {
module.exports = require('events').EventEmitter;

},{"events":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/events/events.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/node_modules/safe-buffer/index.js":[function(require,module,exports) {

/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/core-util-is/lib/util.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('buffer').Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/BufferList.js":[function(require,module,exports) {

'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/node_modules/safe-buffer/index.js","util":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/src/builtins/_empty.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/destroy.js":[function(require,module,exports) {
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        pna.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        pna.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        pna.nextTick(emitErrorNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        pna.nextTick(emitErrorNT, _this, err);
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process-nextick-args/index.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/util-deprecate/browser.js":[function(require,module,exports) {
var global = arguments[3];

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_writable.js":[function(require,module,exports) {
var process = require("process");

var global = arguments[3];
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/
var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !true && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');
util.inherits(Writable, Stream);
function nop() {}
function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }
  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }
  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};
function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;
  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);
  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  var state = this._writableState;
  state.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending) endWritable(this, state, cb);
};
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  // reuse the free corkReq.
  state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
},{"process-nextick-args":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process-nextick-args/index.js","core-util-is":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/core-util-is/lib/util.js","inherits":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js","util-deprecate":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/util-deprecate/browser.js","./internal/streams/stream":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/stream-browser.js","safe-buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/node_modules/safe-buffer/index.js","./internal/streams/destroy":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/destroy.js","./_stream_duplex":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_duplex.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_duplex.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"process-nextick-args":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process-nextick-args/index.js","core-util-is":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/core-util-is/lib/util.js","inherits":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js","./_stream_readable":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_readable.js","./_stream_writable":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_writable.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js":[function(require,module,exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/node_modules/safe-buffer/index.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_readable.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, { hasUnpiped: false });
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
},{"process-nextick-args":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process-nextick-args/index.js","isarray":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/isarray/index.js","events":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/events/events.js","./internal/streams/stream":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/stream-browser.js","safe-buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/node_modules/safe-buffer/index.js","core-util-is":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/core-util-is/lib/util.js","inherits":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js","util":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/src/builtins/_empty.js","./internal/streams/BufferList":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/BufferList.js","./internal/streams/destroy":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/internal/streams/destroy.js","./_stream_duplex":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_duplex.js","string_decoder/":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_transform.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_duplex.js","core-util-is":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/core-util-is/lib/util.js","inherits":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_passthrough.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = Object.create(require('core-util-is'));
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_transform.js","core-util-is":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/core-util-is/lib/util.js","inherits":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/readable-browser.js":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_readable.js":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_readable.js","./lib/_stream_writable.js":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_writable.js","./lib/_stream_duplex.js":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_duplex.js","./lib/_stream_transform.js":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_transform.js","./lib/_stream_passthrough.js":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_passthrough.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/stream-http/lib/response.js":[function(require,module,exports) {
var process = require("process");
var Buffer = require("buffer").Buffer;
var global = arguments[3];
var capability = require('./capability')
var inherits = require('inherits')
var stream = require('readable-stream')

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
}

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, fetchTimer) {
	var self = this
	stream.Readable.call(self)

	self._mode = mode
	self.headers = {}
	self.rawHeaders = []
	self.trailers = {}
	self.rawTrailers = []

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close')
		})
	})

	if (mode === 'fetch') {
		self._fetchResponse = response

		self.url = response.url
		self.statusCode = response.status
		self.statusMessage = response.statusText
		
		response.headers.forEach(function (header, key){
			self.headers[key.toLowerCase()] = header
			self.rawHeaders.push(key, header)
		})

		if (capability.writableStream) {
			var writable = new WritableStream({
				write: function (chunk) {
					return new Promise(function (resolve, reject) {
						if (self._destroyed) {
							reject()
						} else if(self.push(new Buffer(chunk))) {
							resolve()
						} else {
							self._resumeFetch = resolve
						}
					})
				},
				close: function () {
					global.clearTimeout(fetchTimer)
					if (!self._destroyed)
						self.push(null)
				},
				abort: function (err) {
					if (!self._destroyed)
						self.emit('error', err)
				}
			})

			try {
				response.body.pipeTo(writable).catch(function (err) {
					global.clearTimeout(fetchTimer)
					if (!self._destroyed)
						self.emit('error', err)
				})
				return
			} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
		}
		// fallback for when writableStream or pipeTo aren't available
		var reader = response.body.getReader()
		function read () {
			reader.read().then(function (result) {
				if (self._destroyed)
					return
				if (result.done) {
					global.clearTimeout(fetchTimer)
					self.push(null)
					return
				}
				self.push(new Buffer(result.value))
				read()
			}).catch(function (err) {
				global.clearTimeout(fetchTimer)
				if (!self._destroyed)
					self.emit('error', err)
			})
		}
		read()
	} else {
		self._xhr = xhr
		self._pos = 0

		self.url = xhr.responseURL
		self.statusCode = xhr.status
		self.statusMessage = xhr.statusText
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
		headers.forEach(function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/)
			if (matches) {
				var key = matches[1].toLowerCase()
				if (key === 'set-cookie') {
					if (self.headers[key] === undefined) {
						self.headers[key] = []
					}
					self.headers[key].push(matches[2])
				} else if (self.headers[key] !== undefined) {
					self.headers[key] += ', ' + matches[2]
				} else {
					self.headers[key] = matches[2]
				}
				self.rawHeaders.push(matches[1], matches[2])
			}
		})

		self._charset = 'x-user-defined'
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type']
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase()
				}
			}
			if (!self._charset)
				self._charset = 'utf-8' // best guess
		}
	}
}

inherits(IncomingMessage, stream.Readable)

IncomingMessage.prototype._read = function () {
	var self = this

	var resolve = self._resumeFetch
	if (resolve) {
		self._resumeFetch = null
		resolve()
	}
}

IncomingMessage.prototype._onXHRProgress = function () {
	var self = this

	var xhr = self._xhr

	var response = null
	switch (self._mode) {
		case 'text:vbarray': // For IE9
			if (xhr.readyState !== rStates.DONE)
				break
			try {
				// This fails in IE8
				response = new global.VBArray(xhr.responseBody).toArray()
			} catch (e) {}
			if (response !== null) {
				self.push(new Buffer(response))
				break
			}
			// Falls through in IE8	
		case 'text':
			try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
				response = xhr.responseText
			} catch (e) {
				self._mode = 'text:vbarray'
				break
			}
			if (response.length > self._pos) {
				var newData = response.substr(self._pos)
				if (self._charset === 'x-user-defined') {
					var buffer = new Buffer(newData.length)
					for (var i = 0; i < newData.length; i++)
						buffer[i] = newData.charCodeAt(i) & 0xff

					self.push(buffer)
				} else {
					self.push(newData, self._charset)
				}
				self._pos = response.length
			}
			break
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE || !xhr.response)
				break
			response = xhr.response
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'moz-chunked-arraybuffer': // take whole
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING || !response)
				break
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'ms-stream':
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING)
				break
			var reader = new global.MSStreamReader()
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
					self._pos = reader.result.byteLength
				}
			}
			reader.onload = function () {
				self.push(null)
			}
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response)
			break
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		self.push(null)
	}
}

},{"./capability":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/stream-http/lib/capability.js","inherits":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js","readable-stream":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/readable-browser.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/to-arraybuffer/index.js":[function(require,module,exports) {

var Buffer = require('buffer').Buffer

module.exports = function (buf) {
	// If the buffer is backed by a Uint8Array, a faster version will work
	if (buf instanceof Uint8Array) {
		// If the buffer isn't a subarray, return the underlying ArrayBuffer
		if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
			return buf.buffer
		} else if (typeof buf.buffer.slice === 'function') {
			// Otherwise we need to get a proper copy
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
		}
	}

	if (Buffer.isBuffer(buf)) {
		// This is the slow version that will work with any Buffer
		// implementation (even in old browsers)
		var arrayCopy = new Uint8Array(buf.length)
		var len = buf.length
		for (var i = 0; i < len; i++) {
			arrayCopy[i] = buf[i]
		}
		return arrayCopy.buffer
	} else {
		throw new Error('Argument must be a Buffer')
	}
}

},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/stream-http/lib/request.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var global = arguments[3];
var process = require("process");
var capability = require('./capability')
var inherits = require('inherits')
var response = require('./response')
var stream = require('readable-stream')
var toArrayBuffer = require('to-arraybuffer')

var IncomingMessage = response.IncomingMessage
var rStates = response.readyStates

function decideMode (preferBinary, useFetch) {
	if (capability.fetch && useFetch) {
		return 'fetch'
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer'
	} else if (capability.msstream) {
		return 'ms-stream'
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer'
	} else if (capability.vbArray && preferBinary) {
		return 'text:vbarray'
	} else {
		return 'text'
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this
	stream.Writable.call(self)

	self._opts = opts
	self._body = []
	self._headers = {}
	if (opts.auth)
		self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
	Object.keys(opts.headers).forEach(function (name) {
		self.setHeader(name, opts.headers[name])
	})

	var preferBinary
	var useFetch = true
	if (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {
		// If the use of XHR should be preferred. Not typically needed.
		useFetch = false
		preferBinary = true
	} else if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true
	} else {
		throw new Error('Invalid value for opts.mode')
	}
	self._mode = decideMode(preferBinary, useFetch)
	self._fetchTimer = null

	self.on('finish', function () {
		self._onFinish()
	})
}

inherits(ClientRequest, stream.Writable)

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this
	var lowerName = name.toLowerCase()
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (unsafeHeaders.indexOf(lowerName) !== -1)
		return

	self._headers[lowerName] = {
		name: name,
		value: value
	}
}

ClientRequest.prototype.getHeader = function (name) {
	var header = this._headers[name.toLowerCase()]
	if (header)
		return header.value
	return null
}

ClientRequest.prototype.removeHeader = function (name) {
	var self = this
	delete self._headers[name.toLowerCase()]
}

ClientRequest.prototype._onFinish = function () {
	var self = this

	if (self._destroyed)
		return
	var opts = self._opts

	var headersObj = self._headers
	var body = null
	if (opts.method !== 'GET' && opts.method !== 'HEAD') {
		if (capability.arraybuffer) {
			body = toArrayBuffer(Buffer.concat(self._body))
		} else if (capability.blobConstructor) {
			body = new global.Blob(self._body.map(function (buffer) {
				return toArrayBuffer(buffer)
			}), {
				type: (headersObj['content-type'] || {}).value || ''
			})
		} else {
			// get utf8 string
			body = Buffer.concat(self._body).toString()
		}
	}

	// create flattened list of headers
	var headersList = []
	Object.keys(headersObj).forEach(function (keyName) {
		var name = headersObj[keyName].name
		var value = headersObj[keyName].value
		if (Array.isArray(value)) {
			value.forEach(function (v) {
				headersList.push([name, v])
			})
		} else {
			headersList.push([name, value])
		}
	})

	if (self._mode === 'fetch') {
		var signal = null
		var fetchTimer = null
		if (capability.abortController) {
			var controller = new AbortController()
			signal = controller.signal
			self._fetchAbortController = controller

			if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
				self._fetchTimer = global.setTimeout(function () {
					self.emit('requestTimeout')
					if (self._fetchAbortController)
						self._fetchAbortController.abort()
				}, opts.requestTimeout)
			}
		}

		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headersList,
			body: body || undefined,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin',
			signal: signal
		}).then(function (response) {
			self._fetchResponse = response
			self._connect()
		}, function (reason) {
			global.clearTimeout(self._fetchTimer)
			if (!self._destroyed)
				self.emit('error', reason)
		})
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest()
		try {
			xhr.open(self._opts.method, self._opts.url, true)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr)
			xhr.responseType = self._mode.split(':')[0]

		if ('withCredentials' in xhr)
			xhr.withCredentials = !!opts.withCredentials

		if (self._mode === 'text' && 'overrideMimeType' in xhr)
			xhr.overrideMimeType('text/plain; charset=x-user-defined')

		if ('requestTimeout' in opts) {
			xhr.timeout = opts.requestTimeout
			xhr.ontimeout = function () {
				self.emit('requestTimeout')
			}
		}

		headersList.forEach(function (header) {
			xhr.setRequestHeader(header[0], header[1])
		})

		self._response = null
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress()
					break
			}
		}
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress()
			}
		}

		xhr.onerror = function () {
			if (self._destroyed)
				return
			self.emit('error', new Error('XHR error'))
		}

		try {
			xhr.send(body)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}
	}
}

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */
function statusValid (xhr) {
	try {
		var status = xhr.status
		return (status !== null && status !== 0)
	} catch (e) {
		return false
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this

	if (!statusValid(self._xhr) || self._destroyed)
		return

	if (!self._response)
		self._connect()

	self._response._onXHRProgress()
}

ClientRequest.prototype._connect = function () {
	var self = this

	if (self._destroyed)
		return

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._fetchTimer)
	self._response.on('error', function(err) {
		self.emit('error', err)
	})

	self.emit('response', self._response)
}

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this

	self._body.push(chunk)
	cb()
}

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
	var self = this
	self._destroyed = true
	global.clearTimeout(self._fetchTimer)
	if (self._response)
		self._response._destroyed = true
	if (self._xhr)
		self._xhr.abort()
	else if (self._fetchAbortController)
		self._fetchAbortController.abort()
}

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this
	if (typeof data === 'function') {
		cb = data
		data = undefined
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb)
}

ClientRequest.prototype.flushHeaders = function () {}
ClientRequest.prototype.setTimeout = function () {}
ClientRequest.prototype.setNoDelay = function () {}
ClientRequest.prototype.setSocketKeepAlive = function () {}

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
	'accept-charset',
	'accept-encoding',
	'access-control-request-headers',
	'access-control-request-method',
	'connection',
	'content-length',
	'cookie',
	'cookie2',
	'date',
	'dnt',
	'expect',
	'host',
	'keep-alive',
	'origin',
	'referer',
	'te',
	'trailer',
	'transfer-encoding',
	'upgrade',
	'via'
]

},{"./capability":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/stream-http/lib/capability.js","inherits":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js","./response":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/stream-http/lib/response.js","readable-stream":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/readable-browser.js","to-arraybuffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/to-arraybuffer/index.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/xtend/immutable.js":[function(require,module,exports) {
module.exports = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;
function extend() {
  var target = {};
  for (var i = 0; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
}
},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/builtin-status-codes/browser.js":[function(require,module,exports) {
module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
}

},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/punycode/punycode.js":[function(require,module,exports) {
var global = arguments[3];
var define;
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/url/util.js":[function(require,module,exports) {
'use strict';

module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/querystring-es3/decode.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
module.exports = function (qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};
  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }
  var regexp = /\+/g;
  qs = qs.split(sep);
  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }
  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }
  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
      idx = x.indexOf(eq),
      kstr,
      vstr,
      k,
      v;
    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }
    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);
    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }
  return obj;
};
var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};
},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/querystring-es3/encode.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function (v) {
  switch (typeof v) {
    case 'string':
      return v;
    case 'boolean':
      return v ? 'true' : 'false';
    case 'number':
      return isFinite(v) ? v : '';
    default:
      return '';
  }
};
module.exports = function (obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }
  if (typeof obj === 'object') {
    return map(objectKeys(obj), function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }
  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};
var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};
function map(xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}
var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};
},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/querystring-es3/index.js":[function(require,module,exports) {
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');
},{"./decode":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/querystring-es3/decode.js","./encode":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/querystring-es3/encode.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/url/url.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var punycode = require('punycode');
var util = require('./util');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

},{"punycode":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/punycode/punycode.js","./util":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/url/util.js","querystring":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/querystring-es3/index.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/stream-http/index.js":[function(require,module,exports) {
var global = arguments[3];
var ClientRequest = require('./lib/request')
var response = require('./lib/response')
var extend = require('xtend')
var statusCodes = require('builtin-status-codes')
var url = require('url')

var http = exports

http.request = function (opts, cb) {
	if (typeof opts === 'string')
		opts = url.parse(opts)
	else
		opts = extend(opts)

	// Normally, the page is loaded from http or https, so not specifying a protocol
	// will result in a (valid) protocol-relative url. However, this won't work if
	// the protocol is something else, like 'file:'
	var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''

	var protocol = opts.protocol || defaultProtocol
	var host = opts.hostname || opts.host
	var port = opts.port
	var path = opts.path || '/'

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1)
		host = '[' + host + ']'

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
	opts.method = (opts.method || 'GET').toUpperCase()
	opts.headers = opts.headers || {}

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts)
	if (cb)
		req.on('response', cb)
	return req
}

http.get = function get (opts, cb) {
	var req = http.request(opts, cb)
	req.end()
	return req
}

http.ClientRequest = ClientRequest
http.IncomingMessage = response.IncomingMessage

http.Agent = function () {}
http.Agent.defaultMaxSockets = 4

http.globalAgent = new http.Agent()

http.STATUS_CODES = statusCodes

http.METHODS = [
	'CHECKOUT',
	'CONNECT',
	'COPY',
	'DELETE',
	'GET',
	'HEAD',
	'LOCK',
	'M-SEARCH',
	'MERGE',
	'MKACTIVITY',
	'MKCOL',
	'MOVE',
	'NOTIFY',
	'OPTIONS',
	'PATCH',
	'POST',
	'PROPFIND',
	'PROPPATCH',
	'PURGE',
	'PUT',
	'REPORT',
	'SEARCH',
	'SUBSCRIBE',
	'TRACE',
	'UNLOCK',
	'UNSUBSCRIBE'
]
},{"./lib/request":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/stream-http/lib/request.js","./lib/response":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/stream-http/lib/response.js","xtend":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/xtend/immutable.js","builtin-status-codes":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/builtin-status-codes/browser.js","url":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/url/url.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/https-browserify/index.js":[function(require,module,exports) {
var http = require('http')
var url = require('url')

var https = module.exports

for (var key in http) {
  if (http.hasOwnProperty(key)) https[key] = http[key]
}

https.request = function (params, cb) {
  params = validateParams(params)
  return http.request.call(this, params, cb)
}

https.get = function (params, cb) {
  params = validateParams(params)
  return http.get.call(this, params, cb)
}

function validateParams (params) {
  if (typeof params === 'string') {
    params = url.parse(params)
  }
  if (!params.protocol) {
    params.protocol = 'https:'
  }
  if (params.protocol !== 'https:') {
    throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"')
  }
  return params
}

},{"http":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/stream-http/index.js","url":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/url/url.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/os-browserify/browser.js":[function(require,module,exports) {
exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

exports.homedir = function () {
	return '/'
};

},{}],"node_modules/xhr2-cookies/dist/progress-event.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ProgressEvent = /** @class */ (function () {
    function ProgressEvent(type) {
        this.type = type;
        this.bubbles = false;
        this.cancelable = false;
        this.loaded = 0;
        this.lengthComputable = false;
        this.total = 0;
    }
    return ProgressEvent;
}());
exports.ProgressEvent = ProgressEvent;

},{}],"node_modules/xhr2-cookies/dist/errors.js":[function(require,module,exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SecurityError = /** @class */ (function (_super) {
    __extends(SecurityError, _super);
    function SecurityError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SecurityError;
}(Error));
exports.SecurityError = SecurityError;
var InvalidStateError = /** @class */ (function (_super) {
    __extends(InvalidStateError, _super);
    function InvalidStateError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return InvalidStateError;
}(Error));
exports.InvalidStateError = InvalidStateError;
var NetworkError = /** @class */ (function (_super) {
    __extends(NetworkError, _super);
    function NetworkError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NetworkError;
}(Error));
exports.NetworkError = NetworkError;
var SyntaxError = /** @class */ (function (_super) {
    __extends(SyntaxError, _super);
    function SyntaxError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SyntaxError;
}(Error));
exports.SyntaxError = SyntaxError;

},{}],"node_modules/xhr2-cookies/dist/xml-http-request-event-target.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var XMLHttpRequestEventTarget = /** @class */ (function () {
    function XMLHttpRequestEventTarget() {
        this.listeners = {};
    }
    XMLHttpRequestEventTarget.prototype.addEventListener = function (eventType, listener) {
        eventType = eventType.toLowerCase();
        this.listeners[eventType] = this.listeners[eventType] || [];
        this.listeners[eventType].push(listener.handleEvent || listener);
    };
    XMLHttpRequestEventTarget.prototype.removeEventListener = function (eventType, listener) {
        eventType = eventType.toLowerCase();
        if (!this.listeners[eventType]) {
            return;
        }
        var index = this.listeners[eventType].indexOf(listener.handleEvent || listener);
        if (index < 0) {
            return;
        }
        this.listeners[eventType].splice(index, 1);
    };
    XMLHttpRequestEventTarget.prototype.dispatchEvent = function (event) {
        var eventType = event.type.toLowerCase();
        event.target = this; // TODO: set event.currentTarget?
        if (this.listeners[eventType]) {
            for (var _i = 0, _a = this.listeners[eventType]; _i < _a.length; _i++) {
                var listener_1 = _a[_i];
                listener_1.call(this, event);
            }
        }
        var listener = this["on" + eventType];
        if (listener) {
            listener.call(this, event);
        }
        return true;
    };
    return XMLHttpRequestEventTarget;
}());
exports.XMLHttpRequestEventTarget = XMLHttpRequestEventTarget;

},{}],"node_modules/xhr2-cookies/dist/xml-http-request-upload.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
var XMLHttpRequestUpload = /** @class */ (function (_super) {
    __extends(XMLHttpRequestUpload, _super);
    function XMLHttpRequestUpload() {
        var _this = _super.call(this) || this;
        _this._contentType = null;
        _this._body = null;
        _this._reset();
        return _this;
    }
    XMLHttpRequestUpload.prototype._reset = function () {
        this._contentType = null;
        this._body = null;
    };
    XMLHttpRequestUpload.prototype._setData = function (data) {
        if (data == null) {
            return;
        }
        if (typeof data === 'string') {
            if (data.length !== 0) {
                this._contentType = 'text/plain;charset=UTF-8';
            }
            this._body = new Buffer(data, 'utf-8');
        }
        else if (Buffer.isBuffer(data)) {
            this._body = data;
        }
        else if (data instanceof ArrayBuffer) {
            var body = new Buffer(data.byteLength);
            var view = new Uint8Array(data);
            for (var i = 0; i < data.byteLength; i++) {
                body[i] = view[i];
            }
            this._body = body;
        }
        else if (data.buffer && data.buffer instanceof ArrayBuffer) {
            var body = new Buffer(data.byteLength);
            var offset = data.byteOffset;
            var view = new Uint8Array(data.buffer);
            for (var i = 0; i < data.byteLength; i++) {
                body[i] = view[i + offset];
            }
            this._body = body;
        }
        else {
            throw new Error("Unsupported send() data " + data);
        }
    };
    XMLHttpRequestUpload.prototype._finalizeHeaders = function (headers, loweredHeaders) {
        if (this._contentType && !loweredHeaders['content-type']) {
            headers['Content-Type'] = this._contentType;
        }
        if (this._body) {
            headers['Content-Length'] = this._body.length.toString();
        }
    };
    XMLHttpRequestUpload.prototype._startUpload = function (request) {
        if (this._body) {
            request.write(this._body);
        }
        request.end();
    };
    return XMLHttpRequestUpload;
}(xml_http_request_event_target_1.XMLHttpRequestEventTarget));
exports.XMLHttpRequestUpload = XMLHttpRequestUpload;

},{"./xml-http-request-event-target":"node_modules/xhr2-cookies/dist/xml-http-request-event-target.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/cookiejar/cookiejar.js":[function(require,module,exports) {
/* jshint node: true */
(function () {
    "use strict";

    function CookieAccessInfo(domain, path, secure, script) {
        if (this instanceof CookieAccessInfo) {
            this.domain = domain || undefined;
            this.path = path || "/";
            this.secure = !!secure;
            this.script = !!script;
            return this;
        }
        return new CookieAccessInfo(domain, path, secure, script);
    }
    CookieAccessInfo.All = Object.freeze(Object.create(null));
    exports.CookieAccessInfo = CookieAccessInfo;

    function Cookie(cookiestr, request_domain, request_path) {
        if (cookiestr instanceof Cookie) {
            return cookiestr;
        }
        if (this instanceof Cookie) {
            this.name = null;
            this.value = null;
            this.expiration_date = Infinity;
            this.path = String(request_path || "/");
            this.explicit_path = false;
            this.domain = request_domain || null;
            this.explicit_domain = false;
            this.secure = false; //how to define default?
            this.noscript = false; //httponly
            if (cookiestr) {
                this.parse(cookiestr, request_domain, request_path);
            }
            return this;
        }
        return new Cookie(cookiestr, request_domain, request_path);
    }
    exports.Cookie = Cookie;

    Cookie.prototype.toString = function toString() {
        var str = [this.name + "=" + this.value];
        if (this.expiration_date !== Infinity) {
            str.push("expires=" + (new Date(this.expiration_date)).toGMTString());
        }
        if (this.domain) {
            str.push("domain=" + this.domain);
        }
        if (this.path) {
            str.push("path=" + this.path);
        }
        if (this.secure) {
            str.push("secure");
        }
        if (this.noscript) {
            str.push("httponly");
        }
        return str.join("; ");
    };

    Cookie.prototype.toValueString = function toValueString() {
        return this.name + "=" + this.value;
    };

    var cookie_str_splitter = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
    Cookie.prototype.parse = function parse(str, request_domain, request_path) {
        if (this instanceof Cookie) {
            if ( str.length > 32768 ) {
                console.warn("Cookie too long for parsing (>32768 characters)");
                return;
            }
    
            var parts = str.split(";").filter(function (value) {
                    return !!value;
                });
            var i;

            var pair = parts[0].match(/([^=]+)=([\s\S]*)/);
            if (!pair) {
                console.warn("Invalid cookie header encountered. Header: '"+str+"'");
                return;
            }

            var key = pair[1];
            var value = pair[2];
            if ( typeof key !== 'string' || key.length === 0 || typeof value !== 'string' ) {
                console.warn("Unable to extract values from cookie header. Cookie: '"+str+"'");
                return;
            }

            this.name = key;
            this.value = value;

            for (i = 1; i < parts.length; i += 1) {
                pair = parts[i].match(/([^=]+)(?:=([\s\S]*))?/);
                key = pair[1].trim().toLowerCase();
                value = pair[2];
                switch (key) {
                case "httponly":
                    this.noscript = true;
                    break;
                case "expires":
                    this.expiration_date = value ?
                            Number(Date.parse(value)) :
                            Infinity;
                    break;
                case "path":
                    this.path = value ?
                            value.trim() :
                            "";
                    this.explicit_path = true;
                    break;
                case "domain":
                    this.domain = value ?
                            value.trim() :
                            "";
                    this.explicit_domain = !!this.domain;
                    break;
                case "secure":
                    this.secure = true;
                    break;
                }
            }

            if (!this.explicit_path) {
               this.path = request_path || "/";
            }
            if (!this.explicit_domain) {
               this.domain = request_domain;
            }

            return this;
        }
        return new Cookie().parse(str, request_domain, request_path);
    };

    Cookie.prototype.matches = function matches(access_info) {
        if (access_info === CookieAccessInfo.All) {
          return true;
        }
        if (this.noscript && access_info.script ||
                this.secure && !access_info.secure ||
                !this.collidesWith(access_info)) {
            return false;
        }
        return true;
    };

    Cookie.prototype.collidesWith = function collidesWith(access_info) {
        if ((this.path && !access_info.path) || (this.domain && !access_info.domain)) {
            return false;
        }
        if (this.path && access_info.path.indexOf(this.path) !== 0) {
            return false;
        }
        if (this.explicit_path && access_info.path.indexOf( this.path ) !== 0) {
           return false;
        }
        var access_domain = access_info.domain && access_info.domain.replace(/^[\.]/,'');
        var cookie_domain = this.domain && this.domain.replace(/^[\.]/,'');
        if (cookie_domain === access_domain) {
            return true;
        }
        if (cookie_domain) {
            if (!this.explicit_domain) {
                return false; // we already checked if the domains were exactly the same
            }
            var wildcard = access_domain.indexOf(cookie_domain);
            if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {
                return false;
            }
            return true;
        }
        return true;
    };

    function CookieJar() {
        var cookies, cookies_list, collidable_cookie;
        if (this instanceof CookieJar) {
            cookies = Object.create(null); //name: [Cookie]

            this.setCookie = function setCookie(cookie, request_domain, request_path) {
                var remove, i;
                cookie = new Cookie(cookie, request_domain, request_path);
                //Delete the cookie if the set is past the current time
                remove = cookie.expiration_date <= Date.now();
                if (cookies[cookie.name] !== undefined) {
                    cookies_list = cookies[cookie.name];
                    for (i = 0; i < cookies_list.length; i += 1) {
                        collidable_cookie = cookies_list[i];
                        if (collidable_cookie.collidesWith(cookie)) {
                            if (remove) {
                                cookies_list.splice(i, 1);
                                if (cookies_list.length === 0) {
                                    delete cookies[cookie.name];
                                }
                                return false;
                            }
                            cookies_list[i] = cookie;
                            return cookie;
                        }
                    }
                    if (remove) {
                        return false;
                    }
                    cookies_list.push(cookie);
                    return cookie;
                }
                if (remove) {
                    return false;
                }
                cookies[cookie.name] = [cookie];
                return cookies[cookie.name];
            };
            //returns a cookie
            this.getCookie = function getCookie(cookie_name, access_info) {
                var cookie, i;
                cookies_list = cookies[cookie_name];
                if (!cookies_list) {
                    return;
                }
                for (i = 0; i < cookies_list.length; i += 1) {
                    cookie = cookies_list[i];
                    if (cookie.expiration_date <= Date.now()) {
                        if (cookies_list.length === 0) {
                            delete cookies[cookie.name];
                        }
                        continue;
                    }

                    if (cookie.matches(access_info)) {
                        return cookie;
                    }
                }
            };
            //returns a list of cookies
            this.getCookies = function getCookies(access_info) {
                var matches = [], cookie_name, cookie;
                for (cookie_name in cookies) {
                    cookie = this.getCookie(cookie_name, access_info);
                    if (cookie) {
                        matches.push(cookie);
                    }
                }
                matches.toString = function toString() {
                    return matches.join(":");
                };
                matches.toValueString = function toValueString() {
                    return matches.map(function (c) {
                        return c.toValueString();
                    }).join('; ');
                };
                return matches;
            };

            return this;
        }
        return new CookieJar();
    }
    exports.CookieJar = CookieJar;

    //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.
    CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {
        cookies = Array.isArray(cookies) ?
                cookies :
                cookies.split(cookie_str_splitter);
        var successful = [],
            i,
            cookie;
        cookies = cookies.map(function(item){
            return new Cookie(item, request_domain, request_path);
        });
        for (i = 0; i < cookies.length; i += 1) {
            cookie = cookies[i];
            if (this.setCookie(cookie, request_domain, request_path)) {
                successful.push(cookie);
            }
        }
        return successful;
    };
}());

},{}],"node_modules/xhr2-cookies/dist/xml-http-request.js":[function(require,module,exports) {
var process = require("process");
var Buffer = require("buffer").Buffer;
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var http = require("http");
var https = require("https");
var os = require("os");
var url = require("url");
var progress_event_1 = require("./progress-event");
var errors_1 = require("./errors");
var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
var xml_http_request_upload_1 = require("./xml-http-request-upload");
var Cookie = require("cookiejar");
var XMLHttpRequest = /** @class */ (function (_super) {
    __extends(XMLHttpRequest, _super);
    function XMLHttpRequest(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.UNSENT = XMLHttpRequest.UNSENT;
        _this.OPENED = XMLHttpRequest.OPENED;
        _this.HEADERS_RECEIVED = XMLHttpRequest.HEADERS_RECEIVED;
        _this.LOADING = XMLHttpRequest.LOADING;
        _this.DONE = XMLHttpRequest.DONE;
        _this.onreadystatechange = null;
        _this.readyState = XMLHttpRequest.UNSENT;
        _this.response = null;
        _this.responseText = '';
        _this.responseType = '';
        _this.status = 0; // TODO: UNSENT?
        _this.statusText = '';
        _this.timeout = 0;
        _this.upload = new xml_http_request_upload_1.XMLHttpRequestUpload();
        _this.responseUrl = '';
        _this.withCredentials = false;
        _this._method = null;
        _this._url = null;
        _this._sync = false;
        _this._headers = {};
        _this._loweredHeaders = {};
        _this._mimeOverride = null; // TODO: is type right?
        _this._request = null;
        _this._response = null;
        _this._responseParts = null;
        _this._responseHeaders = null;
        _this._aborting = null; // TODO: type?
        _this._error = null; // TODO: type?
        _this._loadedBytes = 0;
        _this._totalBytes = 0;
        _this._lengthComputable = false;
        _this._restrictedMethods = { CONNECT: true, TRACE: true, TRACK: true };
        _this._restrictedHeaders = {
            'accept-charset': true,
            'accept-encoding': true,
            'access-control-request-headers': true,
            'access-control-request-method': true,
            connection: true,
            'content-length': true,
            cookie: true,
            cookie2: true,
            date: true,
            dnt: true,
            expect: true,
            host: true,
            'keep-alive': true,
            origin: true,
            referer: true,
            te: true,
            trailer: true,
            'transfer-encoding': true,
            upgrade: true,
            'user-agent': true,
            via: true
        };
        _this._privateHeaders = { 'set-cookie': true, 'set-cookie2': true };
        _this._userAgent = "Mozilla/5.0 (" + os.type() + " " + os.arch() + ") node.js/" + process.versions.node + " v8/" + process.versions.v8;
        _this._anonymous = options.anon || false;
        return _this;
    }
    XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
        if (async === void 0) { async = true; }
        method = method.toUpperCase();
        if (this._restrictedMethods[method]) {
            throw new XMLHttpRequest.SecurityError("HTTP method " + method + " is not allowed in XHR");
        }
        ;
        var xhrUrl = this._parseUrl(url, user, password);
        if (this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) {
            // TODO(pwnall): terminate abort(), terminate send()
        }
        this._method = method;
        this._url = xhrUrl;
        this._sync = !async;
        this._headers = {};
        this._loweredHeaders = {};
        this._mimeOverride = null;
        this._setReadyState(XMLHttpRequest.OPENED);
        this._request = null;
        this._response = null;
        this.status = 0;
        this.statusText = '';
        this._responseParts = [];
        this._responseHeaders = null;
        this._loadedBytes = 0;
        this._totalBytes = 0;
        this._lengthComputable = false;
    };
    XMLHttpRequest.prototype.setRequestHeader = function (name, value) {
        if (this.readyState !== XMLHttpRequest.OPENED) {
            throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
        }
        var loweredName = name.toLowerCase();
        if (this._restrictedHeaders[loweredName] || /^sec-/.test(loweredName) || /^proxy-/.test(loweredName)) {
            console.warn("Refused to set unsafe header \"" + name + "\"");
            return;
        }
        value = value.toString();
        if (this._loweredHeaders[loweredName] != null) {
            name = this._loweredHeaders[loweredName];
            this._headers[name] = this._headers[name] + ", " + value;
        }
        else {
            this._loweredHeaders[loweredName] = name;
            this._headers[name] = value;
        }
    };
    XMLHttpRequest.prototype.send = function (data) {
        if (this.readyState !== XMLHttpRequest.OPENED) {
            throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
        }
        if (this._request) {
            throw new XMLHttpRequest.InvalidStateError('send() already called');
        }
        switch (this._url.protocol) {
            case 'file:':
                return this._sendFile(data);
            case 'http:':
            case 'https:':
                return this._sendHttp(data);
            default:
                throw new XMLHttpRequest.NetworkError("Unsupported protocol " + this._url.protocol);
        }
    };
    XMLHttpRequest.prototype.abort = function () {
        if (this._request == null) {
            return;
        }
        this._request.abort();
        this._setError();
        this._dispatchProgress('abort');
        this._dispatchProgress('loadend');
    };
    XMLHttpRequest.prototype.getResponseHeader = function (name) {
        if (this._responseHeaders == null || name == null) {
            return null;
        }
        var loweredName = name.toLowerCase();
        return this._responseHeaders.hasOwnProperty(loweredName)
            ? this._responseHeaders[name.toLowerCase()]
            : null;
    };
    XMLHttpRequest.prototype.getAllResponseHeaders = function () {
        var _this = this;
        if (this._responseHeaders == null) {
            return '';
        }
        return Object.keys(this._responseHeaders).map(function (key) { return key + ": " + _this._responseHeaders[key]; }).join('\r\n');
    };
    XMLHttpRequest.prototype.overrideMimeType = function (mimeType) {
        if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
            throw new XMLHttpRequest.InvalidStateError('overrideMimeType() not allowed in LOADING or DONE');
        }
        this._mimeOverride = mimeType.toLowerCase();
    };
    XMLHttpRequest.prototype.nodejsSet = function (options) {
        this.nodejsHttpAgent = options.httpAgent || this.nodejsHttpAgent;
        this.nodejsHttpsAgent = options.httpsAgent || this.nodejsHttpsAgent;
        if (options.hasOwnProperty('baseUrl')) {
            if (options.baseUrl != null) {
                var parsedUrl = url.parse(options.baseUrl, false, true);
                if (!parsedUrl.protocol) {
                    throw new XMLHttpRequest.SyntaxError("baseUrl must be an absolute URL");
                }
            }
            this.nodejsBaseUrl = options.baseUrl;
        }
    };
    XMLHttpRequest.nodejsSet = function (options) {
        XMLHttpRequest.prototype.nodejsSet(options);
    };
    XMLHttpRequest.prototype._setReadyState = function (readyState) {
        this.readyState = readyState;
        this.dispatchEvent(new progress_event_1.ProgressEvent('readystatechange'));
    };
    XMLHttpRequest.prototype._sendFile = function (data) {
        // TODO
        throw new Error('Protocol file: not implemented');
    };
    XMLHttpRequest.prototype._sendHttp = function (data) {
        if (this._sync) {
            throw new Error('Synchronous XHR processing not implemented');
        }
        if (data && (this._method === 'GET' || this._method === 'HEAD')) {
            console.warn("Discarding entity body for " + this._method + " requests");
            data = null;
        }
        else {
            data = data || '';
        }
        this.upload._setData(data);
        this._finalizeHeaders();
        this._sendHxxpRequest();
    };
    XMLHttpRequest.prototype._sendHxxpRequest = function () {
        var _this = this;
        if (this.withCredentials) {
            var cookie = XMLHttpRequest.cookieJar
                .getCookies(Cookie.CookieAccessInfo(this._url.hostname, this._url.pathname, this._url.protocol === 'https:')).toValueString();
            this._headers.cookie = this._headers.cookie2 = cookie;
        }
        var _a = this._url.protocol === 'http:' ? [http, this.nodejsHttpAgent] : [https, this.nodejsHttpsAgent], hxxp = _a[0], agent = _a[1];
        var requestMethod = hxxp.request.bind(hxxp);
        var request = requestMethod({
            hostname: this._url.hostname,
            port: +this._url.port,
            path: this._url.path,
            auth: this._url.auth,
            method: this._method,
            headers: this._headers,
            agent: agent
        });
        this._request = request;
        if (this.timeout) {
            request.setTimeout(this.timeout, function () { return _this._onHttpTimeout(request); });
        }
        request.on('response', function (response) { return _this._onHttpResponse(request, response); });
        request.on('error', function (error) { return _this._onHttpRequestError(request, error); });
        this.upload._startUpload(request);
        if (this._request === request) {
            this._dispatchProgress('loadstart');
        }
    };
    XMLHttpRequest.prototype._finalizeHeaders = function () {
        this._headers = __assign({}, this._headers, { Connection: 'keep-alive', Host: this._url.host, 'User-Agent': this._userAgent }, this._anonymous ? { Referer: 'about:blank' } : {});
        this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
    };
    XMLHttpRequest.prototype._onHttpResponse = function (request, response) {
        var _this = this;
        if (this._request !== request) {
            return;
        }
        if (this.withCredentials && (response.headers['set-cookie'] || response.headers['set-cookie2'])) {
            XMLHttpRequest.cookieJar
                .setCookies(response.headers['set-cookie'] || response.headers['set-cookie2']);
        }
        if ([301, 302, 303, 307, 308].indexOf(response.statusCode) >= 0) {
            this._url = this._parseUrl(response.headers.location);
            this._method = 'GET';
            if (this._loweredHeaders['content-type']) {
                delete this._headers[this._loweredHeaders['content-type']];
                delete this._loweredHeaders['content-type'];
            }
            if (this._headers['Content-Type'] != null) {
                delete this._headers['Content-Type'];
            }
            delete this._headers['Content-Length'];
            this.upload._reset();
            this._finalizeHeaders();
            this._sendHxxpRequest();
            return;
        }
        this._response = response;
        this._response.on('data', function (data) { return _this._onHttpResponseData(response, data); });
        this._response.on('end', function () { return _this._onHttpResponseEnd(response); });
        this._response.on('close', function () { return _this._onHttpResponseClose(response); });
        this.responseUrl = this._url.href.split('#')[0];
        this.status = response.statusCode;
        this.statusText = http.STATUS_CODES[this.status];
        this._parseResponseHeaders(response);
        var lengthString = this._responseHeaders['content-length'] || '';
        this._totalBytes = +lengthString;
        this._lengthComputable = !!lengthString;
        this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
    };
    XMLHttpRequest.prototype._onHttpResponseData = function (response, data) {
        if (this._response !== response) {
            return;
        }
        this._responseParts.push(new Buffer(data));
        this._loadedBytes += data.length;
        if (this.readyState !== XMLHttpRequest.LOADING) {
            this._setReadyState(XMLHttpRequest.LOADING);
        }
        this._dispatchProgress('progress');
    };
    XMLHttpRequest.prototype._onHttpResponseEnd = function (response) {
        if (this._response !== response) {
            return;
        }
        this._parseResponse();
        this._request = null;
        this._response = null;
        this._setReadyState(XMLHttpRequest.DONE);
        this._dispatchProgress('load');
        this._dispatchProgress('loadend');
    };
    XMLHttpRequest.prototype._onHttpResponseClose = function (response) {
        if (this._response !== response) {
            return;
        }
        var request = this._request;
        this._setError();
        request.abort();
        this._setReadyState(XMLHttpRequest.DONE);
        this._dispatchProgress('error');
        this._dispatchProgress('loadend');
    };
    XMLHttpRequest.prototype._onHttpTimeout = function (request) {
        if (this._request !== request) {
            return;
        }
        this._setError();
        request.abort();
        this._setReadyState(XMLHttpRequest.DONE);
        this._dispatchProgress('timeout');
        this._dispatchProgress('loadend');
    };
    XMLHttpRequest.prototype._onHttpRequestError = function (request, error) {
        if (this._request !== request) {
            return;
        }
        this._setError();
        request.abort();
        this._setReadyState(XMLHttpRequest.DONE);
        this._dispatchProgress('error');
        this._dispatchProgress('loadend');
    };
    XMLHttpRequest.prototype._dispatchProgress = function (eventType) {
        var event = new XMLHttpRequest.ProgressEvent(eventType);
        event.lengthComputable = this._lengthComputable;
        event.loaded = this._loadedBytes;
        event.total = this._totalBytes;
        this.dispatchEvent(event);
    };
    XMLHttpRequest.prototype._setError = function () {
        this._request = null;
        this._response = null;
        this._responseHeaders = null;
        this._responseParts = null;
    };
    XMLHttpRequest.prototype._parseUrl = function (urlString, user, password) {
        var absoluteUrl = this.nodejsBaseUrl == null ? urlString : url.resolve(this.nodejsBaseUrl, urlString);
        var xhrUrl = url.parse(absoluteUrl, false, true);
        xhrUrl.hash = null;
        var _a = (xhrUrl.auth || '').split(':'), xhrUser = _a[0], xhrPassword = _a[1];
        if (xhrUser || xhrPassword || user || password) {
            xhrUrl.auth = (user || xhrUser || '') + ":" + (password || xhrPassword || '');
        }
        return xhrUrl;
    };
    XMLHttpRequest.prototype._parseResponseHeaders = function (response) {
        this._responseHeaders = {};
        for (var name_1 in response.headers) {
            var loweredName = name_1.toLowerCase();
            if (this._privateHeaders[loweredName]) {
                continue;
            }
            this._responseHeaders[loweredName] = response.headers[name_1];
        }
        if (this._mimeOverride != null) {
            this._responseHeaders['content-type'] = this._mimeOverride;
        }
    };
    XMLHttpRequest.prototype._parseResponse = function () {
        var buffer = Buffer.concat(this._responseParts);
        this._responseParts = null;
        switch (this.responseType) {
            case 'json':
                this.responseText = null;
                try {
                    this.response = JSON.parse(buffer.toString('utf-8'));
                }
                catch (_a) {
                    this.response = null;
                }
                return;
            case 'buffer':
                this.responseText = null;
                this.response = buffer;
                return;
            case 'arraybuffer':
                this.responseText = null;
                var arrayBuffer = new ArrayBuffer(buffer.length);
                var view = new Uint8Array(arrayBuffer);
                for (var i = 0; i < buffer.length; i++) {
                    view[i] = buffer[i];
                }
                this.response = arrayBuffer;
                return;
            case 'text':
            default:
                try {
                    this.responseText = buffer.toString(this._parseResponseEncoding());
                }
                catch (_b) {
                    this.responseText = buffer.toString('binary');
                }
                this.response = this.responseText;
        }
    };
    XMLHttpRequest.prototype._parseResponseEncoding = function () {
        return /;\s*charset=(.*)$/.exec(this._responseHeaders['content-type'] || '')[1] || 'utf-8';
    };
    XMLHttpRequest.ProgressEvent = progress_event_1.ProgressEvent;
    XMLHttpRequest.InvalidStateError = errors_1.InvalidStateError;
    XMLHttpRequest.NetworkError = errors_1.NetworkError;
    XMLHttpRequest.SecurityError = errors_1.SecurityError;
    XMLHttpRequest.SyntaxError = errors_1.SyntaxError;
    XMLHttpRequest.XMLHttpRequestUpload = xml_http_request_upload_1.XMLHttpRequestUpload;
    XMLHttpRequest.UNSENT = 0;
    XMLHttpRequest.OPENED = 1;
    XMLHttpRequest.HEADERS_RECEIVED = 2;
    XMLHttpRequest.LOADING = 3;
    XMLHttpRequest.DONE = 4;
    XMLHttpRequest.cookieJar = Cookie.CookieJar();
    return XMLHttpRequest;
}(xml_http_request_event_target_1.XMLHttpRequestEventTarget));
exports.XMLHttpRequest = XMLHttpRequest;
XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;
XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;
XMLHttpRequest.prototype.nodejsBaseUrl = null;

},{"http":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/stream-http/index.js","https":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/https-browserify/index.js","os":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/os-browserify/browser.js","url":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/url/url.js","./progress-event":"node_modules/xhr2-cookies/dist/progress-event.js","./errors":"node_modules/xhr2-cookies/dist/errors.js","./xml-http-request-event-target":"node_modules/xhr2-cookies/dist/xml-http-request-event-target.js","./xml-http-request-upload":"node_modules/xhr2-cookies/dist/xml-http-request-upload.js","cookiejar":"node_modules/cookiejar/cookiejar.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/xhr2-cookies/dist/index.js":[function(require,module,exports) {
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./xml-http-request"));
var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
exports.XMLHttpRequestEventTarget = xml_http_request_event_target_1.XMLHttpRequestEventTarget;

},{"./xml-http-request":"node_modules/xhr2-cookies/dist/xml-http-request.js","./xml-http-request-event-target":"node_modules/xhr2-cookies/dist/xml-http-request-event-target.js"}],"node_modules/@walletconnect/http-connection/dist/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _eventemitter = _interopRequireDefault(require("eventemitter3"));
var _xhr2Cookies = require("xhr2-cookies");
var _utils = require("@walletconnect/utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const XHR = (0, _utils.getFromWindow)("XMLHttpRequest") || _xhr2Cookies.XMLHttpRequest;
class HTTPConnection extends _eventemitter.default {
  constructor(url) {
    super();
    this.url = url;
  }
  formatError(payload, message, code = -1) {
    return {
      error: {
        message,
        code
      },
      id: payload.id,
      jsonrpc: payload.jsonrpc
    };
  }
  send(payload, internal) {
    return new Promise(resolve => {
      if (payload.method === "eth_subscribe") {
        const error = this.formatError(payload, "Subscriptions are not supported by this HTTP endpoint");
        this.emit("error", error);
        return resolve(error);
      }
      const xhr = new XHR();
      let responded = false;
      const res = (err, result) => {
        if (!responded) {
          xhr.abort();
          responded = true;
          if (internal) {
            internal(err, result);
          } else {
            const {
              id,
              jsonrpc
            } = payload;
            const response = err ? {
              id,
              jsonrpc,
              error: {
                message: err.message,
                code: err.code
              }
            } : {
              id,
              jsonrpc,
              result
            };
            this.emit("payload", response);
            resolve(response);
          }
        }
      };
      xhr.open("POST", this.url, true);
      xhr.setRequestHeader("Content-Type", "application/json");
      xhr.timeout = 60 * 1000;
      xhr.onerror = res;
      xhr.ontimeout = res;
      xhr.onreadystatechange = () => {
        if (xhr.readyState === 4) {
          try {
            const response = JSON.parse(xhr.responseText);
            res(response.error, response.result);
          } catch (e) {
            res(e);
          }
        }
      };
      xhr.send(JSON.stringify(payload));
    });
  }
}
var _default = HTTPConnection;
exports.default = _default;
},{"eventemitter3":"node_modules/@walletconnect/http-connection/node_modules/eventemitter3/index.js","xhr2-cookies":"node_modules/xhr2-cookies/dist/index.js","@walletconnect/utils":"node_modules/@walletconnect/utils/dist/esm/index.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/util/support/isBufferBrowser.js":[function(require,module,exports) {
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/util/node_modules/inherits/inherits_browser.js":[function(require,module,exports) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/util/util.js":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
  var keys = Object.keys(obj);
  var descriptors = {};
  for (var i = 0; i < keys.length; i++) {
    descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
  }
  return descriptors;
};
var formatRegExp = /%[sdj%]/g;
exports.format = function (f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }
  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function (x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s':
        return String(args[i++]);
      case '%d':
        return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};

// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function (fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function () {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }
  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }
  return deprecated;
};
var debugs = {};
var debugEnviron;
exports.debuglog = function (set) {
  if (isUndefined(debugEnviron)) debugEnviron = undefined || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function () {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function () {};
    }
  }
  return debugs[set];
};

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};
function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];
  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}
function stylizeNoColor(str, styleType) {
  return str;
}
function arrayToHash(array) {
  var hash = {};
  array.forEach(function (val, idx) {
    hash[val] = true;
  });
  return hash;
}
function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) &&
  // Filter out the util module, it's inspect function is special
  value.inspect !== exports.inspect &&
  // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);
  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }
  var base = '',
    array = false,
    braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }
  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }
  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }
  ctx.seen.push(value);
  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }
  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value)) return ctx.stylize('null', 'null');
}
function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || {
    value: value[key]
  };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }
  return name + ': ' + str;
}
function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function (prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);
  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }
  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;
function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;
function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;
function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' ||
  // ES6 symbol
  typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = require('./support/isBuffer');
function objectToString(o) {
  return Object.prototype.toString.call(o);
}
function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}
var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}

// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function () {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};

/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');
exports._extend = function (origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
exports.promisify = function promisify(original) {
  if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return fn;
  }
  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });
    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }
    return promise;
  }
  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn,
    enumerable: false,
    writable: false,
    configurable: true
  });
  return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
};
exports.promisify.custom = kCustomPromisifiedSymbol;
function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}
function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function () {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args).then(function (ret) {
      process.nextTick(cb, null, ret);
    }, function (rej) {
      process.nextTick(callbackifyOnRejected, rej, cb);
    });
  }
  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;
},{"./support/isBuffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/util/support/isBufferBrowser.js","inherits":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/util/node_modules/inherits/inherits_browser.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/ethereum-cryptography/hash-utils.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function createHashFunction(hashConstructor) {
    return function (msg) {
        var hash = hashConstructor();
        hash.update(msg);
        return Buffer.from(hash.digest());
    };
}
exports.createHashFunction = createHashFunction;

},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/readable-stream/lib/internal/streams/stream-browser.js":[function(require,module,exports) {
module.exports = require('events').EventEmitter;
},{"events":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/events/events.js"}],"node_modules/readable-stream/lib/internal/streams/buffer_list.js":[function(require,module,exports) {

'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var _require = require('buffer'),
  Buffer = _require.Buffer;
var _require2 = require('util'),
  inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/function () {
  function BufferList() {
    _classCallCheck(this, BufferList);
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) ret += s + p.data;
      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    }

    // Consumes a specified amount of bytes or characters from the buffered data.
  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;
      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }
      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    }

    // Consumes a specified amount of characters from the buffered data.
  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Consumes a specified amount of bytes from the buffered data.
  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Make sure the linked list only shows the minimal necessary information.
  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);
  return BufferList;
}();
},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js","util":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/readable-stream/lib/internal/streams/destroy.js":[function(require,module,exports) {
var process = require("process");
'use strict';

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;
  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;
  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }
  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });
  return this;
}
function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}
function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}
function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }
  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}
function emitErrorNT(self, err) {
  self.emit('error', err);
}
function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.

  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}
module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
},{"process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/readable-stream/errors-browser.js":[function(require,module,exports) {
'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }
  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }
  var NodeError = /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);
    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }
    return NodeError;
  }(Base);
  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js

function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });
    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith

function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith

function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }
  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes

function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }
  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}
createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;
  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }
  var msg;
  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }
  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;
},{}],"node_modules/readable-stream/lib/internal/streams/state.js":[function(require,module,exports) {
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }
    return Math.floor(hwm);
  }

  // Default value
  return state.objectMode ? 16 : 16 * 1024;
}
module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":"node_modules/readable-stream/errors-browser.js"}],"node_modules/inherits/inherits_browser.js":[function(require,module,exports) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],"node_modules/util-deprecate/browser.js":[function(require,module,exports) {
var global = arguments[3];

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

},{}],"node_modules/readable-stream/lib/_stream_writable.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'finish' (and potentially 'end')
  this.autoDestroy = !!options.autoDestroy;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex);

  // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }
  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END();
  // TODO: defer error events consistently everywhere, not just the cb
  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var er;
  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }
  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }
  return true;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);
  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  this._writableState.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending) endWritable(this, state, cb);
  return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      errorOrDestroy(stream, err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;
        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  // reuse the free corkReq.
  state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
},{"util-deprecate":"node_modules/util-deprecate/browser.js","./internal/streams/stream":"node_modules/readable-stream/lib/internal/streams/stream-browser.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js","./internal/streams/destroy":"node_modules/readable-stream/lib/internal/streams/destroy.js","./internal/streams/state":"node_modules/readable-stream/lib/internal/streams/state.js","../errors":"node_modules/readable-stream/errors-browser.js","inherits":"node_modules/inherits/inherits_browser.js","./_stream_duplex":"node_modules/readable-stream/lib/_stream_duplex.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/readable-stream/lib/_stream_duplex.js":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
};
/*</replacement>*/

module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}
function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;
  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;
    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

// the no-half-open enforcer
function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(onEndNT, this);
}
function onEndNT(self) {
  self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
},{"./_stream_readable":"node_modules/readable-stream/lib/_stream_readable.js","./_stream_writable":"node_modules/readable-stream/lib/_stream_writable.js","inherits":"node_modules/inherits/inherits_browser.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/safe-buffer/index.js":[function(require,module,exports) {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/string_decoder/lib/string_decoder.js":[function(require,module,exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/readable-stream/lib/internal/streams/end-of-stream.js":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop() {}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;
  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };
  var writableEnded = stream._writableState && stream._writableState.finished;
  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };
  var readableEnded = stream._readableState && stream._readableState.endEmitted;
  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };
  var onerror = function onerror(err) {
    callback.call(stream, err);
  };
  var onclose = function onclose() {
    var err;
    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };
  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };
  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}
module.exports = eos;
},{"../../../errors":"node_modules/readable-stream/errors-browser.js"}],"node_modules/readable-stream/lib/internal/streams/async_iterator.js":[function(require,module,exports) {
var process = require("process");
'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}
function readAndResolve(iter) {
  var resolve = iter[kLastResolve];
  if (resolve !== null) {
    var data = iter[kStream].read();
    // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'
    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}
function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }
      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },
  next: function next() {
    var _this = this;
    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];
    if (error !== null) {
      return Promise.reject(error);
    }
    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }
    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    }

    // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time
    var lastPromise = this[kLastPromise];
    var promise;
    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();
      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }
      promise = new Promise(this[kHandlePromise]);
    }
    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;
  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }
      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;
  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();
      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject];
      // reject if we are waiting for data in the Promise
      // returned by next() and store the error
      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }
      iterator[kError] = err;
      return;
    }
    var resolve = iterator[kLastResolve];
    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }
    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};
module.exports = createReadableStreamAsyncIterator;
},{"./end-of-stream":"node_modules/readable-stream/lib/internal/streams/end-of-stream.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/readable-stream/lib/internal/streams/from-browser.js":[function(require,module,exports) {
module.exports = function () {
  throw new Error('Readable.from is not available in the browser');
};
},{}],"node_modules/readable-stream/lib/_stream_readable.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

module.exports = Readable;

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*<replacement>*/
var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}
function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'end' (and potentially 'finish')
  this.autoDestroy = !!options.autoDestroy;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options);

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex);

  // legacy
  this.readable = true;
  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }
  Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;
  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }
  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  }

  // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.
  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }
  return er;
}
Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder;
  // If setEncoding(null), decoder.encoding equals utf8
  this._readableState.encoding = this._readableState.decoder.encoding;

  // Iterate over current buffer to convert already stored Buffers:
  var p = this._readableState.buffer.head;
  var content = '';
  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }
  this._readableState.buffer.clear();
  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
};

// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }
  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }
  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;
  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }
  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }
  if (ret !== null) this.emit('data', ret);
  return ret;
};
function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;
  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;
    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}
function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);
  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  }

  // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.
  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}
function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;
  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }
  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);
    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);
  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }
  return dest;
};
function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}
Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
      hasUnpiped: false
    });
    return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;
  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0;

    // Try start flowing on next tick if stream isn't explicitly paused
    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);
      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }
  return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);
  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;
  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;

    // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}
function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()
    state.flowing = !state.readableListening;
    resume(this, state);
  }
  state.paused = false;
  return this;
};
function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}
function resume_(stream, state) {
  debug('resume', state.reading);
  if (!state.reading) {
    stream.read(0);
  }
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  this._readableState.paused = true;
  return this;
};
function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null);
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;
  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }
    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };
  return this;
};
if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }
    return createReadableStreamAsyncIterator(this);
  };
}
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
});

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}
function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);
  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}
function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length);

  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;
      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}
if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }
    return from(Readable, iterable, opts);
  };
}
function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
},{"events":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/events/events.js","./internal/streams/stream":"node_modules/readable-stream/lib/internal/streams/stream-browser.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js","util":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/src/builtins/_empty.js","./internal/streams/buffer_list":"node_modules/readable-stream/lib/internal/streams/buffer_list.js","./internal/streams/destroy":"node_modules/readable-stream/lib/internal/streams/destroy.js","./internal/streams/state":"node_modules/readable-stream/lib/internal/streams/state.js","../errors":"node_modules/readable-stream/errors-browser.js","inherits":"node_modules/inherits/inherits_browser.js","./_stream_duplex":"node_modules/readable-stream/lib/_stream_duplex.js","string_decoder/":"node_modules/string_decoder/lib/string_decoder.js","./internal/streams/async_iterator":"node_modules/readable-stream/lib/internal/streams/async_iterator.js","./internal/streams/from":"node_modules/readable-stream/lib/internal/streams/from-browser.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/readable-stream/lib/_stream_transform.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;
var _require$codes = require('../errors').codes,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data != null)
    // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}
Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};
function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null)
    // single equals check for both `null` and `undefined`
    stream.push(data);

  // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":"node_modules/readable-stream/errors-browser.js","./_stream_duplex":"node_modules/readable-stream/lib/_stream_duplex.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/readable-stream/lib/_stream_passthrough.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":"node_modules/readable-stream/lib/_stream_transform.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/readable-stream/lib/internal/streams/pipeline.js":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var eos;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = require('../../../errors').codes,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true;

    // request.destroy just do .end - .abort is what we want
    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
module.exports = pipeline;
},{"../../../errors":"node_modules/readable-stream/errors-browser.js","./end-of-stream":"node_modules/readable-stream/lib/internal/streams/end-of-stream.js"}],"node_modules/readable-stream/readable-browser.js":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');
},{"./lib/_stream_readable.js":"node_modules/readable-stream/lib/_stream_readable.js","./lib/_stream_writable.js":"node_modules/readable-stream/lib/_stream_writable.js","./lib/_stream_duplex.js":"node_modules/readable-stream/lib/_stream_duplex.js","./lib/_stream_transform.js":"node_modules/readable-stream/lib/_stream_transform.js","./lib/_stream_passthrough.js":"node_modules/readable-stream/lib/_stream_passthrough.js","./lib/internal/streams/end-of-stream.js":"node_modules/readable-stream/lib/internal/streams/end-of-stream.js","./lib/internal/streams/pipeline.js":"node_modules/readable-stream/lib/internal/streams/pipeline.js"}],"node_modules/keccak/lib/api/keccak.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var _require = require('readable-stream'),
  Transform = _require.Transform;
module.exports = function (KeccakState) {
  return /*#__PURE__*/function (_Transform) {
    _inherits(Keccak, _Transform);
    var _super = _createSuper(Keccak);
    function Keccak(rate, capacity, delimitedSuffix, hashBitLength, options) {
      var _this;
      _classCallCheck(this, Keccak);
      _this = _super.call(this, options);
      _this._rate = rate;
      _this._capacity = capacity;
      _this._delimitedSuffix = delimitedSuffix;
      _this._hashBitLength = hashBitLength;
      _this._options = options;
      _this._state = new KeccakState();
      _this._state.initialize(rate, capacity);
      _this._finalized = false;
      return _this;
    }
    _createClass(Keccak, [{
      key: "_transform",
      value: function _transform(chunk, encoding, callback) {
        var error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }
        callback(error);
      }
    }, {
      key: "_flush",
      value: function _flush(callback) {
        var error = null;
        try {
          this.push(this.digest());
        } catch (err) {
          error = err;
        }
        callback(error);
      }
    }, {
      key: "update",
      value: function update(data, encoding) {
        if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');
        if (this._finalized) throw new Error('Digest already called');
        if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
        this._state.absorb(data);
        return this;
      }
    }, {
      key: "digest",
      value: function digest(encoding) {
        if (this._finalized) throw new Error('Digest already called');
        this._finalized = true;
        if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);
        var digest = this._state.squeeze(this._hashBitLength / 8);
        if (encoding !== undefined) digest = digest.toString(encoding);
        this._resetState();
        return digest;
      }

      // remove result from memory
    }, {
      key: "_resetState",
      value: function _resetState() {
        this._state.initialize(this._rate, this._capacity);
        return this;
      }

      // because sometimes we need hash right now and little later
    }, {
      key: "_clone",
      value: function _clone() {
        var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;
        return clone;
      }
    }]);
    return Keccak;
  }(Transform);
};
},{"readable-stream":"node_modules/readable-stream/readable-browser.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/keccak/lib/api/shake.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var _require = require('readable-stream'),
  Transform = _require.Transform;
module.exports = function (KeccakState) {
  return /*#__PURE__*/function (_Transform) {
    _inherits(Shake, _Transform);
    var _super = _createSuper(Shake);
    function Shake(rate, capacity, delimitedSuffix, options) {
      var _this;
      _classCallCheck(this, Shake);
      _this = _super.call(this, options);
      _this._rate = rate;
      _this._capacity = capacity;
      _this._delimitedSuffix = delimitedSuffix;
      _this._options = options;
      _this._state = new KeccakState();
      _this._state.initialize(rate, capacity);
      _this._finalized = false;
      return _this;
    }
    _createClass(Shake, [{
      key: "_transform",
      value: function _transform(chunk, encoding, callback) {
        var error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }
        callback(error);
      }
    }, {
      key: "_flush",
      value: function _flush() {}
    }, {
      key: "_read",
      value: function _read(size) {
        this.push(this.squeeze(size));
      }
    }, {
      key: "update",
      value: function update(data, encoding) {
        if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');
        if (this._finalized) throw new Error('Squeeze already called');
        if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
        this._state.absorb(data);
        return this;
      }
    }, {
      key: "squeeze",
      value: function squeeze(dataByteLength, encoding) {
        if (!this._finalized) {
          this._finalized = true;
          this._state.absorbLastFewBits(this._delimitedSuffix);
        }
        var data = this._state.squeeze(dataByteLength);
        if (encoding !== undefined) data = data.toString(encoding);
        return data;
      }
    }, {
      key: "_resetState",
      value: function _resetState() {
        this._state.initialize(this._rate, this._capacity);
        return this;
      }
    }, {
      key: "_clone",
      value: function _clone() {
        var clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;
        return clone;
      }
    }]);
    return Shake;
  }(Transform);
};
},{"readable-stream":"node_modules/readable-stream/readable-browser.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/keccak/lib/api/index.js":[function(require,module,exports) {
var createKeccak = require('./keccak');
var createShake = require('./shake');
module.exports = function (KeccakState) {
  var Keccak = createKeccak(KeccakState);
  var Shake = createShake(KeccakState);
  return function (algorithm, options) {
    var hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm;
    switch (hash) {
      case 'keccak224':
        return new Keccak(1152, 448, null, 224, options);
      case 'keccak256':
        return new Keccak(1088, 512, null, 256, options);
      case 'keccak384':
        return new Keccak(832, 768, null, 384, options);
      case 'keccak512':
        return new Keccak(576, 1024, null, 512, options);
      case 'sha3-224':
        return new Keccak(1152, 448, 0x06, 224, options);
      case 'sha3-256':
        return new Keccak(1088, 512, 0x06, 256, options);
      case 'sha3-384':
        return new Keccak(832, 768, 0x06, 384, options);
      case 'sha3-512':
        return new Keccak(576, 1024, 0x06, 512, options);
      case 'shake128':
        return new Shake(1344, 256, 0x1f, options);
      case 'shake256':
        return new Shake(1088, 512, 0x1f, options);
      default:
        throw new Error('Invald algorithm: ' + algorithm);
    }
  };
};
},{"./keccak":"node_modules/keccak/lib/api/keccak.js","./shake":"node_modules/keccak/lib/api/shake.js"}],"node_modules/keccak/lib/keccak-state-unroll.js":[function(require,module,exports) {
var P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
exports.p1600 = function (s) {
  for (var round = 0; round < 24; ++round) {
    // theta
    var lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
    var hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
    var lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
    var hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
    var lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
    var hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
    var lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
    var hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
    var lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
    var hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
    var lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
    var hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
    var t1slo0 = s[0] ^ lo;
    var t1shi0 = s[1] ^ hi;
    var t1slo5 = s[10] ^ lo;
    var t1shi5 = s[11] ^ hi;
    var t1slo10 = s[20] ^ lo;
    var t1shi10 = s[21] ^ hi;
    var t1slo15 = s[30] ^ lo;
    var t1shi15 = s[31] ^ hi;
    var t1slo20 = s[40] ^ lo;
    var t1shi20 = s[41] ^ hi;
    lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
    hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
    var t1slo1 = s[2] ^ lo;
    var t1shi1 = s[3] ^ hi;
    var t1slo6 = s[12] ^ lo;
    var t1shi6 = s[13] ^ hi;
    var t1slo11 = s[22] ^ lo;
    var t1shi11 = s[23] ^ hi;
    var t1slo16 = s[32] ^ lo;
    var t1shi16 = s[33] ^ hi;
    var t1slo21 = s[42] ^ lo;
    var t1shi21 = s[43] ^ hi;
    lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
    hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
    var t1slo2 = s[4] ^ lo;
    var t1shi2 = s[5] ^ hi;
    var t1slo7 = s[14] ^ lo;
    var t1shi7 = s[15] ^ hi;
    var t1slo12 = s[24] ^ lo;
    var t1shi12 = s[25] ^ hi;
    var t1slo17 = s[34] ^ lo;
    var t1shi17 = s[35] ^ hi;
    var t1slo22 = s[44] ^ lo;
    var t1shi22 = s[45] ^ hi;
    lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
    hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
    var t1slo3 = s[6] ^ lo;
    var t1shi3 = s[7] ^ hi;
    var t1slo8 = s[16] ^ lo;
    var t1shi8 = s[17] ^ hi;
    var t1slo13 = s[26] ^ lo;
    var t1shi13 = s[27] ^ hi;
    var t1slo18 = s[36] ^ lo;
    var t1shi18 = s[37] ^ hi;
    var t1slo23 = s[46] ^ lo;
    var t1shi23 = s[47] ^ hi;
    lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
    hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
    var t1slo4 = s[8] ^ lo;
    var t1shi4 = s[9] ^ hi;
    var t1slo9 = s[18] ^ lo;
    var t1shi9 = s[19] ^ hi;
    var t1slo14 = s[28] ^ lo;
    var t1shi14 = s[29] ^ hi;
    var t1slo19 = s[38] ^ lo;
    var t1shi19 = s[39] ^ hi;
    var t1slo24 = s[48] ^ lo;
    var t1shi24 = s[49] ^ hi;

    // rho & pi
    var t2slo0 = t1slo0;
    var t2shi0 = t1shi0;
    var t2slo16 = t1shi5 << 4 | t1slo5 >>> 28;
    var t2shi16 = t1slo5 << 4 | t1shi5 >>> 28;
    var t2slo7 = t1slo10 << 3 | t1shi10 >>> 29;
    var t2shi7 = t1shi10 << 3 | t1slo10 >>> 29;
    var t2slo23 = t1shi15 << 9 | t1slo15 >>> 23;
    var t2shi23 = t1slo15 << 9 | t1shi15 >>> 23;
    var t2slo14 = t1slo20 << 18 | t1shi20 >>> 14;
    var t2shi14 = t1shi20 << 18 | t1slo20 >>> 14;
    var t2slo10 = t1slo1 << 1 | t1shi1 >>> 31;
    var t2shi10 = t1shi1 << 1 | t1slo1 >>> 31;
    var t2slo1 = t1shi6 << 12 | t1slo6 >>> 20;
    var t2shi1 = t1slo6 << 12 | t1shi6 >>> 20;
    var t2slo17 = t1slo11 << 10 | t1shi11 >>> 22;
    var t2shi17 = t1shi11 << 10 | t1slo11 >>> 22;
    var t2slo8 = t1shi16 << 13 | t1slo16 >>> 19;
    var t2shi8 = t1slo16 << 13 | t1shi16 >>> 19;
    var t2slo24 = t1slo21 << 2 | t1shi21 >>> 30;
    var t2shi24 = t1shi21 << 2 | t1slo21 >>> 30;
    var t2slo20 = t1shi2 << 30 | t1slo2 >>> 2;
    var t2shi20 = t1slo2 << 30 | t1shi2 >>> 2;
    var t2slo11 = t1slo7 << 6 | t1shi7 >>> 26;
    var t2shi11 = t1shi7 << 6 | t1slo7 >>> 26;
    var t2slo2 = t1shi12 << 11 | t1slo12 >>> 21;
    var t2shi2 = t1slo12 << 11 | t1shi12 >>> 21;
    var t2slo18 = t1slo17 << 15 | t1shi17 >>> 17;
    var t2shi18 = t1shi17 << 15 | t1slo17 >>> 17;
    var t2slo9 = t1shi22 << 29 | t1slo22 >>> 3;
    var t2shi9 = t1slo22 << 29 | t1shi22 >>> 3;
    var t2slo5 = t1slo3 << 28 | t1shi3 >>> 4;
    var t2shi5 = t1shi3 << 28 | t1slo3 >>> 4;
    var t2slo21 = t1shi8 << 23 | t1slo8 >>> 9;
    var t2shi21 = t1slo8 << 23 | t1shi8 >>> 9;
    var t2slo12 = t1slo13 << 25 | t1shi13 >>> 7;
    var t2shi12 = t1shi13 << 25 | t1slo13 >>> 7;
    var t2slo3 = t1slo18 << 21 | t1shi18 >>> 11;
    var t2shi3 = t1shi18 << 21 | t1slo18 >>> 11;
    var t2slo19 = t1shi23 << 24 | t1slo23 >>> 8;
    var t2shi19 = t1slo23 << 24 | t1shi23 >>> 8;
    var t2slo15 = t1slo4 << 27 | t1shi4 >>> 5;
    var t2shi15 = t1shi4 << 27 | t1slo4 >>> 5;
    var t2slo6 = t1slo9 << 20 | t1shi9 >>> 12;
    var t2shi6 = t1shi9 << 20 | t1slo9 >>> 12;
    var t2slo22 = t1shi14 << 7 | t1slo14 >>> 25;
    var t2shi22 = t1slo14 << 7 | t1shi14 >>> 25;
    var t2slo13 = t1slo19 << 8 | t1shi19 >>> 24;
    var t2shi13 = t1shi19 << 8 | t1slo19 >>> 24;
    var t2slo4 = t1slo24 << 14 | t1shi24 >>> 18;
    var t2shi4 = t1shi24 << 14 | t1slo24 >>> 18;

    // chi
    s[0] = t2slo0 ^ ~t2slo1 & t2slo2;
    s[1] = t2shi0 ^ ~t2shi1 & t2shi2;
    s[10] = t2slo5 ^ ~t2slo6 & t2slo7;
    s[11] = t2shi5 ^ ~t2shi6 & t2shi7;
    s[20] = t2slo10 ^ ~t2slo11 & t2slo12;
    s[21] = t2shi10 ^ ~t2shi11 & t2shi12;
    s[30] = t2slo15 ^ ~t2slo16 & t2slo17;
    s[31] = t2shi15 ^ ~t2shi16 & t2shi17;
    s[40] = t2slo20 ^ ~t2slo21 & t2slo22;
    s[41] = t2shi20 ^ ~t2shi21 & t2shi22;
    s[2] = t2slo1 ^ ~t2slo2 & t2slo3;
    s[3] = t2shi1 ^ ~t2shi2 & t2shi3;
    s[12] = t2slo6 ^ ~t2slo7 & t2slo8;
    s[13] = t2shi6 ^ ~t2shi7 & t2shi8;
    s[22] = t2slo11 ^ ~t2slo12 & t2slo13;
    s[23] = t2shi11 ^ ~t2shi12 & t2shi13;
    s[32] = t2slo16 ^ ~t2slo17 & t2slo18;
    s[33] = t2shi16 ^ ~t2shi17 & t2shi18;
    s[42] = t2slo21 ^ ~t2slo22 & t2slo23;
    s[43] = t2shi21 ^ ~t2shi22 & t2shi23;
    s[4] = t2slo2 ^ ~t2slo3 & t2slo4;
    s[5] = t2shi2 ^ ~t2shi3 & t2shi4;
    s[14] = t2slo7 ^ ~t2slo8 & t2slo9;
    s[15] = t2shi7 ^ ~t2shi8 & t2shi9;
    s[24] = t2slo12 ^ ~t2slo13 & t2slo14;
    s[25] = t2shi12 ^ ~t2shi13 & t2shi14;
    s[34] = t2slo17 ^ ~t2slo18 & t2slo19;
    s[35] = t2shi17 ^ ~t2shi18 & t2shi19;
    s[44] = t2slo22 ^ ~t2slo23 & t2slo24;
    s[45] = t2shi22 ^ ~t2shi23 & t2shi24;
    s[6] = t2slo3 ^ ~t2slo4 & t2slo0;
    s[7] = t2shi3 ^ ~t2shi4 & t2shi0;
    s[16] = t2slo8 ^ ~t2slo9 & t2slo5;
    s[17] = t2shi8 ^ ~t2shi9 & t2shi5;
    s[26] = t2slo13 ^ ~t2slo14 & t2slo10;
    s[27] = t2shi13 ^ ~t2shi14 & t2shi10;
    s[36] = t2slo18 ^ ~t2slo19 & t2slo15;
    s[37] = t2shi18 ^ ~t2shi19 & t2shi15;
    s[46] = t2slo23 ^ ~t2slo24 & t2slo20;
    s[47] = t2shi23 ^ ~t2shi24 & t2shi20;
    s[8] = t2slo4 ^ ~t2slo0 & t2slo1;
    s[9] = t2shi4 ^ ~t2shi0 & t2shi1;
    s[18] = t2slo9 ^ ~t2slo5 & t2slo6;
    s[19] = t2shi9 ^ ~t2shi5 & t2shi6;
    s[28] = t2slo14 ^ ~t2slo10 & t2slo11;
    s[29] = t2shi14 ^ ~t2shi10 & t2shi11;
    s[38] = t2slo19 ^ ~t2slo15 & t2slo16;
    s[39] = t2shi19 ^ ~t2shi15 & t2shi16;
    s[48] = t2slo24 ^ ~t2slo20 & t2slo21;
    s[49] = t2shi24 ^ ~t2shi20 & t2shi21;

    // iota
    s[0] ^= P1600_ROUND_CONSTANTS[round * 2];
    s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
  }
};
},{}],"node_modules/keccak/lib/keccak.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var keccakState = require('./keccak-state-unroll');
function Keccak() {
  // much faster than `new Array(50)`
  this.state = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  this.blockSize = null;
  this.count = 0;
  this.squeezing = false;
}
Keccak.prototype.initialize = function (rate, capacity) {
  for (var i = 0; i < 50; ++i) this.state[i] = 0;
  this.blockSize = rate / 8;
  this.count = 0;
  this.squeezing = false;
};
Keccak.prototype.absorb = function (data) {
  for (var i = 0; i < data.length; ++i) {
    this.state[~~(this.count / 4)] ^= data[i] << 8 * (this.count % 4);
    this.count += 1;
    if (this.count === this.blockSize) {
      keccakState.p1600(this.state);
      this.count = 0;
    }
  }
};
Keccak.prototype.absorbLastFewBits = function (bits) {
  this.state[~~(this.count / 4)] ^= bits << 8 * (this.count % 4);
  if ((bits & 0x80) !== 0 && this.count === this.blockSize - 1) keccakState.p1600(this.state);
  this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << 8 * ((this.blockSize - 1) % 4);
  keccakState.p1600(this.state);
  this.count = 0;
  this.squeezing = true;
};
Keccak.prototype.squeeze = function (length) {
  if (!this.squeezing) this.absorbLastFewBits(0x01);
  var output = Buffer.alloc(length);
  for (var i = 0; i < length; ++i) {
    output[i] = this.state[~~(this.count / 4)] >>> 8 * (this.count % 4) & 0xff;
    this.count += 1;
    if (this.count === this.blockSize) {
      keccakState.p1600(this.state);
      this.count = 0;
    }
  }
  return output;
};
Keccak.prototype.copy = function (dest) {
  for (var i = 0; i < 50; ++i) dest.state[i] = this.state[i];
  dest.blockSize = this.blockSize;
  dest.count = this.count;
  dest.squeezing = this.squeezing;
};
module.exports = Keccak;
},{"./keccak-state-unroll":"node_modules/keccak/lib/keccak-state-unroll.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/keccak/js.js":[function(require,module,exports) {
module.exports = require('./lib/api')(require('./lib/keccak'));
},{"./lib/api":"node_modules/keccak/lib/api/index.js","./lib/keccak":"node_modules/keccak/lib/keccak.js"}],"node_modules/ethereum-cryptography/keccak.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hash_utils_1 = require("./hash-utils");
var createKeccakHash = require("keccak");
exports.keccak224 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak224");
});
exports.keccak256 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak256");
});
exports.keccak384 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak384");
});
exports.keccak512 = hash_utils_1.createHashFunction(function () {
    return createKeccakHash("keccak512");
});

},{"./hash-utils":"node_modules/ethereum-cryptography/hash-utils.js","keccak":"node_modules/keccak/js.js"}],"node_modules/secp256k1/lib/index.js":[function(require,module,exports) {
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var errors = {
  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
  TWEAK_ADD: 'The tweak was out of range or the resulted private key is invalid',
  TWEAK_MUL: 'The tweak was out of range or equal to zero',
  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
  SECKEY_INVALID: 'Private Key is invalid',
  PUBKEY_PARSE: 'Public Key could not be parsed',
  PUBKEY_SERIALIZE: 'Public Key serialization error',
  PUBKEY_COMBINE: 'The sum of the public keys is not valid',
  SIG_PARSE: 'Signature could not be parsed',
  SIGN: 'The nonce generation function failed, or the private key was invalid',
  RECOVER: 'Public key could not be recover',
  ECDH: 'Scalar was invalid (zero or overflow)'
};
function assert(cond, msg) {
  if (!cond) throw new Error(msg);
}
function isUint8Array(name, value, length) {
  assert(value instanceof Uint8Array, "Expected ".concat(name, " to be an Uint8Array"));
  if (length !== undefined) {
    if (Array.isArray(length)) {
      var numbers = length.join(', ');
      var msg = "Expected ".concat(name, " to be an Uint8Array with length [").concat(numbers, "]");
      assert(length.includes(value.length), msg);
    } else {
      var _msg = "Expected ".concat(name, " to be an Uint8Array with length ").concat(length);
      assert(value.length === length, _msg);
    }
  }
}
function isCompressed(value) {
  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean');
}
function getAssertedOutput() {
  var output = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (len) {
    return new Uint8Array(len);
  };
  var length = arguments.length > 1 ? arguments[1] : undefined;
  if (typeof output === 'function') output = output(length);
  isUint8Array('output', output, length);
  return output;
}
function toTypeString(value) {
  return Object.prototype.toString.call(value).slice(8, -1);
}
module.exports = function (secp256k1) {
  return {
    contextRandomize: function contextRandomize(seed) {
      assert(seed === null || seed instanceof Uint8Array, 'Expected seed to be an Uint8Array or null');
      if (seed !== null) isUint8Array('seed', seed, 32);
      switch (secp256k1.contextRandomize(seed)) {
        case 1:
          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);
      }
    },
    privateKeyVerify: function privateKeyVerify(seckey) {
      isUint8Array('private key', seckey, 32);
      return secp256k1.privateKeyVerify(seckey) === 0;
    },
    privateKeyNegate: function privateKeyNegate(seckey) {
      isUint8Array('private key', seckey, 32);
      switch (secp256k1.privateKeyNegate(seckey)) {
        case 0:
          return seckey;
        case 1:
          throw new Error(errors.IMPOSSIBLE_CASE);
      }
    },
    privateKeyTweakAdd: function privateKeyTweakAdd(seckey, tweak) {
      isUint8Array('private key', seckey, 32);
      isUint8Array('tweak', tweak, 32);
      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
        case 0:
          return seckey;
        case 1:
          throw new Error(errors.TWEAK_ADD);
      }
    },
    privateKeyTweakMul: function privateKeyTweakMul(seckey, tweak) {
      isUint8Array('private key', seckey, 32);
      isUint8Array('tweak', tweak, 32);
      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
        case 0:
          return seckey;
        case 1:
          throw new Error(errors.TWEAK_MUL);
      }
    },
    publicKeyVerify: function publicKeyVerify(pubkey) {
      isUint8Array('public key', pubkey, [33, 65]);
      return secp256k1.publicKeyVerify(pubkey) === 0;
    },
    publicKeyCreate: function publicKeyCreate(seckey) {
      var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var output = arguments.length > 2 ? arguments[2] : undefined;
      isUint8Array('private key', seckey, 32);
      isCompressed(compressed);
      output = getAssertedOutput(output, compressed ? 33 : 65);
      switch (secp256k1.publicKeyCreate(output, seckey)) {
        case 0:
          return output;
        case 1:
          throw new Error(errors.SECKEY_INVALID);
        case 2:
          throw new Error(errors.PUBKEY_SERIALIZE);
      }
    },
    publicKeyConvert: function publicKeyConvert(pubkey) {
      var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var output = arguments.length > 2 ? arguments[2] : undefined;
      isUint8Array('public key', pubkey, [33, 65]);
      isCompressed(compressed);
      output = getAssertedOutput(output, compressed ? 33 : 65);
      switch (secp256k1.publicKeyConvert(output, pubkey)) {
        case 0:
          return output;
        case 1:
          throw new Error(errors.PUBKEY_PARSE);
        case 2:
          throw new Error(errors.PUBKEY_SERIALIZE);
      }
    },
    publicKeyNegate: function publicKeyNegate(pubkey) {
      var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var output = arguments.length > 2 ? arguments[2] : undefined;
      isUint8Array('public key', pubkey, [33, 65]);
      isCompressed(compressed);
      output = getAssertedOutput(output, compressed ? 33 : 65);
      switch (secp256k1.publicKeyNegate(output, pubkey)) {
        case 0:
          return output;
        case 1:
          throw new Error(errors.PUBKEY_PARSE);
        case 2:
          throw new Error(errors.IMPOSSIBLE_CASE);
        case 3:
          throw new Error(errors.PUBKEY_SERIALIZE);
      }
    },
    publicKeyCombine: function publicKeyCombine(pubkeys) {
      var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var output = arguments.length > 2 ? arguments[2] : undefined;
      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array');
      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items');
      var _iterator = _createForOfIteratorHelper(pubkeys),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var pubkey = _step.value;
          isUint8Array('public key', pubkey, [33, 65]);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      isCompressed(compressed);
      output = getAssertedOutput(output, compressed ? 33 : 65);
      switch (secp256k1.publicKeyCombine(output, pubkeys)) {
        case 0:
          return output;
        case 1:
          throw new Error(errors.PUBKEY_PARSE);
        case 2:
          throw new Error(errors.PUBKEY_COMBINE);
        case 3:
          throw new Error(errors.PUBKEY_SERIALIZE);
      }
    },
    publicKeyTweakAdd: function publicKeyTweakAdd(pubkey, tweak) {
      var compressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var output = arguments.length > 3 ? arguments[3] : undefined;
      isUint8Array('public key', pubkey, [33, 65]);
      isUint8Array('tweak', tweak, 32);
      isCompressed(compressed);
      output = getAssertedOutput(output, compressed ? 33 : 65);
      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
        case 0:
          return output;
        case 1:
          throw new Error(errors.PUBKEY_PARSE);
        case 2:
          throw new Error(errors.TWEAK_ADD);
      }
    },
    publicKeyTweakMul: function publicKeyTweakMul(pubkey, tweak) {
      var compressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var output = arguments.length > 3 ? arguments[3] : undefined;
      isUint8Array('public key', pubkey, [33, 65]);
      isUint8Array('tweak', tweak, 32);
      isCompressed(compressed);
      output = getAssertedOutput(output, compressed ? 33 : 65);
      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
        case 0:
          return output;
        case 1:
          throw new Error(errors.PUBKEY_PARSE);
        case 2:
          throw new Error(errors.TWEAK_MUL);
      }
    },
    signatureNormalize: function signatureNormalize(sig) {
      isUint8Array('signature', sig, 64);
      switch (secp256k1.signatureNormalize(sig)) {
        case 0:
          return sig;
        case 1:
          throw new Error(errors.SIG_PARSE);
      }
    },
    signatureExport: function signatureExport(sig, output) {
      isUint8Array('signature', sig, 64);
      output = getAssertedOutput(output, 72);
      var obj = {
        output: output,
        outputlen: 72
      };
      switch (secp256k1.signatureExport(obj, sig)) {
        case 0:
          return output.slice(0, obj.outputlen);
        case 1:
          throw new Error(errors.SIG_PARSE);
        case 2:
          throw new Error(errors.IMPOSSIBLE_CASE);
      }
    },
    signatureImport: function signatureImport(sig, output) {
      isUint8Array('signature', sig);
      output = getAssertedOutput(output, 64);
      switch (secp256k1.signatureImport(output, sig)) {
        case 0:
          return output;
        case 1:
          throw new Error(errors.SIG_PARSE);
        case 2:
          throw new Error(errors.IMPOSSIBLE_CASE);
      }
    },
    ecdsaSign: function ecdsaSign(msg32, seckey) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var output = arguments.length > 3 ? arguments[3] : undefined;
      isUint8Array('message', msg32, 32);
      isUint8Array('private key', seckey, 32);
      assert(toTypeString(options) === 'Object', 'Expected options to be an Object');
      if (options.data !== undefined) isUint8Array('options.data', options.data);
      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function');
      output = getAssertedOutput(output, 64);
      var obj = {
        signature: output,
        recid: null
      };
      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
        case 0:
          return obj;
        case 1:
          throw new Error(errors.SIGN);
        case 2:
          throw new Error(errors.IMPOSSIBLE_CASE);
      }
    },
    ecdsaVerify: function ecdsaVerify(sig, msg32, pubkey) {
      isUint8Array('signature', sig, 64);
      isUint8Array('message', msg32, 32);
      isUint8Array('public key', pubkey, [33, 65]);
      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
        case 0:
          return true;
        case 3:
          return false;
        case 1:
          throw new Error(errors.SIG_PARSE);
        case 2:
          throw new Error(errors.PUBKEY_PARSE);
      }
    },
    ecdsaRecover: function ecdsaRecover(sig, recid, msg32) {
      var compressed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var output = arguments.length > 4 ? arguments[4] : undefined;
      isUint8Array('signature', sig, 64);
      assert(toTypeString(recid) === 'Number' && recid >= 0 && recid <= 3, 'Expected recovery id to be a Number within interval [0, 3]');
      isUint8Array('message', msg32, 32);
      isCompressed(compressed);
      output = getAssertedOutput(output, compressed ? 33 : 65);
      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
        case 0:
          return output;
        case 1:
          throw new Error(errors.SIG_PARSE);
        case 2:
          throw new Error(errors.RECOVER);
        case 3:
          throw new Error(errors.IMPOSSIBLE_CASE);
      }
    },
    ecdh: function ecdh(pubkey, seckey) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var output = arguments.length > 3 ? arguments[3] : undefined;
      isUint8Array('public key', pubkey, [33, 65]);
      isUint8Array('private key', seckey, 32);
      assert(toTypeString(options) === 'Object', 'Expected options to be an Object');
      if (options.data !== undefined) isUint8Array('options.data', options.data);
      if (options.hashfn !== undefined) {
        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function');
        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32);
        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32);
        isUint8Array('output', output);
      } else {
        output = getAssertedOutput(output, 32);
      }
      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
        case 0:
          return output;
        case 1:
          throw new Error(errors.PUBKEY_PARSE);
        case 2:
          throw new Error(errors.ECDH);
      }
    }
  };
};
},{}],"node_modules/elliptic/package.json":[function(require,module,exports) {
module.exports = {
  "name": "elliptic",
  "version": "6.5.4",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "lint": "eslint lib test",
    "lint:fix": "npm run lint -- --fix",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "test": "npm run lint && npm run unit",
    "version": "grunt dist && git add dist/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:indutny/elliptic"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": "Fedor Indutny <fedor@indutny.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "brfs": "^2.0.2",
    "coveralls": "^3.1.0",
    "eslint": "^7.6.0",
    "grunt": "^1.2.1",
    "grunt-browserify": "^5.3.0",
    "grunt-cli": "^1.3.2",
    "grunt-contrib-connect": "^3.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^5.0.0",
    "grunt-mocha-istanbul": "^5.0.2",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.5",
    "mocha": "^8.0.1"
  },
  "dependencies": {
    "bn.js": "^4.11.9",
    "brorand": "^1.1.0",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.1",
    "inherits": "^2.0.4",
    "minimalistic-assert": "^1.0.1",
    "minimalistic-crypto-utils": "^1.0.1"
  }
}
;
},{}],"node_modules/bn.js/lib/bn.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/minimalistic-assert/index.js":[function(require,module,exports) {
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],"node_modules/minimalistic-crypto-utils/lib/utils.js":[function(require,module,exports) {
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],"node_modules/elliptic/lib/elliptic/utils.js":[function(require,module,exports) {
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    [],
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  var m8;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
      this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":"node_modules/bn.js/lib/bn.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js","minimalistic-crypto-utils":"node_modules/minimalistic-crypto-utils/lib/utils.js"}],"node_modules/brorand/index.js":[function(require,module,exports) {
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/elliptic/lib/elliptic/curve/base.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"bn.js":"node_modules/bn.js/lib/bn.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js"}],"node_modules/elliptic/lib/elliptic/curve/short.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":"node_modules/elliptic/lib/elliptic/utils.js","bn.js":"node_modules/bn.js/lib/bn.js","inherits":"node_modules/inherits/inherits_browser.js","./base":"node_modules/elliptic/lib/elliptic/curve/base.js"}],"node_modules/elliptic/lib/elliptic/curve/mont.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"bn.js":"node_modules/bn.js/lib/bn.js","inherits":"node_modules/inherits/inherits_browser.js","./base":"node_modules/elliptic/lib/elliptic/curve/base.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js"}],"node_modules/elliptic/lib/elliptic/curve/edwards.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  var e;
  var h;
  var j;
  if (this.curve.twisted) {
    // E = a * C
    e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      h = this.z.redSqr();
      // J = F - 2 * H
      j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    e = c.redAdd(d);
    // H = (c * Z1)^2
    h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":"node_modules/elliptic/lib/elliptic/utils.js","bn.js":"node_modules/bn.js/lib/bn.js","inherits":"node_modules/inherits/inherits_browser.js","./base":"node_modules/elliptic/lib/elliptic/curve/base.js"}],"node_modules/elliptic/lib/elliptic/curve/index.js":[function(require,module,exports) {
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":"node_modules/elliptic/lib/elliptic/curve/base.js","./short":"node_modules/elliptic/lib/elliptic/curve/short.js","./mont":"node_modules/elliptic/lib/elliptic/curve/mont.js","./edwards":"node_modules/elliptic/lib/elliptic/curve/edwards.js"}],"node_modules/hash.js/lib/hash/utils.js":[function(require,module,exports) {
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"minimalistic-assert":"node_modules/minimalistic-assert/index.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/hash.js/lib/hash/common.js":[function(require,module,exports) {
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":"node_modules/hash.js/lib/hash/utils.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/hash.js/lib/hash/sha/common.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":"node_modules/hash.js/lib/hash/utils.js"}],"node_modules/hash.js/lib/hash/sha/1.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../utils":"node_modules/hash.js/lib/hash/utils.js","../common":"node_modules/hash.js/lib/hash/common.js","./common":"node_modules/hash.js/lib/hash/sha/common.js"}],"node_modules/hash.js/lib/hash/sha/256.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../utils":"node_modules/hash.js/lib/hash/utils.js","../common":"node_modules/hash.js/lib/hash/common.js","./common":"node_modules/hash.js/lib/hash/sha/common.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/hash.js/lib/hash/sha/224.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":"node_modules/hash.js/lib/hash/utils.js","./256":"node_modules/hash.js/lib/hash/sha/256.js"}],"node_modules/hash.js/lib/hash/sha/512.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../utils":"node_modules/hash.js/lib/hash/utils.js","../common":"node_modules/hash.js/lib/hash/common.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/hash.js/lib/hash/sha/384.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":"node_modules/hash.js/lib/hash/utils.js","./512":"node_modules/hash.js/lib/hash/sha/512.js"}],"node_modules/hash.js/lib/hash/sha.js":[function(require,module,exports) {
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":"node_modules/hash.js/lib/hash/sha/1.js","./sha/224":"node_modules/hash.js/lib/hash/sha/224.js","./sha/256":"node_modules/hash.js/lib/hash/sha/256.js","./sha/384":"node_modules/hash.js/lib/hash/sha/384.js","./sha/512":"node_modules/hash.js/lib/hash/sha/512.js"}],"node_modules/hash.js/lib/hash/ripemd.js":[function(require,module,exports) {
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./utils":"node_modules/hash.js/lib/hash/utils.js","./common":"node_modules/hash.js/lib/hash/common.js"}],"node_modules/hash.js/lib/hash/hmac.js":[function(require,module,exports) {
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":"node_modules/hash.js/lib/hash/utils.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/hash.js/lib/hash.js":[function(require,module,exports) {
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/utils":"node_modules/hash.js/lib/hash/utils.js","./hash/common":"node_modules/hash.js/lib/hash/common.js","./hash/sha":"node_modules/hash.js/lib/hash/sha.js","./hash/ripemd":"node_modules/hash.js/lib/hash/ripemd.js","./hash/hmac":"node_modules/hash.js/lib/hash/hmac.js"}],"node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":[function(require,module,exports) {
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
      ],
    ],
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
      ],
    ],
  },
};

},{}],"node_modules/elliptic/lib/elliptic/curves.js":[function(require,module,exports) {
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve,
      });
      return curve;
    },
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  ],
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  ],
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9',
  ],
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658',
  ],
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3',
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15',
    },
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre,
  ],
});

},{"hash.js":"node_modules/hash.js/lib/hash.js","./curve":"node_modules/elliptic/lib/elliptic/curve/index.js","./utils":"node_modules/elliptic/lib/elliptic/utils.js","./precomputed/secp256k1":"node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"}],"node_modules/hmac-drbg/lib/hmac-drbg.js":[function(require,module,exports) {
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":"node_modules/hash.js/lib/hash.js","minimalistic-crypto-utils":"node_modules/minimalistic-crypto-utils/lib/utils.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/elliptic/lib/elliptic/ec/key.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"bn.js":"node_modules/bn.js/lib/bn.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js"}],"node_modules/elliptic/lib/elliptic/ec/signature.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"bn.js":"node_modules/bn.js/lib/bn.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js"}],"node_modules/elliptic/lib/elliptic/ec/index.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(Object.prototype.hasOwnProperty.call(curves, options),
      'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  for (;;) {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"bn.js":"node_modules/bn.js/lib/bn.js","hmac-drbg":"node_modules/hmac-drbg/lib/hmac-drbg.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js","../curves":"node_modules/elliptic/lib/elliptic/curves.js","brorand":"node_modules/brorand/index.js","./key":"node_modules/elliptic/lib/elliptic/ec/key.js","./signature":"node_modules/elliptic/lib/elliptic/ec/signature.js"}],"node_modules/elliptic/lib/elliptic/eddsa/key.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":"node_modules/elliptic/lib/elliptic/utils.js"}],"node_modules/elliptic/lib/elliptic/eddsa/signature.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength),
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"bn.js":"node_modules/bn.js/lib/bn.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js"}],"node_modules/elliptic/lib/elliptic/eddsa/index.js":[function(require,module,exports) {
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
    .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"hash.js":"node_modules/hash.js/lib/hash.js","../curves":"node_modules/elliptic/lib/elliptic/curves.js","../utils":"node_modules/elliptic/lib/elliptic/utils.js","./key":"node_modules/elliptic/lib/elliptic/eddsa/key.js","./signature":"node_modules/elliptic/lib/elliptic/eddsa/signature.js"}],"node_modules/elliptic/lib/elliptic.js":[function(require,module,exports) {
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":"node_modules/elliptic/package.json","./elliptic/utils":"node_modules/elliptic/lib/elliptic/utils.js","brorand":"node_modules/brorand/index.js","./elliptic/curve":"node_modules/elliptic/lib/elliptic/curve/index.js","./elliptic/curves":"node_modules/elliptic/lib/elliptic/curves.js","./elliptic/ec":"node_modules/elliptic/lib/elliptic/ec/index.js","./elliptic/eddsa":"node_modules/elliptic/lib/elliptic/eddsa/index.js"}],"node_modules/secp256k1/lib/elliptic.js":[function(require,module,exports) {
var EC = require('elliptic').ec;
var ec = new EC('secp256k1');
var ecparams = ec.curve;

// Hack, we can not use bn.js@5, while elliptic uses bn.js@4
// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
var BN = ecparams.n.constructor;
function loadCompressedPublicKey(first, xbuf) {
  var x = new BN(xbuf);

  // overflow
  if (x.cmp(ecparams.p) >= 0) return null;
  x = x.toRed(ecparams.red);

  // compute corresponding Y
  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
  if (first === 0x03 !== y.isOdd()) y = y.redNeg();
  return ec.keyPair({
    pub: {
      x: x,
      y: y
    }
  });
}
function loadUncompressedPublicKey(first, xbuf, ybuf) {
  var x = new BN(xbuf);
  var y = new BN(ybuf);

  // overflow
  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;
  x = x.toRed(ecparams.red);
  y = y.toRed(ecparams.red);

  // is odd flag
  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null;

  // x*x*x + b = y*y
  var x3 = x.redSqr().redIMul(x);
  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
  return ec.keyPair({
    pub: {
      x: x,
      y: y
    }
  });
}
function loadPublicKey(pubkey) {
  // length should be validated in interface
  var first = pubkey[0];
  switch (first) {
    case 0x02:
    case 0x03:
      if (pubkey.length !== 33) return null;
      return loadCompressedPublicKey(first, pubkey.subarray(1, 33));
    case 0x04:
    case 0x06:
    case 0x07:
      if (pubkey.length !== 65) return null;
      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));
    default:
      return null;
  }
}
function savePublicKey(output, point) {
  var pubkey = point.encode(null, output.length === 33);
  // Loop should be faster because we do not need create extra Uint8Array
  // output.set(new Uint8Array(pubkey))
  for (var i = 0; i < output.length; ++i) output[i] = pubkey[i];
}
module.exports = {
  contextRandomize: function contextRandomize() {
    return 0;
  },
  privateKeyVerify: function privateKeyVerify(seckey) {
    var bn = new BN(seckey);
    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
  },
  privateKeyNegate: function privateKeyNegate(seckey) {
    var bn = new BN(seckey);
    var negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32);
    seckey.set(negate);
    return 0;
  },
  privateKeyTweakAdd: function privateKeyTweakAdd(seckey, tweak) {
    var bn = new BN(tweak);
    if (bn.cmp(ecparams.n) >= 0) return 1;
    bn.iadd(new BN(seckey));
    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
    if (bn.isZero()) return 1;
    var tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
    seckey.set(tweaked);
    return 0;
  },
  privateKeyTweakMul: function privateKeyTweakMul(seckey, tweak) {
    var bn = new BN(tweak);
    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
    bn.imul(new BN(seckey));
    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);
    var tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
    seckey.set(tweaked);
    return 0;
  },
  publicKeyVerify: function publicKeyVerify(pubkey) {
    var pair = loadPublicKey(pubkey);
    return pair === null ? 1 : 0;
  },
  publicKeyCreate: function publicKeyCreate(output, seckey) {
    var bn = new BN(seckey);
    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
    var point = ec.keyFromPrivate(seckey).getPublic();
    savePublicKey(output, point);
    return 0;
  },
  publicKeyConvert: function publicKeyConvert(output, pubkey) {
    var pair = loadPublicKey(pubkey);
    if (pair === null) return 1;
    var point = pair.getPublic();
    savePublicKey(output, point);
    return 0;
  },
  publicKeyNegate: function publicKeyNegate(output, pubkey) {
    var pair = loadPublicKey(pubkey);
    if (pair === null) return 1;
    var point = pair.getPublic();
    point.y = point.y.redNeg();
    savePublicKey(output, point);
    return 0;
  },
  publicKeyCombine: function publicKeyCombine(output, pubkeys) {
    var pairs = new Array(pubkeys.length);
    for (var i = 0; i < pubkeys.length; ++i) {
      pairs[i] = loadPublicKey(pubkeys[i]);
      if (pairs[i] === null) return 1;
    }
    var point = pairs[0].getPublic();
    for (var _i = 1; _i < pairs.length; ++_i) point = point.add(pairs[_i].pub);
    if (point.isInfinity()) return 2;
    savePublicKey(output, point);
    return 0;
  },
  publicKeyTweakAdd: function publicKeyTweakAdd(output, pubkey, tweak) {
    var pair = loadPublicKey(pubkey);
    if (pair === null) return 1;
    tweak = new BN(tweak);
    if (tweak.cmp(ecparams.n) >= 0) return 2;
    var point = pair.getPublic().add(ecparams.g.mul(tweak));
    if (point.isInfinity()) return 2;
    savePublicKey(output, point);
    return 0;
  },
  publicKeyTweakMul: function publicKeyTweakMul(output, pubkey, tweak) {
    var pair = loadPublicKey(pubkey);
    if (pair === null) return 1;
    tweak = new BN(tweak);
    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2;
    var point = pair.getPublic().mul(tweak);
    savePublicKey(output, point);
    return 0;
  },
  signatureNormalize: function signatureNormalize(sig) {
    var r = new BN(sig.subarray(0, 32));
    var s = new BN(sig.subarray(32, 64));
    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1;
    if (s.cmp(ec.nh) === 1) {
      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32);
    }
    return 0;
  },
  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
  // Adapted for Uint8Array instead Buffer
  signatureExport: function signatureExport(obj, sig) {
    var sigR = sig.subarray(0, 32);
    var sigS = sig.subarray(32, 64);
    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1;
    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1;
    var output = obj.output;

    // Prepare R
    var r = output.subarray(4, 4 + 33);
    r[0] = 0x00;
    r.set(sigR, 1);
    var lenR = 33;
    var posR = 0;
    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);
    r = r.subarray(posR);
    if (r[0] & 0x80) return 1;
    if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) return 1;

    // Prepare S
    var s = output.subarray(6 + 33, 6 + 33 + 33);
    s[0] = 0x00;
    s.set(sigS, 1);
    var lenS = 33;
    var posS = 0;
    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);
    s = s.subarray(posS);
    if (s[0] & 0x80) return 1;
    if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) return 1;

    // Set output length for return
    obj.outputlen = 6 + lenR + lenS;

    // Output in specified format
    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
    output[0] = 0x30;
    output[1] = obj.outputlen - 2;
    output[2] = 0x02;
    output[3] = r.length;
    output.set(r, 4);
    output[4 + lenR] = 0x02;
    output[5 + lenR] = s.length;
    output.set(s, 6 + lenR);
    return 0;
  },
  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
  // Adapted for Uint8Array instead Buffer
  signatureImport: function signatureImport(output, sig) {
    if (sig.length < 8) return 1;
    if (sig.length > 72) return 1;
    if (sig[0] !== 0x30) return 1;
    if (sig[1] !== sig.length - 2) return 1;
    if (sig[2] !== 0x02) return 1;
    var lenR = sig[3];
    if (lenR === 0) return 1;
    if (5 + lenR >= sig.length) return 1;
    if (sig[4 + lenR] !== 0x02) return 1;
    var lenS = sig[5 + lenR];
    if (lenS === 0) return 1;
    if (6 + lenR + lenS !== sig.length) return 1;
    if (sig[4] & 0x80) return 1;
    if (lenR > 1 && sig[4] === 0x00 && !(sig[5] & 0x80)) return 1;
    if (sig[lenR + 6] & 0x80) return 1;
    if (lenS > 1 && sig[lenR + 6] === 0x00 && !(sig[lenR + 7] & 0x80)) return 1;
    var sigR = sig.subarray(4, 4 + lenR);
    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1);
    if (sigR.length > 32) return 1;
    var sigS = sig.subarray(6 + lenR);
    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1);
    if (sigS.length > 32) throw new Error('S length is too long');
    var r = new BN(sigR);
    if (r.cmp(ecparams.n) >= 0) r = new BN(0);
    var s = new BN(sig.subarray(6 + lenR));
    if (s.cmp(ecparams.n) >= 0) s = new BN(0);
    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0);
    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32);
    return 0;
  },
  ecdsaSign: function ecdsaSign(obj, message, seckey, data, noncefn) {
    if (noncefn) {
      var _noncefn = noncefn;
      noncefn = function noncefn(counter) {
        var nonce = _noncefn(message, seckey, null, data, counter);
        var isValid = nonce instanceof Uint8Array && nonce.length === 32;
        if (!isValid) throw new Error('This is the way');
        return new BN(nonce);
      };
    }
    var d = new BN(seckey);
    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1;
    var sig;
    try {
      sig = ec.sign(message, seckey, {
        canonical: true,
        k: noncefn,
        pers: data
      });
    } catch (err) {
      return 1;
    }
    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0);
    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32);
    obj.recid = sig.recoveryParam;
    return 0;
  },
  ecdsaVerify: function ecdsaVerify(sig, msg32, pubkey) {
    var sigObj = {
      r: sig.subarray(0, 32),
      s: sig.subarray(32, 64)
    };
    var sigr = new BN(sigObj.r);
    var sigs = new BN(sigObj.s);
    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;
    var pair = loadPublicKey(pubkey);
    if (pair === null) return 2;
    var point = pair.getPublic();
    var isValid = ec.verify(msg32, sigObj, point);
    return isValid ? 0 : 3;
  },
  ecdsaRecover: function ecdsaRecover(output, sig, recid, msg32) {
    var sigObj = {
      r: sig.slice(0, 32),
      s: sig.slice(32, 64)
    };
    var sigr = new BN(sigObj.r);
    var sigs = new BN(sigObj.s);
    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
    if (sigr.isZero() || sigs.isZero()) return 2;

    // Can throw `throw new Error('Unable to find sencond key candinate');`
    var point;
    try {
      point = ec.recoverPubKey(msg32, sigObj, recid);
    } catch (err) {
      return 2;
    }
    savePublicKey(output, point);
    return 0;
  },
  ecdh: function ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
    var pair = loadPublicKey(pubkey);
    if (pair === null) return 1;
    var scalar = new BN(seckey);
    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2;
    var point = pair.getPublic().mul(scalar);
    if (hashfn === undefined) {
      var _data = point.encode(null, true);
      var sha256 = ec.hash().update(_data).digest();
      for (var i = 0; i < 32; ++i) output[i] = sha256[i];
    } else {
      if (!xbuf) xbuf = new Uint8Array(32);
      var x = point.getX().toArray('be', 32);
      for (var _i2 = 0; _i2 < 32; ++_i2) xbuf[_i2] = x[_i2];
      if (!ybuf) ybuf = new Uint8Array(32);
      var y = point.getY().toArray('be', 32);
      for (var _i3 = 0; _i3 < 32; ++_i3) ybuf[_i3] = y[_i3];
      var hash = hashfn(xbuf, ybuf, data);
      var isValid = hash instanceof Uint8Array && hash.length === output.length;
      if (!isValid) return 2;
      output.set(hash);
    }
    return 0;
  }
};
},{"elliptic":"node_modules/elliptic/lib/elliptic.js"}],"node_modules/secp256k1/elliptic.js":[function(require,module,exports) {
module.exports = require('./lib')(require('./lib/elliptic'));
},{"./lib":"node_modules/secp256k1/lib/index.js","./lib/elliptic":"node_modules/secp256k1/lib/elliptic.js"}],"node_modules/randombytes/browser.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

},{"safe-buffer":"node_modules/safe-buffer/index.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/ethereum-cryptography/random.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var randombytes = require("randombytes");
function getRandomBytes(bytes) {
    return new Promise(function (resolve, reject) {
        randombytes(bytes, function (err, resp) {
            if (err) {
                reject(err);
                return;
            }
            resolve(resp);
        });
    });
}
exports.getRandomBytes = getRandomBytes;
function getRandomBytesSync(bytes) {
    return randombytes(bytes);
}
exports.getRandomBytesSync = getRandomBytesSync;

},{"randombytes":"node_modules/randombytes/browser.js"}],"node_modules/ethereum-cryptography/secp256k1.js":[function(require,module,exports) {
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var secp256k1_1 = require("secp256k1");
var random_1 = require("./random");
var SECP256K1_PRIVATE_KEY_SIZE = 32;
function createPrivateKey() {
    return __awaiter(this, void 0, void 0, function () {
        var pk;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!true) return [3 /*break*/, 2];
                    return [4 /*yield*/, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
                case 1:
                    pk = _a.sent();
                    if (secp256k1_1.privateKeyVerify(pk)) {
                        return [2 /*return*/, pk];
                    }
                    return [3 /*break*/, 0];
                case 2: return [2 /*return*/];
            }
        });
    });
}
exports.createPrivateKey = createPrivateKey;
function createPrivateKeySync() {
    while (true) {
        var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
        if (secp256k1_1.privateKeyVerify(pk)) {
            return pk;
        }
    }
}
exports.createPrivateKeySync = createPrivateKeySync;
__export(require("secp256k1"));

},{"secp256k1":"node_modules/secp256k1/elliptic.js","./random":"node_modules/ethereum-cryptography/random.js"}],"node_modules/web3-provider-engine/node_modules/ethereumjs-util/dist/secp256k1-lib/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
'use strict';

// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

var BN = require('bn.js');
var EC = require('elliptic').ec;

var ec = new EC('secp256k1');
var ecparams = ec.curve;

exports.privateKeyExport = function (privateKey, compressed) {
  var d = new BN(privateKey);
  if (d.ucmp(ecparams.n) >= 0) {
    throw new Error('couldn\'t export to DER format');
  }

  var point = ec.g.mul(d);
  return toPublicKey(point.getX(), point.getY(), compressed);
};

exports.privateKeyModInverse = function (privateKey) {
  var bn = new BN(privateKey);
  if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
    throw new Error('private key range is invalid');
  }

  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
};

exports.signatureImport = function (sigObj) {
  var r = new BN(sigObj.r);
  if (r.ucmp(ecparams.n) >= 0) {
    r = new BN(0);
  }

  var s = new BN(sigObj.s);
  if (s.ucmp(ecparams.n) >= 0) {
    s = new BN(0);
  }

  return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
};

exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
  var point = ec.keyFromPublic(publicKey);

  var scalar = new BN(privateKey);
  if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
    throw new Error('scalar was invalid (zero or overflow)');
  }

  var shared = point.pub.mul(scalar);
  return toPublicKey(shared.getX(), shared.getY(), compressed);
};

var toPublicKey = function toPublicKey(x, y, compressed) {
  var publicKey = void 0;

  if (compressed) {
    publicKey = Buffer.alloc(33);
    publicKey[0] = y.isOdd() ? 0x03 : 0x02;
    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
  } else {
    publicKey = Buffer.alloc(65);
    publicKey[0] = 0x04;
    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
    y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
  }

  return publicKey;
};
},{"bn.js":"node_modules/bn.js/lib/bn.js","elliptic":"node_modules/elliptic/lib/elliptic.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/web3-provider-engine/node_modules/ethereumjs-util/dist/secp256k1-lib/der.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";

// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
// begin
0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
// private key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// middle
0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
// public key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
// begin
0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
// private key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// middle
0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
// public key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

exports.privateKeyExport = function (privateKey, publicKey, compressed) {
  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
  privateKey.copy(result, compressed ? 8 : 9);
  publicKey.copy(result, compressed ? 181 : 214);
  return result;
};

exports.privateKeyImport = function (privateKey) {
  var length = privateKey.length;

  // sequence header
  var index = 0;
  if (length < index + 1 || privateKey[index] !== 0x30) return null;
  index += 1;

  // sequence length constructor
  if (length < index + 1 || !(privateKey[index] & 0x80)) return null;

  var lenb = privateKey[index] & 0x7f;
  index += 1;
  if (lenb < 1 || lenb > 2) return null;
  if (length < index + lenb) return null;

  // sequence length
  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
  index += lenb;
  if (length < index + len) return null;

  // sequence element 0: version number (=1)
  if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
    return null;
  }
  index += 3;

  // sequence element 1: octet string, up to 32 bytes
  if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
    return null;
  }

  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
};

exports.signatureImportLax = function (signature) {
  var r = Buffer.alloc(32, 0);
  var s = Buffer.alloc(32, 0);

  var length = signature.length;
  var index = 0;

  // sequence tag byte
  if (signature[index++] !== 0x30) {
    return null;
  }

  // sequence length byte
  var lenbyte = signature[index++];
  if (lenbyte & 0x80) {
    index += lenbyte - 0x80;
    if (index > length) {
      return null;
    }
  }

  // sequence tag byte for r
  if (signature[index++] !== 0x02) {
    return null;
  }

  // length for r
  var rlen = signature[index++];
  if (rlen & 0x80) {
    lenbyte = rlen - 0x80;
    if (index + lenbyte > length) {
      return null;
    }
    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
      rlen = (rlen << 8) + signature[index];
    }
  }
  if (rlen > length - index) {
    return null;
  }
  var rindex = index;
  index += rlen;

  // sequence tag byte for s
  if (signature[index++] !== 0x02) {
    return null;
  }

  // length for s
  var slen = signature[index++];
  if (slen & 0x80) {
    lenbyte = slen - 0x80;
    if (index + lenbyte > length) {
      return null;
    }
    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
      slen = (slen << 8) + signature[index];
    }
  }
  if (slen > length - index) {
    return null;
  }
  var sindex = index;
  index += slen;

  // ignore leading zeros in r
  for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1) {}
  // copy r value
  if (rlen > 32) {
    return null;
  }
  var rvalue = signature.slice(rindex, rindex + rlen);
  rvalue.copy(r, 32 - rvalue.length);

  // ignore leading zeros in s
  for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1) {}
  // copy s value
  if (slen > 32) {
    return null;
  }
  var svalue = signature.slice(sindex, sindex + slen);
  svalue.copy(s, 32 - svalue.length);

  return { r: r, s: s };
};
},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/web3-provider-engine/node_modules/ethereumjs-util/dist/secp256k1-adapter.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
'use strict';

var secp256k1 = require('ethereum-cryptography/secp256k1');

var secp256k1v3 = require('./secp256k1-lib/index');
var der = require('./secp256k1-lib/der');

/**
 * Verify an ECDSA privateKey
 * @method privateKeyVerify
 * @param {Buffer} privateKey
 * @return {boolean}
 */
var privateKeyVerify = function privateKeyVerify(privateKey) {
  // secp256k1 v4 version throws when privateKey length is not 32
  if (privateKey.length !== 32) {
    return false;
  }

  return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
};

/**
 * Export a privateKey in DER format
 * @method privateKeyExport
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {boolean}
 */
var privateKeyExport = function privateKeyExport(privateKey, compressed) {
  // privateKeyExport method is not part of secp256k1 v4 package
  // this implementation is based on v3
  if (privateKey.length !== 32) {
    throw new RangeError('private key length is invalid');
  }

  var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);

  return der.privateKeyExport(privateKey, publicKey, compressed);
};

/**
 * Import a privateKey in DER format
 * @method privateKeyImport
 * @param {Buffer} privateKey
 * @return {Buffer}
 */

var privateKeyImport = function privateKeyImport(privateKey) {
  // privateKeyImport method is not part of secp256k1 v4 package
  // this implementation is based on v3
  privateKey = der.privateKeyImport(privateKey);
  if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {
    return privateKey;
  }

  throw new Error("couldn't import from DER format");
};

/**
 * Negate a privateKey by subtracting it from the order of the curve's base point
 * @method privateKeyNegate
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
var privateKeyNegate = function privateKeyNegate(privateKey) {
  return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
};

/**
 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
 * @method privateKeyModInverse
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
var privateKeyModInverse = function privateKeyModInverse(privateKey) {
  if (privateKey.length !== 32) {
    throw new Error('private key length is invalid');
  }

  return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
};

/**
 * Tweak a privateKey by adding tweak to it.
 * @method privateKeyTweakAdd
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */
var privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {
  return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
};

/**
 * Tweak a privateKey by multiplying it by a tweak.
 * @method privateKeyTweakMul
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */
var privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {
  return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
};

/**
 * Compute the public key for a privateKey.
 * @method publicKeyCreate
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyCreate = function publicKeyCreate(privateKey, compressed) {
  return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
};

/**
 * Convert a publicKey to compressed or uncompressed form.
 * @method publicKeyConvert
 * @param {Buffer} publicKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyConvert = function publicKeyConvert(publicKey, compressed) {
  return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
};

/**
 * Verify an ECDSA publicKey.
 * @method publicKeyVerify
 * @param {Buffer} publicKey
 * @return {boolean}
 */
var publicKeyVerify = function publicKeyVerify(publicKey) {
  // secp256k1 v4 version throws when publicKey length is not 33 or 65
  if (publicKey.length !== 33 && publicKey.length !== 65) {
    return false;
  }

  return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
};

/**
 * Tweak a publicKey by adding tweak times the generator to it.
 * @method publicKeyTweakAdd
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {
  return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};

/**
 * Tweak a publicKey by multiplying it by a tweak value
 * @method publicKeyTweakMul
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {
  return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};

/**
 * Add a given publicKeys together.
 * @method publicKeyCombine
 * @param {Array<Buffer>} publicKeys
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {
  var keys = [];
  publicKeys.forEach(function (publicKey) {
    keys.push(Uint8Array.from(publicKey));
  });

  return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
};

/**
 * Convert a signature to a normalized lower-S form.
 * @method signatureNormalize
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureNormalize = function signatureNormalize(signature) {
  return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
};

/**
 * Serialize an ECDSA signature in DER format.
 * @method signatureExport
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureExport = function signatureExport(signature) {
  return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
};

/**
 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImport
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureImport = function signatureImport(signature) {
  return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
};

/**
 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImportLax
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureImportLax = function signatureImportLax(signature) {
  // signatureImportLax method is not part of secp256k1 v4 package
  // this implementation is based on v3
  // ensure that signature is greater than 0
  if (signature.length === 0) {
    throw new RangeError('signature length is invalid');
  }

  var sigObj = der.signatureImportLax(signature);
  if (sigObj === null) {
    throw new Error("couldn't parse DER signature");
  }

  return secp256k1v3.signatureImport(sigObj);
};

/**
 * Create an ECDSA signature. Always return low-S signature.
 * @method sign
 * @param {Buffer} message
 * @param {Buffer} privateKey
 * @param {Object} options
 * @return {Buffer}
 */
var sign = function sign(message, privateKey, options) {
  if (options === null) {
    throw new TypeError('options should be an Object');
  }

  var signOptions = void 0;

  if (options) {
    signOptions = {};

    if (options.data === null) {
      throw new TypeError('options.data should be a Buffer');
    }

    if (options.data) {
      // validate option.data length
      if (options.data.length !== 32) {
        throw new RangeError('options.data length is invalid');
      }

      signOptions.data = new Uint8Array(options.data);
    }

    if (options.noncefn === null) {
      throw new TypeError('options.noncefn should be a Function');
    }

    if (options.noncefn) {
      //  convert option.noncefn function signature
      signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
        var bufferAlgo = algo != null ? Buffer.from(algo) : null;
        var bufferData = data != null ? Buffer.from(data) : null;

        var buffer = Buffer.from('');

        if (options.noncefn) {
          buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
        }

        return Uint8Array.from(buffer);
      };
    }
  }

  var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);

  return {
    signature: Buffer.from(sig.signature),
    recovery: sig.recid
  };
};

/**
 * Verify an ECDSA signature.
 * @method verify
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Buffer} publicKey
 * @return {boolean}
 */
var verify = function verify(message, signature, publicKey) {
  // note: secp256k1 v4 verify method has a different argument order
  return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
};

/**
 * Recover an ECDSA public key from a signature.
 * @method recover
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Number} recid
 * @param {boolean} compressed
 * @return {Buffer}
 */
var recover = function recover(message, signature, recid, compressed) {
  // note: secp256k1 v4 recover method has a different argument order
  return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
};

/**
 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
 * @method ecdh
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
var ecdh = function ecdh(publicKey, privateKey) {
  // note: secp256k1 v3 doesn't allow optional parameter
  return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
};

/**
 * Compute an EC Diffie-Hellman secret and return public key as result
 * @method ecdhUnsafe
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
var ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {
  // ecdhUnsafe method is not part of secp256k1 v4 package
  // this implementation is based on v3
  // ensure valid publicKey length
  if (publicKey.length !== 33 && publicKey.length !== 65) {
    throw new RangeError('public key length is invalid');
  }

  // ensure valid privateKey length
  if (privateKey.length !== 32) {
    throw new RangeError('private key length is invalid');
  }

  return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
};

module.exports = {
  privateKeyVerify: privateKeyVerify,
  privateKeyExport: privateKeyExport,
  privateKeyImport: privateKeyImport,
  privateKeyNegate: privateKeyNegate,
  privateKeyModInverse: privateKeyModInverse,
  privateKeyTweakAdd: privateKeyTweakAdd,
  privateKeyTweakMul: privateKeyTweakMul,

  publicKeyCreate: publicKeyCreate,
  publicKeyConvert: publicKeyConvert,
  publicKeyVerify: publicKeyVerify,
  publicKeyTweakAdd: publicKeyTweakAdd,
  publicKeyTweakMul: publicKeyTweakMul,
  publicKeyCombine: publicKeyCombine,

  signatureNormalize: signatureNormalize,
  signatureExport: signatureExport,
  signatureImport: signatureImport,
  signatureImportLax: signatureImportLax,

  sign: sign,
  verify: verify,
  recover: recover,

  ecdh: ecdh,
  ecdhUnsafe: ecdhUnsafe
};
},{"ethereum-cryptography/secp256k1":"node_modules/ethereum-cryptography/secp256k1.js","./secp256k1-lib/index":"node_modules/web3-provider-engine/node_modules/ethereumjs-util/dist/secp256k1-lib/index.js","./secp256k1-lib/der":"node_modules/web3-provider-engine/node_modules/ethereumjs-util/dist/secp256k1-lib/der.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/object-assign/index.js":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';

/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }

    // Detect buggy property enumeration order in older V8 versions.

    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
    test1[5] = 'de';
    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });
    if (order2.join('') !== '0123456789') {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }
    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}
module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};
},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/assert/node_modules/util/support/isBufferBrowser.js":[function(require,module,exports) {
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/assert/node_modules/inherits/inherits_browser.js":[function(require,module,exports) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/assert/node_modules/util/util.js":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function (f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }
  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function (x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s':
        return String(args[i++]);
      case '%d':
        return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};

// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function (fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function () {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }
  if (process.noDeprecation === true) {
    return fn;
  }
  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }
  return deprecated;
};
var debugs = {};
var debugEnviron;
exports.debuglog = function (set) {
  if (isUndefined(debugEnviron)) debugEnviron = undefined || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function () {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function () {};
    }
  }
  return debugs[set];
};

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};
function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];
  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}
function stylizeNoColor(str, styleType) {
  return str;
}
function arrayToHash(array) {
  var hash = {};
  array.forEach(function (val, idx) {
    hash[val] = true;
  });
  return hash;
}
function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) &&
  // Filter out the util module, it's inspect function is special
  value.inspect !== exports.inspect &&
  // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);
  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }
  var base = '',
    array = false,
    braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }
  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }
  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }
  ctx.seen.push(value);
  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }
  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value)) return ctx.stylize('null', 'null');
}
function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || {
    value: value[key]
  };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }
  return name + ': ' + str;
}
function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function (prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);
  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }
  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;
function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;
function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;
function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' ||
  // ES6 symbol
  typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = require('./support/isBuffer');
function objectToString(o) {
  return Object.prototype.toString.call(o);
}
function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}
var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}

// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function () {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};

/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');
exports._extend = function (origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
},{"./support/isBuffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/assert/node_modules/util/support/isBufferBrowser.js","inherits":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/assert/node_modules/inherits/inherits_browser.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/assert/assert.js":[function(require,module,exports) {
var global = arguments[3];
'use strict';

var objectAssign = require('object-assign');

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"object-assign":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/object-assign/index.js","util/":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/assert/node_modules/util/util.js"}],"node_modules/rlp/node_modules/bn.js/lib/bn.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/rlp/dist.browser/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLength = exports.decode = exports.encode = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
/**
 * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
 * This function takes in a data, convert it to buffer if not, and a length for recursion
 * @param input - will be converted to buffer
 * @returns returns buffer of encoded data
 **/
function encode(input) {
    if (Array.isArray(input)) {
        var output = [];
        for (var i = 0; i < input.length; i++) {
            output.push(encode(input[i]));
        }
        var buf = Buffer.concat(output);
        return Buffer.concat([encodeLength(buf.length, 192), buf]);
    }
    else {
        var inputBuf = toBuffer(input);
        return inputBuf.length === 1 && inputBuf[0] < 128
            ? inputBuf
            : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
    }
}
exports.encode = encode;
/**
 * Parse integers. Check if there is no leading zeros
 * @param v The value to parse
 * @param base The base to parse the integer into
 */
function safeParseInt(v, base) {
    if (v[0] === '0' && v[1] === '0') {
        throw new Error('invalid RLP: extra zeros');
    }
    return parseInt(v, base);
}
function encodeLength(len, offset) {
    if (len < 56) {
        return Buffer.from([len + offset]);
    }
    else {
        var hexLength = intToHex(len);
        var lLength = hexLength.length / 2;
        var firstByte = intToHex(offset + 55 + lLength);
        return Buffer.from(firstByte + hexLength, 'hex');
    }
}
function decode(input, stream) {
    if (stream === void 0) { stream = false; }
    if (!input || input.length === 0) {
        return Buffer.from([]);
    }
    var inputBuffer = toBuffer(input);
    var decoded = _decode(inputBuffer);
    if (stream) {
        return decoded;
    }
    if (decoded.remainder.length !== 0) {
        throw new Error('invalid remainder');
    }
    return decoded.data;
}
exports.decode = decode;
/**
 * Get the length of the RLP input
 * @param input
 * @returns The length of the input or an empty Buffer if no input
 */
function getLength(input) {
    if (!input || input.length === 0) {
        return Buffer.from([]);
    }
    var inputBuffer = toBuffer(input);
    var firstByte = inputBuffer[0];
    if (firstByte <= 0x7f) {
        return inputBuffer.length;
    }
    else if (firstByte <= 0xb7) {
        return firstByte - 0x7f;
    }
    else if (firstByte <= 0xbf) {
        return firstByte - 0xb6;
    }
    else if (firstByte <= 0xf7) {
        // a list between  0-55 bytes long
        return firstByte - 0xbf;
    }
    else {
        // a list  over 55 bytes long
        var llength = firstByte - 0xf6;
        var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
        return llength + length_1;
    }
}
exports.getLength = getLength;
/** Decode an input with RLP */
function _decode(input) {
    var length, llength, data, innerRemainder, d;
    var decoded = [];
    var firstByte = input[0];
    if (firstByte <= 0x7f) {
        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
        return {
            data: input.slice(0, 1),
            remainder: input.slice(1),
        };
    }
    else if (firstByte <= 0xb7) {
        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
        // The range of the first byte is [0x80, 0xb7]
        length = firstByte - 0x7f;
        // set 0x80 null to 0
        if (firstByte === 0x80) {
            data = Buffer.from([]);
        }
        else {
            data = input.slice(1, length);
        }
        if (length === 2 && data[0] < 0x80) {
            throw new Error('invalid rlp encoding: byte must be less 0x80');
        }
        return {
            data: data,
            remainder: input.slice(length),
        };
    }
    else if (firstByte <= 0xbf) {
        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
        // followed by the length, followed by the string
        llength = firstByte - 0xb6;
        if (input.length - 1 < llength) {
            throw new Error('invalid RLP: not enough bytes for string length');
        }
        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
        if (length <= 55) {
            throw new Error('invalid RLP: expected string length to be greater than 55');
        }
        data = input.slice(llength, length + llength);
        if (data.length < length) {
            throw new Error('invalid RLP: not enough bytes for string');
        }
        return {
            data: data,
            remainder: input.slice(length + llength),
        };
    }
    else if (firstByte <= 0xf7) {
        // a list between  0-55 bytes long
        length = firstByte - 0xbf;
        innerRemainder = input.slice(1, length);
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(length),
        };
    }
    else {
        // a list  over 55 bytes long
        llength = firstByte - 0xf6;
        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
        var totalLength = llength + length;
        if (totalLength > input.length) {
            throw new Error('invalid rlp: total length is larger than the data');
        }
        innerRemainder = input.slice(llength, totalLength);
        if (innerRemainder.length === 0) {
            throw new Error('invalid rlp, List has a invalid length');
        }
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(totalLength),
        };
    }
}
/** Check if a string is prefixed by 0x */
function isHexPrefixed(str) {
    return str.slice(0, 2) === '0x';
}
/** Removes 0x from a given String */
function stripHexPrefix(str) {
    if (typeof str !== 'string') {
        return str;
    }
    return isHexPrefixed(str) ? str.slice(2) : str;
}
/** Transform an integer into its hexadecimal value */
function intToHex(integer) {
    if (integer < 0) {
        throw new Error('Invalid integer as argument, must be unsigned!');
    }
    var hex = integer.toString(16);
    return hex.length % 2 ? "0" + hex : hex;
}
/** Pad a string to be even */
function padToEven(a) {
    return a.length % 2 ? "0" + a : a;
}
/** Transform an integer into a Buffer */
function intToBuffer(integer) {
    var hex = intToHex(integer);
    return Buffer.from(hex, 'hex');
}
/** Transform anything into a Buffer */
function toBuffer(v) {
    if (!Buffer.isBuffer(v)) {
        if (typeof v === 'string') {
            if (isHexPrefixed(v)) {
                return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');
            }
            else {
                return Buffer.from(v);
            }
        }
        else if (typeof v === 'number' || typeof v === 'bigint') {
            if (!v) {
                return Buffer.from([]);
            }
            else {
                return intToBuffer(v);
            }
        }
        else if (v === null || v === undefined) {
            return Buffer.from([]);
        }
        else if (v instanceof Uint8Array) {
            return Buffer.from(v);
        }
        else if (bn_js_1.default.isBN(v)) {
            // converts a BN to a Buffer
            return Buffer.from(v.toArray());
        }
        else {
            throw new Error('invalid type');
        }
    }
    return v;
}

},{"bn.js":"node_modules/rlp/node_modules/bn.js/lib/bn.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/hash-base/index.js":[function(require,module,exports) {

'use strict';

var Buffer = require('safe-buffer').Buffer;
var Transform = require('readable-stream').Transform;
var inherits = require('inherits');
function throwIfNotStringOrBuffer(val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer');
  }
}
function HashBase(blockSize) {
  Transform.call(this);
  this._block = Buffer.allocUnsafe(blockSize);
  this._blockSize = blockSize;
  this._blockOffset = 0;
  this._length = [0, 0, 0, 0];
  this._finalized = false;
}
inherits(HashBase, Transform);
HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null;
  try {
    this.update(chunk, encoding);
  } catch (err) {
    error = err;
  }
  callback(error);
};
HashBase.prototype._flush = function (callback) {
  var error = null;
  try {
    this.push(this.digest());
  } catch (err) {
    error = err;
  }
  callback(error);
};
HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data');
  if (this._finalized) throw new Error('Digest already called');
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);

  // consume data
  var block = this._block;
  var offset = 0;
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];
    this._update();
    this._blockOffset = 0;
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++];

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry;
    carry = this._length[j] / 0x0100000000 | 0;
    if (carry > 0) this._length[j] -= 0x0100000000 * carry;
  }
  return this;
};
HashBase.prototype._update = function () {
  throw new Error('_update is not implemented');
};
HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called');
  this._finalized = true;
  var digest = this._digest();
  if (encoding !== undefined) digest = digest.toString(encoding);

  // reset state
  this._block.fill(0);
  this._blockOffset = 0;
  for (var i = 0; i < 4; ++i) this._length[i] = 0;
  return digest;
};
HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented');
};
module.exports = HashBase;
},{"safe-buffer":"node_modules/safe-buffer/index.js","readable-stream":"node_modules/readable-stream/readable-browser.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/md5.js/index.js":[function(require,module,exports) {

'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"inherits":"node_modules/inherits/inherits_browser.js","hash-base":"node_modules/hash-base/index.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/ripemd160/index.js":[function(require,module,exports) {

'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js","inherits":"node_modules/inherits/inherits_browser.js","hash-base":"node_modules/hash-base/index.js"}],"node_modules/sha.js/hash.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha.js":[function(require,module,exports) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"inherits":"node_modules/inherits/inherits_browser.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha1.js":[function(require,module,exports) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"inherits":"node_modules/inherits/inherits_browser.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha256.js":[function(require,module,exports) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"inherits":"node_modules/inherits/inherits_browser.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha224.js":[function(require,module,exports) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"inherits":"node_modules/inherits/inherits_browser.js","./sha256":"node_modules/sha.js/sha256.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha512.js":[function(require,module,exports) {

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"inherits":"node_modules/inherits/inherits_browser.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha384.js":[function(require,module,exports) {

var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"inherits":"node_modules/inherits/inherits_browser.js","./sha512":"node_modules/sha.js/sha512.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/index.js":[function(require,module,exports) {
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":"node_modules/sha.js/sha.js","./sha1":"node_modules/sha.js/sha1.js","./sha224":"node_modules/sha.js/sha224.js","./sha256":"node_modules/sha.js/sha256.js","./sha384":"node_modules/sha.js/sha384.js","./sha512":"node_modules/sha.js/sha512.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/writable-browser.js":[function(require,module,exports) {
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_writable.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/duplex-browser.js":[function(require,module,exports) {
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/lib/_stream_duplex.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/transform.js":[function(require,module,exports) {
module.exports = require('./readable').Transform

},{"./readable":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/readable-browser.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/passthrough.js":[function(require,module,exports) {
module.exports = require('./readable').PassThrough

},{"./readable":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/readable-browser.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/stream-browserify/index.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/events/events.js","inherits":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/inherits/inherits_browser.js","readable-stream/readable.js":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/readable-browser.js","readable-stream/writable.js":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/writable-browser.js","readable-stream/duplex.js":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/duplex-browser.js","readable-stream/transform.js":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/transform.js","readable-stream/passthrough.js":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/readable-stream/passthrough.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/safe-buffer/index.js":[function(require,module,exports) {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/string_decoder/lib/string_decoder.js":[function(require,module,exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/safe-buffer/index.js"}],"node_modules/cipher-base/index.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"safe-buffer":"node_modules/safe-buffer/index.js","stream":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/stream-browserify/index.js","string_decoder":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/string_decoder/lib/string_decoder.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/create-hash/browser.js":[function(require,module,exports) {
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"inherits":"node_modules/inherits/inherits_browser.js","md5.js":"node_modules/md5.js/index.js","ripemd160":"node_modules/ripemd160/index.js","sha.js":"node_modules/sha.js/index.js","cipher-base":"node_modules/cipher-base/index.js"}],"node_modules/web3-provider-engine/node_modules/safe-buffer/index.js":[function(require,module,exports) {

/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/is-hex-prefixed/src/index.js":[function(require,module,exports) {
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
/**
 * Returns a `Boolean` on whether or not the a `String` starts with '0x'
 * @param {String} str the string input value
 * @return {Boolean} a boolean if it is or is not hex prefixed
 * @throws if the str input is not a string
 */
module.exports = function isHexPrefixed(str) {
  if (typeof str !== 'string') {
    throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + _typeof(str) + ", while checking isHexPrefixed.");
  }
  return str.slice(0, 2) === '0x';
};
},{}],"node_modules/strip-hex-prefix/src/index.js":[function(require,module,exports) {
var isHexPrefixed = require('is-hex-prefixed');

/**
 * Removes '0x' from a given `String` is present
 * @param {String} str the string value
 * @return {String|Optional} a string by pass if necessary
 */
module.exports = function stripHexPrefix(str) {
  if (typeof str !== 'string') {
    return str;
  }
  return isHexPrefixed(str) ? str.slice(2) : str;
};
},{"is-hex-prefixed":"node_modules/is-hex-prefixed/src/index.js"}],"node_modules/ethjs-util/lib/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var isHexPrefixed = require('is-hex-prefixed');
var stripHexPrefix = require('strip-hex-prefix');

/**
 * Pads a `String` to have an even length
 * @param {String} value
 * @return {String} output
 */
function padToEven(value) {
  var a = value; // eslint-disable-line

  if (typeof a !== 'string') {
    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + _typeof(a) + ', while padToEven.');
  }
  if (a.length % 2) {
    a = '0' + a;
  }
  return a;
}

/**
 * Converts a `Number` into a hex `String`
 * @param {Number} i
 * @return {String}
 */
function intToHex(i) {
  var hex = i.toString(16); // eslint-disable-line

  return '0x' + hex;
}

/**
 * Converts an `Number` to a `Buffer`
 * @param {Number} i
 * @return {Buffer}
 */
function intToBuffer(i) {
  var hex = intToHex(i);
  return new Buffer(padToEven(hex.slice(2)), 'hex');
}

/**
 * Get the binary size of a string
 * @param {String} str
 * @return {Number}
 */
function getBinarySize(str) {
  if (typeof str !== 'string') {
    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + _typeof(str) + '\'.');
  }
  return Buffer.byteLength(str, 'utf8');
}

/**
 * Returns TRUE if the first specified array contains all elements
 * from the second one. FALSE otherwise.
 *
 * @param {array} superset
 * @param {array} subset
 *
 * @returns {boolean}
 */
function arrayContainsArray(superset, subset, some) {
  if (Array.isArray(superset) !== true) {
    throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + _typeof(superset) + '\'');
  }
  if (Array.isArray(subset) !== true) {
    throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + _typeof(subset) + '\'');
  }
  return subset[Boolean(some) && 'some' || 'every'](function (value) {
    return superset.indexOf(value) >= 0;
  });
}

/**
 * Should be called to get utf8 from it's hex representation
 *
 * @method toUtf8
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */
function toUtf8(hex) {
  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');
  return bufferValue.toString('utf8');
}

/**
 * Should be called to get ascii from it's hex representation
 *
 * @method toAscii
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */
function toAscii(hex) {
  var str = ''; // eslint-disable-line
  var i = 0,
    l = hex.length; // eslint-disable-line

  if (hex.substring(0, 2) === '0x') {
    i = 2;
  }
  for (; i < l; i += 2) {
    var code = parseInt(hex.substr(i, 2), 16);
    str += String.fromCharCode(code);
  }
  return str;
}

/**
 * Should be called to get hex representation (prefixed by 0x) of utf8 string
 *
 * @method fromUtf8
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */
function fromUtf8(stringValue) {
  var str = new Buffer(stringValue, 'utf8');
  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
}

/**
 * Should be called to get hex representation (prefixed by 0x) of ascii string
 *
 * @method fromAscii
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */
function fromAscii(stringValue) {
  var hex = ''; // eslint-disable-line
  for (var i = 0; i < stringValue.length; i++) {
    // eslint-disable-line
    var code = stringValue.charCodeAt(i);
    var n = code.toString(16);
    hex += n.length < 2 ? '0' + n : n;
  }
  return '0x' + hex;
}

/**
 * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
 *
 * @method getKeys get specific key from inner object array of objects
 * @param {String} params
 * @param {String} key
 * @param {Boolean} allowEmpty
 * @returns {Array} output just a simple array of output keys
 */
function getKeys(params, key, allowEmpty) {
  if (!Array.isArray(params)) {
    throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + _typeof(params) + '\'');
  }
  if (typeof key !== 'string') {
    throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + _typeof(key) + '\'.');
  }
  var result = []; // eslint-disable-line

  for (var i = 0; i < params.length; i++) {
    // eslint-disable-line
    var value = params[i][key]; // eslint-disable-line
    if (allowEmpty && !value) {
      value = '';
    } else if (typeof value !== 'string') {
      throw new Error('invalid abi');
    }
    result.push(value);
  }
  return result;
}

/**
 * Is the string a hex string.
 *
 * @method check if string is hex string of specific length
 * @param {String} value
 * @param {Number} length
 * @returns {Boolean} output the string is a hex string
 */
function isHexString(value, length) {
  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
module.exports = {
  arrayContainsArray: arrayContainsArray,
  intToBuffer: intToBuffer,
  getBinarySize: getBinarySize,
  isHexPrefixed: isHexPrefixed,
  stripHexPrefix: stripHexPrefix,
  padToEven: padToEven,
  intToHex: intToHex,
  fromAscii: fromAscii,
  fromUtf8: fromUtf8,
  toAscii: toAscii,
  toUtf8: toUtf8,
  getKeys: getKeys,
  isHexString: isHexString
};
},{"is-hex-prefixed":"node_modules/is-hex-prefixed/src/index.js","strip-hex-prefix":"node_modules/strip-hex-prefix/src/index.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/web3-provider-engine/node_modules/ethereumjs-util/dist/index.js":[function(require,module,exports) {

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _require = require('ethereum-cryptography/keccak'),
    keccak224 = _require.keccak224,
    keccak384 = _require.keccak384,
    k256 = _require.keccak256,
    keccak512 = _require.keccak512;

var secp256k1 = require('./secp256k1-adapter');
var assert = require('assert');
var rlp = require('rlp');
var BN = require('bn.js');
var createHash = require('create-hash');
var Buffer = require('safe-buffer').Buffer;
Object.assign(exports, require('ethjs-util'));

/**
 * the max integer that this VM can handle (a ```BN```)
 * @var {BN} MAX_INTEGER
 */
exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);

/**
 * 2^256 (a ```BN```)
 * @var {BN} TWO_POW256
 */
exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);

/**
 * Keccak-256 hash of null (a ```String```)
 * @var {String} KECCAK256_NULL_S
 */
exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;

/**
 * Keccak-256 hash of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_NULL
 */
exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
exports.SHA3_NULL = exports.KECCAK256_NULL;

/**
 * Keccak-256 of an RLP of an empty array (a ```String```)
 * @var {String} KECCAK256_RLP_ARRAY_S
 */
exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;

/**
 * Keccak-256 of an RLP of an empty array (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP_ARRAY
 */
exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;

/**
 * Keccak-256 hash of the RLP of null  (a ```String```)
 * @var {String} KECCAK256_RLP_S
 */
exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;

/**
 * Keccak-256 hash of the RLP of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP
 */
exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
exports.SHA3_RLP = exports.KECCAK256_RLP;

/**
 * [`BN`](https://github.com/indutny/bn.js)
 * @var {Function}
 */
exports.BN = BN;

/**
 * [`rlp`](https://github.com/ethereumjs/rlp)
 * @var {Function}
 */
exports.rlp = rlp;

/**
 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
 * @var {Object}
 */
exports.secp256k1 = secp256k1;

/**
 * Returns a buffer filled with 0s
 * @method zeros
 * @param {Number} bytes  the number of bytes the buffer should be
 * @return {Buffer}
 */
exports.zeros = function (bytes) {
  return Buffer.allocUnsafe(bytes).fill(0);
};

/**
  * Returns a zero address
  * @method zeroAddress
  * @return {String}
  */
exports.zeroAddress = function () {
  var addressLength = 20;
  var zeroAddress = exports.zeros(addressLength);
  return exports.bufferToHex(zeroAddress);
};

/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @method lsetLength
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @param {Boolean} [right=false] whether to start padding form the left or right
 * @return {Buffer|Array}
 */
exports.setLengthLeft = exports.setLength = function (msg, length, right) {
  var buf = exports.zeros(length);
  msg = exports.toBuffer(msg);
  if (right) {
    if (msg.length < length) {
      msg.copy(buf);
      return buf;
    }
    return msg.slice(0, length);
  } else {
    if (msg.length < length) {
      msg.copy(buf, length - msg.length);
      return buf;
    }
    return msg.slice(-length);
  }
};

/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @return {Buffer|Array}
 */
exports.setLengthRight = function (msg, length) {
  return exports.setLength(msg, length, true);
};

/**
 * Trims leading zeros from a `Buffer` or an `Array`
 * @param {Buffer|Array|String} a
 * @return {Buffer|Array|String}
 */
exports.unpad = exports.stripZeros = function (a) {
  a = exports.stripHexPrefix(a);
  var first = a[0];
  while (a.length > 0 && first.toString() === '0') {
    a = a.slice(1);
    first = a[0];
  }
  return a;
};
/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param {*} v the value
 */
exports.toBuffer = function (v) {
  if (!Buffer.isBuffer(v)) {
    if (Array.isArray(v)) {
      v = Buffer.from(v);
    } else if (typeof v === 'string') {
      if (exports.isHexString(v)) {
        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
      } else {
        v = Buffer.from(v);
      }
    } else if (typeof v === 'number') {
      v = exports.intToBuffer(v);
    } else if (v === null || v === undefined) {
      v = Buffer.allocUnsafe(0);
    } else if (BN.isBN(v)) {
      v = v.toArrayLike(Buffer);
    } else if (v.toArray) {
      // converts a BN to a Buffer
      v = Buffer.from(v.toArray());
    } else {
      throw new Error('invalid type');
    }
  }
  return v;
};

/**
 * Converts a `Buffer` to a `Number`
 * @param {Buffer} buf
 * @return {Number}
 * @throws If the input number exceeds 53 bits.
 */
exports.bufferToInt = function (buf) {
  return new BN(exports.toBuffer(buf)).toNumber();
};

/**
 * Converts a `Buffer` into a hex `String`
 * @param {Buffer} buf
 * @return {String}
 */
exports.bufferToHex = function (buf) {
  buf = exports.toBuffer(buf);
  return '0x' + buf.toString('hex');
};

/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param {Buffer} num
 * @return {BN}
 */
exports.fromSigned = function (num) {
  return new BN(num).fromTwos(256);
};

/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param {BN} num
 * @return {Buffer}
 */
exports.toUnsigned = function (num) {
  return Buffer.from(num.toTwos(256).toArray());
};

/**
 * Creates Keccak hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the Keccak width
 * @return {Buffer}
 */
exports.keccak = function (a, bits) {
  a = exports.toBuffer(a);
  if (!bits) bits = 256;

  switch (bits) {
    case 224:
      {
        return keccak224(a);
      }
    case 256:
      {
        return k256(a);
      }
    case 384:
      {
        return keccak384(a);
      }
    case 512:
      {
        return keccak512(a);
      }
    default:
      {
        throw new Error('Invald algorithm: keccak' + bits);
      }
  }
};

/**
 * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.keccak256 = function (a) {
  return exports.keccak(a);
};

/**
 * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the SHA-3 width
 * @return {Buffer}
 */
exports.sha3 = exports.keccak;

/**
 * Creates SHA256 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.sha256 = function (a) {
  a = exports.toBuffer(a);
  return createHash('sha256').update(a).digest();
};

/**
 * Creates RIPEMD160 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Boolean} padded whether it should be padded to 256 bits or not
 * @return {Buffer}
 */
exports.ripemd160 = function (a, padded) {
  a = exports.toBuffer(a);
  var hash = createHash('rmd160').update(a).digest();
  if (padded === true) {
    return exports.setLength(hash, 32);
  } else {
    return hash;
  }
};

/**
 * Creates SHA-3 hash of the RLP encoded version of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.rlphash = function (a) {
  return exports.keccak(rlp.encode(a));
};

/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 * @param {Buffer} privateKey
 * @return {Boolean}
 */
exports.isValidPrivate = function (privateKey) {
  return secp256k1.privateKeyVerify(privateKey);
};

/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Boolean}
 */
exports.isValidPublic = function (publicKey, sanitize) {
  if (publicKey.length === 64) {
    // Convert to SEC1 for secp256k1
    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
  }

  if (!sanitize) {
    return false;
  }

  return secp256k1.publicKeyVerify(publicKey);
};

/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Buffer}
 */
exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
  pubKey = exports.toBuffer(pubKey);
  if (sanitize && pubKey.length !== 64) {
    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
  }
  assert(pubKey.length === 64);
  // Only take the lower 160bits of the hash
  return exports.keccak(pubKey).slice(-20);
};

/**
 * Returns the ethereum public key of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
var privateToPublic = exports.privateToPublic = function (privateKey) {
  privateKey = exports.toBuffer(privateKey);
  // skip the type flag and use the X, Y points
  return secp256k1.publicKeyCreate(privateKey, false).slice(1);
};

/**
 * Converts a public key to the Ethereum format.
 * @param {Buffer} publicKey
 * @return {Buffer}
 */
exports.importPublic = function (publicKey) {
  publicKey = exports.toBuffer(publicKey);
  if (publicKey.length !== 64) {
    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
  }
  return publicKey;
};

/**
 * ECDSA sign
 * @param {Buffer} msgHash
 * @param {Buffer} privateKey
 * @return {Object}
 */
exports.ecsign = function (msgHash, privateKey) {
  var sig = secp256k1.sign(msgHash, privateKey);

  var ret = {};
  ret.r = sig.signature.slice(0, 32);
  ret.s = sig.signature.slice(32, 64);
  ret.v = sig.recovery + 27;
  return ret;
};

/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 * @param message
 * @returns {Buffer} hash
 */
exports.hashPersonalMessage = function (message) {
  var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
  return exports.keccak(Buffer.concat([prefix, message]));
};

/**
 * ECDSA public key recovery from signature
 * @param {Buffer} msgHash
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {Buffer} publicKey
 */
exports.ecrecover = function (msgHash, v, r, s) {
  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
  var recovery = v - 27;
  if (recovery !== 0 && recovery !== 1) {
    throw new Error('Invalid signature v value');
  }
  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
};

/**
 * Convert signature parameters into the format of `eth_sign` RPC method
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {String} sig
 */
exports.toRpcSig = function (v, r, s) {
  // NOTE: with potential introduction of chainId this might need to be updated
  if (v !== 27 && v !== 28) {
    throw new Error('Invalid recovery id');
  }

  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
  return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
};

/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 * @param {String} sig
 * @return {Object}
 */
exports.fromRpcSig = function (sig) {
  sig = exports.toBuffer(sig);

  // NOTE: with potential introduction of chainId this might need to be updated
  if (sig.length !== 65) {
    throw new Error('Invalid signature length');
  }

  var v = sig[64];
  // support both versions of `eth_sign` responses
  if (v < 27) {
    v += 27;
  }

  return {
    v: v,
    r: sig.slice(0, 32),
    s: sig.slice(32, 64)
  };
};

/**
 * Returns the ethereum address of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
exports.privateToAddress = function (privateKey) {
  return exports.publicToAddress(privateToPublic(privateKey));
};

/**
 * Checks if the address is a valid. Accepts checksummed addresses too
 * @param {String} address
 * @return {Boolean}
 */
exports.isValidAddress = function (address) {
  return (/^0x[0-9a-fA-F]{40}$/.test(address)
  );
};

/**
  * Checks if a given address is a zero address
  * @method isZeroAddress
  * @param {String} address
  * @return {Boolean}
  */
exports.isZeroAddress = function (address) {
  var zeroAddress = exports.zeroAddress();
  return zeroAddress === exports.addHexPrefix(address);
};

/**
 * Returns a checksummed address
 * @param {String} address
 * @return {String}
 */
exports.toChecksumAddress = function (address) {
  address = exports.stripHexPrefix(address).toLowerCase();
  var hash = exports.keccak(address).toString('hex');
  var ret = '0x';

  for (var i = 0; i < address.length; i++) {
    if (parseInt(hash[i], 16) >= 8) {
      ret += address[i].toUpperCase();
    } else {
      ret += address[i];
    }
  }

  return ret;
};

/**
 * Checks if the address is a valid checksummed address
 * @param {Buffer} address
 * @return {Boolean}
 */
exports.isValidChecksumAddress = function (address) {
  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
};

/**
 * Generates an address of a newly created contract
 * @param {Buffer} from the address which is creating this new address
 * @param {Buffer} nonce the nonce of the from account
 * @return {Buffer}
 */
exports.generateAddress = function (from, nonce) {
  from = exports.toBuffer(from);
  nonce = new BN(nonce);

  if (nonce.isZero()) {
    // in RLP we want to encode null in the case of zero nonce
    // read the RLP documentation for an answer if you dare
    nonce = null;
  } else {
    nonce = Buffer.from(nonce.toArray());
  }

  // Only take the lower 160bits of the hash
  return exports.rlphash([from, nonce]).slice(-20);
};

/**
 * Returns true if the supplied address belongs to a precompiled account (Byzantium)
 * @param {Buffer|String} address
 * @return {Boolean}
 */
exports.isPrecompiled = function (address) {
  var a = exports.unpad(address);
  return a.length === 1 && a[0] >= 1 && a[0] <= 8;
};

/**
 * Adds "0x" to a given `String` if it does not already start with "0x"
 * @param {String} str
 * @return {String}
 */
exports.addHexPrefix = function (str) {
  if (typeof str !== 'string') {
    return str;
  }

  return exports.isHexPrefixed(str) ? str : '0x' + str;
};

/**
 * Validate ECDSA signature
 * @method isValidSignature
 * @param {Buffer} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @param {Boolean} [homestead=true]
 * @return {Boolean}
 */

exports.isValidSignature = function (v, r, s, homestead) {
  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);

  if (r.length !== 32 || s.length !== 32) {
    return false;
  }

  if (v !== 27 && v !== 28) {
    return false;
  }

  r = new BN(r);
  s = new BN(s);

  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
    return false;
  }

  if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {
    return false;
  }

  return true;
};

/**
 * Converts a `Buffer` or `Array` to JSON
 * @param {Buffer|Array} ba
 * @return {Array|String|null}
 */
exports.baToJSON = function (ba) {
  if (Buffer.isBuffer(ba)) {
    return '0x' + ba.toString('hex');
  } else if (ba instanceof Array) {
    var array = [];
    for (var i = 0; i < ba.length; i++) {
      array.push(exports.baToJSON(ba[i]));
    }
    return array;
  }
};

/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param {Object} self the `Object` to define properties on
 * @param {Array} fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param {*} data data to be validated against the definitions
 */
exports.defineProperties = function (self, fields, data) {
  self.raw = [];
  self._fields = [];

  // attach the `toJSON`
  self.toJSON = function (label) {
    if (label) {
      var obj = {};
      self._fields.forEach(function (field) {
        obj[field] = '0x' + self[field].toString('hex');
      });
      return obj;
    }
    return exports.baToJSON(this.raw);
  };

  self.serialize = function serialize() {
    return rlp.encode(self.raw);
  };

  fields.forEach(function (field, i) {
    self._fields.push(field.name);
    function getter() {
      return self.raw[i];
    }
    function setter(v) {
      v = exports.toBuffer(v);

      if (v.toString('hex') === '00' && !field.allowZero) {
        v = Buffer.allocUnsafe(0);
      }

      if (field.allowLess && field.length) {
        v = exports.stripZeros(v);
        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
      } else if (!(field.allowZero && v.length === 0) && field.length) {
        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
      }

      self.raw[i] = v;
    }

    Object.defineProperty(self, field.name, {
      enumerable: true,
      configurable: true,
      get: getter,
      set: setter
    });

    if (field.default) {
      self[field.name] = field.default;
    }

    // attach alias
    if (field.alias) {
      Object.defineProperty(self, field.alias, {
        enumerable: false,
        configurable: true,
        set: setter,
        get: getter
      });
    }
  });

  // if the constuctor is passed data
  if (data) {
    if (typeof data === 'string') {
      data = Buffer.from(exports.stripHexPrefix(data), 'hex');
    }

    if (Buffer.isBuffer(data)) {
      data = rlp.decode(data);
    }

    if (Array.isArray(data)) {
      if (data.length > self._fields.length) {
        throw new Error('wrong number of fields in data');
      }

      // make sure all the items are buffers
      data.forEach(function (d, i) {
        self[self._fields[i]] = exports.toBuffer(d);
      });
    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
      var keys = Object.keys(data);
      fields.forEach(function (field) {
        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
      });
    } else {
      throw new Error('invalid data');
    }
  }
};
},{"ethereum-cryptography/keccak":"node_modules/ethereum-cryptography/keccak.js","./secp256k1-adapter":"node_modules/web3-provider-engine/node_modules/ethereumjs-util/dist/secp256k1-adapter.js","assert":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/assert/assert.js","rlp":"node_modules/rlp/dist.browser/index.js","bn.js":"node_modules/bn.js/lib/bn.js","create-hash":"node_modules/create-hash/browser.js","safe-buffer":"node_modules/web3-provider-engine/node_modules/safe-buffer/index.js","ethjs-util":"node_modules/ethjs-util/lib/index.js"}],"node_modules/pify/index.js":[function(require,module,exports) {
'use strict';

const processFn = (fn, opts) => function () {
  const P = opts.promiseModule;
  const args = new Array(arguments.length);
  for (let i = 0; i < arguments.length; i++) {
    args[i] = arguments[i];
  }
  return new P((resolve, reject) => {
    if (opts.errorFirst) {
      args.push(function (err, result) {
        if (opts.multiArgs) {
          const results = new Array(arguments.length - 1);
          for (let i = 1; i < arguments.length; i++) {
            results[i - 1] = arguments[i];
          }
          if (err) {
            results.unshift(err);
            reject(results);
          } else {
            resolve(results);
          }
        } else if (err) {
          reject(err);
        } else {
          resolve(result);
        }
      });
    } else {
      args.push(function (result) {
        if (opts.multiArgs) {
          const results = new Array(arguments.length - 1);
          for (let i = 0; i < arguments.length; i++) {
            results[i] = arguments[i];
          }
          resolve(results);
        } else {
          resolve(result);
        }
      });
    }
    fn.apply(this, args);
  });
};
module.exports = (obj, opts) => {
  opts = Object.assign({
    exclude: [/.+(Sync|Stream)$/],
    errorFirst: true,
    promiseModule: Promise
  }, opts);
  const filter = key => {
    const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);
    return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
  };
  let ret;
  if (typeof obj === 'function') {
    ret = function () {
      if (opts.excludeMain) {
        return obj.apply(this, arguments);
      }
      return processFn(obj, opts).apply(this, arguments);
    };
  } else {
    ret = Object.create(Object.getPrototypeOf(obj));
  }
  for (const key in obj) {
    // eslint-disable-line guard-for-in
    const x = obj[key];
    ret[key] = typeof x === 'function' && filter(key) ? processFn(x, opts) : x;
  }
  return ret;
};
},{}],"node_modules/xtend/immutable.js":[function(require,module,exports) {
module.exports = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;
function extend() {
  var target = {};
  for (var i = 0; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
}
},{}],"node_modules/json-rpc-random-id/index.js":[function(require,module,exports) {
module.exports = IdIterator

function IdIterator(opts){
  opts = opts || {}
  var max = opts.max || Number.MAX_SAFE_INTEGER
  var idCounter = typeof opts.start !== 'undefined' ? opts.start : Math.floor(Math.random() * max)

  return function createRandomId () {
    idCounter = idCounter % max
    return idCounter++
  }

}
},{}],"node_modules/eth-query/index.js":[function(require,module,exports) {
const extend = require('xtend')
const createRandomId = require('json-rpc-random-id')()

module.exports = EthQuery


function EthQuery(provider){
  const self = this
  self.currentProvider = provider
}

//
// base queries
//

// default block
EthQuery.prototype.getBalance =                          generateFnWithDefaultBlockFor(2, 'eth_getBalance')
EthQuery.prototype.getCode =                             generateFnWithDefaultBlockFor(2, 'eth_getCode')
EthQuery.prototype.getTransactionCount =                 generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount')
EthQuery.prototype.getStorageAt =                        generateFnWithDefaultBlockFor(3, 'eth_getStorageAt')
EthQuery.prototype.call =                                generateFnWithDefaultBlockFor(2, 'eth_call')
// standard
EthQuery.prototype.protocolVersion =                     generateFnFor('eth_protocolVersion')
EthQuery.prototype.syncing =                             generateFnFor('eth_syncing')
EthQuery.prototype.coinbase =                            generateFnFor('eth_coinbase')
EthQuery.prototype.mining =                              generateFnFor('eth_mining')
EthQuery.prototype.hashrate =                            generateFnFor('eth_hashrate')
EthQuery.prototype.gasPrice =                            generateFnFor('eth_gasPrice')
EthQuery.prototype.accounts =                            generateFnFor('eth_accounts')
EthQuery.prototype.blockNumber =                         generateFnFor('eth_blockNumber')
EthQuery.prototype.getBlockTransactionCountByHash =      generateFnFor('eth_getBlockTransactionCountByHash')
EthQuery.prototype.getBlockTransactionCountByNumber =    generateFnFor('eth_getBlockTransactionCountByNumber')
EthQuery.prototype.getUncleCountByBlockHash =            generateFnFor('eth_getUncleCountByBlockHash')
EthQuery.prototype.getUncleCountByBlockNumber =          generateFnFor('eth_getUncleCountByBlockNumber')
EthQuery.prototype.sign =                                generateFnFor('eth_sign')
EthQuery.prototype.sendTransaction =                     generateFnFor('eth_sendTransaction')
EthQuery.prototype.sendRawTransaction =                  generateFnFor('eth_sendRawTransaction')
EthQuery.prototype.estimateGas =                         generateFnFor('eth_estimateGas')
EthQuery.prototype.getBlockByHash =                      generateFnFor('eth_getBlockByHash')
EthQuery.prototype.getBlockByNumber =                    generateFnFor('eth_getBlockByNumber')
EthQuery.prototype.getTransactionByHash =                generateFnFor('eth_getTransactionByHash')
EthQuery.prototype.getTransactionByBlockHashAndIndex =   generateFnFor('eth_getTransactionByBlockHashAndIndex')
EthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex')
EthQuery.prototype.getTransactionReceipt =               generateFnFor('eth_getTransactionReceipt')
EthQuery.prototype.getUncleByBlockHashAndIndex =         generateFnFor('eth_getUncleByBlockHashAndIndex')
EthQuery.prototype.getUncleByBlockNumberAndIndex =       generateFnFor('eth_getUncleByBlockNumberAndIndex')
EthQuery.prototype.getCompilers =                        generateFnFor('eth_getCompilers')
EthQuery.prototype.compileLLL =                          generateFnFor('eth_compileLLL')
EthQuery.prototype.compileSolidity =                     generateFnFor('eth_compileSolidity')
EthQuery.prototype.compileSerpent =                      generateFnFor('eth_compileSerpent')
EthQuery.prototype.newFilter =                           generateFnFor('eth_newFilter')
EthQuery.prototype.newBlockFilter =                      generateFnFor('eth_newBlockFilter')
EthQuery.prototype.newPendingTransactionFilter =         generateFnFor('eth_newPendingTransactionFilter')
EthQuery.prototype.uninstallFilter =                     generateFnFor('eth_uninstallFilter')
EthQuery.prototype.getFilterChanges =                    generateFnFor('eth_getFilterChanges')
EthQuery.prototype.getFilterLogs =                       generateFnFor('eth_getFilterLogs')
EthQuery.prototype.getLogs =                             generateFnFor('eth_getLogs')
EthQuery.prototype.getWork =                             generateFnFor('eth_getWork')
EthQuery.prototype.submitWork =                          generateFnFor('eth_submitWork')
EthQuery.prototype.submitHashrate =                      generateFnFor('eth_submitHashrate')

// network level

EthQuery.prototype.sendAsync = function(opts, cb){
  const self = this
  self.currentProvider.sendAsync(createPayload(opts), function(err, response){
    if (!err && response.error) err = new Error('EthQuery - RPC Error - '+response.error.message)
    if (err) return cb(err)
    cb(null, response.result)
  })
}

// util

function generateFnFor(methodName){
  return function(){
    const self = this
    var args = [].slice.call(arguments)
    var cb = args.pop()
    self.sendAsync({
      method: methodName,
      params: args,
    }, cb)
  }
}

function generateFnWithDefaultBlockFor(argCount, methodName){
  return function(){
    const self = this
    var args = [].slice.call(arguments)
    var cb = args.pop()
    // set optional default block param
    if (args.length < argCount) args.push('latest')
    self.sendAsync({
      method: methodName,
      params: args,
    }, cb)
  }
}

function createPayload(data){
  return extend({
    // defaults
    id: createRandomId(),
    jsonrpc: '2.0',
    params: [],
    // user-specified
  }, data)
}

},{"xtend":"node_modules/xtend/immutable.js","json-rpc-random-id":"node_modules/json-rpc-random-id/index.js"}],"node_modules/events/events.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}
function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};
function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});
EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};
function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0) er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;
  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }
  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }
  return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}
function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;
  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;
    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }
    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }
  return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this;

  // not listening for removeListener, no need to emit
  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;
    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }
  listeners = events[type];
  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }
  return this;
};
function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};
EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events !== undefined) {
    var evlistener = events[type];
    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i) copy[i] = arr[i];
  return copy;
}
function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];
  list.pop();
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }
    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}
},{}],"node_modules/safe-event-emitter/index.js":[function(require,module,exports) {
const util = require('util')
const EventEmitter = require('events/')

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
}

module.exports = SafeEventEmitter


function SafeEventEmitter() {
  EventEmitter.call(this)
}

util.inherits(SafeEventEmitter, EventEmitter)

SafeEventEmitter.prototype.emit = function (type) {
  // copied from https://github.com/Gozala/events/blob/master/events.js
  // modified lines are commented with "edited:"
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    // edited: using safeApply
    safeApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      // edited: using safeApply
      safeApply(listeners[i], this, args);
  }

  return true;
}

function safeApply(handler, context, args) {
  try {
    ReflectApply(handler, context, args)
  } catch (err) {
    // throw error after timeout so as not to interupt the stack
    setTimeout(() => {
      throw err
    })
  }
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

},{"util":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/util/util.js","events/":"node_modules/events/events.js"}],"node_modules/eth-block-tracker/src/base.js":[function(require,module,exports) {
const EthQuery = require('eth-query')
const pify = require('pify')
const SafeEventEmitter = require('safe-event-emitter')

const sec = 1000

const calculateSum = (accumulator, currentValue) => accumulator + currentValue
const blockTrackerEvents = ['sync', 'latest']

class BaseBlockTracker extends SafeEventEmitter {

  //
  // public
  //

  constructor (opts = {}) {
    super()
    // config
    this._blockResetDuration = opts.blockResetDuration || 20 * sec
    // state
    this._blockResetTimeout
    this._currentBlock = null
    this._isRunning = false
    // bind functions for internal use
    this._onNewListener = this._onNewListener.bind(this)
    this._onRemoveListener = this._onRemoveListener.bind(this)
    this._resetCurrentBlock = this._resetCurrentBlock.bind(this)
    // listen for handler changes
    this._setupInternalEvents()
  }

  isRunning () {
    return this._isRunning
  }

  getCurrentBlock () {
    return this._currentBlock
  }

  async getLatestBlock () {
    // return if available
    if (this._currentBlock) return this._currentBlock
    // wait for a new latest block
    const latestBlock = await new Promise(resolve => this.once('latest', resolve))
    // return newly set current block
    return latestBlock
  }

  // dont allow module consumer to remove our internal event listeners
  removeAllListeners (eventName) {
    // perform default behavior, preserve fn arity
    if (eventName) {
      super.removeAllListeners(eventName)
    } else {
      super.removeAllListeners()
    }
    // re-add internal events
    this._setupInternalEvents()
    // trigger stop check just in case
    this._onRemoveListener()
  }

  //
  // to be implemented in subclass
  //

  _start () {
    // default behavior is noop
  }

  _end () {
    // default behavior is noop
  }

  //
  // private
  //

  _setupInternalEvents () {
    // first remove listeners for idempotence
    this.removeListener('newListener', this._onNewListener)
    this.removeListener('removeListener', this._onRemoveListener)
    // then add them
    this.on('newListener', this._onNewListener)
    this.on('removeListener', this._onRemoveListener)
  }

  _onNewListener (eventName, handler) {
    // `newListener` is called *before* the listener is added
    if (!blockTrackerEvents.includes(eventName)) return
    this._maybeStart()
  }

  _onRemoveListener (eventName, handler) {
    // `removeListener` is called *after* the listener is removed
    if (this._getBlockTrackerEventCount() > 0) return
    this._maybeEnd()
  }

  _maybeStart () {
    if (this._isRunning) return
    this._isRunning = true
    // cancel setting latest block to stale
    this._cancelBlockResetTimeout()
    this._start()
  }

  _maybeEnd () {
    if (!this._isRunning) return
    this._isRunning = false
    this._setupBlockResetTimeout()
    this._end()
  }

  _getBlockTrackerEventCount () {
    return blockTrackerEvents
      .map(eventName => this.listenerCount(eventName))
      .reduce(calculateSum)
  }

  _newPotentialLatest (newBlock) {
    const currentBlock = this._currentBlock
    // only update if blok number is higher
    if (currentBlock && (hexToInt(newBlock) <= hexToInt(currentBlock))) return
    this._setCurrentBlock(newBlock)
  }

  _setCurrentBlock (newBlock) {
    const oldBlock = this._currentBlock
    this._currentBlock = newBlock
    this.emit('latest', newBlock)
    this.emit('sync', { oldBlock, newBlock })
  }

  _setupBlockResetTimeout () {
    // clear any existing timeout
    this._cancelBlockResetTimeout()
    // clear latest block when stale
    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration)
    // nodejs - dont hold process open
    if (this._blockResetTimeout.unref) {
      this._blockResetTimeout.unref()
    }
  }

  _cancelBlockResetTimeout () {
    clearTimeout(this._blockResetTimeout)
  }

  _resetCurrentBlock () {
    this._currentBlock = null
  }

}

module.exports = BaseBlockTracker

function hexToInt(hexInt) {
  return Number.parseInt(hexInt, 16)
}

},{"eth-query":"node_modules/eth-query/index.js","pify":"node_modules/pify/index.js","safe-event-emitter":"node_modules/safe-event-emitter/index.js"}],"node_modules/eth-block-tracker/src/polling.js":[function(require,module,exports) {
const pify = require('pify')
const BaseBlockTracker = require('./base')

const sec = 1000

class PollingBlockTracker extends BaseBlockTracker {

  constructor (opts = {}) {
    // parse + validate args
    if (!opts.provider) throw new Error('PollingBlockTracker - no provider specified.')
    const pollingInterval = opts.pollingInterval || 20 * sec
    const retryTimeout = opts.retryTimeout || pollingInterval / 10
    const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true
    const setSkipCacheFlag = opts.setSkipCacheFlag || false
    // BaseBlockTracker constructor
    super(Object.assign({
      blockResetDuration: pollingInterval,
    }, opts))
    // config
    this._provider = opts.provider
    this._pollingInterval = pollingInterval
    this._retryTimeout = retryTimeout
    this._keepEventLoopActive = keepEventLoopActive
    this._setSkipCacheFlag = setSkipCacheFlag
  }

  //
  // public
  //

  // trigger block polling
  async checkForLatestBlock () {
    await this._updateLatestBlock()
    return await this.getLatestBlock()
  }

  //
  // private
  //

  _start () {
    this._performSync().catch(err => this.emit('error', err))
  }

  async _performSync () {
    while (this._isRunning) {
      try {
        await this._updateLatestBlock()
        await timeout(this._pollingInterval, !this._keepEventLoopActive)
      } catch (err) {
        const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\n${err.stack}`)
        try {
          this.emit('error', newErr)
        } catch (emitErr) {
          console.error(newErr)
        }
        await timeout(this._retryTimeout, !this._keepEventLoopActive)
      }
    }
  }

  async _updateLatestBlock () {
    // fetch + set latest block
    const latestBlock = await this._fetchLatestBlock()
    this._newPotentialLatest(latestBlock)
  }

  async _fetchLatestBlock () {
    const req = { jsonrpc: "2.0", id: 1, method: 'eth_blockNumber', params: [] }
    if (this._setSkipCacheFlag) req.skipCache = true
    const res = await pify((cb) => this._provider.sendAsync(req, cb))()
    if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\n${res.error}`)
    return res.result
  }

}

module.exports = PollingBlockTracker

function timeout (duration, unref) {
  return new Promise(resolve => {
    const timoutRef = setTimeout(resolve, duration)
    // don't keep process open
    if (timoutRef.unref && unref) {
      timoutRef.unref()
    }
  })
}

},{"pify":"node_modules/pify/index.js","./base":"node_modules/eth-block-tracker/src/base.js"}],"node_modules/lodash/_freeGlobal.js":[function(require,module,exports) {
var global = arguments[3];
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

},{}],"node_modules/lodash/_root.js":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":"node_modules/lodash/_freeGlobal.js"}],"node_modules/lodash/_Symbol.js":[function(require,module,exports) {
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":"node_modules/lodash/_root.js"}],"node_modules/lodash/_getRawTag.js":[function(require,module,exports) {
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":"node_modules/lodash/_Symbol.js"}],"node_modules/lodash/_objectToString.js":[function(require,module,exports) {
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],"node_modules/lodash/_baseGetTag.js":[function(require,module,exports) {
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":"node_modules/lodash/_Symbol.js","./_getRawTag":"node_modules/lodash/_getRawTag.js","./_objectToString":"node_modules/lodash/_objectToString.js"}],"node_modules/lodash/isObject.js":[function(require,module,exports) {
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],"node_modules/lodash/isFunction.js":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":"node_modules/lodash/_baseGetTag.js","./isObject":"node_modules/lodash/isObject.js"}],"node_modules/lodash/isLength.js":[function(require,module,exports) {
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],"node_modules/lodash/isArrayLike.js":[function(require,module,exports) {
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":"node_modules/lodash/isFunction.js","./isLength":"node_modules/lodash/isLength.js"}],"node_modules/async/internal/breakLoop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
// A temporary value used to identify if the loop should be broken.
// See #1064, #1293
exports.default = {};
module.exports = exports["default"];
},{}],"node_modules/lodash/noop.js":[function(require,module,exports) {
/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = noop;

},{}],"node_modules/async/internal/once.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = once;
function once(fn) {
    return function () {
        if (fn === null) return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
    };
}
module.exports = exports["default"];
},{}],"node_modules/async/internal/getIterator.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (coll) {
    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
};

var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;

module.exports = exports['default'];
},{}],"node_modules/lodash/_baseTimes.js":[function(require,module,exports) {
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],"node_modules/lodash/isObjectLike.js":[function(require,module,exports) {
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],"node_modules/lodash/_baseIsArguments.js":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":"node_modules/lodash/_baseGetTag.js","./isObjectLike":"node_modules/lodash/isObjectLike.js"}],"node_modules/lodash/isArguments.js":[function(require,module,exports) {
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":"node_modules/lodash/_baseIsArguments.js","./isObjectLike":"node_modules/lodash/isObjectLike.js"}],"node_modules/lodash/isArray.js":[function(require,module,exports) {
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],"node_modules/lodash/stubFalse.js":[function(require,module,exports) {
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}],"node_modules/lodash/isBuffer.js":[function(require,module,exports) {

var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":"node_modules/lodash/_root.js","./stubFalse":"node_modules/lodash/stubFalse.js"}],"node_modules/lodash/_isIndex.js":[function(require,module,exports) {
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

},{}],"node_modules/lodash/_baseIsTypedArray.js":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":"node_modules/lodash/_baseGetTag.js","./isLength":"node_modules/lodash/isLength.js","./isObjectLike":"node_modules/lodash/isObjectLike.js"}],"node_modules/lodash/_baseUnary.js":[function(require,module,exports) {
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],"node_modules/lodash/_nodeUtil.js":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

},{"./_freeGlobal":"node_modules/lodash/_freeGlobal.js"}],"node_modules/lodash/isTypedArray.js":[function(require,module,exports) {
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":"node_modules/lodash/_baseIsTypedArray.js","./_baseUnary":"node_modules/lodash/_baseUnary.js","./_nodeUtil":"node_modules/lodash/_nodeUtil.js"}],"node_modules/lodash/_arrayLikeKeys.js":[function(require,module,exports) {
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":"node_modules/lodash/_baseTimes.js","./isArguments":"node_modules/lodash/isArguments.js","./isArray":"node_modules/lodash/isArray.js","./isBuffer":"node_modules/lodash/isBuffer.js","./_isIndex":"node_modules/lodash/_isIndex.js","./isTypedArray":"node_modules/lodash/isTypedArray.js"}],"node_modules/lodash/_isPrototype.js":[function(require,module,exports) {
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],"node_modules/lodash/_overArg.js":[function(require,module,exports) {
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],"node_modules/lodash/_nativeKeys.js":[function(require,module,exports) {
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

},{"./_overArg":"node_modules/lodash/_overArg.js"}],"node_modules/lodash/_baseKeys.js":[function(require,module,exports) {
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

},{"./_isPrototype":"node_modules/lodash/_isPrototype.js","./_nativeKeys":"node_modules/lodash/_nativeKeys.js"}],"node_modules/lodash/keys.js":[function(require,module,exports) {
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{"./_arrayLikeKeys":"node_modules/lodash/_arrayLikeKeys.js","./_baseKeys":"node_modules/lodash/_baseKeys.js","./isArrayLike":"node_modules/lodash/isArrayLike.js"}],"node_modules/async/internal/iterator.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = iterator;

var _isArrayLike = require('lodash/isArrayLike');

var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

var _getIterator = require('./getIterator');

var _getIterator2 = _interopRequireDefault(_getIterator);

var _keys = require('lodash/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createArrayIterator(coll) {
    var i = -1;
    var len = coll.length;
    return function next() {
        return ++i < len ? { value: coll[i], key: i } : null;
    };
}

function createES2015Iterator(iterator) {
    var i = -1;
    return function next() {
        var item = iterator.next();
        if (item.done) return null;
        i++;
        return { value: item.value, key: i };
    };
}

function createObjectIterator(obj) {
    var okeys = (0, _keys2.default)(obj);
    var i = -1;
    var len = okeys.length;
    return function next() {
        var key = okeys[++i];
        if (key === '__proto__') {
            return next();
        }
        return i < len ? { value: obj[key], key: key } : null;
    };
}

function iterator(coll) {
    if ((0, _isArrayLike2.default)(coll)) {
        return createArrayIterator(coll);
    }

    var iterator = (0, _getIterator2.default)(coll);
    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
}
module.exports = exports['default'];
},{"lodash/isArrayLike":"node_modules/lodash/isArrayLike.js","./getIterator":"node_modules/async/internal/getIterator.js","lodash/keys":"node_modules/lodash/keys.js"}],"node_modules/async/internal/onlyOnce.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = onlyOnce;
function onlyOnce(fn) {
    return function () {
        if (fn === null) throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
    };
}
module.exports = exports["default"];
},{}],"node_modules/async/internal/eachOfLimit.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _eachOfLimit;

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _once = require('./once');

var _once2 = _interopRequireDefault(_once);

var _iterator = require('./iterator');

var _iterator2 = _interopRequireDefault(_iterator);

var _onlyOnce = require('./onlyOnce');

var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

var _breakLoop = require('./breakLoop');

var _breakLoop2 = _interopRequireDefault(_breakLoop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _eachOfLimit(limit) {
    return function (obj, iteratee, callback) {
        callback = (0, _once2.default)(callback || _noop2.default);
        if (limit <= 0 || !obj) {
            return callback(null);
        }
        var nextElem = (0, _iterator2.default)(obj);
        var done = false;
        var running = 0;
        var looping = false;

        function iterateeCallback(err, value) {
            running -= 1;
            if (err) {
                done = true;
                callback(err);
            } else if (value === _breakLoop2.default || done && running <= 0) {
                done = true;
                return callback(null);
            } else if (!looping) {
                replenish();
            }
        }

        function replenish() {
            looping = true;
            while (running < limit && !done) {
                var elem = nextElem();
                if (elem === null) {
                    done = true;
                    if (running <= 0) {
                        callback(null);
                    }
                    return;
                }
                running += 1;
                iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));
            }
            looping = false;
        }

        replenish();
    };
}
module.exports = exports['default'];
},{"lodash/noop":"node_modules/lodash/noop.js","./once":"node_modules/async/internal/once.js","./iterator":"node_modules/async/internal/iterator.js","./onlyOnce":"node_modules/async/internal/onlyOnce.js","./breakLoop":"node_modules/async/internal/breakLoop.js"}],"node_modules/async/internal/slice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = slice;
function slice(arrayLike, start) {
    start = start | 0;
    var newLen = Math.max(arrayLike.length - start, 0);
    var newArr = Array(newLen);
    for (var idx = 0; idx < newLen; idx++) {
        newArr[idx] = arrayLike[start + idx];
    }
    return newArr;
}
module.exports = exports["default"];
},{}],"node_modules/async/internal/initialParams.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (fn) {
    return function () /*...args, callback*/{
        var args = (0, _slice2.default)(arguments);
        var callback = args.pop();
        fn.call(this, args, callback);
    };
};

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = exports['default'];
},{"./slice":"node_modules/async/internal/slice.js"}],"node_modules/async/internal/setImmediate.js":[function(require,module,exports) {
var process = require("process");
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hasNextTick = exports.hasSetImmediate = undefined;
exports.fallback = fallback;
exports.wrap = wrap;

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = exports.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

function fallback(fn) {
    setTimeout(fn, 0);
}

function wrap(defer) {
    return function (fn /*, ...args*/) {
        var args = (0, _slice2.default)(arguments, 1);
        defer(function () {
            fn.apply(null, args);
        });
    };
}

var _defer;

if (hasSetImmediate) {
    _defer = setImmediate;
} else if (hasNextTick) {
    _defer = process.nextTick;
} else {
    _defer = fallback;
}

exports.default = wrap(_defer);
},{"./slice":"node_modules/async/internal/slice.js","process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/async/asyncify.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = asyncify;

var _isObject = require('lodash/isObject');

var _isObject2 = _interopRequireDefault(_isObject);

var _initialParams = require('./internal/initialParams');

var _initialParams2 = _interopRequireDefault(_initialParams);

var _setImmediate = require('./internal/setImmediate');

var _setImmediate2 = _interopRequireDefault(_setImmediate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */
function asyncify(func) {
    return (0, _initialParams2.default)(function (args, callback) {
        var result;
        try {
            result = func.apply(this, args);
        } catch (e) {
            return callback(e);
        }
        // if result is Promise object
        if ((0, _isObject2.default)(result) && typeof result.then === 'function') {
            result.then(function (value) {
                invokeCallback(callback, null, value);
            }, function (err) {
                invokeCallback(callback, err.message ? err : new Error(err));
            });
        } else {
            callback(null, result);
        }
    });
}

function invokeCallback(callback, error, value) {
    try {
        callback(error, value);
    } catch (e) {
        (0, _setImmediate2.default)(rethrow, e);
    }
}

function rethrow(error) {
    throw error;
}
module.exports = exports['default'];
},{"lodash/isObject":"node_modules/lodash/isObject.js","./internal/initialParams":"node_modules/async/internal/initialParams.js","./internal/setImmediate":"node_modules/async/internal/setImmediate.js"}],"node_modules/async/internal/wrapAsync.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isAsync = undefined;

var _asyncify = require('../asyncify');

var _asyncify2 = _interopRequireDefault(_asyncify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var supportsSymbol = typeof Symbol === 'function';

function isAsync(fn) {
    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
}

function wrapAsync(asyncFn) {
    return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
}

exports.default = wrapAsync;
exports.isAsync = isAsync;
},{"../asyncify":"node_modules/async/asyncify.js"}],"node_modules/async/eachOfLimit.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = eachOfLimit;

var _eachOfLimit2 = require('./internal/eachOfLimit');

var _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);

var _wrapAsync = require('./internal/wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name eachOfLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`. The `key` is the item's key, or index in the case of an
 * array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
function eachOfLimit(coll, limit, iteratee, callback) {
  (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);
}
module.exports = exports['default'];
},{"./internal/eachOfLimit":"node_modules/async/internal/eachOfLimit.js","./internal/wrapAsync":"node_modules/async/internal/wrapAsync.js"}],"node_modules/async/internal/doLimit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = doLimit;
function doLimit(fn, limit) {
    return function (iterable, iteratee, callback) {
        return fn(iterable, limit, iteratee, callback);
    };
}
module.exports = exports["default"];
},{}],"node_modules/async/eachOf.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (coll, iteratee, callback) {
    var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
    eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
};

var _isArrayLike = require('lodash/isArrayLike');

var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

var _breakLoop = require('./internal/breakLoop');

var _breakLoop2 = _interopRequireDefault(_breakLoop);

var _eachOfLimit = require('./eachOfLimit');

var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

var _doLimit = require('./internal/doLimit');

var _doLimit2 = _interopRequireDefault(_doLimit);

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _once = require('./internal/once');

var _once2 = _interopRequireDefault(_once);

var _onlyOnce = require('./internal/onlyOnce');

var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

var _wrapAsync = require('./internal/wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eachOf implementation optimized for array-likes
function eachOfArrayLike(coll, iteratee, callback) {
    callback = (0, _once2.default)(callback || _noop2.default);
    var index = 0,
        completed = 0,
        length = coll.length;
    if (length === 0) {
        callback(null);
    }

    function iteratorCallback(err, value) {
        if (err) {
            callback(err);
        } else if (++completed === length || value === _breakLoop2.default) {
            callback(null);
        }
    }

    for (; index < length; index++) {
        iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
    }
}

// a generic version of eachOf which can handle array, object, and iterator cases.
var eachOfGeneric = (0, _doLimit2.default)(_eachOfLimit2.default, Infinity);

/**
 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
 * to the iteratee.
 *
 * @name eachOf
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEachOf
 * @category Collection
 * @see [async.each]{@link module:Collections.each}
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each
 * item in `coll`.
 * The `key` is the item's key, or index in the case of an array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @example
 *
 * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
 * var configs = {};
 *
 * async.forEachOf(obj, function (value, key, callback) {
 *     fs.readFile(__dirname + value, "utf8", function (err, data) {
 *         if (err) return callback(err);
 *         try {
 *             configs[key] = JSON.parse(data);
 *         } catch (e) {
 *             return callback(e);
 *         }
 *         callback();
 *     });
 * }, function (err) {
 *     if (err) console.error(err.message);
 *     // configs is now a map of JSON data
 *     doSomethingWith(configs);
 * });
 */
module.exports = exports['default'];
},{"lodash/isArrayLike":"node_modules/lodash/isArrayLike.js","./internal/breakLoop":"node_modules/async/internal/breakLoop.js","./eachOfLimit":"node_modules/async/eachOfLimit.js","./internal/doLimit":"node_modules/async/internal/doLimit.js","lodash/noop":"node_modules/lodash/noop.js","./internal/once":"node_modules/async/internal/once.js","./internal/onlyOnce":"node_modules/async/internal/onlyOnce.js","./internal/wrapAsync":"node_modules/async/internal/wrapAsync.js"}],"node_modules/async/internal/doParallel.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = doParallel;

var _eachOf = require('../eachOf');

var _eachOf2 = _interopRequireDefault(_eachOf);

var _wrapAsync = require('./wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function doParallel(fn) {
    return function (obj, iteratee, callback) {
        return fn(_eachOf2.default, obj, (0, _wrapAsync2.default)(iteratee), callback);
    };
}
module.exports = exports['default'];
},{"../eachOf":"node_modules/async/eachOf.js","./wrapAsync":"node_modules/async/internal/wrapAsync.js"}],"node_modules/async/internal/map.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _asyncMap;

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _wrapAsync = require('./wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncMap(eachfn, arr, iteratee, callback) {
    callback = callback || _noop2.default;
    arr = arr || [];
    var results = [];
    var counter = 0;
    var _iteratee = (0, _wrapAsync2.default)(iteratee);

    eachfn(arr, function (value, _, callback) {
        var index = counter++;
        _iteratee(value, function (err, v) {
            results[index] = v;
            callback(err);
        });
    }, function (err) {
        callback(err, results);
    });
}
module.exports = exports['default'];
},{"lodash/noop":"node_modules/lodash/noop.js","./wrapAsync":"node_modules/async/internal/wrapAsync.js"}],"node_modules/async/map.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _doParallel = require('./internal/doParallel');

var _doParallel2 = _interopRequireDefault(_doParallel);

var _map = require('./internal/map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produces a new collection of values by mapping each value in `coll` through
 * the `iteratee` function. The `iteratee` is called with an item from `coll`
 * and a callback for when it has finished processing. Each of these callback
 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
 * `iteratee` passes an error to its callback, the main `callback` (for the
 * `map` function) is immediately called with the error.
 *
 * Note, that since this function applies the `iteratee` to each item in
 * parallel, there is no guarantee that the `iteratee` functions will complete
 * in order. However, the results array will be in the same order as the
 * original `coll`.
 *
 * If `map` is passed an Object, the results will be an Array.  The results
 * will roughly be in the order of the original Objects' keys (but this can
 * vary across JavaScript engines).
 *
 * @name map
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an Array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @example
 *
 * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
 *     // results is now an array of stats for each file
 * });
 */
exports.default = (0, _doParallel2.default)(_map2.default);
module.exports = exports['default'];
},{"./internal/doParallel":"node_modules/async/internal/doParallel.js","./internal/map":"node_modules/async/internal/map.js"}],"node_modules/async/internal/withoutIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _withoutIndex;
function _withoutIndex(iteratee) {
    return function (value, index, callback) {
        return iteratee(value, callback);
    };
}
module.exports = exports["default"];
},{}],"node_modules/async/eachLimit.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = eachLimit;

var _eachOfLimit = require('./internal/eachOfLimit');

var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

var _withoutIndex = require('./internal/withoutIndex');

var _withoutIndex2 = _interopRequireDefault(_withoutIndex);

var _wrapAsync = require('./internal/wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
 *
 * @name eachLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfLimit`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
function eachLimit(coll, limit, iteratee, callback) {
  (0, _eachOfLimit2.default)(limit)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
}
module.exports = exports['default'];
},{"./internal/eachOfLimit":"node_modules/async/internal/eachOfLimit.js","./internal/withoutIndex":"node_modules/async/internal/withoutIndex.js","./internal/wrapAsync":"node_modules/async/internal/wrapAsync.js"}],"node_modules/async/eachSeries.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _eachLimit = require('./eachLimit');

var _eachLimit2 = _interopRequireDefault(_eachLimit);

var _doLimit = require('./internal/doLimit');

var _doLimit2 = _interopRequireDefault(_doLimit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
 *
 * @name eachSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfSeries`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
exports.default = (0, _doLimit2.default)(_eachLimit2.default, 1);
module.exports = exports['default'];
},{"./eachLimit":"node_modules/async/eachLimit.js","./internal/doLimit":"node_modules/async/internal/doLimit.js"}],"node_modules/web3-provider-engine/util/stoplight.js":[function(require,module,exports) {
const EventEmitter = require('events').EventEmitter
const inherits = require('util').inherits

module.exports = Stoplight


inherits(Stoplight, EventEmitter)

function Stoplight(){
  const self = this
  EventEmitter.call(self)
  self.isLocked = true
}

Stoplight.prototype.go = function(){
  const self = this
  self.isLocked = false
  self.emit('unlock')
}

Stoplight.prototype.stop = function(){
  const self = this
  self.isLocked = true
  self.emit('lock')
}

Stoplight.prototype.await = function(fn){
  const self = this
  if (self.isLocked) {
    self.once('unlock', fn)
  } else {
    setTimeout(fn)
  }
}
},{"events":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/events/events.js","util":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/util/util.js"}],"node_modules/jsonify/lib/parse.js":[function(require,module,exports) {
'use strict';

var at; // The index of the current character
var ch; // The current character
var escapee = {
	'"': '"',
	'\\': '\\',
	'/': '/',
	b: '\b',
	f: '\f',
	n: '\n',
	r: '\r',
	t: '\t'
};
var text;

// Call error when something is wrong.
function error(m) {
	throw {
		name: 'SyntaxError',
		message: m,
		at: at,
		text: text
	};
}

function next(c) {
	// If a c parameter is provided, verify that it matches the current character.
	if (c && c !== ch) {
		error("Expected '" + c + "' instead of '" + ch + "'");
	}

	// Get the next character. When there are no more characters, return the empty string.

	ch = text.charAt(at);
	at += 1;
	return ch;
}

function number() {
	// Parse a number value.
	var num;
	var str = '';

	if (ch === '-') {
		str = '-';
		next('-');
	}
	while (ch >= '0' && ch <= '9') {
		str += ch;
		next();
	}
	if (ch === '.') {
		str += '.';
		while (next() && ch >= '0' && ch <= '9') {
			str += ch;
		}
	}
	if (ch === 'e' || ch === 'E') {
		str += ch;
		next();
		if (ch === '-' || ch === '+') {
			str += ch;
			next();
		}
		while (ch >= '0' && ch <= '9') {
			str += ch;
			next();
		}
	}
	num = Number(str);
	if (!isFinite(num)) {
		error('Bad number');
	}
	return num;
}

function string() {
	// Parse a string value.
	var hex;
	var i;
	var str = '';
	var uffff;

	// When parsing for string values, we must look for " and \ characters.
	if (ch === '"') {
		while (next()) {
			if (ch === '"') {
				next();
				return str;
			} else if (ch === '\\') {
				next();
				if (ch === 'u') {
					uffff = 0;
					for (i = 0; i < 4; i += 1) {
						hex = parseInt(next(), 16);
						if (!isFinite(hex)) {
							break;
						}
						uffff = (uffff * 16) + hex;
					}
					str += String.fromCharCode(uffff);
				} else if (typeof escapee[ch] === 'string') {
					str += escapee[ch];
				} else {
					break;
				}
			} else {
				str += ch;
			}
		}
	}
	error('Bad string');
}

// Skip whitespace.
function white() {
	while (ch && ch <= ' ') {
		next();
	}
}

// true, false, or null.
function word() {
	switch (ch) {
		case 't':
			next('t');
			next('r');
			next('u');
			next('e');
			return true;
		case 'f':
			next('f');
			next('a');
			next('l');
			next('s');
			next('e');
			return false;
		case 'n':
			next('n');
			next('u');
			next('l');
			next('l');
			return null;
		default:
			error("Unexpected '" + ch + "'");
	}
}

// Parse an array value.
function array() {
	var arr = [];

	if (ch === '[') {
		next('[');
		white();
		if (ch === ']') {
			next(']');
			return arr; // empty array
		}
		while (ch) {
			arr.push(value()); // eslint-disable-line no-use-before-define
			white();
			if (ch === ']') {
				next(']');
				return arr;
			}
			next(',');
			white();
		}
	}
	error('Bad array');
}

// Parse an object value.
function object() {
	var key;
	var obj = {};

	if (ch === '{') {
		next('{');
		white();
		if (ch === '}') {
			next('}');
			return obj; // empty object
		}
		while (ch) {
			key = string();
			white();
			next(':');
			if (Object.prototype.hasOwnProperty.call(obj, key)) {
				error('Duplicate key "' + key + '"');
			}
			obj[key] = value(); // eslint-disable-line no-use-before-define
			white();
			if (ch === '}') {
				next('}');
				return obj;
			}
			next(',');
			white();
		}
	}
	error('Bad object');
}

// Parse a JSON value. It could be an object, an array, a string, a number, or a word.
function value() {
	white();
	switch (ch) {
		case '{':
			return object();
		case '[':
			return array();
		case '"':
			return string();
		case '-':
			return number();
		default:
			return ch >= '0' && ch <= '9' ? number() : word();
	}
}

// Return the json_parse function. It will have access to all of the above functions and variables.
module.exports = function (source, reviver) {
	var result;

	text = source;
	at = 0;
	ch = ' ';
	result = value();
	white();
	if (ch) {
		error('Syntax error');
	}

	// If there is a reviver function, we recursively walk the new structure,
	// passing each name/value pair to the reviver function for possible
	// transformation, starting with a temporary root object that holds the result
	// in an empty key. If there is not a reviver function, we simply return the
	// result.

	return typeof reviver === 'function' ? (function walk(holder, key) {
		var k;
		var v;
		var val = holder[key];
		if (val && typeof val === 'object') {
			for (k in value) {
				if (Object.prototype.hasOwnProperty.call(val, k)) {
					v = walk(val, k);
					if (typeof v === 'undefined') {
						delete val[k];
					} else {
						val[k] = v;
					}
				}
			}
		}
		return reviver.call(holder, key, val);
	}({ '': result }, '')) : result;
};

},{}],"node_modules/jsonify/lib/stringify.js":[function(require,module,exports) {
'use strict';

var escapable = /[\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
var gap;
var indent;
var meta = { // table of character substitutions
	'\b': '\\b',
	'\t': '\\t',
	'\n': '\\n',
	'\f': '\\f',
	'\r': '\\r',
	'"': '\\"',
	'\\': '\\\\'
};
var rep;

function quote(string) {
	// If the string contains no control characters, no quote characters, and no
	// backslash characters, then we can safely slap some quotes around it.
	// Otherwise we must also replace the offending characters with safe escape sequences.

	escapable.lastIndex = 0;
	return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
		var c = meta[a];
		return typeof c === 'string' ? c
			: '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	}) + '"' : '"' + string + '"';
}

function str(key, holder) {
	// Produce a string from holder[key].
	var i; // The loop counter.
	var k; // The member key.
	var v; // The member value.
	var length;
	var mind = gap;
	var partial;
	var value = holder[key];

	// If the value has a toJSON method, call it to obtain a replacement value.
	if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
		value = value.toJSON(key);
	}

	// If we were called with a replacer function, then call the replacer to obtain a replacement value.
	if (typeof rep === 'function') {
		value = rep.call(holder, key, value);
	}

	// What happens next depends on the value's type.
	switch (typeof value) {
		case 'string':
			return quote(value);

		case 'number':
			// JSON numbers must be finite. Encode non-finite numbers as null.
			return isFinite(value) ? String(value) : 'null';

		case 'boolean':
		case 'null':
			// If the value is a boolean or null, convert it to a string. Note:
			// typeof null does not produce 'null'. The case is included here in
			// the remote chance that this gets fixed someday.
			return String(value);

		case 'object':
			if (!value) {
				return 'null';
			}
			gap += indent;
			partial = [];

			// Array.isArray
			if (Object.prototype.toString.apply(value) === '[object Array]') {
				length = value.length;
				for (i = 0; i < length; i += 1) {
					partial[i] = str(i, value) || 'null';
				}

				// Join all of the elements together, separated with commas, and wrap them in brackets.
				v = partial.length === 0 ? '[]' : gap
					? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
					: '[' + partial.join(',') + ']';
				gap = mind;
				return v;
			}

			// If the replacer is an array, use it to select the members to be stringified.
			if (rep && typeof rep === 'object') {
				length = rep.length;
				for (i = 0; i < length; i += 1) {
					k = rep[i];
					if (typeof k === 'string') {
						v = str(k, value);
						if (v) {
							partial.push(quote(k) + (gap ? ': ' : ':') + v);
						}
					}
				}
			} else {
				// Otherwise, iterate through all of the keys in the object.
				for (k in value) {
					if (Object.prototype.hasOwnProperty.call(value, k)) {
						v = str(k, value);
						if (v) {
							partial.push(quote(k) + (gap ? ': ' : ':') + v);
						}
					}
				}
			}

			// Join all of the member texts together, separated with commas, and wrap them in braces.

			v = partial.length === 0 ? '{}' : gap
				? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
				: '{' + partial.join(',') + '}';
			gap = mind;
			return v;
		default:
	}
}

module.exports = function (value, replacer, space) {
	var i;
	gap = '';
	indent = '';

	// If the space parameter is a number, make an indent string containing that many spaces.
	if (typeof space === 'number') {
		for (i = 0; i < space; i += 1) {
			indent += ' ';
		}
	} else if (typeof space === 'string') {
		// If the space parameter is a string, it will be used as the indent string.
		indent = space;
	}

	// If there is a replacer, it must be a function or an array. Otherwise, throw an error.
	rep = replacer;
	if (
		replacer
		&& typeof replacer !== 'function'
		&& (typeof replacer !== 'object' || typeof replacer.length !== 'number')
	) {
		throw new Error('JSON.stringify');
	}

	// Make a fake root object containing our value under the key of ''.
	// Return the result of stringifying the value.
	return str('', { '': value });
};

},{}],"node_modules/jsonify/index.js":[function(require,module,exports) {
'use strict';

exports.parse = require('./lib/parse');
exports.stringify = require('./lib/stringify');

},{"./lib/parse":"node_modules/jsonify/lib/parse.js","./lib/stringify":"node_modules/jsonify/lib/stringify.js"}],"node_modules/json-stable-stringify/index.js":[function(require,module,exports) {
'use strict';

var json = typeof JSON !== 'undefined' ? JSON : require('jsonify');

var isArray = Array.isArray || function (x) {
	return {}.toString.call(x) === '[object Array]';
};

var objectKeys = Object.keys || function (obj) {
	var has = Object.prototype.hasOwnProperty || function () { return true; };
	var keys = [];
	for (var key in obj) {
		if (has.call(obj, key)) { keys.push(key); }
	}
	return keys;
};

module.exports = function (obj, opts) {
	if (!opts) { opts = {}; }
	if (typeof opts === 'function') { opts = { cmp: opts }; }
	var space = opts.space || '';
	if (typeof space === 'number') { space = Array(space + 1).join(' '); }
	var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;
	var replacer = opts.replacer || function (key, value) { return value; };

	var cmp = opts.cmp && (function (f) {
		return function (node) {
			return function (a, b) {
				var aobj = { key: a, value: node[a] };
				var bobj = { key: b, value: node[b] };
				return f(aobj, bobj);
			};
		};
	}(opts.cmp));

	var seen = [];
	return (function stringify(parent, key, node, level) {
		var indent = space ? '\n' + new Array(level + 1).join(space) : '';
		var colonSeparator = space ? ': ' : ':';

		if (node && node.toJSON && typeof node.toJSON === 'function') {
			node = node.toJSON();
		}

		node = replacer.call(parent, key, node);

		if (node === undefined) {
			return;
		}
		if (typeof node !== 'object' || node === null) {
			return json.stringify(node);
		}
		if (isArray(node)) {
			var out = [];
			for (var i = 0; i < node.length; i++) {
				var item = stringify(node, i, node[i], level + 1) || json.stringify(null);
				out.push(indent + space + item);
			}
			return '[' + out.join(',') + indent + ']';
		}

		if (seen.indexOf(node) !== -1) {
			if (cycles) { return json.stringify('__cycle__'); }
			throw new TypeError('Converting circular structure to JSON');
		} else { seen.push(node); }

		var keys = objectKeys(node).sort(cmp && cmp(node));
		var out = [];
		for (var i = 0; i < keys.length; i++) {
			var key = keys[i];
			var value = stringify(node, key, node[key], level + 1);

			if (!value) { continue; }

			var keyValue = json.stringify(key)
					+ colonSeparator
					+ value;

			out.push(indent + space + keyValue);
		}
		seen.splice(seen.indexOf(node), 1);
		return '{' + out.join(',') + indent + '}';

	}({ '': obj }, '', obj, 0));
};

},{"jsonify":"node_modules/jsonify/index.js"}],"node_modules/web3-provider-engine/util/rpc-cache-utils.js":[function(require,module,exports) {
const stringify = require('json-stable-stringify')

module.exports = {
  cacheIdentifierForPayload: cacheIdentifierForPayload,
  canCache: canCache,
  blockTagForPayload: blockTagForPayload,
  paramsWithoutBlockTag: paramsWithoutBlockTag,
  blockTagParamIndex: blockTagParamIndex,
  cacheTypeForPayload: cacheTypeForPayload,
}

function cacheIdentifierForPayload(payload, opts = {}){
  if (!canCache(payload)) return null
  const { includeBlockRef } = opts
  const params = includeBlockRef ? payload.params : paramsWithoutBlockTag(payload)
  return payload.method + ':' + stringify(params)
}

function canCache(payload){
  return cacheTypeForPayload(payload) !== 'never'
}

function blockTagForPayload(payload){
  var index = blockTagParamIndex(payload);

  // Block tag param not passed.
  if (index >= payload.params.length) {
    return null;
  }

  return payload.params[index];
}

function paramsWithoutBlockTag(payload){
  var index = blockTagParamIndex(payload);

  // Block tag param not passed.
  if (index >= payload.params.length) {
    return payload.params;
  }

  // eth_getBlockByNumber has the block tag first, then the optional includeTx? param
  if (payload.method === 'eth_getBlockByNumber') {
    return payload.params.slice(1);
  }

  return payload.params.slice(0,index);
}

function blockTagParamIndex(payload){
  switch(payload.method) {
    // blockTag is third param
    case 'eth_getStorageAt':
      return 2
    // blockTag is second param
    case 'eth_getBalance':
    case 'eth_getCode':
    case 'eth_getTransactionCount':
    case 'eth_call':
    case 'eth_estimateGas':
      return 1
    // blockTag is first param
    case 'eth_getBlockByNumber':
      return 0
    // there is no blockTag
    default:
      return undefined
  }
}

function cacheTypeForPayload(payload) {
  switch (payload.method) {
    // cache permanently
    case 'web3_clientVersion':
    case 'web3_sha3':
    case 'eth_protocolVersion':
    case 'eth_getBlockTransactionCountByHash':
    case 'eth_getUncleCountByBlockHash':
    case 'eth_getCode':
    case 'eth_getBlockByHash':
    case 'eth_getTransactionByHash':
    case 'eth_getTransactionByBlockHashAndIndex':
    case 'eth_getTransactionReceipt':
    case 'eth_getUncleByBlockHashAndIndex':
    case 'eth_getCompilers':
    case 'eth_compileLLL':
    case 'eth_compileSolidity':
    case 'eth_compileSerpent':
    case 'shh_version':
      return 'perma'

    // cache until fork
    case 'eth_getBlockByNumber':
    case 'eth_getBlockTransactionCountByNumber':
    case 'eth_getUncleCountByBlockNumber':
    case 'eth_getTransactionByBlockNumberAndIndex':
    case 'eth_getUncleByBlockNumberAndIndex':
      return 'fork'

    // cache for block
    case 'eth_gasPrice':
    case 'eth_getBalance':
    case 'eth_getStorageAt':
    case 'eth_getTransactionCount':
    case 'eth_call':
    case 'eth_estimateGas':
    case 'eth_getFilterLogs':
    case 'eth_getLogs':
    case 'eth_blockNumber':
      return 'block'

    // never cache
    case 'net_version':
    case 'net_peerCount':
    case 'net_listening':
    case 'eth_syncing':
    case 'eth_sign':
    case 'eth_coinbase':
    case 'eth_mining':
    case 'eth_hashrate':
    case 'eth_accounts':
    case 'eth_sendTransaction':
    case 'eth_sendRawTransaction':
    case 'eth_newFilter':
    case 'eth_newBlockFilter':
    case 'eth_newPendingTransactionFilter':
    case 'eth_uninstallFilter':
    case 'eth_getFilterChanges':
    case 'eth_getWork':
    case 'eth_submitWork':
    case 'eth_submitHashrate':
    case 'db_putString':
    case 'db_getString':
    case 'db_putHex':
    case 'db_getHex':
    case 'shh_post':
    case 'shh_newIdentity':
    case 'shh_hasIdentity':
    case 'shh_newGroup':
    case 'shh_addToGroup':
    case 'shh_newFilter':
    case 'shh_uninstallFilter':
    case 'shh_getFilterChanges':
    case 'shh_getMessages':
      return 'never'
  }
}

},{"json-stable-stringify":"node_modules/json-stable-stringify/index.js"}],"node_modules/web3-provider-engine/util/random-id.js":[function(require,module,exports) {
module.exports = createRandomId


function createRandomId () {
  // random id
  return Math.floor(Number.MAX_SAFE_INTEGER * Math.random())
}
},{}],"node_modules/web3-provider-engine/util/create-payload.js":[function(require,module,exports) {
const getRandomId = require('./random-id.js')
const extend = require('xtend')

module.exports = createPayload


function createPayload(data){
  return extend({
    // defaults
    id: getRandomId(),
    jsonrpc: '2.0',
    params: [],
    // user-specified
  }, data)
}

},{"./random-id.js":"node_modules/web3-provider-engine/util/random-id.js","xtend":"node_modules/xtend/immutable.js"}],"node_modules/web3-provider-engine/index.js":[function(require,module,exports) {
const EventEmitter = require('events').EventEmitter
const inherits = require('util').inherits
const ethUtil = require('ethereumjs-util')
const EthBlockTracker = require('eth-block-tracker')
const map = require('async/map')
const eachSeries = require('async/eachSeries')
const Stoplight = require('./util/stoplight.js')
const cacheUtils = require('./util/rpc-cache-utils.js')
const createPayload = require('./util/create-payload.js')
const noop = function(){}

module.exports = Web3ProviderEngine


inherits(Web3ProviderEngine, EventEmitter)

function Web3ProviderEngine(opts) {
  const self = this
  EventEmitter.call(self)
  self.setMaxListeners(30)
  // parse options
  opts = opts || {}

  // block polling
  const directProvider = { sendAsync: self._handleAsync.bind(self) }
  const blockTrackerProvider = opts.blockTrackerProvider || directProvider
  self._blockTracker = opts.blockTracker || new EthBlockTracker({
    provider: blockTrackerProvider,
    pollingInterval: opts.pollingInterval || 4000,
    setSkipCacheFlag: true,
  })

  // set initialization blocker
  self._ready = new Stoplight()

  // local state
  self.currentBlock = null
  self._providers = []
}

// public

Web3ProviderEngine.prototype.start = function(cb = noop){
  const self = this

  // trigger start
  self._ready.go()

  // on new block, request block body and emit as events
  self._blockTracker.on('latest', (blockNumber) => {
    // get block body
    self._getBlockByNumberWithRetry(blockNumber, (err, block) => {
      if (err) {
        this.emit('error', err)
        return
      }
      if (!block) {
        console.log(block)
        this.emit('error', new Error("Could not find block"))
        return
      }
      const bufferBlock = toBufferBlock(block)
      // set current + emit "block" event
      self._setCurrentBlock(bufferBlock)
      // emit other events
      self.emit('rawBlock', block)
      self.emit('latest', block)
    })
  })

  // forward other events
  self._blockTracker.on('sync', self.emit.bind(self, 'sync'))
  self._blockTracker.on('error', self.emit.bind(self, 'error'))

  // update state
  self._running = true
  // signal that we started
  self.emit('start')
}

Web3ProviderEngine.prototype.stop = function(){
  const self = this
  // stop block polling by removing event listeners
  self._blockTracker.removeAllListeners()
  // update state
  self._running = false
  // signal that we stopped
  self.emit('stop')
}

Web3ProviderEngine.prototype.isRunning = function(){
  const self = this
  return self._running
}

Web3ProviderEngine.prototype.addProvider = function(source, index){
  const self = this
  if (typeof index === 'number') {
    self._providers.splice(index, 0, source)
  } else {
    self._providers.push(source)
  }
  source.setEngine(this)
}

Web3ProviderEngine.prototype.removeProvider = function(source){
  const self = this
  const index = self._providers.indexOf(source)
  if (index < 0) throw new Error('Provider not found.')
  self._providers.splice(index, 1)
}

Web3ProviderEngine.prototype.send = function(payload){
  throw new Error('Web3ProviderEngine does not support synchronous requests.')
}

Web3ProviderEngine.prototype.sendAsync = function(payload, cb){
  const self = this
  self._ready.await(function(){

    if (Array.isArray(payload)) {
      // handle batch
      map(payload, self._handleAsync.bind(self), cb)
    } else {
      // handle single
      self._handleAsync(payload, cb)
    }

  })
}

// private

Web3ProviderEngine.prototype._getBlockByNumberWithRetry = function(blockNumber, cb) {
  const self = this

  let retriesRemaining = 5

  attemptRequest()
  return

  function attemptRequest () {
    self._getBlockByNumber(blockNumber, afterRequest)
  }

  function afterRequest (err, block) {
    // anomalous error occurred
    if (err) return cb(err)
    // block not ready yet
    if (!block) {
      if (retriesRemaining > 0) {
        // wait 1s then try again
        retriesRemaining--
        setTimeout(function () {
          attemptRequest()
        }, 1000)
        return
      } else {
        // give up, return a null block
        cb(null, null)
        return
      }
    }
    // otherwise return result
    cb(null, block)
    return
  }
}


Web3ProviderEngine.prototype._getBlockByNumber = function(blockNumber, cb) {
  const req = createPayload({ method: 'eth_getBlockByNumber', params: [blockNumber, false], skipCache: true })
  this._handleAsync(req, (err, res) => {
    if (err) return cb(err)
    return cb(null, res.result)
  })
}

Web3ProviderEngine.prototype._handleAsync = function(payload, finished) {
  var self = this
  var currentProvider = -1
  var result = null
  var error = null

  var stack = []

  next()

  function next(after) {
    currentProvider += 1
    stack.unshift(after)

    // Bubbled down as far as we could go, and the request wasn't
    // handled. Return an error.
    if (currentProvider >= self._providers.length) {
      end(new Error('Request for method "' + payload.method + '" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'))
    } else {
      try {
        var provider = self._providers[currentProvider]
        provider.handleRequest(payload, next, end)
      } catch (e) {
        end(e)
      }
    }
  }

  function end(_error, _result) {
    error = _error
    result = _result

    eachSeries(stack, function(fn, callback) {

      if (fn) {
        fn(error, result, callback)
      } else {
        callback()
      }
    }, function() {

      var resultObj = {
        id: payload.id,
        jsonrpc: payload.jsonrpc,
        result: result
      }

      if (error != null) {
        resultObj.error = {
          message: error.stack || error.message || error,
          code: -32000
        }
        // respond with both error formats
        finished(error, resultObj)
      } else {
        finished(null, resultObj)
      }
    })
  }
}

//
// from remote-data
//

Web3ProviderEngine.prototype._setCurrentBlock = function(block){
  const self = this
  self.currentBlock = block
  self.emit('block', block)
}

// util

function toBufferBlock (jsonBlock) {
  return {
    number:           ethUtil.toBuffer(jsonBlock.number),
    hash:             ethUtil.toBuffer(jsonBlock.hash),
    parentHash:       ethUtil.toBuffer(jsonBlock.parentHash),
    nonce:            ethUtil.toBuffer(jsonBlock.nonce),
    mixHash:          ethUtil.toBuffer(jsonBlock.mixHash),
    sha3Uncles:       ethUtil.toBuffer(jsonBlock.sha3Uncles),
    logsBloom:        ethUtil.toBuffer(jsonBlock.logsBloom),
    transactionsRoot: ethUtil.toBuffer(jsonBlock.transactionsRoot),
    stateRoot:        ethUtil.toBuffer(jsonBlock.stateRoot),
    receiptsRoot:     ethUtil.toBuffer(jsonBlock.receiptRoot || jsonBlock.receiptsRoot),
    miner:            ethUtil.toBuffer(jsonBlock.miner),
    difficulty:       ethUtil.toBuffer(jsonBlock.difficulty),
    totalDifficulty:  ethUtil.toBuffer(jsonBlock.totalDifficulty),
    size:             ethUtil.toBuffer(jsonBlock.size),
    extraData:        ethUtil.toBuffer(jsonBlock.extraData),
    gasLimit:         ethUtil.toBuffer(jsonBlock.gasLimit),
    gasUsed:          ethUtil.toBuffer(jsonBlock.gasUsed),
    timestamp:        ethUtil.toBuffer(jsonBlock.timestamp),
    transactions:     jsonBlock.transactions,
  }
}

},{"events":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/events/events.js","util":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/util/util.js","ethereumjs-util":"node_modules/web3-provider-engine/node_modules/ethereumjs-util/dist/index.js","eth-block-tracker":"node_modules/eth-block-tracker/src/polling.js","async/map":"node_modules/async/map.js","async/eachSeries":"node_modules/async/eachSeries.js","./util/stoplight.js":"node_modules/web3-provider-engine/util/stoplight.js","./util/rpc-cache-utils.js":"node_modules/web3-provider-engine/util/rpc-cache-utils.js","./util/create-payload.js":"node_modules/web3-provider-engine/util/create-payload.js"}],"node_modules/web3-provider-engine/subproviders/subprovider.js":[function(require,module,exports) {
const createPayload = require('../util/create-payload.js')

module.exports = SubProvider

// this is the base class for a subprovider -- mostly helpers


function SubProvider() {

}

SubProvider.prototype.setEngine = function(engine) {
  const self = this
  if (self.engine) return
  self.engine = engine
  engine.on('block', function(block) {
    self.currentBlock = block
  })

  engine.on('start', function () {
    self.start()
  })

  engine.on('stop', function () {
    self.stop()
  })
}

SubProvider.prototype.handleRequest = function(payload, next, end) {
  throw new Error('Subproviders should override `handleRequest`.')
}

SubProvider.prototype.emitPayload = function(payload, cb){
  const self = this
  self.engine.sendAsync(createPayload(payload), cb)
}

// dummies for overriding

SubProvider.prototype.stop = function () {}

SubProvider.prototype.start = function () {}

},{"../util/create-payload.js":"node_modules/web3-provider-engine/util/create-payload.js"}],"node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js":[function(require,module,exports) {
const Subprovider = require('./subprovider.js')

// wraps a json-rpc-engine middleware in a subprovider interface

class JsonRpcEngineMiddlewareSubprovider extends Subprovider {

  // take a constructorFn to call once we have a reference to the engine
  constructor (constructorFn) {
    super()
    if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified')
    this._constructorFn = constructorFn
  }

  // this is called once the subprovider has been added to the provider engine
  setEngine (engine) {
    if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice')
    const blockTracker = engine._blockTracker
    const middleware = this._constructorFn({ engine, provider: engine, blockTracker })
    if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware')
    if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function')
    this.middleware = middleware
  }

  handleRequest (req, provEngNext, provEngEnd) {
    const res = { id: req.id }
    this.middleware(req, res, middlewareNext, middlewareEnd)

    function middlewareNext (handler) {
      provEngNext((err, result, cb) => {
        // update response object with result or error
        if (err) {
          delete res.result
          res.error = { message: err.message || err }
        } else {
          res.result = result
        }
        // call middleware's next handler (even if error)
        if (handler) {
          handler(cb)
        } else {
          cb()
        }
      })
    }

    function middlewareEnd (err) {
      if (err) return provEngEnd(err)
      provEngEnd(null, res.result)
    }
  }

}

module.exports = JsonRpcEngineMiddlewareSubprovider

},{"./subprovider.js":"node_modules/web3-provider-engine/subproviders/subprovider.js"}],"node_modules/eth-json-rpc-middleware/cache-utils.js":[function(require,module,exports) {
const stringify = require('json-stable-stringify')

module.exports = {
  cacheIdentifierForPayload: cacheIdentifierForPayload,
  canCache: canCache,
  blockTagForPayload: blockTagForPayload,
  paramsWithoutBlockTag: paramsWithoutBlockTag,
  blockTagParamIndex: blockTagParamIndex,
  cacheTypeForPayload: cacheTypeForPayload
}

function cacheIdentifierForPayload (payload, skipBlockRef) {
  const simpleParams = skipBlockRef ? paramsWithoutBlockTag(payload) : payload.params
  if (canCache(payload)) {
    return payload.method + ':' + stringify(simpleParams)
  } else {
    return null
  }
}

function canCache (payload) {
  return cacheTypeForPayload(payload) !== 'never'
}

function blockTagForPayload (payload) {
  let index = blockTagParamIndex(payload)

  // Block tag param not passed.
  if (index >= payload.params.length) {
    return null
  }

  return payload.params[index]
}

function paramsWithoutBlockTag (payload) {
  const index = blockTagParamIndex(payload)

  // Block tag param not passed.
  if (index >= payload.params.length) {
    return payload.params
  }

  // eth_getBlockByNumber has the block tag first, then the optional includeTx? param
  if (payload.method === 'eth_getBlockByNumber') {
    return payload.params.slice(1)
  }

  return payload.params.slice(0, index)
}

function blockTagParamIndex (payload) {
  switch (payload.method) {
    // blockTag is at index 2
    case 'eth_getStorageAt':
      return 2
    // blockTag is at index 1
    case 'eth_getBalance':
    case 'eth_getCode':
    case 'eth_getTransactionCount':
    case 'eth_call':
      return 1
    // blockTag is at index 0
    case 'eth_getBlockByNumber':
      return 0
    // there is no blockTag
    default:
      return undefined
  }
}

function cacheTypeForPayload (payload) {
  switch (payload.method) {
    // cache permanently
    case 'web3_clientVersion':
    case 'web3_sha3':
    case 'eth_protocolVersion':
    case 'eth_getBlockTransactionCountByHash':
    case 'eth_getUncleCountByBlockHash':
    case 'eth_getCode':
    case 'eth_getBlockByHash':
    case 'eth_getTransactionByHash':
    case 'eth_getTransactionByBlockHashAndIndex':
    case 'eth_getTransactionReceipt':
    case 'eth_getUncleByBlockHashAndIndex':
    case 'eth_getCompilers':
    case 'eth_compileLLL':
    case 'eth_compileSolidity':
    case 'eth_compileSerpent':
    case 'shh_version':
    case 'test_permaCache':
      return 'perma'

    // cache until fork
    case 'eth_getBlockByNumber':
    case 'eth_getBlockTransactionCountByNumber':
    case 'eth_getUncleCountByBlockNumber':
    case 'eth_getTransactionByBlockNumberAndIndex':
    case 'eth_getUncleByBlockNumberAndIndex':
    case 'test_forkCache':
      return 'fork'

    // cache for block
    case 'eth_gasPrice':
    case 'eth_blockNumber':
    case 'eth_getBalance':
    case 'eth_getStorageAt':
    case 'eth_getTransactionCount':
    case 'eth_call':
    case 'eth_estimateGas':
    case 'eth_getFilterLogs':
    case 'eth_getLogs':
    case 'test_blockCache':
      return 'block'

    // never cache
    case 'net_version':
    case 'net_peerCount':
    case 'net_listening':
    case 'eth_syncing':
    case 'eth_sign':
    case 'eth_coinbase':
    case 'eth_mining':
    case 'eth_hashrate':
    case 'eth_accounts':
    case 'eth_sendTransaction':
    case 'eth_sendRawTransaction':
    case 'eth_newFilter':
    case 'eth_newBlockFilter':
    case 'eth_newPendingTransactionFilter':
    case 'eth_uninstallFilter':
    case 'eth_getFilterChanges':
    case 'eth_getWork':
    case 'eth_submitWork':
    case 'eth_submitHashrate':
    case 'db_putString':
    case 'db_getString':
    case 'db_putHex':
    case 'db_getHex':
    case 'shh_post':
    case 'shh_newIdentity':
    case 'shh_hasIdentity':
    case 'shh_newGroup':
    case 'shh_addToGroup':
    case 'shh_newFilter':
    case 'shh_uninstallFilter':
    case 'shh_getFilterChanges':
    case 'shh_getMessages':
    case 'test_neverCache':
      return 'never'
  }
}

},{"json-stable-stringify":"node_modules/json-stable-stringify/index.js"}],"node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createAsyncMiddleware.js":[function(require,module,exports) {
/**
 * JsonRpcEngine only accepts callback-based middleware directly.
 * createAsyncMiddleware exists to enable consumers to pass in async middleware
 * functions.
 *
 * Async middleware have no "end" function. Instead, they "end" if they return
 * without calling "next". Rather than passing in explicit return handlers,
 * async middleware can simply await "next", and perform operations on the
 * response object when execution resumes.
 *
 * To accomplish this, createAsyncMiddleware passes the async middleware a
 * wrapped "next" function. That function calls the internal JsonRpcEngine
 * "next" function with a return handler that resolves a promise when called.
 *
 * The return handler will always be called. Its resolution of the promise
 * enables the control flow described above.
 */

module.exports = function createAsyncMiddleware (asyncMiddleware) {
  return (req, res, next, end) => {

    // nextPromise is the key to the implementation
    // it is resolved by the return handler passed to the
    // "next" function
    let resolveNextPromise
    const nextPromise = new Promise((resolve) => {
      resolveNextPromise = resolve
    })

    let returnHandlerCallback, nextWasCalled

    const asyncNext = async () => {

      nextWasCalled = true

      next((callback) => { // eslint-disable-line callback-return
        returnHandlerCallback = callback
        resolveNextPromise()
      })
      await nextPromise
    }

    asyncMiddleware(req, res, asyncNext)
      .then(async () => {
        if (nextWasCalled) {
          await nextPromise // we must wait until the return handler is called
          returnHandlerCallback(null)
        } else {
          end(null)
        }
      })
      .catch((error) => {
        if (returnHandlerCallback) {
          returnHandlerCallback(error)
        } else {
          end(error)
        }
      })
  }
}

},{}],"node_modules/eth-json-rpc-middleware/block-cache.js":[function(require,module,exports) {
const cacheUtils = require('./cache-utils.js')
const createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')
// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925
const emptyValues = [undefined, null, '\u003cnil\u003e']

module.exports = createBlockCacheMiddleware


function createBlockCacheMiddleware(opts = {}) {
  // validate options
  const { blockTracker } = opts
  if (!blockTracker) throw new Error('createBlockCacheMiddleware - No BlockTracker specified')

  // create caching strategies
  const blockCache = new BlockCacheStrategy()
  const strategies = {
    perma: blockCache,
    block: blockCache,
    fork: blockCache,
  }

  return createAsyncMiddleware(async (req, res, next) => {
    // allow cach to be skipped if so specified
    if (req.skipCache) {
      return next()
    }
    // check type and matching strategy
    const type = cacheUtils.cacheTypeForPayload(req)
    const strategy = strategies[type]
    // If there's no strategy in place, pass it down the chain.
    if (!strategy) {
      return next()
    }
    // If the strategy can't cache this request, ignore it.
    if (!strategy.canCacheRequest(req)) {
      return next()
    }

    // get block reference (number or keyword)
    let blockTag = cacheUtils.blockTagForPayload(req)
    if (!blockTag) blockTag = 'latest'

    // get exact block number
    let requestedBlockNumber
    if (blockTag === 'earliest') {
      // this just exists for symmetry with "latest"
      requestedBlockNumber = '0x00'
    } else if (blockTag === 'latest') {
      // fetch latest block number
      const latestBlockNumber = await blockTracker.getLatestBlock()
      // clear all cache before latest block
      blockCache.clearBefore(latestBlockNumber)
      requestedBlockNumber = latestBlockNumber
    } else {
      // We have a hex number
      requestedBlockNumber = blockTag
    }

    // end on a hit, continue on a miss
    const cacheResult = await strategy.get(req, requestedBlockNumber)
    if (cacheResult === undefined) {
      // cache miss
      // wait for other middleware to handle request
      await next()
      // add result to cache
      await strategy.set(req, requestedBlockNumber, res.result)
    } else {
      // fill in result from cache
      res.result = cacheResult
    }
  })
}


//
// Cache Strategies
//

class BlockCacheStrategy {
  
  constructor () {
    this.cache = {}
  }

  getBlockCacheForPayload (payload, blockNumberHex) {
    const blockNumber = Number.parseInt(blockNumberHex, 16)
    let blockCache = this.cache[blockNumber]
    // create new cache if necesary
    if (!blockCache) {
      const newCache = {}
      this.cache[blockNumber] = newCache
      blockCache = newCache
    }
    return blockCache
  }

  async get (payload, requestedBlockNumber) {
    // lookup block cache
    const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)
    if (!blockCache) return
    // lookup payload in block cache
    const identifier = cacheUtils.cacheIdentifierForPayload(payload, true)
    const cached = blockCache[identifier]
    // may be undefined
    return cached
  }

  async set (payload, requestedBlockNumber, result) {
    // check if we can cached this result
    const canCache = this.canCacheResult(payload, result)
    if (!canCache) return
    // set the value in the cache
    const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)
    const identifier = cacheUtils.cacheIdentifierForPayload(payload, true)
    blockCache[identifier] = result
  }

  canCacheRequest (payload) {
    // check request method
    if (!cacheUtils.canCache(payload)) {
      return false
    }
    // check blockTag
    const blockTag = cacheUtils.blockTagForPayload(payload)
    if (blockTag === 'pending') {
      return false
    }
    // can be cached
    return true
  }

  canCacheResult (payload, result) {
    // never cache empty values (e.g. undefined)
    if (emptyValues.includes(result)) return
    // check if transactions have block reference before caching
    if (['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(payload.method)) {
      if (!result || !result.blockHash || result.blockHash === '0x0000000000000000000000000000000000000000000000000000000000000000') {
        return false
      }
    }
    // otherwise true
    return true
  }

  // removes all block caches with block number lower than `oldBlockHex`
  clearBefore (oldBlockHex){
    const self = this
    const oldBlockNumber = Number.parseInt(oldBlockHex, 16)
    // clear old caches
    Object.keys(self.cache)
      .map(Number)
      .filter(num => num < oldBlockNumber)
      .forEach(num => delete self.cache[num])
  }

}

},{"./cache-utils.js":"node_modules/eth-json-rpc-middleware/cache-utils.js","json-rpc-engine/src/createAsyncMiddleware":"node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createAsyncMiddleware.js"}],"node_modules/web3-provider-engine/subproviders/cache.js":[function(require,module,exports) {
const ProviderSubprovider = require('./json-rpc-engine-middleware')
const createBlockCacheMiddleware = require('eth-json-rpc-middleware/block-cache')

class BlockCacheSubprovider extends ProviderSubprovider {
  constructor(opts) {
    super(({ blockTracker }) => createBlockCacheMiddleware(Object.assign({ blockTracker }, opts)))
  }
}

module.exports = BlockCacheSubprovider

},{"./json-rpc-engine-middleware":"node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js","eth-json-rpc-middleware/block-cache":"node_modules/eth-json-rpc-middleware/block-cache.js"}],"node_modules/web3-provider-engine/subproviders/fixture.js":[function(require,module,exports) {
const inherits = require('util').inherits
const Subprovider = require('./subprovider.js')

module.exports = FixtureProvider

inherits(FixtureProvider, Subprovider)

function FixtureProvider(staticResponses){
  const self = this
  staticResponses = staticResponses || {}
  self.staticResponses = staticResponses
}

FixtureProvider.prototype.handleRequest = function(payload, next, end){
  const self = this
  var staticResponse = self.staticResponses[payload.method]
  // async function
  if ('function' === typeof staticResponse) {
    staticResponse(payload, next, end)
  // static response - null is valid response
  } else if (staticResponse !== undefined) {
    // return result asynchronously
    setTimeout(() => end(null, staticResponse))
  // no prepared response - skip
  } else {
    next()
  }
}

},{"util":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/util/util.js","./subprovider.js":"node_modules/web3-provider-engine/subproviders/subprovider.js"}],"node_modules/async-mutex/node_modules/tslib/tslib.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__assign = void 0;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncValues = __asyncValues;
exports.__await = __await;
exports.__awaiter = __awaiter;
exports.__classPrivateFieldGet = __classPrivateFieldGet;
exports.__classPrivateFieldIn = __classPrivateFieldIn;
exports.__classPrivateFieldSet = __classPrivateFieldSet;
exports.__createBinding = void 0;
exports.__decorate = __decorate;
exports.__esDecorate = __esDecorate;
exports.__exportStar = __exportStar;
exports.__extends = __extends;
exports.__generator = __generator;
exports.__importDefault = __importDefault;
exports.__importStar = __importStar;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__metadata = __metadata;
exports.__param = __param;
exports.__propKey = __propKey;
exports.__read = __read;
exports.__rest = __rest;
exports.__runInitializers = __runInitializers;
exports.__setFunctionName = __setFunctionName;
exports.__spread = __spread;
exports.__spreadArray = __spreadArray;
exports.__spreadArrays = __spreadArrays;
exports.__values = __values;
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
exports.__assign = __assign;
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind,
    key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _,
    done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
    context.addInitializer = function (f) {
      if (done) throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? {
      get: descriptor.get,
      set: descriptor.set
    } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0) continue;
      if (result === null || typeof result !== "object") throw new TypeError("Object expected");
      if (_ = accept(result.get)) descriptor.get = _;
      if (_ = accept(result.set)) descriptor.set = _;
      if (_ = accept(result.init)) initializers.push(_);
    } else if (_ = accept(result)) {
      if (kind === "field") initializers.push(_);else descriptor[key] = _;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
;
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
;
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
;
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", {
    configurable: true,
    value: prefix ? "".concat(prefix, " ", name) : name
  });
}
;
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
var __createBinding = Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function () {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
};
exports.__createBinding = __createBinding;
function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;
  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: false
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
    i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
;
var __setModuleDefault = Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
};
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
},{}],"node_modules/async-mutex/es6/Semaphore.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _tslib = require("tslib");
var Semaphore = /** @class */function () {
  function Semaphore(_maxConcurrency) {
    this._maxConcurrency = _maxConcurrency;
    this._queue = [];
    if (_maxConcurrency <= 0) {
      throw new Error('semaphore must be initialized to a positive value');
    }
    this._value = _maxConcurrency;
  }
  Semaphore.prototype.acquire = function () {
    var _this = this;
    var locked = this.isLocked();
    var ticket = new Promise(function (r) {
      return _this._queue.push(r);
    });
    if (!locked) this._dispatch();
    return ticket;
  };
  Semaphore.prototype.runExclusive = function (callback) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, value, release;
      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            return [4 /*yield*/, this.acquire()];
          case 1:
            _a = _b.sent(), value = _a[0], release = _a[1];
            _b.label = 2;
          case 2:
            _b.trys.push([2,, 4, 5]);
            return [4 /*yield*/, callback(value)];
          case 3:
            return [2 /*return*/, _b.sent()];
          case 4:
            release();
            return [7 /*endfinally*/];
          case 5:
            return [2 /*return*/];
        }
      });
    });
  };

  Semaphore.prototype.isLocked = function () {
    return this._value <= 0;
  };
  Semaphore.prototype.release = function () {
    if (this._maxConcurrency > 1) {
      throw new Error('this method is unavailabel on semaphores with concurrency > 1; use the scoped release returned by acquire instead');
    }
    if (this._currentReleaser) {
      var releaser = this._currentReleaser;
      this._currentReleaser = undefined;
      releaser();
    }
  };
  Semaphore.prototype._dispatch = function () {
    var _this = this;
    var nextConsumer = this._queue.shift();
    if (!nextConsumer) return;
    var released = false;
    this._currentReleaser = function () {
      if (released) return;
      released = true;
      _this._value++;
      _this._dispatch();
    };
    nextConsumer([this._value--, this._currentReleaser]);
  };
  return Semaphore;
}();
var _default = Semaphore;
exports.default = _default;
},{"tslib":"node_modules/async-mutex/node_modules/tslib/tslib.es6.js"}],"node_modules/async-mutex/es6/Mutex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _tslib = require("tslib");
var _Semaphore = _interopRequireDefault(require("./Semaphore"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var Mutex = /** @class */function () {
  function Mutex() {
    this._semaphore = new _Semaphore.default(1);
  }
  Mutex.prototype.acquire = function () {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, releaser;
      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            return [4 /*yield*/, this._semaphore.acquire()];
          case 1:
            _a = _b.sent(), releaser = _a[1];
            return [2 /*return*/, releaser];
        }
      });
    });
  };
  Mutex.prototype.runExclusive = function (callback) {
    return this._semaphore.runExclusive(function () {
      return callback();
    });
  };
  Mutex.prototype.isLocked = function () {
    return this._semaphore.isLocked();
  };
  Mutex.prototype.release = function () {
    this._semaphore.release();
  };
  return Mutex;
}();
var _default = Mutex;
exports.default = _default;
},{"tslib":"node_modules/async-mutex/node_modules/tslib/tslib.es6.js","./Semaphore":"node_modules/async-mutex/es6/Semaphore.js"}],"node_modules/async-mutex/es6/withTimeout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withTimeout = withTimeout;
var _tslib = require("tslib");
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function withTimeout(sync, timeout, timeoutError) {
  var _this = this;
  if (timeoutError === void 0) {
    timeoutError = new Error('timeout');
  }
  return {
    acquire: function () {
      return new Promise(function (resolve, reject) {
        return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {
          var isTimeout, ticket, release;
          return (0, _tslib.__generator)(this, function (_a) {
            switch (_a.label) {
              case 0:
                isTimeout = false;
                setTimeout(function () {
                  isTimeout = true;
                  reject(timeoutError);
                }, timeout);
                return [4 /*yield*/, sync.acquire()];
              case 1:
                ticket = _a.sent();
                if (isTimeout) {
                  release = Array.isArray(ticket) ? ticket[1] : ticket;
                  release();
                } else {
                  resolve(ticket);
                }
                return [2 /*return*/];
            }
          });
        });
      });
    },

    runExclusive: function (callback) {
      return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
        var release, ticket;
        return (0, _tslib.__generator)(this, function (_a) {
          switch (_a.label) {
            case 0:
              release = function () {
                return undefined;
              };
              _a.label = 1;
            case 1:
              _a.trys.push([1,, 7, 8]);
              return [4 /*yield*/, this.acquire()];
            case 2:
              ticket = _a.sent();
              if (!Array.isArray(ticket)) return [3 /*break*/, 4];
              release = ticket[1];
              return [4 /*yield*/, callback(ticket[0])];
            case 3:
              return [2 /*return*/, _a.sent()];
            case 4:
              release = ticket;
              return [4 /*yield*/, callback()];
            case 5:
              return [2 /*return*/, _a.sent()];
            case 6:
              return [3 /*break*/, 8];
            case 7:
              release();
              return [7 /*endfinally*/];
            case 8:
              return [2 /*return*/];
          }
        });
      });
    },

    release: function () {
      sync.release();
    },
    isLocked: function () {
      return sync.isLocked();
    }
  };
}
},{"tslib":"node_modules/async-mutex/node_modules/tslib/tslib.es6.js"}],"node_modules/async-mutex/es6/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Mutex", {
  enumerable: true,
  get: function () {
    return _Mutex.default;
  }
});
Object.defineProperty(exports, "Semaphore", {
  enumerable: true,
  get: function () {
    return _Semaphore.default;
  }
});
Object.defineProperty(exports, "withTimeout", {
  enumerable: true,
  get: function () {
    return _withTimeout.withTimeout;
  }
});
var _Mutex = _interopRequireDefault(require("./Mutex"));
var _Semaphore = _interopRequireDefault(require("./Semaphore"));
var _withTimeout = require("./withTimeout");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./Mutex":"node_modules/async-mutex/es6/Mutex.js","./Semaphore":"node_modules/async-mutex/es6/Semaphore.js","./withTimeout":"node_modules/async-mutex/es6/withTimeout.js"}],"node_modules/json-rpc-engine/dist/getUniqueId.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUniqueId = void 0;
// uint32 (two's complement) max
// more conservative than Number.MAX_SAFE_INTEGER
var MAX = 4294967295;
var idCounter = Math.floor(Math.random() * MAX);
function getUniqueId() {
  idCounter = (idCounter + 1) % MAX;
  return idCounter;
}
exports.getUniqueId = getUniqueId;
},{}],"node_modules/json-rpc-engine/dist/idRemapMiddleware.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIdRemapMiddleware = void 0;
var getUniqueId_1 = require("./getUniqueId");
function createIdRemapMiddleware() {
  return function (req, res, next, _end) {
    var originalId = req.id;
    var newId = getUniqueId_1.getUniqueId();
    req.id = newId;
    res.id = newId;
    next(function (done) {
      req.id = originalId;
      res.id = originalId;
      done();
    });
  };
}
exports.createIdRemapMiddleware = createIdRemapMiddleware;
},{"./getUniqueId":"node_modules/json-rpc-engine/dist/getUniqueId.js"}],"node_modules/json-rpc-engine/dist/createAsyncMiddleware.js":[function(require,module,exports) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAsyncMiddleware = void 0;
/**
 * JsonRpcEngine only accepts callback-based middleware directly.
 * createAsyncMiddleware exists to enable consumers to pass in async middleware
 * functions.
 *
 * Async middleware have no "end" function. Instead, they "end" if they return
 * without calling "next". Rather than passing in explicit return handlers,
 * async middleware can simply await "next", and perform operations on the
 * response object when execution resumes.
 *
 * To accomplish this, createAsyncMiddleware passes the async middleware a
 * wrapped "next" function. That function calls the internal JsonRpcEngine
 * "next" function with a return handler that resolves a promise when called.
 *
 * The return handler will always be called. Its resolution of the promise
 * enables the control flow described above.
 */
function createAsyncMiddleware(asyncMiddleware) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res, next, end) {
      var resolveNextPromise, nextPromise, returnHandlerCallback, nextWasCalled, asyncNext;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            // nextPromise is the key to the implementation
            // it is resolved by the return handler passed to the
            // "next" function
            nextPromise = new Promise(function (resolve) {
              resolveNextPromise = resolve;
            });
            returnHandlerCallback = null;
            nextWasCalled = false; // This will be called by the consumer's async middleware.
            asyncNext = /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                return _regeneratorRuntime().wrap(function _callee$(_context) {
                  while (1) switch (_context.prev = _context.next) {
                    case 0:
                      nextWasCalled = true;
                      // We pass a return handler to next(). When it is called by the engine,
                      // the consumer's async middleware will resume executing.
                      // eslint-disable-next-line node/callback-return
                      next(function (runReturnHandlersCallback) {
                        // This callback comes from JsonRpcEngine._runReturnHandlers
                        returnHandlerCallback = runReturnHandlersCallback;
                        resolveNextPromise();
                      });
                      _context.next = 4;
                      return nextPromise;
                    case 4:
                    case "end":
                      return _context.stop();
                  }
                }, _callee);
              }));
              return function asyncNext() {
                return _ref2.apply(this, arguments);
              };
            }();
            _context2.prev = 4;
            _context2.next = 7;
            return asyncMiddleware(req, res, asyncNext);
          case 7:
            if (!nextWasCalled) {
              _context2.next = 13;
              break;
            }
            _context2.next = 10;
            return nextPromise;
          case 10:
            // we must wait until the return handler is called
            returnHandlerCallback(null);
            _context2.next = 14;
            break;
          case 13:
            end(null);
          case 14:
            _context2.next = 19;
            break;
          case 16:
            _context2.prev = 16;
            _context2.t0 = _context2["catch"](4);
            if (returnHandlerCallback) {
              returnHandlerCallback(_context2.t0);
            } else {
              end(_context2.t0);
            }
          case 19:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[4, 16]]);
    }));
    return function (_x, _x2, _x3, _x4) {
      return _ref.apply(this, arguments);
    };
  }();
}
exports.createAsyncMiddleware = createAsyncMiddleware;
},{}],"node_modules/json-rpc-engine/dist/createScaffoldMiddleware.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createScaffoldMiddleware = void 0;
function createScaffoldMiddleware(handlers) {
  return function (req, res, next, end) {
    var handler = handlers[req.method];
    // if no handler, return
    if (handler === undefined) {
      return next();
    }
    // if handler is fn, call as middleware
    if (typeof handler === 'function') {
      return handler(req, res, next, end);
    }
    // if handler is some other value, use as result
    res.result = handler;
    return end();
  };
}
exports.createScaffoldMiddleware = createScaffoldMiddleware;
},{}],"node_modules/@metamask/safe-event-emitter/index.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
function safeApply(handler, context, args) {
    try {
        Reflect.apply(handler, context, args);
    }
    catch (err) {
        // Throw error after timeout so as not to interrupt the stack
        setTimeout(() => {
            throw err;
        });
    }
}
function arrayClone(arr) {
    const n = arr.length;
    const copy = new Array(n);
    for (let i = 0; i < n; i += 1) {
        copy[i] = arr[i];
    }
    return copy;
}
class SafeEventEmitter extends events_1.EventEmitter {
    emit(type, ...args) {
        let doError = type === 'error';
        const events = this._events;
        if (events !== undefined) {
            doError = doError && events.error === undefined;
        }
        else if (!doError) {
            return false;
        }
        // If there is no 'error' event listener then throw.
        if (doError) {
            let er;
            if (args.length > 0) {
                [er] = args;
            }
            if (er instanceof Error) {
                // Note: The comments on the `throw` lines are intentional, they show
                // up in Node's output if this results in an unhandled exception.
                throw er; // Unhandled 'error' event
            }
            // At least give some kind of context to the user
            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);
            err.context = er;
            throw err; // Unhandled 'error' event
        }
        const handler = events[type];
        if (handler === undefined) {
            return false;
        }
        if (typeof handler === 'function') {
            safeApply(handler, this, args);
        }
        else {
            const len = handler.length;
            const listeners = arrayClone(handler);
            for (let i = 0; i < len; i += 1) {
                safeApply(listeners[i], this, args);
            }
        }
        return true;
    }
}
exports.default = SafeEventEmitter;

},{"events":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/events/events.js"}],"node_modules/fast-safe-stringify/index.js":[function(require,module,exports) {
module.exports = stringify
stringify.default = stringify
stringify.stable = deterministicStringify
stringify.stableStringify = deterministicStringify

var LIMIT_REPLACE_NODE = '[...]'
var CIRCULAR_REPLACE_NODE = '[Circular]'

var arr = []
var replacerStack = []

function defaultOptions () {
  return {
    depthLimit: Number.MAX_SAFE_INTEGER,
    edgesLimit: Number.MAX_SAFE_INTEGER
  }
}

// Regular stringify
function stringify (obj, replacer, spacer, options) {
  if (typeof options === 'undefined') {
    options = defaultOptions()
  }

  decirc(obj, '', 0, [], undefined, 0, options)
  var res
  try {
    if (replacerStack.length === 0) {
      res = JSON.stringify(obj, replacer, spacer)
    } else {
      res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)
    }
  } catch (_) {
    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')
  } finally {
    while (arr.length !== 0) {
      var part = arr.pop()
      if (part.length === 4) {
        Object.defineProperty(part[0], part[1], part[3])
      } else {
        part[0][part[1]] = part[2]
      }
    }
  }
  return res
}

function setReplace (replace, val, k, parent) {
  var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)
  if (propertyDescriptor.get !== undefined) {
    if (propertyDescriptor.configurable) {
      Object.defineProperty(parent, k, { value: replace })
      arr.push([parent, k, val, propertyDescriptor])
    } else {
      replacerStack.push([val, k, replace])
    }
  } else {
    parent[k] = replace
    arr.push([parent, k, val])
  }
}

function decirc (val, k, edgeIndex, stack, parent, depth, options) {
  depth += 1
  var i
  if (typeof val === 'object' && val !== null) {
    for (i = 0; i < stack.length; i++) {
      if (stack[i] === val) {
        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)
        return
      }
    }

    if (
      typeof options.depthLimit !== 'undefined' &&
      depth > options.depthLimit
    ) {
      setReplace(LIMIT_REPLACE_NODE, val, k, parent)
      return
    }

    if (
      typeof options.edgesLimit !== 'undefined' &&
      edgeIndex + 1 > options.edgesLimit
    ) {
      setReplace(LIMIT_REPLACE_NODE, val, k, parent)
      return
    }

    stack.push(val)
    // Optimize for Arrays. Big arrays could kill the performance otherwise!
    if (Array.isArray(val)) {
      for (i = 0; i < val.length; i++) {
        decirc(val[i], i, i, stack, val, depth, options)
      }
    } else {
      var keys = Object.keys(val)
      for (i = 0; i < keys.length; i++) {
        var key = keys[i]
        decirc(val[key], key, i, stack, val, depth, options)
      }
    }
    stack.pop()
  }
}

// Stable-stringify
function compareFunction (a, b) {
  if (a < b) {
    return -1
  }
  if (a > b) {
    return 1
  }
  return 0
}

function deterministicStringify (obj, replacer, spacer, options) {
  if (typeof options === 'undefined') {
    options = defaultOptions()
  }

  var tmp = deterministicDecirc(obj, '', 0, [], undefined, 0, options) || obj
  var res
  try {
    if (replacerStack.length === 0) {
      res = JSON.stringify(tmp, replacer, spacer)
    } else {
      res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)
    }
  } catch (_) {
    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')
  } finally {
    // Ensure that we restore the object as it was.
    while (arr.length !== 0) {
      var part = arr.pop()
      if (part.length === 4) {
        Object.defineProperty(part[0], part[1], part[3])
      } else {
        part[0][part[1]] = part[2]
      }
    }
  }
  return res
}

function deterministicDecirc (val, k, edgeIndex, stack, parent, depth, options) {
  depth += 1
  var i
  if (typeof val === 'object' && val !== null) {
    for (i = 0; i < stack.length; i++) {
      if (stack[i] === val) {
        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)
        return
      }
    }
    try {
      if (typeof val.toJSON === 'function') {
        return
      }
    } catch (_) {
      return
    }

    if (
      typeof options.depthLimit !== 'undefined' &&
      depth > options.depthLimit
    ) {
      setReplace(LIMIT_REPLACE_NODE, val, k, parent)
      return
    }

    if (
      typeof options.edgesLimit !== 'undefined' &&
      edgeIndex + 1 > options.edgesLimit
    ) {
      setReplace(LIMIT_REPLACE_NODE, val, k, parent)
      return
    }

    stack.push(val)
    // Optimize for Arrays. Big arrays could kill the performance otherwise!
    if (Array.isArray(val)) {
      for (i = 0; i < val.length; i++) {
        deterministicDecirc(val[i], i, i, stack, val, depth, options)
      }
    } else {
      // Create a temporary object in the required way
      var tmp = {}
      var keys = Object.keys(val).sort(compareFunction)
      for (i = 0; i < keys.length; i++) {
        var key = keys[i]
        deterministicDecirc(val[key], key, i, stack, val, depth, options)
        tmp[key] = val[key]
      }
      if (typeof parent !== 'undefined') {
        arr.push([parent, k, val])
        parent[k] = tmp
      } else {
        return tmp
      }
    }
    stack.pop()
  }
}

// wraps replacer function to handle values we couldn't replace
// and mark them as replaced value
function replaceGetterValues (replacer) {
  replacer =
    typeof replacer !== 'undefined'
      ? replacer
      : function (k, v) {
        return v
      }
  return function (key, val) {
    if (replacerStack.length > 0) {
      for (var i = 0; i < replacerStack.length; i++) {
        var part = replacerStack[i]
        if (part[1] === key && part[0] === val) {
          val = part[2]
          replacerStack.splice(i, 1)
          break
        }
      }
    }
    return replacer.call(this, key, val)
  }
}

},{}],"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/classes.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthereumProviderError = exports.EthereumRpcError = void 0;
const fast_safe_stringify_1 = require("fast-safe-stringify");
/**
 * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors
 * per EIP-1474.
 * Permits any integer error code.
 */
class EthereumRpcError extends Error {
    constructor(code, message, data) {
        if (!Number.isInteger(code)) {
            throw new Error('"code" must be an integer.');
        }
        if (!message || typeof message !== 'string') {
            throw new Error('"message" must be a nonempty string.');
        }
        super(message);
        this.code = code;
        if (data !== undefined) {
            this.data = data;
        }
    }
    /**
     * Returns a plain object with all public class properties.
     */
    serialize() {
        const serialized = {
            code: this.code,
            message: this.message,
        };
        if (this.data !== undefined) {
            serialized.data = this.data;
        }
        if (this.stack) {
            serialized.stack = this.stack;
        }
        return serialized;
    }
    /**
     * Return a string representation of the serialized error, omitting
     * any circular references.
     */
    toString() {
        return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);
    }
}
exports.EthereumRpcError = EthereumRpcError;
/**
 * Error subclass implementing Ethereum Provider errors per EIP-1193.
 * Permits integer error codes in the [ 1000 <= 4999 ] range.
 */
class EthereumProviderError extends EthereumRpcError {
    /**
     * Create an Ethereum Provider JSON-RPC error.
     * `code` must be an integer in the 1000 <= 4999 range.
     */
    constructor(code, message, data) {
        if (!isValidEthProviderCode(code)) {
            throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
        }
        super(code, message, data);
    }
}
exports.EthereumProviderError = EthereumProviderError;
// Internal
function isValidEthProviderCode(code) {
    return Number.isInteger(code) && code >= 1000 && code <= 4999;
}
function stringifyReplacer(_, value) {
    if (value === '[Circular]') {
        return undefined;
    }
    return value;
}

},{"fast-safe-stringify":"node_modules/fast-safe-stringify/index.js"}],"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/error-constants.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorValues = exports.errorCodes = void 0;
exports.errorCodes = {
    rpc: {
        invalidInput: -32000,
        resourceNotFound: -32001,
        resourceUnavailable: -32002,
        transactionRejected: -32003,
        methodNotSupported: -32004,
        limitExceeded: -32005,
        parse: -32700,
        invalidRequest: -32600,
        methodNotFound: -32601,
        invalidParams: -32602,
        internal: -32603,
    },
    provider: {
        userRejectedRequest: 4001,
        unauthorized: 4100,
        unsupportedMethod: 4200,
        disconnected: 4900,
        chainDisconnected: 4901,
    },
};
exports.errorValues = {
    '-32700': {
        standard: 'JSON RPC 2.0',
        message: 'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.',
    },
    '-32600': {
        standard: 'JSON RPC 2.0',
        message: 'The JSON sent is not a valid Request object.',
    },
    '-32601': {
        standard: 'JSON RPC 2.0',
        message: 'The method does not exist / is not available.',
    },
    '-32602': {
        standard: 'JSON RPC 2.0',
        message: 'Invalid method parameter(s).',
    },
    '-32603': {
        standard: 'JSON RPC 2.0',
        message: 'Internal JSON-RPC error.',
    },
    '-32000': {
        standard: 'EIP-1474',
        message: 'Invalid input.',
    },
    '-32001': {
        standard: 'EIP-1474',
        message: 'Resource not found.',
    },
    '-32002': {
        standard: 'EIP-1474',
        message: 'Resource unavailable.',
    },
    '-32003': {
        standard: 'EIP-1474',
        message: 'Transaction rejected.',
    },
    '-32004': {
        standard: 'EIP-1474',
        message: 'Method not supported.',
    },
    '-32005': {
        standard: 'EIP-1474',
        message: 'Request limit exceeded.',
    },
    '4001': {
        standard: 'EIP-1193',
        message: 'User rejected the request.',
    },
    '4100': {
        standard: 'EIP-1193',
        message: 'The requested account and/or method has not been authorized by the user.',
    },
    '4200': {
        standard: 'EIP-1193',
        message: 'The requested method is not supported by this Ethereum provider.',
    },
    '4900': {
        standard: 'EIP-1193',
        message: 'The provider is disconnected from all chains.',
    },
    '4901': {
        standard: 'EIP-1193',
        message: 'The provider is disconnected from the specified chain.',
    },
};

},{}],"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/utils.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;
const error_constants_1 = require("./error-constants");
const classes_1 = require("./classes");
const FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;
const FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';
const FALLBACK_ERROR = {
    code: FALLBACK_ERROR_CODE,
    message: getMessageFromCode(FALLBACK_ERROR_CODE),
};
exports.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';
/**
 * Gets the message for a given code, or a fallback message if the code has
 * no corresponding message.
 */
function getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {
    if (Number.isInteger(code)) {
        const codeString = code.toString();
        if (hasKey(error_constants_1.errorValues, codeString)) {
            return error_constants_1.errorValues[codeString].message;
        }
        if (isJsonRpcServerError(code)) {
            return exports.JSON_RPC_SERVER_ERROR_MESSAGE;
        }
    }
    return fallbackMessage;
}
exports.getMessageFromCode = getMessageFromCode;
/**
 * Returns whether the given code is valid.
 * A code is only valid if it has a message.
 */
function isValidCode(code) {
    if (!Number.isInteger(code)) {
        return false;
    }
    const codeString = code.toString();
    if (error_constants_1.errorValues[codeString]) {
        return true;
    }
    if (isJsonRpcServerError(code)) {
        return true;
    }
    return false;
}
exports.isValidCode = isValidCode;
/**
 * Serializes the given error to an Ethereum JSON RPC-compatible error object.
 * Merely copies the given error's values if it is already compatible.
 * If the given error is not fully compatible, it will be preserved on the
 * returned object's data.originalError property.
 */
function serializeError(error, { fallbackError = FALLBACK_ERROR, shouldIncludeStack = false, } = {}) {
    var _a, _b;
    if (!fallbackError ||
        !Number.isInteger(fallbackError.code) ||
        typeof fallbackError.message !== 'string') {
        throw new Error('Must provide fallback error with integer number code and string message.');
    }
    if (error instanceof classes_1.EthereumRpcError) {
        return error.serialize();
    }
    const serialized = {};
    if (error &&
        typeof error === 'object' &&
        !Array.isArray(error) &&
        hasKey(error, 'code') &&
        isValidCode(error.code)) {
        const _error = error;
        serialized.code = _error.code;
        if (_error.message && typeof _error.message === 'string') {
            serialized.message = _error.message;
            if (hasKey(_error, 'data')) {
                serialized.data = _error.data;
            }
        }
        else {
            serialized.message = getMessageFromCode(serialized.code);
            serialized.data = { originalError: assignOriginalError(error) };
        }
    }
    else {
        serialized.code = fallbackError.code;
        const message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;
        serialized.message = (message && typeof message === 'string'
            ? message
            : fallbackError.message);
        serialized.data = { originalError: assignOriginalError(error) };
    }
    const stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;
    if (shouldIncludeStack && error && stack && typeof stack === 'string') {
        serialized.stack = stack;
    }
    return serialized;
}
exports.serializeError = serializeError;
// Internal
function isJsonRpcServerError(code) {
    return code >= -32099 && code <= -32000;
}
function assignOriginalError(error) {
    if (error && typeof error === 'object' && !Array.isArray(error)) {
        return Object.assign({}, error);
    }
    return error;
}
function hasKey(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}

},{"./error-constants":"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/error-constants.js","./classes":"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/classes.js"}],"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/errors.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ethErrors = void 0;
const classes_1 = require("./classes");
const utils_1 = require("./utils");
const error_constants_1 = require("./error-constants");
exports.ethErrors = {
    rpc: {
        /**
         * Get a JSON RPC 2.0 Parse (-32700) error.
         */
        parse: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),
        /**
         * Get a JSON RPC 2.0 Invalid Request (-32600) error.
         */
        invalidRequest: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),
        /**
         * Get a JSON RPC 2.0 Invalid Params (-32602) error.
         */
        invalidParams: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),
        /**
         * Get a JSON RPC 2.0 Method Not Found (-32601) error.
         */
        methodNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),
        /**
         * Get a JSON RPC 2.0 Internal (-32603) error.
         */
        internal: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),
        /**
         * Get a JSON RPC 2.0 Server error.
         * Permits integer error codes in the [ -32099 <= -32005 ] range.
         * Codes -32000 through -32004 are reserved by EIP-1474.
         */
        server: (opts) => {
            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
                throw new Error('Ethereum RPC Server errors must provide single object argument.');
            }
            const { code } = opts;
            if (!Number.isInteger(code) || code > -32005 || code < -32099) {
                throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');
            }
            return getEthJsonRpcError(code, opts);
        },
        /**
         * Get an Ethereum JSON RPC Invalid Input (-32000) error.
         */
        invalidInput: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),
        /**
         * Get an Ethereum JSON RPC Resource Not Found (-32001) error.
         */
        resourceNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),
        /**
         * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.
         */
        resourceUnavailable: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),
        /**
         * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.
         */
        transactionRejected: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),
        /**
         * Get an Ethereum JSON RPC Method Not Supported (-32004) error.
         */
        methodNotSupported: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),
        /**
         * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.
         */
        limitExceeded: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg),
    },
    provider: {
        /**
         * Get an Ethereum Provider User Rejected Request (4001) error.
         */
        userRejectedRequest: (arg) => {
            return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);
        },
        /**
         * Get an Ethereum Provider Unauthorized (4100) error.
         */
        unauthorized: (arg) => {
            return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);
        },
        /**
         * Get an Ethereum Provider Unsupported Method (4200) error.
         */
        unsupportedMethod: (arg) => {
            return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);
        },
        /**
         * Get an Ethereum Provider Not Connected (4900) error.
         */
        disconnected: (arg) => {
            return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);
        },
        /**
         * Get an Ethereum Provider Chain Not Connected (4901) error.
         */
        chainDisconnected: (arg) => {
            return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);
        },
        /**
         * Get a custom Ethereum Provider error.
         */
        custom: (opts) => {
            if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {
                throw new Error('Ethereum Provider custom errors must provide single object argument.');
            }
            const { code, message, data } = opts;
            if (!message || typeof message !== 'string') {
                throw new Error('"message" must be a nonempty string');
            }
            return new classes_1.EthereumProviderError(code, message, data);
        },
    },
};
// Internal
function getEthJsonRpcError(code, arg) {
    const [message, data] = parseOpts(arg);
    return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);
}
function getEthProviderError(code, arg) {
    const [message, data] = parseOpts(arg);
    return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);
}
function parseOpts(arg) {
    if (arg) {
        if (typeof arg === 'string') {
            return [arg];
        }
        else if (typeof arg === 'object' && !Array.isArray(arg)) {
            const { message, data } = arg;
            if (message && typeof message !== 'string') {
                throw new Error('Must specify string message.');
            }
            return [message || undefined, data];
        }
    }
    return [];
}

},{"./classes":"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/classes.js","./utils":"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/utils.js","./error-constants":"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/error-constants.js"}],"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/index.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMessageFromCode = exports.serializeError = exports.EthereumProviderError = exports.EthereumRpcError = exports.ethErrors = exports.errorCodes = void 0;
const classes_1 = require("./classes");
Object.defineProperty(exports, "EthereumRpcError", { enumerable: true, get: function () { return classes_1.EthereumRpcError; } });
Object.defineProperty(exports, "EthereumProviderError", { enumerable: true, get: function () { return classes_1.EthereumProviderError; } });
const utils_1 = require("./utils");
Object.defineProperty(exports, "serializeError", { enumerable: true, get: function () { return utils_1.serializeError; } });
Object.defineProperty(exports, "getMessageFromCode", { enumerable: true, get: function () { return utils_1.getMessageFromCode; } });
const errors_1 = require("./errors");
Object.defineProperty(exports, "ethErrors", { enumerable: true, get: function () { return errors_1.ethErrors; } });
const error_constants_1 = require("./error-constants");
Object.defineProperty(exports, "errorCodes", { enumerable: true, get: function () { return error_constants_1.errorCodes; } });

},{"./classes":"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/classes.js","./utils":"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/utils.js","./errors":"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/errors.js","./error-constants":"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/error-constants.js"}],"node_modules/json-rpc-engine/dist/JsonRpcEngine.js":[function(require,module,exports) {
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JsonRpcEngine = void 0;
var safe_event_emitter_1 = __importDefault(require("@metamask/safe-event-emitter"));
var eth_rpc_errors_1 = require("eth-rpc-errors");
/**
 * A JSON-RPC request and response processor.
 * Give it a stack of middleware, pass it requests, and get back responses.
 */
var JsonRpcEngine = /*#__PURE__*/function (_safe_event_emitter_) {
  _inherits(JsonRpcEngine, _safe_event_emitter_);
  var _super = _createSuper(JsonRpcEngine);
  function JsonRpcEngine() {
    var _this;
    _classCallCheck(this, JsonRpcEngine);
    _this = _super.call(this);
    _this._middleware = [];
    return _this;
  }
  /**
   * Add a middleware function to the engine's middleware stack.
   *
   * @param middleware - The middleware function to add.
   */
  _createClass(JsonRpcEngine, [{
    key: "push",
    value: function push(middleware) {
      this._middleware.push(middleware);
    }
  }, {
    key: "handle",
    value: function handle(req, cb) {
      if (cb && typeof cb !== 'function') {
        throw new Error('"callback" must be a function if provided.');
      }
      if (Array.isArray(req)) {
        if (cb) {
          return this._handleBatch(req, cb);
        }
        return this._handleBatch(req);
      }
      if (cb) {
        return this._handle(req, cb);
      }
      return this._promiseHandle(req);
    }
    /**
     * Returns this engine as a middleware function that can be pushed to other
     * engines.
     *
     * @returns This engine as a middleware function.
     */
  }, {
    key: "asMiddleware",
    value: function asMiddleware() {
      var _this2 = this;
      return /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res, next, end) {
          var _yield$JsonRpcEngine$, _yield$JsonRpcEngine$2, middlewareError, isComplete, returnHandlers;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return JsonRpcEngine._runAllMiddleware(req, res, _this2._middleware);
              case 3:
                _yield$JsonRpcEngine$ = _context2.sent;
                _yield$JsonRpcEngine$2 = _slicedToArray(_yield$JsonRpcEngine$, 3);
                middlewareError = _yield$JsonRpcEngine$2[0];
                isComplete = _yield$JsonRpcEngine$2[1];
                returnHandlers = _yield$JsonRpcEngine$2[2];
                if (!isComplete) {
                  _context2.next = 12;
                  break;
                }
                _context2.next = 11;
                return JsonRpcEngine._runReturnHandlers(returnHandlers);
              case 11:
                return _context2.abrupt("return", end(middlewareError));
              case 12:
                return _context2.abrupt("return", next( /*#__PURE__*/function () {
                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(handlerCallback) {
                    return _regeneratorRuntime().wrap(function _callee$(_context) {
                      while (1) switch (_context.prev = _context.next) {
                        case 0:
                          _context.prev = 0;
                          _context.next = 3;
                          return JsonRpcEngine._runReturnHandlers(returnHandlers);
                        case 3:
                          _context.next = 8;
                          break;
                        case 5:
                          _context.prev = 5;
                          _context.t0 = _context["catch"](0);
                          return _context.abrupt("return", handlerCallback(_context.t0));
                        case 8:
                          return _context.abrupt("return", handlerCallback());
                        case 9:
                        case "end":
                          return _context.stop();
                      }
                    }, _callee, null, [[0, 5]]);
                  }));
                  return function (_x5) {
                    return _ref2.apply(this, arguments);
                  };
                }()));
              case 15:
                _context2.prev = 15;
                _context2.t0 = _context2["catch"](0);
                return _context2.abrupt("return", end(_context2.t0));
              case 18:
              case "end":
                return _context2.stop();
            }
          }, _callee2, null, [[0, 15]]);
        }));
        return function (_x, _x2, _x3, _x4) {
          return _ref.apply(this, arguments);
        };
      }();
    }
  }, {
    key: "_handleBatch",
    value: function () {
      var _handleBatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(reqs, cb) {
        var responses;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              _context3.next = 3;
              return Promise.all(
              // 1. Begin executing each request in the order received
              reqs.map(this._promiseHandle.bind(this)));
            case 3:
              responses = _context3.sent;
              if (!cb) {
                _context3.next = 6;
                break;
              }
              return _context3.abrupt("return", cb(null, responses));
            case 6:
              return _context3.abrupt("return", responses);
            case 9:
              _context3.prev = 9;
              _context3.t0 = _context3["catch"](0);
              if (!cb) {
                _context3.next = 13;
                break;
              }
              return _context3.abrupt("return", cb(_context3.t0));
            case 13:
              throw _context3.t0;
            case 14:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this, [[0, 9]]);
      }));
      function _handleBatch(_x6, _x7) {
        return _handleBatch2.apply(this, arguments);
      }
      return _handleBatch;
    }()
    /**
     * A promise-wrapped _handle.
     */
  }, {
    key: "_promiseHandle",
    value: function _promiseHandle(req) {
      var _this3 = this;
      return new Promise(function (resolve) {
        _this3._handle(req, function (_err, res) {
          // There will always be a response, and it will always have any error
          // that is caught and propagated.
          resolve(res);
        });
      });
    }
    /**
     * Ensures that the request object is valid, processes it, and passes any
     * error and the response object to the given callback.
     *
     * Does not reject.
     */
  }, {
    key: "_handle",
    value: function () {
      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(callerReq, cb) {
        var _error2, _error3, req, res, error;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(!callerReq || Array.isArray(callerReq) || _typeof(callerReq) !== 'object')) {
                _context4.next = 3;
                break;
              }
              _error2 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, "Requests must be plain objects. Received: ".concat(_typeof(callerReq)), {
                request: callerReq
              });
              return _context4.abrupt("return", cb(_error2, {
                id: undefined,
                jsonrpc: '2.0',
                error: _error2
              }));
            case 3:
              if (!(typeof callerReq.method !== 'string')) {
                _context4.next = 6;
                break;
              }
              _error3 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, "Must specify a string method. Received: ".concat(_typeof(callerReq.method)), {
                request: callerReq
              });
              return _context4.abrupt("return", cb(_error3, {
                id: callerReq.id,
                jsonrpc: '2.0',
                error: _error3
              }));
            case 6:
              req = Object.assign({}, callerReq);
              res = {
                id: req.id,
                jsonrpc: req.jsonrpc
              };
              error = null;
              _context4.prev = 9;
              _context4.next = 12;
              return this._processRequest(req, res);
            case 12:
              _context4.next = 17;
              break;
            case 14:
              _context4.prev = 14;
              _context4.t0 = _context4["catch"](9);
              // A request handler error, a re-thrown middleware error, or something
              // unexpected.
              error = _context4.t0;
            case 17:
              if (error) {
                // Ensure no result is present on an errored response
                delete res.result;
                if (!res.error) {
                  res.error = eth_rpc_errors_1.serializeError(error);
                }
              }
              return _context4.abrupt("return", cb(error, res));
            case 19:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this, [[9, 14]]);
      }));
      function _handle(_x8, _x9) {
        return _handle2.apply(this, arguments);
      }
      return _handle;
    }()
    /**
     * For the given request and response, runs all middleware and their return
     * handlers, if any, and ensures that internal request processing semantics
     * are satisfied.
     */
  }, {
    key: "_processRequest",
    value: function () {
      var _processRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(req, res) {
        var _yield$JsonRpcEngine$3, _yield$JsonRpcEngine$4, error, isComplete, returnHandlers;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return JsonRpcEngine._runAllMiddleware(req, res, this._middleware);
            case 2:
              _yield$JsonRpcEngine$3 = _context5.sent;
              _yield$JsonRpcEngine$4 = _slicedToArray(_yield$JsonRpcEngine$3, 3);
              error = _yield$JsonRpcEngine$4[0];
              isComplete = _yield$JsonRpcEngine$4[1];
              returnHandlers = _yield$JsonRpcEngine$4[2];
              // Throw if "end" was not called, or if the response has neither a result
              // nor an error.
              JsonRpcEngine._checkForCompletion(req, res, isComplete);
              // The return handlers should run even if an error was encountered during
              // middleware processing.
              _context5.next = 10;
              return JsonRpcEngine._runReturnHandlers(returnHandlers);
            case 10:
              if (!error) {
                _context5.next = 12;
                break;
              }
              throw error;
            case 12:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function _processRequest(_x10, _x11) {
        return _processRequest2.apply(this, arguments);
      }
      return _processRequest;
    }()
    /**
     * Serially executes the given stack of middleware.
     *
     * @returns An array of any error encountered during middleware execution,
     * a boolean indicating whether the request was completed, and an array of
     * middleware-defined return handlers.
     */
  }], [{
    key: "_runAllMiddleware",
    value: function () {
      var _runAllMiddleware2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(req, res, middlewareStack) {
        var returnHandlers, error, isComplete, _iterator, _step, middleware, _yield$JsonRpcEngine$5, _yield$JsonRpcEngine$6;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              returnHandlers = [];
              error = null;
              isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers
              _iterator = _createForOfIteratorHelper(middlewareStack);
              _context6.prev = 4;
              _iterator.s();
            case 6:
              if ((_step = _iterator.n()).done) {
                _context6.next = 18;
                break;
              }
              middleware = _step.value;
              _context6.next = 10;
              return JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);
            case 10:
              _yield$JsonRpcEngine$5 = _context6.sent;
              _yield$JsonRpcEngine$6 = _slicedToArray(_yield$JsonRpcEngine$5, 2);
              error = _yield$JsonRpcEngine$6[0];
              isComplete = _yield$JsonRpcEngine$6[1];
              if (!isComplete) {
                _context6.next = 16;
                break;
              }
              return _context6.abrupt("break", 18);
            case 16:
              _context6.next = 6;
              break;
            case 18:
              _context6.next = 23;
              break;
            case 20:
              _context6.prev = 20;
              _context6.t0 = _context6["catch"](4);
              _iterator.e(_context6.t0);
            case 23:
              _context6.prev = 23;
              _iterator.f();
              return _context6.finish(23);
            case 26:
              return _context6.abrupt("return", [error, isComplete, returnHandlers.reverse()]);
            case 27:
            case "end":
              return _context6.stop();
          }
        }, _callee6, null, [[4, 20, 23, 26]]);
      }));
      function _runAllMiddleware(_x12, _x13, _x14) {
        return _runAllMiddleware2.apply(this, arguments);
      }
      return _runAllMiddleware;
    }()
    /**
     * Runs an individual middleware.
     *
     * @returns An array of any error encountered during middleware exection,
     * and a boolean indicating whether the request should end.
     */
  }, {
    key: "_runMiddleware",
    value: function _runMiddleware(req, res, middleware, returnHandlers) {
      return new Promise(function (resolve) {
        var end = function end(err) {
          var error = err || res.error;
          if (error) {
            res.error = eth_rpc_errors_1.serializeError(error);
          }
          // True indicates that the request should end
          resolve([error, true]);
        };
        var next = function next(returnHandler) {
          if (res.error) {
            end(res.error);
          } else {
            if (returnHandler) {
              if (typeof returnHandler !== 'function') {
                end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, "JsonRpcEngine: \"next\" return handlers must be functions. " + "Received \"".concat(_typeof(returnHandler), "\" for request:\n").concat(jsonify(req)), {
                  request: req
                }));
              }
              returnHandlers.push(returnHandler);
            }
            // False indicates that the request should not end
            resolve([null, false]);
          }
        };
        try {
          middleware(req, res, next, end);
        } catch (error) {
          end(error);
        }
      });
    }
    /**
     * Serially executes array of return handlers. The request and response are
     * assumed to be in their scope.
     */
  }, {
    key: "_runReturnHandlers",
    value: function () {
      var _runReturnHandlers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(handlers) {
        var _iterator2, _step2, _loop;
        return _regeneratorRuntime().wrap(function _callee7$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _iterator2 = _createForOfIteratorHelper(handlers);
              _context8.prev = 1;
              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {
                var handler;
                return _regeneratorRuntime().wrap(function _loop$(_context7) {
                  while (1) switch (_context7.prev = _context7.next) {
                    case 0:
                      handler = _step2.value;
                      _context7.next = 3;
                      return new Promise(function (resolve, reject) {
                        handler(function (err) {
                          return err ? reject(err) : resolve();
                        });
                      });
                    case 3:
                    case "end":
                      return _context7.stop();
                  }
                }, _loop);
              });
              _iterator2.s();
            case 4:
              if ((_step2 = _iterator2.n()).done) {
                _context8.next = 8;
                break;
              }
              return _context8.delegateYield(_loop(), "t0", 6);
            case 6:
              _context8.next = 4;
              break;
            case 8:
              _context8.next = 13;
              break;
            case 10:
              _context8.prev = 10;
              _context8.t1 = _context8["catch"](1);
              _iterator2.e(_context8.t1);
            case 13:
              _context8.prev = 13;
              _iterator2.f();
              return _context8.finish(13);
            case 16:
            case "end":
              return _context8.stop();
          }
        }, _callee7, null, [[1, 10, 13, 16]]);
      }));
      function _runReturnHandlers(_x15) {
        return _runReturnHandlers2.apply(this, arguments);
      }
      return _runReturnHandlers;
    }()
    /**
     * Throws an error if the response has neither a result nor an error, or if
     * the "isComplete" flag is falsy.
     */
  }, {
    key: "_checkForCompletion",
    value: function _checkForCompletion(req, res, isComplete) {
      if (!('result' in res) && !('error' in res)) {
        throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, "JsonRpcEngine: Response has no error or result for request:\n".concat(jsonify(req)), {
          request: req
        });
      }
      if (!isComplete) {
        throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, "JsonRpcEngine: Nothing ended request:\n".concat(jsonify(req)), {
          request: req
        });
      }
    }
  }]);
  return JsonRpcEngine;
}(safe_event_emitter_1.default);
exports.JsonRpcEngine = JsonRpcEngine;
function jsonify(request) {
  return JSON.stringify(request, null, 2);
}
},{"@metamask/safe-event-emitter":"node_modules/@metamask/safe-event-emitter/index.js","eth-rpc-errors":"node_modules/json-rpc-engine/node_modules/eth-rpc-errors/dist/index.js"}],"node_modules/json-rpc-engine/dist/mergeMiddleware.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeMiddleware = void 0;
var JsonRpcEngine_1 = require("./JsonRpcEngine");
function mergeMiddleware(middlewareStack) {
  var engine = new JsonRpcEngine_1.JsonRpcEngine();
  middlewareStack.forEach(function (middleware) {
    return engine.push(middleware);
  });
  return engine.asMiddleware();
}
exports.mergeMiddleware = mergeMiddleware;
},{"./JsonRpcEngine":"node_modules/json-rpc-engine/dist/JsonRpcEngine.js"}],"node_modules/json-rpc-engine/dist/index.js":[function(require,module,exports) {
"use strict";

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
__exportStar(require("./idRemapMiddleware"), exports);
__exportStar(require("./createAsyncMiddleware"), exports);
__exportStar(require("./createScaffoldMiddleware"), exports);
__exportStar(require("./getUniqueId"), exports);
__exportStar(require("./JsonRpcEngine"), exports);
__exportStar(require("./mergeMiddleware"), exports);
},{"./idRemapMiddleware":"node_modules/json-rpc-engine/dist/idRemapMiddleware.js","./createAsyncMiddleware":"node_modules/json-rpc-engine/dist/createAsyncMiddleware.js","./createScaffoldMiddleware":"node_modules/json-rpc-engine/dist/createScaffoldMiddleware.js","./getUniqueId":"node_modules/json-rpc-engine/dist/getUniqueId.js","./JsonRpcEngine":"node_modules/json-rpc-engine/dist/JsonRpcEngine.js","./mergeMiddleware":"node_modules/json-rpc-engine/dist/mergeMiddleware.js"}],"node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createScaffoldMiddleware.js":[function(require,module,exports) {
module.exports = function createScaffoldMiddleware (handlers) {
  return (req, res, next, end) => {
    const handler = handlers[req.method]
    // if no handler, return
    if (handler === undefined) {
      return next()
    }
    // if handler is fn, call as middleware
    if (typeof handler === 'function') {
      return handler(req, res, next, end)
    }
    // if handler is some other value, use as result
    res.result = handler
    return end()
  }
}

},{}],"node_modules/eth-json-rpc-middleware/scaffold.js":[function(require,module,exports) {
// for backwards compat
module.exports = require('json-rpc-engine/src/createScaffoldMiddleware')

},{"json-rpc-engine/src/createScaffoldMiddleware":"node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createScaffoldMiddleware.js"}],"node_modules/eth-json-rpc-filters/node_modules/pify/index.js":[function(require,module,exports) {
'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var processFn = function processFn(fn, options, proxy, unwrapped) {
  return function () {
    var _this = this;
    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
      arguments_[_key] = arguments[_key];
    }
    var P = options.promiseModule;
    return new P(function (resolve, reject) {
      if (options.multiArgs) {
        arguments_.push(function () {
          for (var _len2 = arguments.length, result = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            result[_key2] = arguments[_key2];
          }
          if (options.errorFirst) {
            if (result[0]) {
              reject(result);
            } else {
              result.shift();
              resolve(result);
            }
          } else {
            resolve(result);
          }
        });
      } else if (options.errorFirst) {
        arguments_.push(function (error, result) {
          if (error) {
            reject(error);
          } else {
            resolve(result);
          }
        });
      } else {
        arguments_.push(resolve);
      }
      var self = _this === proxy ? unwrapped : _this;
      Reflect.apply(fn, self, arguments_);
    });
  };
};
var filterCache = new WeakMap();
module.exports = function (input, options) {
  options = _objectSpread({
    exclude: [/.+(?:Sync|Stream)$/],
    errorFirst: true,
    promiseModule: Promise
  }, options);
  var objectType = _typeof(input);
  if (!(input !== null && (objectType === 'object' || objectType === 'function'))) {
    throw new TypeError("Expected `input` to be a `Function` or `Object`, got `".concat(input === null ? 'null' : objectType, "`"));
  }
  var filter = function filter(target, key) {
    var cached = filterCache.get(target);
    if (!cached) {
      cached = {};
      filterCache.set(target, cached);
    }
    if (key in cached) {
      return cached[key];
    }
    var match = function match(pattern) {
      return typeof pattern === 'string' || _typeof(key) === 'symbol' ? key === pattern : pattern.test(key);
    };
    var desc = Reflect.getOwnPropertyDescriptor(target, key);
    var writableOrConfigurableOwn = desc === undefined || desc.writable || desc.configurable;
    var included = options.include ? options.include.some(match) : !options.exclude.some(match);
    var shouldFilter = included && writableOrConfigurableOwn;
    cached[key] = shouldFilter;
    return shouldFilter;
  };
  var cache = new WeakMap();
  var proxy = new Proxy(input, {
    apply: function apply(target, thisArg, args) {
      var cached = cache.get(target);
      if (cached) {
        return Reflect.apply(cached, thisArg, args);
      }
      var pified = options.excludeMain ? target : processFn(target, options, proxy, target);
      cache.set(target, pified);
      return Reflect.apply(pified, thisArg, args);
    },
    get: function get(target, key) {
      var property = target[key];

      // eslint-disable-next-line no-use-extend-native/no-use-extend-native
      if (!filter(target, key) || property === Function.prototype[key]) {
        return property;
      }
      var cached = cache.get(property);
      if (cached) {
        return cached;
      }
      if (typeof property === 'function') {
        var pified = processFn(property, options, proxy, target);
        cache.set(property, pified);
        return pified;
      }
      return property;
    }
  });
  return proxy;
};
},{}],"node_modules/eth-json-rpc-filters/base-filter.js":[function(require,module,exports) {
const SafeEventEmitter = require('@metamask/safe-event-emitter').default

class BaseFilter extends SafeEventEmitter {

  constructor () {
    super()
    this.updates = []
  }

  async initialize () {}

  async update () {
    throw new Error('BaseFilter - no update method specified')
  }

  addResults (newResults) {
    this.updates = this.updates.concat(newResults)
    newResults.forEach(result => this.emit('update', result))
  }

  addInitialResults (newResults) {}

  getChangesAndClear () {
    const updates = this.updates
    this.updates = []
    return updates
  }
  
}

module.exports = BaseFilter

},{"@metamask/safe-event-emitter":"node_modules/@metamask/safe-event-emitter/index.js"}],"node_modules/eth-json-rpc-filters/base-filter-history.js":[function(require,module,exports) {
const BaseFilter = require('./base-filter')

// tracks all results ever recorded
class BaseFilterWithHistory extends BaseFilter {

  constructor () {
    super()
    this.allResults = []
  }

  async update () {
    throw new Error('BaseFilterWithHistory - no update method specified')
  }

  addResults (newResults) {
    this.allResults = this.allResults.concat(newResults)
    super.addResults(newResults)
  }

  addInitialResults (newResults) {
    this.allResults = this.allResults.concat(newResults)
    super.addInitialResults(newResults)
  }

  getAllResults () {
    return this.allResults
  }

}

module.exports = BaseFilterWithHistory
},{"./base-filter":"node_modules/eth-json-rpc-filters/base-filter.js"}],"node_modules/eth-json-rpc-filters/hexUtils.js":[function(require,module,exports) {

module.exports = {
  minBlockRef,
  maxBlockRef,
  sortBlockRefs,
  bnToHex,
  blockRefIsNumber,
  hexToInt,
  incrementHexInt,
  intToHex,
  unsafeRandomBytes,
}

function minBlockRef(...refs) {
  const sortedRefs = sortBlockRefs(refs)
  return sortedRefs[0]
}

function maxBlockRef(...refs) {
  const sortedRefs = sortBlockRefs(refs)
  return sortedRefs[sortedRefs.length-1]
}

function sortBlockRefs(refs) {
  return refs.sort((refA, refB) => {
    if (refA === 'latest' || refB === 'earliest') return 1
    if (refB === 'latest' || refA === 'earliest') return -1
    return hexToInt(refA) - hexToInt(refB)
  })
}

function bnToHex(bn) {
  return '0x' + bn.toString(16)
}

function blockRefIsNumber(blockRef){
  return blockRef && !['earliest', 'latest', 'pending'].includes(blockRef)
}

function hexToInt(hexString) {
  if (hexString === undefined || hexString === null) return hexString
  return Number.parseInt(hexString, 16)
}

function incrementHexInt(hexString){
  if (hexString === undefined || hexString === null) return hexString
  const value = hexToInt(hexString)
  return intToHex(value + 1)
}

function intToHex(int) {
  if (int === undefined || int === null) return int
  let hexString = int.toString(16)
  const needsLeftPad = hexString.length % 2
  if (needsLeftPad) hexString = '0' + hexString
  return '0x' + hexString
}

function unsafeRandomBytes(byteCount) {
  let result = '0x'
  for (let i = 0; i < byteCount; i++) {
    result += unsafeRandomNibble()
    result += unsafeRandomNibble()
  }
  return result
}

function unsafeRandomNibble() {
  return Math.floor(Math.random() * 16).toString(16)
}

},{}],"node_modules/eth-json-rpc-filters/log-filter.js":[function(require,module,exports) {
const EthQuery = require('eth-query')
const pify = require('pify')
const BaseFilterWithHistory = require('./base-filter-history')
const { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = require('./hexUtils')

class LogFilter extends BaseFilterWithHistory {

  constructor ({ provider, params }) {
    super()
    this.type = 'log'
    this.ethQuery = new EthQuery(provider)
    this.params = Object.assign({
      fromBlock: 'latest',
      toBlock: 'latest',
      address: undefined,
      topics: [],
    }, params)
    // normalize address parameter
    if (this.params.address) {
      // ensure array
      if (!Array.isArray(this.params.address)) {
        this.params.address = [this.params.address]
      }
      // ensure lowercase
      this.params.address = this.params.address.map(address => address.toLowerCase())
    }
  }

  async initialize({ currentBlock }) {
    // resolve params.fromBlock
    let fromBlock = this.params.fromBlock
    if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock
    if ('earliest' === fromBlock) fromBlock = '0x0'
    this.params.fromBlock = fromBlock
    // set toBlock for initial lookup
    const toBlock = minBlockRef(this.params.toBlock, currentBlock)
    const params = Object.assign({}, this.params, { toBlock })
    // fetch logs and add to results
    const newLogs = await this._fetchLogs(params)
    this.addInitialResults(newLogs)
  }

  async update ({ oldBlock, newBlock }) {
    // configure params for this update
    const toBlock = newBlock
    let fromBlock
    // oldBlock is empty on first sync
    if (oldBlock) {
      fromBlock = incrementHexInt(oldBlock)
    } else {
      fromBlock = newBlock
    }
    // fetch logs
    const params = Object.assign({}, this.params, { fromBlock, toBlock })
    const newLogs = await this._fetchLogs(params)
    const matchingLogs = newLogs.filter(log => this.matchLog(log))

    // add to results
    this.addResults(matchingLogs)
  }

  async _fetchLogs (params) {
    const newLogs = await pify(cb => this.ethQuery.getLogs(params, cb))()
    // add to results
    return newLogs
  }

  matchLog(log) {
    // check if block number in bounds:
    if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false
    if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false

    // address is correct:
    const normalizedLogAddress = log.address && log.address.toLowerCase()
    if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false

    // topics match:
    // topics are position-dependant
    // topics can be nested to represent `or` [[a || b], c]
    // topics can be null, representing a wild card for that position
    const topicsMatch = this.params.topics.every((topicPattern, index) => {
      // pattern is longer than actual topics
      let logTopic = log.topics[index]
      if (!logTopic) return false
      logTopic = logTopic.toLowerCase()
      // normalize subTopics
      let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]
      // check for wild card
      const subtopicsIncludeWildcard = subtopicsToMatch.includes(null)
      if (subtopicsIncludeWildcard) return true
      subtopicsToMatch = subtopicsToMatch.map(topic => topic.toLowerCase())
      // check each possible matching topic
      const topicDoesMatch = subtopicsToMatch.includes(logTopic)
      return topicDoesMatch
    })

    return topicsMatch
  }

}

module.exports = LogFilter

},{"eth-query":"node_modules/eth-query/index.js","pify":"node_modules/eth-json-rpc-filters/node_modules/pify/index.js","./base-filter-history":"node_modules/eth-json-rpc-filters/base-filter-history.js","./hexUtils":"node_modules/eth-json-rpc-filters/hexUtils.js"}],"node_modules/eth-json-rpc-filters/getBlocksForRange.js":[function(require,module,exports) {
module.exports = getBlocksForRange

async function getBlocksForRange({ provider, fromBlock, toBlock }) {
  if (!fromBlock) fromBlock = toBlock

  const fromBlockNumber = hexToInt(fromBlock)
  const toBlockNumber = hexToInt(toBlock)
  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1
  // load all blocks from old to new (inclusive)
  const missingBlockNumbers = Array(blockCountToQuery).fill()
                              .map((_,index) => fromBlockNumber + index)
                              .map(intToHex)
  const blockBodies = await Promise.all(
    missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false]))
  )
  return blockBodies
}

function hexToInt(hexString) {
  if (hexString === undefined || hexString === null) return hexString
  return Number.parseInt(hexString, 16)
}

function incrementHexInt(hexString){
  if (hexString === undefined || hexString === null) return hexString
  const value = hexToInt(hexString)
  return intToHex(value + 1)
}

function intToHex(int) {
  if (int === undefined || int === null) return int
  const hexString = int.toString(16)
  return '0x' + hexString
}

function query(provider, method, params) {
  return new Promise((resolve, reject) => {
    provider.sendAsync({ id: 1, jsonrpc: '2.0', method, params }, (err, res) => {
      if (err) return reject(err)
      resolve(res.result)
    })
  })
}

},{}],"node_modules/eth-json-rpc-filters/block-filter.js":[function(require,module,exports) {
const BaseFilter = require('./base-filter')
const getBlocksForRange = require('./getBlocksForRange')
const { incrementHexInt } = require('./hexUtils')

class BlockFilter extends BaseFilter {

  constructor ({ provider, params }) {
    super()
    this.type = 'block'
    this.provider = provider
  }

  async update ({ oldBlock, newBlock }) {
    const toBlock = newBlock
    const fromBlock = incrementHexInt(oldBlock)
    const blockBodies = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })
    const blockHashes = blockBodies.map((block) => block.hash)
    this.addResults(blockHashes)
  }

}

module.exports = BlockFilter

},{"./base-filter":"node_modules/eth-json-rpc-filters/base-filter.js","./getBlocksForRange":"node_modules/eth-json-rpc-filters/getBlocksForRange.js","./hexUtils":"node_modules/eth-json-rpc-filters/hexUtils.js"}],"node_modules/eth-json-rpc-filters/tx-filter.js":[function(require,module,exports) {
const BaseFilter = require('./base-filter')
const getBlocksForRange = require('./getBlocksForRange')
const { incrementHexInt } = require('./hexUtils')

class TxFilter extends BaseFilter {

  constructor ({ provider }) {
    super()
    this.type = 'tx'
    this.provider = provider
  }

  async update ({ oldBlock }) {
    const toBlock = oldBlock
    const fromBlock = incrementHexInt(oldBlock)
    const blocks = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })
    const blockTxHashes = []
    for (const block of blocks) {
      blockTxHashes.push(...block.transactions)
    }
    // add to results
    this.addResults(blockTxHashes)
  }

}

module.exports = TxFilter

},{"./base-filter":"node_modules/eth-json-rpc-filters/base-filter.js","./getBlocksForRange":"node_modules/eth-json-rpc-filters/getBlocksForRange.js","./hexUtils":"node_modules/eth-json-rpc-filters/hexUtils.js"}],"node_modules/eth-json-rpc-filters/index.js":[function(require,module,exports) {
const Mutex = require('async-mutex').Mutex
const { createAsyncMiddleware } = require('json-rpc-engine')
const createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold')
const LogFilter = require('./log-filter.js')
const BlockFilter = require('./block-filter.js')
const TxFilter = require('./tx-filter.js')
const { intToHex, hexToInt } = require('./hexUtils')

module.exports = createEthFilterMiddleware

function createEthFilterMiddleware({ blockTracker, provider }) {

  // create filter collection
  let filterIndex = 0
  let filters = {}
  // create update mutex
  const mutex = new Mutex()
  const waitForFree = mutexMiddlewareWrapper({ mutex })

  const middleware = createJsonRpcMiddleware({
    // install filters
    eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),
    eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),
    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),
    // uninstall filters
    eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),
    // checking filter changes
    eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),
    eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),
  })

  // setup filter updating and destroy handler
  const filterUpdater = async ({ oldBlock, newBlock }) => {
    if (filters.length === 0) return
    // lock update reads
    const releaseLock = await mutex.acquire()
    try {
      // process all filters in parallel
      await Promise.all(objValues(filters).map(async (filter) => {
        try {
         await filter.update({ oldBlock, newBlock })
        } catch (err) {
          // handle each error individually so filter update errors don't affect other filters
          console.error(err)
        }
      }))
    } catch (err) {
      // log error so we don't skip the releaseLock
      console.error(err)
    }
    // unlock update reads
    releaseLock()
  }

  // expose filter methods directly
  middleware.newLogFilter = newLogFilter
  middleware.newBlockFilter = newBlockFilter
  middleware.newPendingTransactionFilter = newPendingTransactionFilter
  middleware.uninstallFilter = uninstallFilterHandler
  middleware.getFilterChanges = getFilterChanges
  middleware.getFilterLogs = getFilterLogs

  // expose destroy method for cleanup
  middleware.destroy = () => {
    uninstallAllFilters()
  }

  return middleware

  //
  // new filters
  //

  async function newLogFilter(params) {
    const filter = new LogFilter({ provider, params })
    const filterIndex = await installFilter(filter)
    return filter
  }

  async function newBlockFilter() {
    const filter = new BlockFilter({ provider })
    const filterIndex = await installFilter(filter)
    return filter
  }

  async function newPendingTransactionFilter() {
    const filter = new TxFilter({ provider })
    const filterIndex = await installFilter(filter)
    return filter
  }

  //
  // get filter changes
  //

  async function getFilterChanges(filterIndexHex) {
    const filterIndex = hexToInt(filterIndexHex)
    const filter = filters[filterIndex]
    if (!filter) {
      throw new Error(`No filter for index "${filterIndex}"`)
    }
    const results = filter.getChangesAndClear()
    return results
  }

  async function getFilterLogs(filterIndexHex) {
    const filterIndex = hexToInt(filterIndexHex)
    const filter = filters[filterIndex]
    if (!filter) {
      throw new Error(`No filter for index "${filterIndex}"`)
    }
    // only return results for log filters
    if (filter.type === 'log') {
      results = filter.getAllResults()
    } else {
      results = []
    }
    return results
  }


  //
  // remove filters
  //


  async function uninstallFilterHandler(filterIndexHex) {
    // check filter exists
    const filterIndex = hexToInt(filterIndexHex)
    const filter = filters[filterIndex]
    const result = Boolean(filter)
    // uninstall filter
    if (result) {
      await uninstallFilter(filterIndex)
    }
    return result
  }

  //
  // utils
  //

  async function installFilter(filter) {
    const prevFilterCount = objValues(filters).length
    // install filter
    const currentBlock = await blockTracker.getLatestBlock()
    await filter.initialize({ currentBlock })
    filterIndex++
    filters[filterIndex] = filter
    filter.id = filterIndex
    filter.idHex = intToHex(filterIndex)
    // update block tracker subs
    const newFilterCount = objValues(filters).length
    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })
    return filterIndex
  }

  async function uninstallFilter(filterIndex) {
    const prevFilterCount = objValues(filters).length
    delete filters[filterIndex]
    // update block tracker subs
    const newFilterCount = objValues(filters).length
    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })
  }

  async function uninstallAllFilters() {
    const prevFilterCount = objValues(filters).length
    filters = {}
    // update block tracker subs
    updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 })
  }

  function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {
    // subscribe
    if (prevFilterCount === 0 && newFilterCount > 0) {
      blockTracker.on('sync', filterUpdater)
      return
    }
    // unsubscribe
    if (prevFilterCount > 0 && newFilterCount === 0) {
      blockTracker.removeListener('sync', filterUpdater)
      return
    }
  }

}

// helper for turning filter constructors into rpc middleware
function toFilterCreationMiddleware(createFilterFn) {
  return toAsyncRpcMiddleware(async (...args) => {
    const filter = await createFilterFn(...args)
    const result = intToHex(filter.id)
    return result
  })
}

// helper for pulling out req.params and setting res.result
function toAsyncRpcMiddleware(asyncFn) {
  return createAsyncMiddleware(async (req, res) => {
    const result = await asyncFn.apply(null, req.params)
    res.result = result
  })
}

function mutexMiddlewareWrapper({ mutex }) {
  return (middleware) => {
    return async (req, res, next, end) => {
      // wait for mutex available
      // we can release immediately because
      // we just need to make sure updates aren't active
      const releaseLock = await mutex.acquire()
      releaseLock()
      middleware(req, res, next, end)
    }
  }
}

function objValues(obj, fn){
  const values = []
  for (let key in obj) {
    values.push(obj[key])
  }
  return values
}

},{"async-mutex":"node_modules/async-mutex/es6/index.js","json-rpc-engine":"node_modules/json-rpc-engine/dist/index.js","eth-json-rpc-middleware/scaffold":"node_modules/eth-json-rpc-middleware/scaffold.js","./log-filter.js":"node_modules/eth-json-rpc-filters/log-filter.js","./block-filter.js":"node_modules/eth-json-rpc-filters/block-filter.js","./tx-filter.js":"node_modules/eth-json-rpc-filters/tx-filter.js","./hexUtils":"node_modules/eth-json-rpc-filters/hexUtils.js"}],"node_modules/web3-provider-engine/subproviders/filters.js":[function(require,module,exports) {
const ProviderSubprovider = require('./json-rpc-engine-middleware')
const createFilterMiddleware = require('eth-json-rpc-filters')

class SubscriptionsSubprovider extends ProviderSubprovider {
  constructor() {
    super(({ blockTracker, provider, engine }) => {
      return createFilterMiddleware({ blockTracker, provider })
    })
  }
}

module.exports = SubscriptionsSubprovider

},{"./json-rpc-engine-middleware":"node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js","eth-json-rpc-filters":"node_modules/eth-json-rpc-filters/index.js"}],"node_modules/async/waterfall.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (tasks, callback) {
    callback = (0, _once2.default)(callback || _noop2.default);
    if (!(0, _isArray2.default)(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
    if (!tasks.length) return callback();
    var taskIndex = 0;

    function nextTask(args) {
        var task = (0, _wrapAsync2.default)(tasks[taskIndex++]);
        args.push((0, _onlyOnce2.default)(next));
        task.apply(null, args);
    }

    function next(err /*, ...args*/) {
        if (err || taskIndex === tasks.length) {
            return callback.apply(null, arguments);
        }
        nextTask((0, _slice2.default)(arguments, 1));
    }

    nextTask([]);
};

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _once = require('./internal/once');

var _once2 = _interopRequireDefault(_once);

var _slice = require('./internal/slice');

var _slice2 = _interopRequireDefault(_slice);

var _onlyOnce = require('./internal/onlyOnce');

var _onlyOnce2 = _interopRequireDefault(_onlyOnce);

var _wrapAsync = require('./internal/wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = exports['default'];

/**
 * Runs the `tasks` array of functions in series, each passing their results to
 * the next in the array. However, if any of the `tasks` pass an error to their
 * own callback, the next function is not executed, and the main `callback` is
 * immediately called with the error.
 *
 * @name waterfall
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
 * to run.
 * Each function should complete with any number of `result` values.
 * The `result` values will be passed as arguments, in order, to the next task.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This will be passed the results of the last task's
 * callback. Invoked with (err, [results]).
 * @returns undefined
 * @example
 *
 * async.waterfall([
 *     function(callback) {
 *         callback(null, 'one', 'two');
 *     },
 *     function(arg1, arg2, callback) {
 *         // arg1 now equals 'one' and arg2 now equals 'two'
 *         callback(null, 'three');
 *     },
 *     function(arg1, callback) {
 *         // arg1 now equals 'three'
 *         callback(null, 'done');
 *     }
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 *
 * // Or, with named functions:
 * async.waterfall([
 *     myFirstFunction,
 *     mySecondFunction,
 *     myLastFunction,
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 * function myFirstFunction(callback) {
 *     callback(null, 'one', 'two');
 * }
 * function mySecondFunction(arg1, arg2, callback) {
 *     // arg1 now equals 'one' and arg2 now equals 'two'
 *     callback(null, 'three');
 * }
 * function myLastFunction(arg1, callback) {
 *     // arg1 now equals 'three'
 *     callback(null, 'done');
 * }
 */
},{"lodash/isArray":"node_modules/lodash/isArray.js","lodash/noop":"node_modules/lodash/noop.js","./internal/once":"node_modules/async/internal/once.js","./internal/slice":"node_modules/async/internal/slice.js","./internal/onlyOnce":"node_modules/async/internal/onlyOnce.js","./internal/wrapAsync":"node_modules/async/internal/wrapAsync.js"}],"node_modules/async/internal/parallel.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _parallel;

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _isArrayLike = require('lodash/isArrayLike');

var _isArrayLike2 = _interopRequireDefault(_isArrayLike);

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

var _wrapAsync = require('./wrapAsync');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _parallel(eachfn, tasks, callback) {
    callback = callback || _noop2.default;
    var results = (0, _isArrayLike2.default)(tasks) ? [] : {};

    eachfn(tasks, function (task, key, callback) {
        (0, _wrapAsync2.default)(task)(function (err, result) {
            if (arguments.length > 2) {
                result = (0, _slice2.default)(arguments, 1);
            }
            results[key] = result;
            callback(err);
        });
    }, function (err) {
        callback(err, results);
    });
}
module.exports = exports['default'];
},{"lodash/noop":"node_modules/lodash/noop.js","lodash/isArrayLike":"node_modules/lodash/isArrayLike.js","./slice":"node_modules/async/internal/slice.js","./wrapAsync":"node_modules/async/internal/wrapAsync.js"}],"node_modules/async/parallel.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parallelLimit;

var _eachOf = require('./eachOf');

var _eachOf2 = _interopRequireDefault(_eachOf);

var _parallel = require('./internal/parallel');

var _parallel2 = _interopRequireDefault(_parallel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Run the `tasks` collection of functions in parallel, without waiting until
 * the previous function has completed. If any of the functions pass an error to
 * its callback, the main `callback` is immediately called with the value of the
 * error. Once the `tasks` have completed, the results are passed to the final
 * `callback` as an array.
 *
 * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
 * parallel execution of code.  If your tasks do not use any timers or perform
 * any I/O, they will actually be executed in series.  Any synchronous setup
 * sections for each task will happen one after the other.  JavaScript remains
 * single-threaded.
 *
 * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
 * execution of other tasks when a task fails.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 * results from {@link async.parallel}.
 *
 * @name parallel
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 *
 * @example
 * async.parallel([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     // the results array will equal ['one','two'] even though
 *     // the second function had a shorter timeout.
 * });
 *
 * // an example using an object instead of an array
 * async.parallel({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     // results is now equals to: {one: 1, two: 2}
 * });
 */
function parallelLimit(tasks, callback) {
  (0, _parallel2.default)(_eachOf2.default, tasks, callback);
}
module.exports = exports['default'];
},{"./eachOf":"node_modules/async/eachOf.js","./internal/parallel":"node_modules/async/internal/parallel.js"}],"node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/secp256k1-lib/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
'use strict';

// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

var BN = require('bn.js');
var EC = require('elliptic').ec;

var ec = new EC('secp256k1');
var ecparams = ec.curve;

exports.privateKeyExport = function (privateKey, compressed) {
  var d = new BN(privateKey);
  if (d.ucmp(ecparams.n) >= 0) {
    throw new Error('couldn\'t export to DER format');
  }

  var point = ec.g.mul(d);
  return toPublicKey(point.getX(), point.getY(), compressed);
};

exports.privateKeyModInverse = function (privateKey) {
  var bn = new BN(privateKey);
  if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
    throw new Error('private key range is invalid');
  }

  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
};

exports.signatureImport = function (sigObj) {
  var r = new BN(sigObj.r);
  if (r.ucmp(ecparams.n) >= 0) {
    r = new BN(0);
  }

  var s = new BN(sigObj.s);
  if (s.ucmp(ecparams.n) >= 0) {
    s = new BN(0);
  }

  return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
};

exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
  var point = ec.keyFromPublic(publicKey);

  var scalar = new BN(privateKey);
  if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
    throw new Error('scalar was invalid (zero or overflow)');
  }

  var shared = point.pub.mul(scalar);
  return toPublicKey(shared.getX(), shared.getY(), compressed);
};

var toPublicKey = function toPublicKey(x, y, compressed) {
  var publicKey = void 0;

  if (compressed) {
    publicKey = Buffer.alloc(33);
    publicKey[0] = y.isOdd() ? 0x03 : 0x02;
    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
  } else {
    publicKey = Buffer.alloc(65);
    publicKey[0] = 0x04;
    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
    y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
  }

  return publicKey;
};
},{"bn.js":"node_modules/bn.js/lib/bn.js","elliptic":"node_modules/elliptic/lib/elliptic.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/secp256k1-lib/der.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";

// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
// begin
0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
// private key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// middle
0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
// public key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
// begin
0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
// private key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// middle
0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
// public key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

exports.privateKeyExport = function (privateKey, publicKey, compressed) {
  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
  privateKey.copy(result, compressed ? 8 : 9);
  publicKey.copy(result, compressed ? 181 : 214);
  return result;
};

exports.privateKeyImport = function (privateKey) {
  var length = privateKey.length;

  // sequence header
  var index = 0;
  if (length < index + 1 || privateKey[index] !== 0x30) return null;
  index += 1;

  // sequence length constructor
  if (length < index + 1 || !(privateKey[index] & 0x80)) return null;

  var lenb = privateKey[index] & 0x7f;
  index += 1;
  if (lenb < 1 || lenb > 2) return null;
  if (length < index + lenb) return null;

  // sequence length
  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
  index += lenb;
  if (length < index + len) return null;

  // sequence element 0: version number (=1)
  if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
    return null;
  }
  index += 3;

  // sequence element 1: octet string, up to 32 bytes
  if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
    return null;
  }

  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
};

exports.signatureImportLax = function (signature) {
  var r = Buffer.alloc(32, 0);
  var s = Buffer.alloc(32, 0);

  var length = signature.length;
  var index = 0;

  // sequence tag byte
  if (signature[index++] !== 0x30) {
    return null;
  }

  // sequence length byte
  var lenbyte = signature[index++];
  if (lenbyte & 0x80) {
    index += lenbyte - 0x80;
    if (index > length) {
      return null;
    }
  }

  // sequence tag byte for r
  if (signature[index++] !== 0x02) {
    return null;
  }

  // length for r
  var rlen = signature[index++];
  if (rlen & 0x80) {
    lenbyte = rlen - 0x80;
    if (index + lenbyte > length) {
      return null;
    }
    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
      rlen = (rlen << 8) + signature[index];
    }
  }
  if (rlen > length - index) {
    return null;
  }
  var rindex = index;
  index += rlen;

  // sequence tag byte for s
  if (signature[index++] !== 0x02) {
    return null;
  }

  // length for s
  var slen = signature[index++];
  if (slen & 0x80) {
    lenbyte = slen - 0x80;
    if (index + lenbyte > length) {
      return null;
    }
    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
      slen = (slen << 8) + signature[index];
    }
  }
  if (slen > length - index) {
    return null;
  }
  var sindex = index;
  index += slen;

  // ignore leading zeros in r
  for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1) {}
  // copy r value
  if (rlen > 32) {
    return null;
  }
  var rvalue = signature.slice(rindex, rindex + rlen);
  rvalue.copy(r, 32 - rvalue.length);

  // ignore leading zeros in s
  for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1) {}
  // copy s value
  if (slen > 32) {
    return null;
  }
  var svalue = signature.slice(sindex, sindex + slen);
  svalue.copy(s, 32 - svalue.length);

  return { r: r, s: s };
};
},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/secp256k1-adapter.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
'use strict';

var secp256k1 = require('ethereum-cryptography/secp256k1');

var secp256k1v3 = require('./secp256k1-lib/index');
var der = require('./secp256k1-lib/der');

/**
 * Verify an ECDSA privateKey
 * @method privateKeyVerify
 * @param {Buffer} privateKey
 * @return {boolean}
 */
var privateKeyVerify = function privateKeyVerify(privateKey) {
  // secp256k1 v4 version throws when privateKey length is not 32
  if (privateKey.length !== 32) {
    return false;
  }

  return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
};

/**
 * Export a privateKey in DER format
 * @method privateKeyExport
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {boolean}
 */
var privateKeyExport = function privateKeyExport(privateKey, compressed) {
  // privateKeyExport method is not part of secp256k1 v4 package
  // this implementation is based on v3
  if (privateKey.length !== 32) {
    throw new RangeError('private key length is invalid');
  }

  var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);

  return der.privateKeyExport(privateKey, publicKey, compressed);
};

/**
 * Import a privateKey in DER format
 * @method privateKeyImport
 * @param {Buffer} privateKey
 * @return {Buffer}
 */

var privateKeyImport = function privateKeyImport(privateKey) {
  // privateKeyImport method is not part of secp256k1 v4 package
  // this implementation is based on v3
  privateKey = der.privateKeyImport(privateKey);
  if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {
    return privateKey;
  }

  throw new Error("couldn't import from DER format");
};

/**
 * Negate a privateKey by subtracting it from the order of the curve's base point
 * @method privateKeyNegate
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
var privateKeyNegate = function privateKeyNegate(privateKey) {
  return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
};

/**
 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
 * @method privateKeyModInverse
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
var privateKeyModInverse = function privateKeyModInverse(privateKey) {
  if (privateKey.length !== 32) {
    throw new Error('private key length is invalid');
  }

  return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
};

/**
 * Tweak a privateKey by adding tweak to it.
 * @method privateKeyTweakAdd
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */
var privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {
  return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
};

/**
 * Tweak a privateKey by multiplying it by a tweak.
 * @method privateKeyTweakMul
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */
var privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {
  return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
};

/**
 * Compute the public key for a privateKey.
 * @method publicKeyCreate
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyCreate = function publicKeyCreate(privateKey, compressed) {
  return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
};

/**
 * Convert a publicKey to compressed or uncompressed form.
 * @method publicKeyConvert
 * @param {Buffer} publicKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyConvert = function publicKeyConvert(publicKey, compressed) {
  return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
};

/**
 * Verify an ECDSA publicKey.
 * @method publicKeyVerify
 * @param {Buffer} publicKey
 * @return {boolean}
 */
var publicKeyVerify = function publicKeyVerify(publicKey) {
  // secp256k1 v4 version throws when publicKey length is not 33 or 65
  if (publicKey.length !== 33 && publicKey.length !== 65) {
    return false;
  }

  return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
};

/**
 * Tweak a publicKey by adding tweak times the generator to it.
 * @method publicKeyTweakAdd
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {
  return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};

/**
 * Tweak a publicKey by multiplying it by a tweak value
 * @method publicKeyTweakMul
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {
  return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};

/**
 * Add a given publicKeys together.
 * @method publicKeyCombine
 * @param {Array<Buffer>} publicKeys
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {
  var keys = [];
  publicKeys.forEach(function (publicKey) {
    keys.push(Uint8Array.from(publicKey));
  });

  return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
};

/**
 * Convert a signature to a normalized lower-S form.
 * @method signatureNormalize
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureNormalize = function signatureNormalize(signature) {
  return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
};

/**
 * Serialize an ECDSA signature in DER format.
 * @method signatureExport
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureExport = function signatureExport(signature) {
  return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
};

/**
 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImport
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureImport = function signatureImport(signature) {
  return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
};

/**
 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImportLax
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureImportLax = function signatureImportLax(signature) {
  // signatureImportLax method is not part of secp256k1 v4 package
  // this implementation is based on v3
  // ensure that signature is greater than 0
  if (signature.length === 0) {
    throw new RangeError('signature length is invalid');
  }

  var sigObj = der.signatureImportLax(signature);
  if (sigObj === null) {
    throw new Error("couldn't parse DER signature");
  }

  return secp256k1v3.signatureImport(sigObj);
};

/**
 * Create an ECDSA signature. Always return low-S signature.
 * @method sign
 * @param {Buffer} message
 * @param {Buffer} privateKey
 * @param {Object} options
 * @return {Buffer}
 */
var sign = function sign(message, privateKey, options) {
  if (options === null) {
    throw new TypeError('options should be an Object');
  }

  var signOptions = void 0;

  if (options) {
    signOptions = {};

    if (options.data === null) {
      throw new TypeError('options.data should be a Buffer');
    }

    if (options.data) {
      // validate option.data length
      if (options.data.length !== 32) {
        throw new RangeError('options.data length is invalid');
      }

      signOptions.data = new Uint8Array(options.data);
    }

    if (options.noncefn === null) {
      throw new TypeError('options.noncefn should be a Function');
    }

    if (options.noncefn) {
      //  convert option.noncefn function signature
      signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
        var bufferAlgo = algo != null ? Buffer.from(algo) : null;
        var bufferData = data != null ? Buffer.from(data) : null;

        var buffer = Buffer.from('');

        if (options.noncefn) {
          buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
        }

        return Uint8Array.from(buffer);
      };
    }
  }

  var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);

  return {
    signature: Buffer.from(sig.signature),
    recovery: sig.recid
  };
};

/**
 * Verify an ECDSA signature.
 * @method verify
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Buffer} publicKey
 * @return {boolean}
 */
var verify = function verify(message, signature, publicKey) {
  // note: secp256k1 v4 verify method has a different argument order
  return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
};

/**
 * Recover an ECDSA public key from a signature.
 * @method recover
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Number} recid
 * @param {boolean} compressed
 * @return {Buffer}
 */
var recover = function recover(message, signature, recid, compressed) {
  // note: secp256k1 v4 recover method has a different argument order
  return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
};

/**
 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
 * @method ecdh
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
var ecdh = function ecdh(publicKey, privateKey) {
  // note: secp256k1 v3 doesn't allow optional parameter
  return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
};

/**
 * Compute an EC Diffie-Hellman secret and return public key as result
 * @method ecdhUnsafe
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
var ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {
  // ecdhUnsafe method is not part of secp256k1 v4 package
  // this implementation is based on v3
  // ensure valid publicKey length
  if (publicKey.length !== 33 && publicKey.length !== 65) {
    throw new RangeError('public key length is invalid');
  }

  // ensure valid privateKey length
  if (privateKey.length !== 32) {
    throw new RangeError('private key length is invalid');
  }

  return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
};

module.exports = {
  privateKeyVerify: privateKeyVerify,
  privateKeyExport: privateKeyExport,
  privateKeyImport: privateKeyImport,
  privateKeyNegate: privateKeyNegate,
  privateKeyModInverse: privateKeyModInverse,
  privateKeyTweakAdd: privateKeyTweakAdd,
  privateKeyTweakMul: privateKeyTweakMul,

  publicKeyCreate: publicKeyCreate,
  publicKeyConvert: publicKeyConvert,
  publicKeyVerify: publicKeyVerify,
  publicKeyTweakAdd: publicKeyTweakAdd,
  publicKeyTweakMul: publicKeyTweakMul,
  publicKeyCombine: publicKeyCombine,

  signatureNormalize: signatureNormalize,
  signatureExport: signatureExport,
  signatureImport: signatureImport,
  signatureImportLax: signatureImportLax,

  sign: sign,
  verify: verify,
  recover: recover,

  ecdh: ecdh,
  ecdhUnsafe: ecdhUnsafe
};
},{"ethereum-cryptography/secp256k1":"node_modules/ethereum-cryptography/secp256k1.js","./secp256k1-lib/index":"node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/secp256k1-lib/index.js","./secp256k1-lib/der":"node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/secp256k1-lib/der.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/index.js":[function(require,module,exports) {

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _require = require('ethereum-cryptography/keccak'),
    keccak224 = _require.keccak224,
    keccak384 = _require.keccak384,
    k256 = _require.keccak256,
    keccak512 = _require.keccak512;

var secp256k1 = require('./secp256k1-adapter');
var assert = require('assert');
var rlp = require('rlp');
var BN = require('bn.js');
var createHash = require('create-hash');
var Buffer = require('safe-buffer').Buffer;
Object.assign(exports, require('ethjs-util'));

/**
 * the max integer that this VM can handle (a ```BN```)
 * @var {BN} MAX_INTEGER
 */
exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);

/**
 * 2^256 (a ```BN```)
 * @var {BN} TWO_POW256
 */
exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);

/**
 * Keccak-256 hash of null (a ```String```)
 * @var {String} KECCAK256_NULL_S
 */
exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;

/**
 * Keccak-256 hash of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_NULL
 */
exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
exports.SHA3_NULL = exports.KECCAK256_NULL;

/**
 * Keccak-256 of an RLP of an empty array (a ```String```)
 * @var {String} KECCAK256_RLP_ARRAY_S
 */
exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;

/**
 * Keccak-256 of an RLP of an empty array (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP_ARRAY
 */
exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;

/**
 * Keccak-256 hash of the RLP of null  (a ```String```)
 * @var {String} KECCAK256_RLP_S
 */
exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;

/**
 * Keccak-256 hash of the RLP of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP
 */
exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
exports.SHA3_RLP = exports.KECCAK256_RLP;

/**
 * [`BN`](https://github.com/indutny/bn.js)
 * @var {Function}
 */
exports.BN = BN;

/**
 * [`rlp`](https://github.com/ethereumjs/rlp)
 * @var {Function}
 */
exports.rlp = rlp;

/**
 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
 * @var {Object}
 */
exports.secp256k1 = secp256k1;

/**
 * Returns a buffer filled with 0s
 * @method zeros
 * @param {Number} bytes  the number of bytes the buffer should be
 * @return {Buffer}
 */
exports.zeros = function (bytes) {
  return Buffer.allocUnsafe(bytes).fill(0);
};

/**
  * Returns a zero address
  * @method zeroAddress
  * @return {String}
  */
exports.zeroAddress = function () {
  var addressLength = 20;
  var zeroAddress = exports.zeros(addressLength);
  return exports.bufferToHex(zeroAddress);
};

/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @method lsetLength
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @param {Boolean} [right=false] whether to start padding form the left or right
 * @return {Buffer|Array}
 */
exports.setLengthLeft = exports.setLength = function (msg, length, right) {
  var buf = exports.zeros(length);
  msg = exports.toBuffer(msg);
  if (right) {
    if (msg.length < length) {
      msg.copy(buf);
      return buf;
    }
    return msg.slice(0, length);
  } else {
    if (msg.length < length) {
      msg.copy(buf, length - msg.length);
      return buf;
    }
    return msg.slice(-length);
  }
};

/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @return {Buffer|Array}
 */
exports.setLengthRight = function (msg, length) {
  return exports.setLength(msg, length, true);
};

/**
 * Trims leading zeros from a `Buffer` or an `Array`
 * @param {Buffer|Array|String} a
 * @return {Buffer|Array|String}
 */
exports.unpad = exports.stripZeros = function (a) {
  a = exports.stripHexPrefix(a);
  var first = a[0];
  while (a.length > 0 && first.toString() === '0') {
    a = a.slice(1);
    first = a[0];
  }
  return a;
};
/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param {*} v the value
 */
exports.toBuffer = function (v) {
  if (!Buffer.isBuffer(v)) {
    if (Array.isArray(v)) {
      v = Buffer.from(v);
    } else if (typeof v === 'string') {
      if (exports.isHexString(v)) {
        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
      } else {
        v = Buffer.from(v);
      }
    } else if (typeof v === 'number') {
      v = exports.intToBuffer(v);
    } else if (v === null || v === undefined) {
      v = Buffer.allocUnsafe(0);
    } else if (BN.isBN(v)) {
      v = v.toArrayLike(Buffer);
    } else if (v.toArray) {
      // converts a BN to a Buffer
      v = Buffer.from(v.toArray());
    } else {
      throw new Error('invalid type');
    }
  }
  return v;
};

/**
 * Converts a `Buffer` to a `Number`
 * @param {Buffer} buf
 * @return {Number}
 * @throws If the input number exceeds 53 bits.
 */
exports.bufferToInt = function (buf) {
  return new BN(exports.toBuffer(buf)).toNumber();
};

/**
 * Converts a `Buffer` into a hex `String`
 * @param {Buffer} buf
 * @return {String}
 */
exports.bufferToHex = function (buf) {
  buf = exports.toBuffer(buf);
  return '0x' + buf.toString('hex');
};

/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param {Buffer} num
 * @return {BN}
 */
exports.fromSigned = function (num) {
  return new BN(num).fromTwos(256);
};

/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param {BN} num
 * @return {Buffer}
 */
exports.toUnsigned = function (num) {
  return Buffer.from(num.toTwos(256).toArray());
};

/**
 * Creates Keccak hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the Keccak width
 * @return {Buffer}
 */
exports.keccak = function (a, bits) {
  a = exports.toBuffer(a);
  if (!bits) bits = 256;

  switch (bits) {
    case 224:
      {
        return keccak224(a);
      }
    case 256:
      {
        return k256(a);
      }
    case 384:
      {
        return keccak384(a);
      }
    case 512:
      {
        return keccak512(a);
      }
    default:
      {
        throw new Error('Invald algorithm: keccak' + bits);
      }
  }
};

/**
 * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.keccak256 = function (a) {
  return exports.keccak(a);
};

/**
 * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the SHA-3 width
 * @return {Buffer}
 */
exports.sha3 = exports.keccak;

/**
 * Creates SHA256 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.sha256 = function (a) {
  a = exports.toBuffer(a);
  return createHash('sha256').update(a).digest();
};

/**
 * Creates RIPEMD160 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Boolean} padded whether it should be padded to 256 bits or not
 * @return {Buffer}
 */
exports.ripemd160 = function (a, padded) {
  a = exports.toBuffer(a);
  var hash = createHash('rmd160').update(a).digest();
  if (padded === true) {
    return exports.setLength(hash, 32);
  } else {
    return hash;
  }
};

/**
 * Creates SHA-3 hash of the RLP encoded version of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.rlphash = function (a) {
  return exports.keccak(rlp.encode(a));
};

/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 * @param {Buffer} privateKey
 * @return {Boolean}
 */
exports.isValidPrivate = function (privateKey) {
  return secp256k1.privateKeyVerify(privateKey);
};

/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Boolean}
 */
exports.isValidPublic = function (publicKey, sanitize) {
  if (publicKey.length === 64) {
    // Convert to SEC1 for secp256k1
    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
  }

  if (!sanitize) {
    return false;
  }

  return secp256k1.publicKeyVerify(publicKey);
};

/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Buffer}
 */
exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
  pubKey = exports.toBuffer(pubKey);
  if (sanitize && pubKey.length !== 64) {
    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
  }
  assert(pubKey.length === 64);
  // Only take the lower 160bits of the hash
  return exports.keccak(pubKey).slice(-20);
};

/**
 * Returns the ethereum public key of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
var privateToPublic = exports.privateToPublic = function (privateKey) {
  privateKey = exports.toBuffer(privateKey);
  // skip the type flag and use the X, Y points
  return secp256k1.publicKeyCreate(privateKey, false).slice(1);
};

/**
 * Converts a public key to the Ethereum format.
 * @param {Buffer} publicKey
 * @return {Buffer}
 */
exports.importPublic = function (publicKey) {
  publicKey = exports.toBuffer(publicKey);
  if (publicKey.length !== 64) {
    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
  }
  return publicKey;
};

/**
 * ECDSA sign
 * @param {Buffer} msgHash
 * @param {Buffer} privateKey
 * @return {Object}
 */
exports.ecsign = function (msgHash, privateKey) {
  var sig = secp256k1.sign(msgHash, privateKey);

  var ret = {};
  ret.r = sig.signature.slice(0, 32);
  ret.s = sig.signature.slice(32, 64);
  ret.v = sig.recovery + 27;
  return ret;
};

/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 * @param message
 * @returns {Buffer} hash
 */
exports.hashPersonalMessage = function (message) {
  var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
  return exports.keccak(Buffer.concat([prefix, message]));
};

/**
 * ECDSA public key recovery from signature
 * @param {Buffer} msgHash
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {Buffer} publicKey
 */
exports.ecrecover = function (msgHash, v, r, s) {
  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
  var recovery = v - 27;
  if (recovery !== 0 && recovery !== 1) {
    throw new Error('Invalid signature v value');
  }
  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
};

/**
 * Convert signature parameters into the format of `eth_sign` RPC method
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {String} sig
 */
exports.toRpcSig = function (v, r, s) {
  // NOTE: with potential introduction of chainId this might need to be updated
  if (v !== 27 && v !== 28) {
    throw new Error('Invalid recovery id');
  }

  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
  return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
};

/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 * @param {String} sig
 * @return {Object}
 */
exports.fromRpcSig = function (sig) {
  sig = exports.toBuffer(sig);

  // NOTE: with potential introduction of chainId this might need to be updated
  if (sig.length !== 65) {
    throw new Error('Invalid signature length');
  }

  var v = sig[64];
  // support both versions of `eth_sign` responses
  if (v < 27) {
    v += 27;
  }

  return {
    v: v,
    r: sig.slice(0, 32),
    s: sig.slice(32, 64)
  };
};

/**
 * Returns the ethereum address of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
exports.privateToAddress = function (privateKey) {
  return exports.publicToAddress(privateToPublic(privateKey));
};

/**
 * Checks if the address is a valid. Accepts checksummed addresses too
 * @param {String} address
 * @return {Boolean}
 */
exports.isValidAddress = function (address) {
  return (/^0x[0-9a-fA-F]{40}$/.test(address)
  );
};

/**
  * Checks if a given address is a zero address
  * @method isZeroAddress
  * @param {String} address
  * @return {Boolean}
  */
exports.isZeroAddress = function (address) {
  var zeroAddress = exports.zeroAddress();
  return zeroAddress === exports.addHexPrefix(address);
};

/**
 * Returns a checksummed address
 * @param {String} address
 * @return {String}
 */
exports.toChecksumAddress = function (address) {
  address = exports.stripHexPrefix(address).toLowerCase();
  var hash = exports.keccak(address).toString('hex');
  var ret = '0x';

  for (var i = 0; i < address.length; i++) {
    if (parseInt(hash[i], 16) >= 8) {
      ret += address[i].toUpperCase();
    } else {
      ret += address[i];
    }
  }

  return ret;
};

/**
 * Checks if the address is a valid checksummed address
 * @param {Buffer} address
 * @return {Boolean}
 */
exports.isValidChecksumAddress = function (address) {
  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
};

/**
 * Generates an address of a newly created contract
 * @param {Buffer} from the address which is creating this new address
 * @param {Buffer} nonce the nonce of the from account
 * @return {Buffer}
 */
exports.generateAddress = function (from, nonce) {
  from = exports.toBuffer(from);
  nonce = new BN(nonce);

  if (nonce.isZero()) {
    // in RLP we want to encode null in the case of zero nonce
    // read the RLP documentation for an answer if you dare
    nonce = null;
  } else {
    nonce = Buffer.from(nonce.toArray());
  }

  // Only take the lower 160bits of the hash
  return exports.rlphash([from, nonce]).slice(-20);
};

/**
 * Returns true if the supplied address belongs to a precompiled account (Byzantium)
 * @param {Buffer|String} address
 * @return {Boolean}
 */
exports.isPrecompiled = function (address) {
  var a = exports.unpad(address);
  return a.length === 1 && a[0] >= 1 && a[0] <= 8;
};

/**
 * Adds "0x" to a given `String` if it does not already start with "0x"
 * @param {String} str
 * @return {String}
 */
exports.addHexPrefix = function (str) {
  if (typeof str !== 'string') {
    return str;
  }

  return exports.isHexPrefixed(str) ? str : '0x' + str;
};

/**
 * Validate ECDSA signature
 * @method isValidSignature
 * @param {Buffer} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @param {Boolean} [homestead=true]
 * @return {Boolean}
 */

exports.isValidSignature = function (v, r, s, homestead) {
  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);

  if (r.length !== 32 || s.length !== 32) {
    return false;
  }

  if (v !== 27 && v !== 28) {
    return false;
  }

  r = new BN(r);
  s = new BN(s);

  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
    return false;
  }

  if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {
    return false;
  }

  return true;
};

/**
 * Converts a `Buffer` or `Array` to JSON
 * @param {Buffer|Array} ba
 * @return {Array|String|null}
 */
exports.baToJSON = function (ba) {
  if (Buffer.isBuffer(ba)) {
    return '0x' + ba.toString('hex');
  } else if (ba instanceof Array) {
    var array = [];
    for (var i = 0; i < ba.length; i++) {
      array.push(exports.baToJSON(ba[i]));
    }
    return array;
  }
};

/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param {Object} self the `Object` to define properties on
 * @param {Array} fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param {*} data data to be validated against the definitions
 */
exports.defineProperties = function (self, fields, data) {
  self.raw = [];
  self._fields = [];

  // attach the `toJSON`
  self.toJSON = function (label) {
    if (label) {
      var obj = {};
      self._fields.forEach(function (field) {
        obj[field] = '0x' + self[field].toString('hex');
      });
      return obj;
    }
    return exports.baToJSON(this.raw);
  };

  self.serialize = function serialize() {
    return rlp.encode(self.raw);
  };

  fields.forEach(function (field, i) {
    self._fields.push(field.name);
    function getter() {
      return self.raw[i];
    }
    function setter(v) {
      v = exports.toBuffer(v);

      if (v.toString('hex') === '00' && !field.allowZero) {
        v = Buffer.allocUnsafe(0);
      }

      if (field.allowLess && field.length) {
        v = exports.stripZeros(v);
        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
      } else if (!(field.allowZero && v.length === 0) && field.length) {
        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
      }

      self.raw[i] = v;
    }

    Object.defineProperty(self, field.name, {
      enumerable: true,
      configurable: true,
      get: getter,
      set: setter
    });

    if (field.default) {
      self[field.name] = field.default;
    }

    // attach alias
    if (field.alias) {
      Object.defineProperty(self, field.alias, {
        enumerable: false,
        configurable: true,
        set: setter,
        get: getter
      });
    }
  });

  // if the constuctor is passed data
  if (data) {
    if (typeof data === 'string') {
      data = Buffer.from(exports.stripHexPrefix(data), 'hex');
    }

    if (Buffer.isBuffer(data)) {
      data = rlp.decode(data);
    }

    if (Array.isArray(data)) {
      if (data.length > self._fields.length) {
        throw new Error('wrong number of fields in data');
      }

      // make sure all the items are buffers
      data.forEach(function (d, i) {
        self[self._fields[i]] = exports.toBuffer(d);
      });
    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
      var keys = Object.keys(data);
      fields.forEach(function (field) {
        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
      });
    } else {
      throw new Error('invalid data');
    }
  }
};
},{"ethereum-cryptography/keccak":"node_modules/ethereum-cryptography/keccak.js","./secp256k1-adapter":"node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/secp256k1-adapter.js","assert":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/assert/assert.js","rlp":"node_modules/rlp/dist.browser/index.js","bn.js":"node_modules/bn.js/lib/bn.js","create-hash":"node_modules/create-hash/browser.js","safe-buffer":"node_modules/safe-buffer/index.js","ethjs-util":"node_modules/ethjs-util/lib/index.js"}],"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
Object.defineProperty(exports, "__esModule", { value: true });
var BN = require("bn.js");
var EC = require('elliptic').ec;
var ec = new EC('secp256k1');
var ecparams = ec.curve;
exports.privateKeyExport = function (privateKey, compressed) {
    if (compressed === void 0) { compressed = true; }
    var d = new BN(privateKey);
    if (d.ucmp(ecparams.n) >= 0) {
        throw new Error("couldn't export to DER format");
    }
    var point = ec.g.mul(d);
    return toPublicKey(point.getX(), point.getY(), compressed);
};
exports.privateKeyModInverse = function (privateKey) {
    var bn = new BN(privateKey);
    if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
        throw new Error('private key range is invalid');
    }
    return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
};
exports.signatureImport = function (sigObj) {
    var r = new BN(sigObj.r);
    if (r.ucmp(ecparams.n) >= 0) {
        r = new BN(0);
    }
    var s = new BN(sigObj.s);
    if (s.ucmp(ecparams.n) >= 0) {
        s = new BN(0);
    }
    return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
};
exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
    if (compressed === void 0) { compressed = true; }
    var point = ec.keyFromPublic(publicKey);
    var scalar = new BN(privateKey);
    if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
        throw new Error('scalar was invalid (zero or overflow)');
    }
    var shared = point.pub.mul(scalar);
    return toPublicKey(shared.getX(), shared.getY(), compressed);
};
var toPublicKey = function (x, y, compressed) {
    var publicKey;
    if (compressed) {
        publicKey = Buffer.alloc(33);
        publicKey[0] = y.isOdd() ? 0x03 : 0x02;
        x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
    }
    else {
        publicKey = Buffer.alloc(65);
        publicKey[0] = 0x04;
        x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
        y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
    }
    return publicKey;
};

},{"bn.js":"node_modules/bn.js/lib/bn.js","elliptic":"node_modules/elliptic/lib/elliptic.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/der.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
Object.defineProperty(exports, "__esModule", { value: true });
var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
    // begin
    0x30,
    0x81,
    0xd3,
    0x02,
    0x01,
    0x01,
    0x04,
    0x20,
    // private key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    // middle
    0xa0,
    0x81,
    0x85,
    0x30,
    0x81,
    0x82,
    0x02,
    0x01,
    0x01,
    0x30,
    0x2c,
    0x06,
    0x07,
    0x2a,
    0x86,
    0x48,
    0xce,
    0x3d,
    0x01,
    0x01,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfe,
    0xff,
    0xff,
    0xfc,
    0x2f,
    0x30,
    0x06,
    0x04,
    0x01,
    0x00,
    0x04,
    0x01,
    0x07,
    0x04,
    0x21,
    0x02,
    0x79,
    0xbe,
    0x66,
    0x7e,
    0xf9,
    0xdc,
    0xbb,
    0xac,
    0x55,
    0xa0,
    0x62,
    0x95,
    0xce,
    0x87,
    0x0b,
    0x07,
    0x02,
    0x9b,
    0xfc,
    0xdb,
    0x2d,
    0xce,
    0x28,
    0xd9,
    0x59,
    0xf2,
    0x81,
    0x5b,
    0x16,
    0xf8,
    0x17,
    0x98,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfe,
    0xba,
    0xae,
    0xdc,
    0xe6,
    0xaf,
    0x48,
    0xa0,
    0x3b,
    0xbf,
    0xd2,
    0x5e,
    0x8c,
    0xd0,
    0x36,
    0x41,
    0x41,
    0x02,
    0x01,
    0x01,
    0xa1,
    0x24,
    0x03,
    0x22,
    0x00,
    // public key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
]);
var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
    // begin
    0x30,
    0x82,
    0x01,
    0x13,
    0x02,
    0x01,
    0x01,
    0x04,
    0x20,
    // private key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    // middle
    0xa0,
    0x81,
    0xa5,
    0x30,
    0x81,
    0xa2,
    0x02,
    0x01,
    0x01,
    0x30,
    0x2c,
    0x06,
    0x07,
    0x2a,
    0x86,
    0x48,
    0xce,
    0x3d,
    0x01,
    0x01,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfe,
    0xff,
    0xff,
    0xfc,
    0x2f,
    0x30,
    0x06,
    0x04,
    0x01,
    0x00,
    0x04,
    0x01,
    0x07,
    0x04,
    0x41,
    0x04,
    0x79,
    0xbe,
    0x66,
    0x7e,
    0xf9,
    0xdc,
    0xbb,
    0xac,
    0x55,
    0xa0,
    0x62,
    0x95,
    0xce,
    0x87,
    0x0b,
    0x07,
    0x02,
    0x9b,
    0xfc,
    0xdb,
    0x2d,
    0xce,
    0x28,
    0xd9,
    0x59,
    0xf2,
    0x81,
    0x5b,
    0x16,
    0xf8,
    0x17,
    0x98,
    0x48,
    0x3a,
    0xda,
    0x77,
    0x26,
    0xa3,
    0xc4,
    0x65,
    0x5d,
    0xa4,
    0xfb,
    0xfc,
    0x0e,
    0x11,
    0x08,
    0xa8,
    0xfd,
    0x17,
    0xb4,
    0x48,
    0xa6,
    0x85,
    0x54,
    0x19,
    0x9c,
    0x47,
    0xd0,
    0x8f,
    0xfb,
    0x10,
    0xd4,
    0xb8,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfe,
    0xba,
    0xae,
    0xdc,
    0xe6,
    0xaf,
    0x48,
    0xa0,
    0x3b,
    0xbf,
    0xd2,
    0x5e,
    0x8c,
    0xd0,
    0x36,
    0x41,
    0x41,
    0x02,
    0x01,
    0x01,
    0xa1,
    0x44,
    0x03,
    0x42,
    0x00,
    // public key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
]);
exports.privateKeyExport = function (privateKey, publicKey, compressed) {
    if (compressed === void 0) { compressed = true; }
    var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
    privateKey.copy(result, compressed ? 8 : 9);
    publicKey.copy(result, compressed ? 181 : 214);
    return result;
};
exports.privateKeyImport = function (privateKey) {
    var length = privateKey.length;
    // sequence header
    var index = 0;
    if (length < index + 1 || privateKey[index] !== 0x30)
        return null;
    index += 1;
    // sequence length constructor
    if (length < index + 1 || !(privateKey[index] & 0x80))
        return null;
    var lenb = privateKey[index] & 0x7f;
    index += 1;
    if (lenb < 1 || lenb > 2)
        return null;
    if (length < index + lenb)
        return null;
    // sequence length
    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
    index += lenb;
    if (length < index + len)
        return null;
    // sequence element 0: version number (=1)
    if (length < index + 3 ||
        privateKey[index] !== 0x02 ||
        privateKey[index + 1] !== 0x01 ||
        privateKey[index + 2] !== 0x01) {
        return null;
    }
    index += 3;
    // sequence element 1: octet string, up to 32 bytes
    if (length < index + 2 ||
        privateKey[index] !== 0x04 ||
        privateKey[index + 1] > 0x20 ||
        length < index + 2 + privateKey[index + 1]) {
        return null;
    }
    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
};
exports.signatureImportLax = function (signature) {
    var r = Buffer.alloc(32, 0);
    var s = Buffer.alloc(32, 0);
    var length = signature.length;
    var index = 0;
    // sequence tag byte
    if (signature[index++] !== 0x30) {
        return null;
    }
    // sequence length byte
    var lenbyte = signature[index++];
    if (lenbyte & 0x80) {
        index += lenbyte - 0x80;
        if (index > length) {
            return null;
        }
    }
    // sequence tag byte for r
    if (signature[index++] !== 0x02) {
        return null;
    }
    // length for r
    var rlen = signature[index++];
    if (rlen & 0x80) {
        lenbyte = rlen - 0x80;
        if (index + lenbyte > length) {
            return null;
        }
        for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)
            ;
        for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
            rlen = (rlen << 8) + signature[index];
    }
    if (rlen > length - index) {
        return null;
    }
    var rindex = index;
    index += rlen;
    // sequence tag byte for s
    if (signature[index++] !== 0x02) {
        return null;
    }
    // length for s
    var slen = signature[index++];
    if (slen & 0x80) {
        lenbyte = slen - 0x80;
        if (index + lenbyte > length) {
            return null;
        }
        for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)
            ;
        for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)
            slen = (slen << 8) + signature[index];
    }
    if (slen > length - index) {
        return null;
    }
    var sindex = index;
    index += slen;
    // ignore leading zeros in r
    for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1)
        ;
    // copy r value
    if (rlen > 32) {
        return null;
    }
    var rvalue = signature.slice(rindex, rindex + rlen);
    rvalue.copy(r, 32 - rvalue.length);
    // ignore leading zeros in s
    for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1)
        ;
    // copy s value
    if (slen > 32) {
        return null;
    }
    var svalue = signature.slice(sindex, sindex + slen);
    svalue.copy(s, 32 - svalue.length);
    return { r: r, s: s };
};

},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ecdhUnsafe = exports.ecdh = exports.recover = exports.verify = exports.sign = exports.signatureImportLax = exports.signatureImport = exports.signatureExport = exports.signatureNormalize = exports.publicKeyCombine = exports.publicKeyTweakMul = exports.publicKeyTweakAdd = exports.publicKeyVerify = exports.publicKeyConvert = exports.publicKeyCreate = exports.privateKeyTweakMul = exports.privateKeyTweakAdd = exports.privateKeyModInverse = exports.privateKeyNegate = exports.privateKeyImport = exports.privateKeyExport = exports.privateKeyVerify = void 0;
var secp256k1 = require('ethereum-cryptography/secp256k1');
var secp256k1v3 = require('./secp256k1v3-lib/index');
var der = require('./secp256k1v3-lib/der');
/**
 * Verify an ECDSA privateKey
 * @method privateKeyVerify
 * @param {Buffer} privateKey
 * @return {boolean}
 */
exports.privateKeyVerify = function (privateKey) {
    // secp256k1 v4 version throws when privateKey length is not 32
    if (privateKey.length !== 32) {
        return false;
    }
    return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
};
/**
 * Export a privateKey in DER format
 * @method privateKeyExport
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {boolean}
 */
exports.privateKeyExport = function (privateKey, compressed) {
    // secp256k1 v4 version throws when privateKey length is not 32
    if (privateKey.length !== 32) {
        throw new RangeError('private key length is invalid');
    }
    var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
    return der.privateKeyExport(privateKey, publicKey, compressed);
};
/**
 * Import a privateKey in DER format
 * @method privateKeyImport
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
exports.privateKeyImport = function (privateKey) {
    // privateKeyImport method is not part of secp256k1 v4 package
    // this implementation is based on v3
    privateKey = der.privateKeyImport(privateKey);
    if (privateKey !== null && privateKey.length === 32 && exports.privateKeyVerify(privateKey)) {
        return privateKey;
    }
    throw new Error("couldn't import from DER format");
};
/**
 * Negate a privateKey by subtracting it from the order of the curve's base point
 * @method privateKeyNegate
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
exports.privateKeyNegate = function (privateKey) {
    return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
};
/**
 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
 * @method privateKeyModInverse
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
exports.privateKeyModInverse = function (privateKey) {
    if (privateKey.length !== 32) {
        throw new Error('private key length is invalid');
    }
    return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
};
/**
 * Tweak a privateKey by adding tweak to it.
 * @method privateKeyTweakAdd
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */
exports.privateKeyTweakAdd = function (privateKey, tweak) {
    return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
};
/**
 * Tweak a privateKey by multiplying it by a tweak.
 * @method privateKeyTweakMul
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */
exports.privateKeyTweakMul = function (privateKey, tweak) {
    return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
};
/**
 * Compute the public key for a privateKey.
 * @method publicKeyCreate
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
exports.publicKeyCreate = function (privateKey, compressed) {
    return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
};
/**
 * Convert a publicKey to compressed or uncompressed form.
 * @method publicKeyConvert
 * @param {Buffer} publicKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
exports.publicKeyConvert = function (publicKey, compressed) {
    return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
};
/**
 * Verify an ECDSA publicKey.
 * @method publicKeyVerify
 * @param {Buffer} publicKey
 * @return {boolean}
 */
exports.publicKeyVerify = function (publicKey) {
    // secp256k1 v4 version throws when publicKey length is not 33 or 65
    if (publicKey.length !== 33 && publicKey.length !== 65) {
        return false;
    }
    return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
};
/**
 * Tweak a publicKey by adding tweak times the generator to it.
 * @method publicKeyTweakAdd
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */
exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
    return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};
/**
 * Tweak a publicKey by multiplying it by a tweak value
 * @method publicKeyTweakMul
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */
exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
    return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};
/**
 * Add a given publicKeys together.
 * @method publicKeyCombine
 * @param {Array<Buffer>} publicKeys
 * @param {boolean} compressed
 * @return {Buffer}
 */
exports.publicKeyCombine = function (publicKeys, compressed) {
    var keys = [];
    publicKeys.forEach(function (publicKey) {
        keys.push(Uint8Array.from(publicKey));
    });
    return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
};
/**
 * Convert a signature to a normalized lower-S form.
 * @method signatureNormalize
 * @param {Buffer} signature
 * @return {Buffer}
 */
exports.signatureNormalize = function (signature) {
    return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
};
/**
 * Serialize an ECDSA signature in DER format.
 * @method signatureExport
 * @param {Buffer} signature
 * @return {Buffer}
 */
exports.signatureExport = function (signature) {
    return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
};
/**
 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImport
 * @param {Buffer} signature
 * @return {Buffer}
 */
exports.signatureImport = function (signature) {
    return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
};
/**
 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImportLax
 * @param {Buffer} signature
 * @return {Buffer}
 */
exports.signatureImportLax = function (signature) {
    // signatureImportLax method is not part of secp256k1 v4 package
    // this implementation is based on v3
    // ensure that signature is greater than 0
    if (signature.length === 0) {
        throw new RangeError('signature length is invalid');
    }
    var sigObj = der.signatureImportLax(signature);
    if (sigObj === null) {
        throw new Error("couldn't parse DER signature");
    }
    return secp256k1v3.signatureImport(sigObj);
};
/**
 * Create an ECDSA signature. Always return low-S signature.
 * @method sign
 * @param {Buffer} message
 * @param {Buffer} privateKey
 * @param {Object} options
 * @return {Buffer}
 */
exports.sign = function (message, privateKey, options) {
    if (options === null) {
        throw new TypeError('options should be an Object');
    }
    var signOptions = undefined;
    if (options) {
        signOptions = {};
        if (options.data === null) {
            // validate option.data length
            throw new TypeError('options.data should be a Buffer');
        }
        if (options.data) {
            if (options.data.length != 32) {
                throw new RangeError('options.data length is invalid');
            }
            signOptions.data = new Uint8Array(options.data);
        }
        if (options.noncefn === null) {
            throw new TypeError('options.noncefn should be a Function');
        }
        if (options.noncefn) {
            // convert option.noncefn function signature
            signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
                var bufferAlgo = algo != null ? Buffer.from(algo) : null;
                var bufferData = data != null ? Buffer.from(data) : null;
                var buffer = Buffer.from('');
                if (options.noncefn) {
                    buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
                }
                return new Uint8Array(buffer);
            };
        }
    }
    var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);
    return {
        signature: Buffer.from(sig.signature),
        recovery: sig.recid,
    };
};
/**
 * Verify an ECDSA signature.
 * @method verify
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Buffer} publicKey
 * @return {boolean}
 */
exports.verify = function (message, signature, publicKey) {
    return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
};
/**
 * Recover an ECDSA public key from a signature.
 * @method recover
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Number} recid
 * @param {boolean} compressed
 * @return {Buffer}
 */
exports.recover = function (message, signature, recid, compressed) {
    return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
};
/**
 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
 * @method ecdh
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
exports.ecdh = function (publicKey, privateKey) {
    // note: secp256k1 v3 doesn't allow optional parameter
    return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
};
exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
    // ecdhUnsafe method is not part of secp256k1 v4 package
    // this implementation is based on v3
    // ensure valid publicKey length
    if (publicKey.length !== 33 && publicKey.length !== 65) {
        throw new RangeError('public key length is invalid');
    }
    // ensure valid privateKey length
    if (privateKey.length !== 32) {
        throw new RangeError('private key length is invalid');
    }
    return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
};

},{"ethereum-cryptography/secp256k1":"node_modules/ethereum-cryptography/secp256k1.js","./secp256k1v3-lib/index":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/index.js","./secp256k1v3-lib/der":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/der.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/constants.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;
var BN = require("bn.js");
/**
 * The max integer that this VM can handle
 */
exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
/**
 * 2^256
 */
exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
/**
 * Keccak-256 hash of null
 */
exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
/**
 * Keccak-256 hash of null
 */
exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
/**
 * Keccak-256 of an RLP of an empty array
 */
exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
/**
 * Keccak-256 of an RLP of an empty array
 */
exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
/**
 * Keccak-256 hash of the RLP of null
 */
exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
/**
 * Keccak-256 hash of the RLP of null
 */
exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');

},{"bn.js":"node_modules/bn.js/lib/bn.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;
var ethjsUtil = require('ethjs-util');
var BN = require("bn.js");
/**
 * Returns a buffer filled with 0s.
 * @param bytes the number of bytes the buffer should be
 */
exports.zeros = function (bytes) {
    return Buffer.allocUnsafe(bytes).fill(0);
};
/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param msg the value to pad (Buffer|Array)
 * @param length the number of bytes the output should be
 * @param right whether to start padding form the left or right
 * @return (Buffer|Array)
 */
exports.setLengthLeft = function (msg, length, right) {
    if (right === void 0) { right = false; }
    var buf = exports.zeros(length);
    msg = exports.toBuffer(msg);
    if (right) {
        if (msg.length < length) {
            msg.copy(buf);
            return buf;
        }
        return msg.slice(0, length);
    }
    else {
        if (msg.length < length) {
            msg.copy(buf, length - msg.length);
            return buf;
        }
        return msg.slice(-length);
    }
};
exports.setLength = exports.setLengthLeft;
/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param msg the value to pad (Buffer|Array)
 * @param length the number of bytes the output should be
 * @return (Buffer|Array)
 */
exports.setLengthRight = function (msg, length) {
    return exports.setLength(msg, length, true);
};
/**
 * Trims leading zeros from a `Buffer` or an `Array`.
 * @param a (Buffer|Array|String)
 * @return (Buffer|Array|String)
 */
exports.unpad = function (a) {
    a = ethjsUtil.stripHexPrefix(a);
    var first = a[0];
    while (a.length > 0 && first.toString() === '0') {
        a = a.slice(1);
        first = a[0];
    }
    return a;
};
exports.stripZeros = exports.unpad;
/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param v the value
 */
exports.toBuffer = function (v) {
    if (!Buffer.isBuffer(v)) {
        if (Array.isArray(v)) {
            v = Buffer.from(v);
        }
        else if (typeof v === 'string') {
            if (ethjsUtil.isHexString(v)) {
                v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');
            }
            else {
                throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + v);
            }
        }
        else if (typeof v === 'number') {
            v = ethjsUtil.intToBuffer(v);
        }
        else if (v === null || v === undefined) {
            v = Buffer.allocUnsafe(0);
        }
        else if (BN.isBN(v)) {
            v = v.toArrayLike(Buffer);
        }
        else if (v.toArray) {
            // converts a BN to a Buffer
            v = Buffer.from(v.toArray());
        }
        else {
            throw new Error('invalid type');
        }
    }
    return v;
};
/**
 * Converts a `Buffer` to a `Number`.
 * @param buf `Buffer` object to convert
 * @throws If the input number exceeds 53 bits.
 */
exports.bufferToInt = function (buf) {
    return new BN(exports.toBuffer(buf)).toNumber();
};
/**
 * Converts a `Buffer` into a `0x`-prefixed hex `String`.
 * @param buf `Buffer` object to convert
 */
exports.bufferToHex = function (buf) {
    buf = exports.toBuffer(buf);
    return '0x' + buf.toString('hex');
};
/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param num Signed integer value
 */
exports.fromSigned = function (num) {
    return new BN(num).fromTwos(256);
};
/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param num
 */
exports.toUnsigned = function (num) {
    return Buffer.from(num.toTwos(256).toArray());
};
/**
 * Adds "0x" to a given `String` if it does not already start with "0x".
 */
exports.addHexPrefix = function (str) {
    if (typeof str !== 'string') {
        return str;
    }
    return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;
};
/**
 * Converts a `Buffer` or `Array` to JSON.
 * @param ba (Buffer|Array)
 * @return (Array|String|null)
 */
exports.baToJSON = function (ba) {
    if (Buffer.isBuffer(ba)) {
        return "0x" + ba.toString('hex');
    }
    else if (ba instanceof Array) {
        var array = [];
        for (var i = 0; i < ba.length; i++) {
            array.push(exports.baToJSON(ba[i]));
        }
        return array;
    }
};

},{"ethjs-util":"node_modules/ethjs-util/lib/index.js","bn.js":"node_modules/bn.js/lib/bn.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/hash.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;
var _a = require('ethereum-cryptography/keccak'), keccak224 = _a.keccak224, keccak384 = _a.keccak384, k256 = _a.keccak256, keccak512 = _a.keccak512;
var createHash = require('create-hash');
var ethjsUtil = require('ethjs-util');
var rlp = require("rlp");
var bytes_1 = require("./bytes");
/**
 * Creates Keccak hash of the input
 * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value
 * it's interpreted as hexadecimal, otherwise as utf8.
 * @param bits The Keccak width
 */
exports.keccak = function (a, bits) {
    if (bits === void 0) { bits = 256; }
    if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {
        a = Buffer.from(a, 'utf8');
    }
    else {
        a = bytes_1.toBuffer(a);
    }
    if (!bits)
        bits = 256;
    switch (bits) {
        case 224: {
            return keccak224(a);
        }
        case 256: {
            return k256(a);
        }
        case 384: {
            return keccak384(a);
        }
        case 512: {
            return keccak512(a);
        }
        default: {
            throw new Error("Invald algorithm: keccak" + bits);
        }
    }
};
/**
 * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
 * @param a The input data (Buffer|Array|String|Number)
 */
exports.keccak256 = function (a) {
    return exports.keccak(a);
};
/**
 * Creates SHA256 hash of the input.
 * @param a The input data (Buffer|Array|String|Number)
 */
exports.sha256 = function (a) {
    a = bytes_1.toBuffer(a);
    return createHash('sha256')
        .update(a)
        .digest();
};
/**
 * Creates RIPEMD160 hash of the input.
 * @param a The input data (Buffer|Array|String|Number)
 * @param padded Whether it should be padded to 256 bits or not
 */
exports.ripemd160 = function (a, padded) {
    a = bytes_1.toBuffer(a);
    var hash = createHash('rmd160')
        .update(a)
        .digest();
    if (padded === true) {
        return bytes_1.setLength(hash, 32);
    }
    else {
        return hash;
    }
};
/**
 * Creates SHA-3 hash of the RLP encoded version of the input.
 * @param a The input data
 */
exports.rlphash = function (a) {
    return exports.keccak(rlp.encode(a));
};

},{"ethereum-cryptography/keccak":"node_modules/ethereum-cryptography/keccak.js","create-hash":"node_modules/create-hash/browser.js","ethjs-util":"node_modules/ethjs-util/lib/index.js","rlp":"node_modules/rlp/dist.browser/index.js","./bytes":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/account.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importPublic = exports.privateToPublic = exports.privateToAddress = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.isPrecompiled = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isZeroAddress = exports.isValidAddress = exports.zeroAddress = void 0;
var assert = require('assert');
var ethjsUtil = require('ethjs-util');
var secp256k1 = require('./secp256k1v3-adapter');
var BN = require("bn.js");
var bytes_1 = require("./bytes");
var hash_1 = require("./hash");
/**
 * Returns a zero address.
 */
exports.zeroAddress = function () {
    var addressLength = 20;
    var addr = bytes_1.zeros(addressLength);
    return bytes_1.bufferToHex(addr);
};
/**
 * Checks if the address is a valid. Accepts checksummed addresses too.
 */
exports.isValidAddress = function (address) {
    return /^0x[0-9a-fA-F]{40}$/.test(address);
};
/**
 * Checks if a given address is a zero address.
 */
exports.isZeroAddress = function (address) {
    var zeroAddr = exports.zeroAddress();
    return zeroAddr === bytes_1.addHexPrefix(address);
};
/**
 * Returns a checksummed address.
 *
 * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
 * has the effect of checksummed addresses for one chain having invalid checksums for others.
 * For more details, consult EIP-1191.
 *
 * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly
 * used variation in Ethereum was without the chainId. This may change in the future.
 */
exports.toChecksumAddress = function (address, eip1191ChainId) {
    address = ethjsUtil.stripHexPrefix(address).toLowerCase();
    var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';
    var hash = hash_1.keccak(prefix + address).toString('hex');
    var ret = '0x';
    for (var i = 0; i < address.length; i++) {
        if (parseInt(hash[i], 16) >= 8) {
            ret += address[i].toUpperCase();
        }
        else {
            ret += address[i];
        }
    }
    return ret;
};
/**
 * Checks if the address is a valid checksummed address.
 *
 * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
 */
exports.isValidChecksumAddress = function (address, eip1191ChainId) {
    return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;
};
/**
 * Generates an address of a newly created contract.
 * @param from The address which is creating this new address
 * @param nonce The nonce of the from account
 */
exports.generateAddress = function (from, nonce) {
    from = bytes_1.toBuffer(from);
    var nonceBN = new BN(nonce);
    if (nonceBN.isZero()) {
        // in RLP we want to encode null in the case of zero nonce
        // read the RLP documentation for an answer if you dare
        return hash_1.rlphash([from, null]).slice(-20);
    }
    // Only take the lower 160bits of the hash
    return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);
};
/**
 * Generates an address for a contract created using CREATE2.
 * @param from The address which is creating this new address
 * @param salt A salt
 * @param initCode The init code of the contract being created
 */
exports.generateAddress2 = function (from, salt, initCode) {
    var fromBuf = bytes_1.toBuffer(from);
    var saltBuf = bytes_1.toBuffer(salt);
    var initCodeBuf = bytes_1.toBuffer(initCode);
    assert(fromBuf.length === 20);
    assert(saltBuf.length === 32);
    var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), fromBuf, saltBuf, hash_1.keccak256(initCodeBuf)]));
    return address.slice(-20);
};
/**
 * Returns true if the supplied address belongs to a precompiled account (Byzantium).
 */
exports.isPrecompiled = function (address) {
    var a = bytes_1.unpad(address);
    return a.length === 1 && a[0] >= 1 && a[0] <= 8;
};
/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 */
exports.isValidPrivate = function (privateKey) {
    return secp256k1.privateKeyVerify(privateKey);
};
/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param sanitize Accept public keys in other formats
 */
exports.isValidPublic = function (publicKey, sanitize) {
    if (sanitize === void 0) { sanitize = false; }
    if (publicKey.length === 64) {
        // Convert to SEC1 for secp256k1
        return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
    }
    if (!sanitize) {
        return false;
    }
    return secp256k1.publicKeyVerify(publicKey);
};
/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param sanitize Accept public keys in other formats
 */
exports.pubToAddress = function (pubKey, sanitize) {
    if (sanitize === void 0) { sanitize = false; }
    pubKey = bytes_1.toBuffer(pubKey);
    if (sanitize && pubKey.length !== 64) {
        pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
    }
    assert(pubKey.length === 64);
    // Only take the lower 160bits of the hash
    return hash_1.keccak(pubKey).slice(-20);
};
exports.publicToAddress = exports.pubToAddress;
/**
 * Returns the ethereum address of a given private key.
 * @param privateKey A private key must be 256 bits wide
 */
exports.privateToAddress = function (privateKey) {
    return exports.publicToAddress(exports.privateToPublic(privateKey));
};
/**
 * Returns the ethereum public key of a given private key.
 * @param privateKey A private key must be 256 bits wide
 */
exports.privateToPublic = function (privateKey) {
    privateKey = bytes_1.toBuffer(privateKey);
    // skip the type flag and use the X, Y points
    return secp256k1.publicKeyCreate(privateKey, false).slice(1);
};
/**
 * Converts a public key to the Ethereum format.
 */
exports.importPublic = function (publicKey) {
    publicKey = bytes_1.toBuffer(publicKey);
    if (publicKey.length !== 64) {
        publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
    }
    return publicKey;
};

},{"assert":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/assert/assert.js","ethjs-util":"node_modules/ethjs-util/lib/index.js","./secp256k1v3-adapter":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js","bn.js":"node_modules/bn.js/lib/bn.js","./bytes":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js","./hash":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/hash.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/signature.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;
var secp256k1 = require('./secp256k1v3-adapter');
var BN = require("bn.js");
var bytes_1 = require("./bytes");
var hash_1 = require("./hash");
/**
 * Returns the ECDSA signature of a message hash.
 */
exports.ecsign = function (msgHash, privateKey, chainId) {
    var sig = secp256k1.sign(msgHash, privateKey);
    var recovery = sig.recovery;
    var ret = {
        r: sig.signature.slice(0, 32),
        s: sig.signature.slice(32, 64),
        v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,
    };
    return ret;
};
/**
 * ECDSA public key recovery from signature.
 * @returns Recovered public key
 */
exports.ecrecover = function (msgHash, v, r, s, chainId) {
    var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);
    var recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
};
/**
 * Convert signature parameters into the format of `eth_sign` RPC method.
 * @returns Signature
 */
exports.toRpcSig = function (v, r, s, chainId) {
    var recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));
};
/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 */
exports.fromRpcSig = function (sig) {
    var buf = bytes_1.toBuffer(sig);
    // NOTE: with potential introduction of chainId this might need to be updated
    if (buf.length !== 65) {
        throw new Error('Invalid signature length');
    }
    var v = buf[64];
    // support both versions of `eth_sign` responses
    if (v < 27) {
        v += 27;
    }
    return {
        v: v,
        r: buf.slice(0, 32),
        s: buf.slice(32, 64),
    };
};
/**
 * Validate a ECDSA signature.
 * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
 */
exports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {
    if (homesteadOrLater === void 0) { homesteadOrLater = true; }
    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
    if (r.length !== 32 || s.length !== 32) {
        return false;
    }
    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
        return false;
    }
    var rBN = new BN(r);
    var sBN = new BN(s);
    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
        return false;
    }
    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
        return false;
    }
    return true;
};
/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 */
exports.hashPersonalMessage = function (message) {
    var prefix = Buffer.from("\u0019Ethereum Signed Message:\n" + message.length.toString(), 'utf-8');
    return hash_1.keccak(Buffer.concat([prefix, message]));
};
function calculateSigRecovery(v, chainId) {
    return chainId ? v - (2 * chainId + 35) : v - 27;
}
function isValidSigRecovery(recovery) {
    return recovery === 0 || recovery === 1;
}

},{"./secp256k1v3-adapter":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js","bn.js":"node_modules/bn.js/lib/bn.js","./bytes":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js","./hash":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/hash.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/object.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineProperties = void 0;
var assert = require('assert');
var ethjsUtil = require('ethjs-util');
var rlp = require("rlp");
var bytes_1 = require("./bytes");
/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param self the `Object` to define properties on
 * @param fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param data data to be validated against the definitions
 * @deprecated
 */
exports.defineProperties = function (self, fields, data) {
    self.raw = [];
    self._fields = [];
    // attach the `toJSON`
    self.toJSON = function (label) {
        if (label === void 0) { label = false; }
        if (label) {
            var obj_1 = {};
            self._fields.forEach(function (field) {
                obj_1[field] = "0x" + self[field].toString('hex');
            });
            return obj_1;
        }
        return bytes_1.baToJSON(self.raw);
    };
    self.serialize = function serialize() {
        return rlp.encode(self.raw);
    };
    fields.forEach(function (field, i) {
        self._fields.push(field.name);
        function getter() {
            return self.raw[i];
        }
        function setter(v) {
            v = bytes_1.toBuffer(v);
            if (v.toString('hex') === '00' && !field.allowZero) {
                v = Buffer.allocUnsafe(0);
            }
            if (field.allowLess && field.length) {
                v = bytes_1.stripZeros(v);
                assert(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
            }
            else if (!(field.allowZero && v.length === 0) && field.length) {
                assert(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
            }
            self.raw[i] = v;
        }
        Object.defineProperty(self, field.name, {
            enumerable: true,
            configurable: true,
            get: getter,
            set: setter,
        });
        if (field.default) {
            self[field.name] = field.default;
        }
        // attach alias
        if (field.alias) {
            Object.defineProperty(self, field.alias, {
                enumerable: false,
                configurable: true,
                set: setter,
                get: getter,
            });
        }
    });
    // if the constuctor is passed data
    if (data) {
        if (typeof data === 'string') {
            data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');
        }
        if (Buffer.isBuffer(data)) {
            data = rlp.decode(data);
        }
        if (Array.isArray(data)) {
            if (data.length > self._fields.length) {
                throw new Error('wrong number of fields in data');
            }
            // make sure all the items are buffers
            data.forEach(function (d, i) {
                self[self._fields[i]] = bytes_1.toBuffer(d);
            });
        }
        else if (typeof data === 'object') {
            var keys_1 = Object.keys(data);
            fields.forEach(function (field) {
                if (keys_1.indexOf(field.name) !== -1)
                    self[field.name] = data[field.name];
                if (keys_1.indexOf(field.alias) !== -1)
                    self[field.alias] = data[field.alias];
            });
        }
        else {
            throw new Error('invalid data');
        }
    }
};

},{"assert":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/assert/assert.js","ethjs-util":"node_modules/ethjs-util/lib/index.js","rlp":"node_modules/rlp/dist.browser/index.js","./bytes":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/index.js":[function(require,module,exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.secp256k1 = exports.rlp = exports.BN = void 0;
var secp256k1 = require('./secp256k1v3-adapter');
exports.secp256k1 = secp256k1;
var ethjsUtil = require('ethjs-util');
var BN = require("bn.js");
exports.BN = BN;
var rlp = require("rlp");
exports.rlp = rlp;
Object.assign(exports, ethjsUtil);
/**
 * Constants
 */
__exportStar(require("./constants"), exports);
/**
 * Public-key cryptography (secp256k1) and addresses
 */
__exportStar(require("./account"), exports);
/**
 * Hash functions
 */
__exportStar(require("./hash"), exports);
/**
 * ECDSA signature
 */
__exportStar(require("./signature"), exports);
/**
 * Utilities for manipulating Buffers, byte arrays, etc.
 */
__exportStar(require("./bytes"), exports);
/**
 * Function for definining properties on an object
 */
__exportStar(require("./object"), exports);

},{"./secp256k1v3-adapter":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js","ethjs-util":"node_modules/ethjs-util/lib/index.js","bn.js":"node_modules/bn.js/lib/bn.js","rlp":"node_modules/rlp/dist.browser/index.js","./constants":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/constants.js","./account":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/account.js","./hash":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/hash.js","./signature":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/signature.js","./bytes":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js","./object":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/object.js"}],"node_modules/ethereumjs-abi/lib/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
/* eslint-disable no-useless-escape */
const utils = require('ethereumjs-util')
const BN = require('bn.js')

var ABI = function () {
}

// Convert from short to canonical names
// FIXME: optimise or make this nicer?
function elementaryName (name) {
  if (name.startsWith('int[')) {
    return 'int256' + name.slice(3)
  } else if (name === 'int') {
    return 'int256'
  } else if (name.startsWith('uint[')) {
    return 'uint256' + name.slice(4)
  } else if (name === 'uint') {
    return 'uint256'
  } else if (name.startsWith('fixed[')) {
    return 'fixed128x128' + name.slice(5)
  } else if (name === 'fixed') {
    return 'fixed128x128'
  } else if (name.startsWith('ufixed[')) {
    return 'ufixed128x128' + name.slice(6)
  } else if (name === 'ufixed') {
    return 'ufixed128x128'
  }
  return name
}

ABI.eventID = function (name, types) {
  // FIXME: use node.js util.format?
  var sig = name + '(' + types.map(elementaryName).join(',') + ')'
  return utils.keccak256(Buffer.from(sig))
}

ABI.methodID = function (name, types) {
  return ABI.eventID(name, types).slice(0, 4)
}

// Parse N from type<N>
function parseTypeN (type) {
  return parseInt(/^\D+(\d+)$/.exec(type)[1], 10)
}

// Parse N,M from type<N>x<M>
function parseTypeNxM (type) {
  var tmp = /^\D+(\d+)x(\d+)$/.exec(type)
  return [ parseInt(tmp[1], 10), parseInt(tmp[2], 10) ]
}

// Parse N in type[<N>] where "type" can itself be an array type.
function parseTypeArray (type) {
  var tmp = type.match(/(.*)\[(.*?)\]$/)
  if (tmp) {
    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10)
  }
  return null
}

function parseNumber (arg) {
  var type = typeof arg
  if (type === 'string') {
    if (utils.isHexPrefixed(arg)) {
      return new BN(utils.stripHexPrefix(arg), 16)
    } else {
      return new BN(arg, 10)
    }
  } else if (type === 'number') {
    return new BN(arg)
  } else if (arg.toArray) {
    // assume this is a BN for the moment, replace with BN.isBN soon
    return arg
  } else {
    throw new Error('Argument is not a number')
  }
}

// someMethod(bytes,uint)
// someMethod(bytes,uint):(boolean)
function parseSignature (sig) {
  var tmp = /^(\w+)\((.*)\)$/.exec(sig)

  if (tmp.length !== 3) {
    throw new Error('Invalid method signature')
  }

  var args = /^(.+)\):\((.+)$/.exec(tmp[2])

  if (args !== null && args.length === 3) {
    return {
      method: tmp[1],
      args: args[1].split(','),
      retargs: args[2].split(',')
    }
  } else {
    var params = tmp[2].split(',')
    if (params.length === 1 && params[0] === '') {
      // Special-case (possibly naive) fixup for functions that take no arguments.
      // TODO: special cases are always bad, but this makes the function return
      // match what the calling functions expect
      params = []
    }
    return {
      method: tmp[1],
      args: params
    }
  }
}

// Encodes a single item (can be dynamic array)
// @returns: Buffer
function encodeSingle (type, arg) {
  var size, num, ret, i

  if (type === 'address') {
    return encodeSingle('uint160', parseNumber(arg))
  } else if (type === 'bool') {
    return encodeSingle('uint8', arg ? 1 : 0)
  } else if (type === 'string') {
    return encodeSingle('bytes', Buffer.from(arg, 'utf8'))
  } else if (isArray(type)) {
    // this part handles fixed-length ([2]) and variable length ([]) arrays
    // NOTE: we catch here all calls to arrays, that simplifies the rest
    if (typeof arg.length === 'undefined') {
      throw new Error('Not an array?')
    }
    size = parseTypeArray(type)
    if (size !== 'dynamic' && size !== 0 && arg.length > size) {
      throw new Error('Elements exceed array size: ' + size)
    }
    ret = []
    type = type.slice(0, type.lastIndexOf('['))
    if (typeof arg === 'string') {
      arg = JSON.parse(arg)
    }
    for (i in arg) {
      ret.push(encodeSingle(type, arg[i]))
    }
    if (size === 'dynamic') {
      var length = encodeSingle('uint256', arg.length)
      ret.unshift(length)
    }
    return Buffer.concat(ret)
  } else if (type === 'bytes') {
    arg = Buffer.from(arg)

    ret = Buffer.concat([ encodeSingle('uint256', arg.length), arg ])

    if ((arg.length % 32) !== 0) {
      ret = Buffer.concat([ ret, utils.zeros(32 - (arg.length % 32)) ])
    }

    return ret
  } else if (type.startsWith('bytes')) {
    size = parseTypeN(type)
    if (size < 1 || size > 32) {
      throw new Error('Invalid bytes<N> width: ' + size)
    }

    return utils.setLengthRight(arg, 32)
  } else if (type.startsWith('uint')) {
    size = parseTypeN(type)
    if ((size % 8) || (size < 8) || (size > 256)) {
      throw new Error('Invalid uint<N> width: ' + size)
    }

    num = parseNumber(arg)
    if (num.bitLength() > size) {
      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
    }

    if (num < 0) {
      throw new Error('Supplied uint is negative')
    }

    return num.toArrayLike(Buffer, 'be', 32)
  } else if (type.startsWith('int')) {
    size = parseTypeN(type)
    if ((size % 8) || (size < 8) || (size > 256)) {
      throw new Error('Invalid int<N> width: ' + size)
    }

    num = parseNumber(arg)
    if (num.bitLength() > size) {
      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
    }

    return num.toTwos(256).toArrayLike(Buffer, 'be', 32)
  } else if (type.startsWith('ufixed')) {
    size = parseTypeNxM(type)

    num = parseNumber(arg)

    if (num < 0) {
      throw new Error('Supplied ufixed is negative')
    }

    return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))))
  } else if (type.startsWith('fixed')) {
    size = parseTypeNxM(type)

    return encodeSingle('int256', parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))))
  }

  throw new Error('Unsupported or invalid type: ' + type)
}

// Decodes a single item (can be dynamic array)
// @returns: array
// FIXME: this method will need a lot of attention at checking limits and validation
function decodeSingle (parsedType, data, offset) {
  if (typeof parsedType === 'string') {
    parsedType = parseType(parsedType)
  }
  var size, num, ret, i

  if (parsedType.name === 'address') {
    return decodeSingle(parsedType.rawType, data, offset).toArrayLike(Buffer, 'be', 20).toString('hex')
  } else if (parsedType.name === 'bool') {
    return decodeSingle(parsedType.rawType, data, offset).toString() === new BN(1).toString()
  } else if (parsedType.name === 'string') {
    var bytes = decodeSingle(parsedType.rawType, data, offset)
    return Buffer.from(bytes, 'utf8').toString()
  } else if (parsedType.isArray) {
    // this part handles fixed-length arrays ([2]) and variable length ([]) arrays
    // NOTE: we catch here all calls to arrays, that simplifies the rest
    ret = []
    size = parsedType.size

    if (parsedType.size === 'dynamic') {
      offset = decodeSingle('uint256', data, offset).toNumber()
      size = decodeSingle('uint256', data, offset).toNumber()
      offset = offset + 32
    }
    for (i = 0; i < size; i++) {
      var decoded = decodeSingle(parsedType.subArray, data, offset)
      ret.push(decoded)
      offset += parsedType.subArray.memoryUsage
    }
    return ret
  } else if (parsedType.name === 'bytes') {
    offset = decodeSingle('uint256', data, offset).toNumber()
    size = decodeSingle('uint256', data, offset).toNumber()
    return data.slice(offset + 32, offset + 32 + size)
  } else if (parsedType.name.startsWith('bytes')) {
    return data.slice(offset, offset + parsedType.size)
  } else if (parsedType.name.startsWith('uint')) {
    num = new BN(data.slice(offset, offset + 32), 16, 'be')
    if (num.bitLength() > parsedType.size) {
      throw new Error('Decoded int exceeds width: ' + parsedType.size + ' vs ' + num.bitLength())
    }
    return num
  } else if (parsedType.name.startsWith('int')) {
    num = new BN(data.slice(offset, offset + 32), 16, 'be').fromTwos(256)
    if (num.bitLength() > parsedType.size) {
      throw new Error('Decoded uint exceeds width: ' + parsedType.size + ' vs ' + num.bitLength())
    }

    return num
  } else if (parsedType.name.startsWith('ufixed')) {
    size = new BN(2).pow(new BN(parsedType.size[1]))
    num = decodeSingle('uint256', data, offset)
    if (!num.mod(size).isZero()) {
      throw new Error('Decimals not supported yet')
    }
    return num.div(size)
  } else if (parsedType.name.startsWith('fixed')) {
    size = new BN(2).pow(new BN(parsedType.size[1]))
    num = decodeSingle('int256', data, offset)
    if (!num.mod(size).isZero()) {
      throw new Error('Decimals not supported yet')
    }
    return num.div(size)
  }
  throw new Error('Unsupported or invalid type: ' + parsedType.name)
}

// Parse the given type
// @returns: {} containing the type itself, memory usage and (including size and subArray if applicable)
function parseType (type) {
  var size
  var ret
  if (isArray(type)) {
    size = parseTypeArray(type)
    var subArray = type.slice(0, type.lastIndexOf('['))
    subArray = parseType(subArray)
    ret = {
      isArray: true,
      name: type,
      size: size,
      memoryUsage: size === 'dynamic' ? 32 : subArray.memoryUsage * size,
      subArray: subArray
    }
    return ret
  } else {
    var rawType
    switch (type) {
      case 'address':
        rawType = 'uint160'
        break
      case 'bool':
        rawType = 'uint8'
        break
      case 'string':
        rawType = 'bytes'
        break
    }
    ret = {
      rawType: rawType,
      name: type,
      memoryUsage: 32
    }

    if ((type.startsWith('bytes') && type !== 'bytes') || type.startsWith('uint') || type.startsWith('int')) {
      ret.size = parseTypeN(type)
    } else if (type.startsWith('ufixed') || type.startsWith('fixed')) {
      ret.size = parseTypeNxM(type)
    }

    if (type.startsWith('bytes') && type !== 'bytes' && (ret.size < 1 || ret.size > 32)) {
      throw new Error('Invalid bytes<N> width: ' + ret.size)
    }
    if ((type.startsWith('uint') || type.startsWith('int')) && (ret.size % 8 || ret.size < 8 || ret.size > 256)) {
      throw new Error('Invalid int/uint<N> width: ' + ret.size)
    }
    return ret
  }
}

// Is a type dynamic?
function isDynamic (type) {
  // FIXME: handle all types? I don't think anything is missing now
  return (type === 'string') || (type === 'bytes') || (parseTypeArray(type) === 'dynamic')
}

// Is a type an array?
function isArray (type) {
  return type.lastIndexOf(']') === type.length - 1
}

// Encode a method/event with arguments
// @types an array of string type names
// @args  an array of the appropriate values
ABI.rawEncode = function (types, values) {
  var output = []
  var data = []

  var headLength = 0

  types.forEach(function (type) {
    if (isArray(type)) {
      var size = parseTypeArray(type)

      if (size !== 'dynamic') {
        headLength += 32 * size
      } else {
        headLength += 32
      }
    } else {
      headLength += 32
    }
  })

  for (var i = 0; i < types.length; i++) {
    var type = elementaryName(types[i])
    var value = values[i]
    var cur = encodeSingle(type, value)

    // Use the head/tail method for storing dynamic data
    if (isDynamic(type)) {
      output.push(encodeSingle('uint256', headLength))
      data.push(cur)
      headLength += cur.length
    } else {
      output.push(cur)
    }
  }

  return Buffer.concat(output.concat(data))
}

ABI.rawDecode = function (types, data) {
  var ret = []
  data = Buffer.from(data)
  var offset = 0
  for (var i = 0; i < types.length; i++) {
    var type = elementaryName(types[i])
    var parsed = parseType(type, data, offset)
    var decoded = decodeSingle(parsed, data, offset)
    offset += parsed.memoryUsage
    ret.push(decoded)
  }
  return ret
}

ABI.simpleEncode = function (method) {
  var args = Array.prototype.slice.call(arguments).slice(1)
  var sig = parseSignature(method)

  // FIXME: validate/convert arguments
  if (args.length !== sig.args.length) {
    throw new Error('Argument count mismatch')
  }

  return Buffer.concat([ ABI.methodID(sig.method, sig.args), ABI.rawEncode(sig.args, args) ])
}

ABI.simpleDecode = function (method, data) {
  var sig = parseSignature(method)

  // FIXME: validate/convert arguments
  if (!sig.retargs) {
    throw new Error('No return values in method')
  }

  return ABI.rawDecode(sig.retargs, data)
}

function stringify (type, value) {
  if (type.startsWith('address') || type.startsWith('bytes')) {
    return '0x' + value.toString('hex')
  } else {
    return value.toString()
  }
}

ABI.stringify = function (types, values) {
  var ret = []

  for (var i in types) {
    var type = types[i]
    var value = values[i]

    // if it is an array type, concat the items
    if (/^[^\[]+\[.*\]$/.test(type)) {
      value = value.map(function (item) {
        return stringify(type, item)
      }).join(', ')
    } else {
      value = stringify(type, value)
    }

    ret.push(value)
  }

  return ret
}

ABI.solidityHexValue = function (type, value, bitsize) {
  // pass in bitsize = null if use default bitsize
  var size, num
  if (isArray(type)) {
    var subType = type.replace(/\[.*?\]/, '')
    if (!isArray(subType)) {
      var arraySize = parseTypeArray(type)
      if (arraySize !== 'dynamic' && arraySize !== 0 && value.length > arraySize) {
        throw new Error('Elements exceed array size: ' + arraySize)
      }
    }
    var arrayValues = value.map(function (v) {
      return ABI.solidityHexValue(subType, v, 256)
    })
    return Buffer.concat(arrayValues)
  } else if (type === 'bytes') {
    return value
  } else if (type === 'string') {
    return Buffer.from(value, 'utf8')
  } else if (type === 'bool') {
    bitsize = bitsize || 8
    var padding = Array((bitsize) / 4).join('0')
    return Buffer.from(value ? padding + '1' : padding + '0', 'hex')
  } else if (type === 'address') {
    var bytesize = 20
    if (bitsize) {
      bytesize = bitsize / 8
    }
    return utils.setLengthLeft(value, bytesize)
  } else if (type.startsWith('bytes')) {
    size = parseTypeN(type)
    if (size < 1 || size > 32) {
      throw new Error('Invalid bytes<N> width: ' + size)
    }

    return utils.setLengthRight(value, size)
  } else if (type.startsWith('uint')) {
    size = parseTypeN(type)
    if ((size % 8) || (size < 8) || (size > 256)) {
      throw new Error('Invalid uint<N> width: ' + size)
    }

    num = parseNumber(value)
    if (num.bitLength() > size) {
      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
    }

    bitsize = bitsize || size
    return num.toArrayLike(Buffer, 'be', bitsize / 8)
  } else if (type.startsWith('int')) {
    size = parseTypeN(type)
    if ((size % 8) || (size < 8) || (size > 256)) {
      throw new Error('Invalid int<N> width: ' + size)
    }

    num = parseNumber(value)
    if (num.bitLength() > size) {
      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
    }

    bitsize = bitsize || size
    return num.toTwos(size).toArrayLike(Buffer, 'be', bitsize / 8)
  } else {
    // FIXME: support all other types
    throw new Error('Unsupported or invalid type: ' + type)
  }
}

ABI.solidityPack = function (types, values) {
  if (types.length !== values.length) {
    throw new Error('Number of types are not matching the values')
  }

  var ret = []

  for (var i = 0; i < types.length; i++) {
    var type = elementaryName(types[i])
    var value = values[i]
    ret.push(ABI.solidityHexValue(type, value, null))
  }

  return Buffer.concat(ret)
}

ABI.soliditySHA3 = function (types, values) {
  return utils.keccak256(ABI.solidityPack(types, values))
}

ABI.soliditySHA256 = function (types, values) {
  return utils.sha256(ABI.solidityPack(types, values))
}

ABI.solidityRIPEMD160 = function (types, values) {
  return utils.ripemd160(ABI.solidityPack(types, values), true)
}

// Serpent's users are familiar with this encoding
// - s: string
// - b: bytes
// - b<N>: bytes<N>
// - i: int256
// - a: int256[]

function isNumeric (c) {
  // FIXME: is this correct? Seems to work
  return (c >= '0') && (c <= '9')
}

// For a "documentation" refer to https://github.com/ethereum/serpent/blob/develop/preprocess.cpp
ABI.fromSerpent = function (sig) {
  var ret = []
  for (var i = 0; i < sig.length; i++) {
    var type = sig[i]
    if (type === 's') {
      ret.push('bytes')
    } else if (type === 'b') {
      var tmp = 'bytes'
      var j = i + 1
      while ((j < sig.length) && isNumeric(sig[j])) {
        tmp += sig[j] - '0'
        j++
      }
      i = j - 1
      ret.push(tmp)
    } else if (type === 'i') {
      ret.push('int256')
    } else if (type === 'a') {
      ret.push('int256[]')
    } else {
      throw new Error('Unsupported or invalid type: ' + type)
    }
  }
  return ret
}

ABI.toSerpent = function (types) {
  var ret = []
  for (var i = 0; i < types.length; i++) {
    var type = types[i]
    if (type === 'bytes') {
      ret.push('s')
    } else if (type.startsWith('bytes')) {
      ret.push('b' + parseTypeN(type))
    } else if (type === 'int256') {
      ret.push('i')
    } else if (type === 'int256[]') {
      ret.push('a')
    } else {
      throw new Error('Unsupported or invalid type: ' + type)
    }
  }
  return ret.join('')
}

module.exports = ABI

},{"ethereumjs-util":"node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/index.js","bn.js":"node_modules/bn.js/lib/bn.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/ethereumjs-abi/index.js":[function(require,module,exports) {
module.exports = require('./lib/index.js')

},{"./lib/index.js":"node_modules/ethereumjs-abi/lib/index.js"}],"node_modules/eth-sig-util/index.js":[function(require,module,exports) {
const ethUtil = require('ethereumjs-util')
const ethAbi = require('ethereumjs-abi')

module.exports = {

  concatSig: function (v, r, s) {
    const rSig = ethUtil.fromSigned(r)
    const sSig = ethUtil.fromSigned(s)
    const vSig = ethUtil.bufferToInt(v)
    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64)
    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64)
    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig))
    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')
  },

  normalize: function (input) {
    if (!input) return

    if (typeof input === 'number') {
      const buffer = ethUtil.toBuffer(input)
      input = ethUtil.bufferToHex(buffer)
    }

    if (typeof input !== 'string') {
      var msg = 'eth-sig-util.normalize() requires hex string or integer input.'
      msg += ' received ' + (typeof input) + ': ' + input
      throw new Error(msg)
    }

    return ethUtil.addHexPrefix(input.toLowerCase())
  },

  personalSign: function (privateKey, msgParams) {
    var message = ethUtil.toBuffer(msgParams.data)
    var msgHash = ethUtil.hashPersonalMessage(message)
    var sig = ethUtil.ecsign(msgHash, privateKey)
    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))
    return serialized
  },

  recoverPersonalSignature: function (msgParams) {
    const publicKey = getPublicKeyFor(msgParams)
    const sender = ethUtil.publicToAddress(publicKey)
    const senderHex = ethUtil.bufferToHex(sender)
    return senderHex
  },

  extractPublicKey: function (msgParams) {
    const publicKey = getPublicKeyFor(msgParams)
    return '0x' + publicKey.toString('hex')
  },

  typedSignatureHash: function (typedData) {
    const hashBuffer = typedSignatureHash(typedData)
    return ethUtil.bufferToHex(hashBuffer)
  },

  signTypedData: function (privateKey, msgParams) {
    const msgHash = typedSignatureHash(msgParams.data)
    const sig = ethUtil.ecsign(msgHash, privateKey)
    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))
  },

  recoverTypedSignature: function (msgParams) {
    const msgHash = typedSignatureHash(msgParams.data)
    const publicKey = recoverPublicKey(msgHash, msgParams.sig)
    const sender = ethUtil.publicToAddress(publicKey)
    return ethUtil.bufferToHex(sender)
  }

}

/**
 * @param typedData - Array of data along with types, as per EIP712.
 * @returns Buffer
 */
function typedSignatureHash(typedData) {
  const error = new Error('Expect argument to be non-empty array')
  if (typeof typedData !== 'object' || !typedData.length) throw error

  const data = typedData.map(function (e) {
    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value
  })
  const types = typedData.map(function (e) { return e.type })
  const schema = typedData.map(function (e) {
    if (!e.name) throw error
    return e.type + ' ' + e.name
  })

  return ethAbi.soliditySHA3(
    ['bytes32', 'bytes32'],
    [
      ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),
      ethAbi.soliditySHA3(types, data)
    ]
  )
}

function recoverPublicKey(hash, sig) {
  const signature = ethUtil.toBuffer(sig)
  const sigParams = ethUtil.fromRpcSig(signature)
  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)
}

function getPublicKeyFor (msgParams) {
  const message = ethUtil.toBuffer(msgParams.data)
  const msgHash = ethUtil.hashPersonalMessage(message)
  return recoverPublicKey(msgHash, msgParams.sig)
}


function padWithZeroes (number, length) {
  var myString = '' + number
  while (myString.length < length) {
    myString = '0' + myString
  }
  return myString
}

},{"ethereumjs-util":"node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/index.js","ethereumjs-abi":"node_modules/ethereumjs-abi/index.js"}],"node_modules/semaphore/lib/semaphore.js":[function(require,module,exports) {
var process = require("process");
var define;
var global = arguments[3];
;
(function (global) {
  'use strict';

  var nextTick = function (fn) {
    setTimeout(fn, 0);
  };
  if (typeof process != 'undefined' && process && typeof process.nextTick == 'function') {
    // node.js and the like
    nextTick = process.nextTick;
  }
  function semaphore(capacity) {
    var semaphore = {
      capacity: capacity || 1,
      current: 0,
      queue: [],
      firstHere: false,
      take: function () {
        if (semaphore.firstHere === false) {
          semaphore.current++;
          semaphore.firstHere = true;
          var isFirst = 1;
        } else {
          var isFirst = 0;
        }
        var item = {
          n: 1
        };
        if (typeof arguments[0] == 'function') {
          item.task = arguments[0];
        } else {
          item.n = arguments[0];
        }
        if (arguments.length >= 2) {
          if (typeof arguments[1] == 'function') item.task = arguments[1];else item.n = arguments[1];
        }
        var task = item.task;
        item.task = function () {
          task(semaphore.leave);
        };
        if (semaphore.current + item.n - isFirst > semaphore.capacity) {
          if (isFirst === 1) {
            semaphore.current--;
            semaphore.firstHere = false;
          }
          return semaphore.queue.push(item);
        }
        semaphore.current += item.n - isFirst;
        item.task(semaphore.leave);
        if (isFirst === 1) semaphore.firstHere = false;
      },
      leave: function (n) {
        n = n || 1;
        semaphore.current -= n;
        if (!semaphore.queue.length) {
          if (semaphore.current < 0) {
            throw new Error('leave called too many times.');
          }
          return;
        }
        var item = semaphore.queue[0];
        if (item.n + semaphore.current > semaphore.capacity) {
          return;
        }
        semaphore.queue.shift();
        semaphore.current += item.n;
        nextTick(item.task);
      },
      available: function (n) {
        n = n || 1;
        return semaphore.current + n <= semaphore.capacity;
      }
    };
    return semaphore;
  }
  ;
  if (typeof exports === 'object') {
    // node export
    module.exports = semaphore;
  } else if (typeof define === 'function' && define.amd) {
    // amd export
    define(function () {
      return semaphore;
    });
  } else {
    // browser global
    global.semaphore = semaphore;
  }
})(this);
},{"process":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/web3-provider-engine/util/estimate-gas.js":[function(require,module,exports) {
const createPayload = require('./create-payload.js')

module.exports = estimateGas

/*

This is a work around for https://github.com/ethereum/go-ethereum/issues/2577

*/


function estimateGas(provider, txParams, cb) {
  provider.sendAsync(createPayload({
    method: 'eth_estimateGas',
    params: [txParams]
  }), function(err, res){
    if (err) {
      // handle simple value transfer case
      if (err.message === 'no contract code at given address') {
        return cb(null, '0xcf08')
      } else {
        return cb(err)        
      }
    }
    cb(null, res.result)
  })
}
},{"./create-payload.js":"node_modules/web3-provider-engine/util/create-payload.js"}],"node_modules/web3-provider-engine/subproviders/hooked-wallet.js":[function(require,module,exports) {
/*
 * Emulate 'eth_accounts' / 'eth_sendTransaction' using 'eth_sendRawTransaction'
 *
 * The two callbacks a user needs to implement are:
 * - getAccounts() -- array of addresses supported
 * - signTransaction(tx) -- sign a raw transaction object
 */

const waterfall = require('async/waterfall')
const parallel = require('async/parallel')
const inherits = require('util').inherits
const ethUtil = require('ethereumjs-util')
const sigUtil = require('eth-sig-util')
const extend = require('xtend')
const Semaphore = require('semaphore')
const Subprovider = require('./subprovider.js')
const estimateGas = require('../util/estimate-gas.js')
const hexRegex = /^[0-9A-Fa-f]+$/g

module.exports = HookedWalletSubprovider

// handles the following RPC methods:
//   eth_coinbase
//   eth_accounts
//   eth_sendTransaction
//   eth_sign
//   eth_signTypedData
//   eth_signTypedData_v3
//   eth_signTypedData_v4
//   personal_sign
//   eth_decryptMessage
//   encryption_public_key
//   personal_ecRecover
//   parity_postTransaction
//   parity_checkRequest
//   parity_defaultAccount

//
// Tx Signature Flow
//
// handleRequest: eth_sendTransaction
//   validateTransaction (basic validity check)
//     validateSender (checks that sender is in accounts)
//   processTransaction (sign tx and submit to network)
//     approveTransaction (UI approval hook)
//     checkApproval
//     finalizeAndSubmitTx (tx signing)
//       nonceLock.take (bottle neck to ensure atomic nonce)
//         fillInTxExtras (set fallback gasPrice, nonce, etc)
//         signTransaction (perform the signature)
//         publishTransaction (publish signed tx to network)
//


inherits(HookedWalletSubprovider, Subprovider)

function HookedWalletSubprovider(opts){
  const self = this
  // control flow
  self.nonceLock = Semaphore(1)

  // data lookup
  if (opts.getAccounts) self.getAccounts = opts.getAccounts
  // high level override
  if (opts.processTransaction) self.processTransaction = opts.processTransaction
  if (opts.processMessage) self.processMessage = opts.processMessage
  if (opts.processPersonalMessage) self.processPersonalMessage = opts.processPersonalMessage
  if (opts.processTypedMessage) self.processTypedMessage = opts.processTypedMessage
  // approval hooks
  self.approveTransaction = opts.approveTransaction || self.autoApprove
  self.approveMessage = opts.approveMessage || self.autoApprove
  self.approvePersonalMessage = opts.approvePersonalMessage || self.autoApprove
  self.approveDecryptMessage = opts.approveDecryptMessage || self.autoApprove
  self.approveEncryptionPublicKey = opts.approveEncryptionPublicKey || self.autoApprove
  self.approveTypedMessage = opts.approveTypedMessage || self.autoApprove
  // actually perform the signature
  if (opts.signTransaction) self.signTransaction = opts.signTransaction  || mustProvideInConstructor('signTransaction')
  if (opts.signMessage) self.signMessage = opts.signMessage  || mustProvideInConstructor('signMessage')
  if (opts.signPersonalMessage) self.signPersonalMessage = opts.signPersonalMessage  || mustProvideInConstructor('signPersonalMessage')
  if (opts.decryptMessage) self.decryptMessage = opts.decryptMessage  || mustProvideInConstructor('decryptMessage')
  if (opts.encryptionPublicKey) self.encryptionPublicKey = opts.encryptionPublicKey  || mustProvideInConstructor('encryptionPublicKey')
  if (opts.signTypedMessage) self.signTypedMessage = opts.signTypedMessage  || mustProvideInConstructor('signTypedMessage')
  if (opts.recoverPersonalSignature) self.recoverPersonalSignature = opts.recoverPersonalSignature
  // publish to network
  if (opts.publishTransaction) self.publishTransaction = opts.publishTransaction
  // gas options
  self.estimateGas = opts.estimateGas || self.estimateGas
  self.getGasPrice = opts.getGasPrice || self.getGasPrice
}

HookedWalletSubprovider.prototype.handleRequest = function(payload, next, end){
  const self = this
  self._parityRequests = {}
  self._parityRequestCount = 0

  // switch statement is not block scoped
  // sp we cant repeat var declarations
  let txParams, msgParams, extraParams
  let message, address

  switch(payload.method) {

    case 'eth_coinbase':
      // process normally
      self.getAccounts(function(err, accounts){
        if (err) return end(err)
        let result = accounts[0] || null
        end(null, result)
      })
      return

    case 'eth_accounts':
      // process normally
      self.getAccounts(function(err, accounts){
        if (err) return end(err)
        end(null, accounts)
      })
      return

    case 'eth_sendTransaction':
      txParams = payload.params[0]
      waterfall([
        (cb) => self.validateTransaction(txParams, cb),
        (cb) => self.processTransaction(txParams, cb),
      ], end)
      return

    case 'eth_signTransaction':
      txParams = payload.params[0]
      waterfall([
        (cb) => self.validateTransaction(txParams, cb),
        (cb) => self.processSignTransaction(txParams, cb),
      ], end)
      return

    case 'eth_sign':
      // process normally
      address = payload.params[0]
      message = payload.params[1]
      // non-standard "extraParams" to be appended to our "msgParams" obj
      // good place for metadata
      extraParams = payload.params[2] || {}
      msgParams = extend(extraParams, {
        from: address,
        data: message,
      })
      waterfall([
        (cb) => self.validateMessage(msgParams, cb),
        (cb) => self.processMessage(msgParams, cb),
      ], end)
      return

    case 'personal_sign':
      return (function(){
        // process normally
        const first = payload.params[0]
        const second = payload.params[1]

        // We initially incorrectly ordered these parameters.
        // To gracefully respect users who adopted this API early,
        // we are currently gracefully recovering from the wrong param order
        // when it is clearly identifiable.
        //
        // That means when the first param is definitely an address,
        // and the second param is definitely not, but is hex.
        if (resemblesData(second) && resemblesAddress(first)) {
          let warning = `The eth_personalSign method requires params ordered `
          warning += `[message, address]. This was previously handled incorrectly, `
          warning += `and has been corrected automatically. `
          warning += `Please switch this param order for smooth behavior in the future.`
          console.warn(warning)

          address = payload.params[0]
          message = payload.params[1]
        } else {
          message = payload.params[0]
          address = payload.params[1]
        }

        // non-standard "extraParams" to be appended to our "msgParams" obj
        // good place for metadata
        extraParams = payload.params[2] || {}
        msgParams = extend(extraParams, {
          from: address,
          data: message,
        })
        waterfall([
          (cb) => self.validatePersonalMessage(msgParams, cb),
          (cb) => self.processPersonalMessage(msgParams, cb),
        ], end)
      })()

    case 'eth_decryptMessage':
      return (function(){
        // process normally
        const first = payload.params[0]
        const second = payload.params[1]

        // We initially incorrectly ordered these parameters.
        // To gracefully respect users who adopted this API early,
        // we are currently gracefully recovering from the wrong param order
        // when it is clearly identifiable.
        //
        // That means when the first param is definitely an address,
        // and the second param is definitely not, but is hex.
        if (resemblesData(second) && resemblesAddress(first)) {
          let warning = `The eth_decryptMessage method requires params ordered `
          warning += `[message, address]. This was previously handled incorrectly, `
          warning += `and has been corrected automatically. `
          warning += `Please switch this param order for smooth behavior in the future.`
          console.warn(warning)

          address = payload.params[0]
          message = payload.params[1]
        } else {
          message = payload.params[0]
          address = payload.params[1]
        }

        // non-standard "extraParams" to be appended to our "msgParams" obj
        // good place for metadata
        extraParams = payload.params[2] || {}
        msgParams = extend(extraParams, {
          from: address,
          data: message,
        })
        waterfall([
          (cb) => self.validateDecryptMessage(msgParams, cb),
          (cb) => self.processDecryptMessage(msgParams, cb),
        ], end)
      })()
      
    case 'encryption_public_key':
      return (function(){
        const address = payload.params[0]
        
        waterfall([
          (cb) => self.validateEncryptionPublicKey(address, cb),
          (cb) => self.processEncryptionPublicKey(address, cb),
        ], end)
      })()
      
    case 'personal_ecRecover':
      return (function(){    
        message = payload.params[0]
        let signature = payload.params[1]
        // non-standard "extraParams" to be appended to our "msgParams" obj
        // good place for metadata
        extraParams = payload.params[2] || {}
        msgParams = extend(extraParams, {
          sig: signature,
          data: message,
        })
        self.recoverPersonalSignature(msgParams, end)
      })()

    case 'eth_signTypedData':
    case 'eth_signTypedData_v3':
    case 'eth_signTypedData_v4':
      return (function(){ 
        // process normally
      
        const first = payload.params[0]
        const second = payload.params[1]

        if (resemblesAddress(first)) {
          address = first
          message = second
        } else {
          message = first
          address = second
        }

        extraParams = payload.params[2] || {}
        msgParams = extend(extraParams, {
          from: address,
          data: message,
        })
        waterfall([
          (cb) => self.validateTypedMessage(msgParams, cb),
          (cb) => self.processTypedMessage(msgParams, cb),
        ], end)
      })()

    case 'parity_postTransaction':
      txParams = payload.params[0]
      self.parityPostTransaction(txParams, end)
      return

    case 'parity_postSign':
      address = payload.params[0]
      message = payload.params[1]
      self.parityPostSign(address, message, end)
      return

    case 'parity_checkRequest':
      return (function(){
        const requestId = payload.params[0]
        self.parityCheckRequest(requestId, end)
      })()

    case 'parity_defaultAccount':
      self.getAccounts(function(err, accounts){
        if (err) return end(err)
        const account = accounts[0] || null
        end(null, account)
      })
      return

    default:
      next()
      return

  }
}

//
// data lookup
//

HookedWalletSubprovider.prototype.getAccounts = function(cb) {
  cb(null, [])
}


//
// "process" high level flow
//

HookedWalletSubprovider.prototype.processTransaction = function(txParams, cb) {
  const self = this
  waterfall([
    (cb) => self.approveTransaction(txParams, cb),
    (didApprove, cb) => self.checkApproval('transaction', didApprove, cb),
    (cb) => self.finalizeAndSubmitTx(txParams, cb),
  ], cb)
}


HookedWalletSubprovider.prototype.processSignTransaction = function(txParams, cb) {
  const self = this
  waterfall([
    (cb) => self.approveTransaction(txParams, cb),
    (didApprove, cb) => self.checkApproval('transaction', didApprove, cb),
    (cb) => self.finalizeTx(txParams, cb),
  ], cb)
}

HookedWalletSubprovider.prototype.processMessage = function(msgParams, cb) {
  const self = this
  waterfall([
    (cb) => self.approveMessage(msgParams, cb),
    (didApprove, cb) => self.checkApproval('message', didApprove, cb),
    (cb) => self.signMessage(msgParams, cb),
  ], cb)
}

HookedWalletSubprovider.prototype.processPersonalMessage = function(msgParams, cb) {
  const self = this
  waterfall([
    (cb) => self.approvePersonalMessage(msgParams, cb),
    (didApprove, cb) => self.checkApproval('message', didApprove, cb),
    (cb) => self.signPersonalMessage(msgParams, cb),
  ], cb)
}

HookedWalletSubprovider.prototype.processDecryptMessage = function(msgParams, cb) {
  const self = this
  waterfall([
    (cb) => self.approveDecryptMessage(msgParams, cb),
    (didApprove, cb) => self.checkApproval('decryptMessage', didApprove, cb),
    (cb) => self.decryptMessage(msgParams, cb),
  ], cb)
}

HookedWalletSubprovider.prototype.processEncryptionPublicKey = function(msgParams, cb) {
  const self = this
  waterfall([
    (cb) => self.approveEncryptionPublicKey(msgParams, cb),
    (didApprove, cb) => self.checkApproval('encryptionPublicKey', didApprove, cb),
    (cb) => self.encryptionPublicKey(msgParams, cb),
  ], cb)
}

HookedWalletSubprovider.prototype.processTypedMessage = function(msgParams, cb) {
  const self = this
  waterfall([
    (cb) => self.approveTypedMessage(msgParams, cb),
    (didApprove, cb) => self.checkApproval('message', didApprove, cb),
    (cb) => self.signTypedMessage(msgParams, cb),
  ], cb)
}

//
// approval
//

HookedWalletSubprovider.prototype.autoApprove = function(txParams, cb) {
  cb(null, true)
}

HookedWalletSubprovider.prototype.checkApproval = function(type, didApprove, cb) {
  cb( didApprove ? null : new Error('User denied '+type+' signature.') )
}

//
// parity
//

HookedWalletSubprovider.prototype.parityPostTransaction = function(txParams, cb) {
  const self = this

  // get next id
  const count = self._parityRequestCount
  const reqId = `0x${count.toString(16)}`
  self._parityRequestCount++

  self.emitPayload({
    method: 'eth_sendTransaction',
    params: [txParams],
  }, function(error, res){
    if (error) {
      self._parityRequests[reqId] = { error }
      return
    }
    const txHash = res.result
    self._parityRequests[reqId] = txHash
  })

  cb(null, reqId)
}


HookedWalletSubprovider.prototype.parityPostSign = function(address, message, cb) {
  const self = this

  // get next id
  const count = self._parityRequestCount
  const reqId = `0x${count.toString(16)}`
  self._parityRequestCount++

  self.emitPayload({
    method: 'eth_sign',
    params: [address, message],
  }, function(error, res){
    if (error) {
      self._parityRequests[reqId] = { error }
      return
    }
    const result = res.result
    self._parityRequests[reqId] = result
  })

  cb(null, reqId)
}

HookedWalletSubprovider.prototype.parityCheckRequest = function(reqId, cb) {
  const self = this
  const result = self._parityRequests[reqId] || null
  // tx not handled yet
  if (!result) return cb(null, null)
  // tx was rejected (or other error)
  if (result.error) return cb(result.error)
  // tx sent
  cb(null, result)
}

//
// signature and recovery
//

HookedWalletSubprovider.prototype.recoverPersonalSignature = function(msgParams, cb) {
  let senderHex
  try {
    senderHex = sigUtil.recoverPersonalSignature(msgParams)
  } catch (err) {
    return cb(err)
  }
  cb(null, senderHex)
}

//
// validation
//

HookedWalletSubprovider.prototype.validateTransaction = function(txParams, cb){
  const self = this
  // shortcut: undefined sender is invalid
  if (txParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign transaction.`))
  self.validateSender(txParams.from, function(err, senderIsValid){
    if (err) return cb(err)
    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign transaction for this address: "${txParams.from}"`))
    cb()
  })
}

HookedWalletSubprovider.prototype.validateMessage = function(msgParams, cb){
  const self = this
  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign message.`))
  self.validateSender(msgParams.from, function(err, senderIsValid){
    if (err) return cb(err)
    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`))
    cb()
  })
}

HookedWalletSubprovider.prototype.validatePersonalMessage = function(msgParams, cb){
  const self = this
  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign personal message.`))
  if (msgParams.data === undefined) return cb(new Error(`Undefined message - message required to sign personal message.`))
  if (!isValidHex(msgParams.data)) return cb(new Error(`HookedWalletSubprovider - validateMessage - message was not encoded as hex.`))
  self.validateSender(msgParams.from, function(err, senderIsValid){
    if (err) return cb(err)
    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`))
    cb()
  })
}

HookedWalletSubprovider.prototype.validateDecryptMessage = function(msgParams, cb){
  const self = this
  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to decrypt message.`))
  if (msgParams.data === undefined) return cb(new Error(`Undefined message - message required to decrypt message.`))
  if (!isValidHex(msgParams.data)) return cb(new Error(`HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex.`))
  self.validateSender(msgParams.from, function(err, senderIsValid){
    if (err) return cb(err)
    if (!senderIsValid) return cb(new Error(`Unknown address - unable to decrypt message for this address: "${msgParams.from}"`))
    cb()
  })
}

HookedWalletSubprovider.prototype.validateEncryptionPublicKey = function(address, cb){
  const self = this

  self.validateSender(address, function(err, senderIsValid){
    if (err) return cb(err)
    if (!senderIsValid) return cb(new Error(`Unknown address - unable to obtain encryption public key for this address: "${address}"`))
    cb()
  })
}

HookedWalletSubprovider.prototype.validateTypedMessage = function(msgParams, cb){
  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign typed data.`))
  if (msgParams.data === undefined) return cb(new Error(`Undefined data - message required to sign typed data.`))
  this.validateSender(msgParams.from, function(err, senderIsValid){
    if (err) return cb(err)
    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`))
    cb()
  })
}

HookedWalletSubprovider.prototype.validateSender = function(senderAddress, cb){
  const self = this
  // shortcut: undefined sender is invalid
  if (!senderAddress) return cb(null, false)
  self.getAccounts(function(err, accounts){
    if (err) return cb(err)
    const senderIsValid = (accounts.map(toLowerCase).indexOf(senderAddress.toLowerCase()) !== -1)
    cb(null, senderIsValid)
  })
}

//
// tx helpers
//

HookedWalletSubprovider.prototype.finalizeAndSubmitTx = function(txParams, cb) {
  const self = this
  // can only allow one tx to pass through this flow at a time
  // so we can atomically consume a nonce
  self.nonceLock.take(function(){
    waterfall([
      self.fillInTxExtras.bind(self, txParams),
      self.signTransaction.bind(self),
      self.publishTransaction.bind(self),
    ], function(err, txHash){
      self.nonceLock.leave()
      if (err) return cb(err)
      cb(null, txHash)
    })
  })
}

HookedWalletSubprovider.prototype.finalizeTx = function(txParams, cb) {
  const self = this
  // can only allow one tx to pass through this flow at a time
  // so we can atomically consume a nonce
  self.nonceLock.take(function(){
    waterfall([
      self.fillInTxExtras.bind(self, txParams),
      self.signTransaction.bind(self),
    ], function(err, signedTx){
      self.nonceLock.leave()
      if (err) return cb(err)
      cb(null, {raw: signedTx, tx: txParams})
    })
  })
}

HookedWalletSubprovider.prototype.publishTransaction = function(rawTx, cb) {
  const self = this
  self.emitPayload({
    method: 'eth_sendRawTransaction',
    params: [rawTx],
  }, function(err, res){
    if (err) return cb(err)
    cb(null, res.result)
  })
}

HookedWalletSubprovider.prototype.estimateGas = function(txParams, cb) {
  const self = this
  estimateGas(self.engine, txParams, cb)
}

HookedWalletSubprovider.prototype.getGasPrice = function(cb) {
  const self = this
  self.emitPayload({ method: 'eth_gasPrice', params: [] }, function (err, res) {
    if (err) return cb(err)
    cb(null, res.result)
  })
}

HookedWalletSubprovider.prototype.fillInTxExtras = function(txParams, cb){
  const self = this
  const address = txParams.from
  // console.log('fillInTxExtras - address:', address)

  const tasks = {}

  if (txParams.gasPrice === undefined) {
    // console.log("need to get gasprice")
    tasks.gasPrice = self.getGasPrice.bind(self)
  }

  if (txParams.nonce === undefined) {
    // console.log("need to get nonce")
    tasks.nonce = self.emitPayload.bind(self, { method: 'eth_getTransactionCount', params: [address, 'pending'] })
  }

  if (txParams.gas === undefined) {
    // console.log("need to get gas")
    tasks.gas = self.estimateGas.bind(self, cloneTxParams(txParams))
  }

  parallel(tasks, function(err, taskResults) {
    if (err) return cb(err)

    const result = {}
    if (taskResults.gasPrice) result.gasPrice = taskResults.gasPrice
    if (taskResults.nonce) result.nonce = taskResults.nonce.result
    if (taskResults.gas) result.gas = taskResults.gas

    cb(null, extend(txParams, result))
  })
}

// util

// we use this to clean any custom params from the txParams
function cloneTxParams(txParams){
  return {
    from: txParams.from,
    to: txParams.to,
    value: txParams.value,
    data: txParams.data,
    gas: txParams.gas,
    gasPrice: txParams.gasPrice,
    nonce: txParams.nonce,
  }
}

function toLowerCase(string){
  return string.toLowerCase()
}

function resemblesAddress (string) {
  const fixed = ethUtil.addHexPrefix(string)
  const isValid = ethUtil.isValidAddress(fixed)
  return isValid
}

// Returns true if resembles hex data
// but definitely not a valid address.
function resemblesData (string) {
  const fixed = ethUtil.addHexPrefix(string)
  const isValidAddress = ethUtil.isValidAddress(fixed)
  return !isValidAddress && isValidHex(string)
}

function isValidHex(data) {
  const isString = typeof data === 'string'
  if (!isString) return false
  const isHexPrefixed = data.slice(0,2) === '0x'
  if (!isHexPrefixed) return false
  const nonPrefixed = data.slice(2)
  const isValid = nonPrefixed.match(hexRegex)
  return isValid
}

function mustProvideInConstructor(methodName) {
  return function(params, cb) {
    cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "' + methodName + '" fn in constructor options'))
  }
}

},{"async/waterfall":"node_modules/async/waterfall.js","async/parallel":"node_modules/async/parallel.js","util":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/util/util.js","ethereumjs-util":"node_modules/web3-provider-engine/node_modules/ethereumjs-util/dist/index.js","eth-sig-util":"node_modules/eth-sig-util/index.js","xtend":"node_modules/xtend/immutable.js","semaphore":"node_modules/semaphore/lib/semaphore.js","./subprovider.js":"node_modules/web3-provider-engine/subproviders/subprovider.js","../util/estimate-gas.js":"node_modules/web3-provider-engine/util/estimate-gas.js"}],"node_modules/ethereumjs-tx/node_modules/ethereumjs-util/dist/secp256k1-lib/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
'use strict';

// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

var BN = require('bn.js');
var EC = require('elliptic').ec;

var ec = new EC('secp256k1');
var ecparams = ec.curve;

exports.privateKeyExport = function (privateKey, compressed) {
  var d = new BN(privateKey);
  if (d.ucmp(ecparams.n) >= 0) {
    throw new Error('couldn\'t export to DER format');
  }

  var point = ec.g.mul(d);
  return toPublicKey(point.getX(), point.getY(), compressed);
};

exports.privateKeyModInverse = function (privateKey) {
  var bn = new BN(privateKey);
  if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {
    throw new Error('private key range is invalid');
  }

  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
};

exports.signatureImport = function (sigObj) {
  var r = new BN(sigObj.r);
  if (r.ucmp(ecparams.n) >= 0) {
    r = new BN(0);
  }

  var s = new BN(sigObj.s);
  if (s.ucmp(ecparams.n) >= 0) {
    s = new BN(0);
  }

  return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);
};

exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
  var point = ec.keyFromPublic(publicKey);

  var scalar = new BN(privateKey);
  if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {
    throw new Error('scalar was invalid (zero or overflow)');
  }

  var shared = point.pub.mul(scalar);
  return toPublicKey(shared.getX(), shared.getY(), compressed);
};

var toPublicKey = function toPublicKey(x, y, compressed) {
  var publicKey = void 0;

  if (compressed) {
    publicKey = Buffer.alloc(33);
    publicKey[0] = y.isOdd() ? 0x03 : 0x02;
    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
  } else {
    publicKey = Buffer.alloc(65);
    publicKey[0] = 0x04;
    x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
    y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
  }

  return publicKey;
};
},{"bn.js":"node_modules/bn.js/lib/bn.js","elliptic":"node_modules/elliptic/lib/elliptic.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/ethereumjs-tx/node_modules/ethereumjs-util/dist/secp256k1-lib/der.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";

// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE

var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
// begin
0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
// private key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// middle
0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
// public key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
// begin
0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
// private key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// middle
0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
// public key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

exports.privateKeyExport = function (privateKey, publicKey, compressed) {
  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
  privateKey.copy(result, compressed ? 8 : 9);
  publicKey.copy(result, compressed ? 181 : 214);
  return result;
};

exports.privateKeyImport = function (privateKey) {
  var length = privateKey.length;

  // sequence header
  var index = 0;
  if (length < index + 1 || privateKey[index] !== 0x30) return null;
  index += 1;

  // sequence length constructor
  if (length < index + 1 || !(privateKey[index] & 0x80)) return null;

  var lenb = privateKey[index] & 0x7f;
  index += 1;
  if (lenb < 1 || lenb > 2) return null;
  if (length < index + lenb) return null;

  // sequence length
  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
  index += lenb;
  if (length < index + len) return null;

  // sequence element 0: version number (=1)
  if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {
    return null;
  }
  index += 3;

  // sequence element 1: octet string, up to 32 bytes
  if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {
    return null;
  }

  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
};

exports.signatureImportLax = function (signature) {
  var r = Buffer.alloc(32, 0);
  var s = Buffer.alloc(32, 0);

  var length = signature.length;
  var index = 0;

  // sequence tag byte
  if (signature[index++] !== 0x30) {
    return null;
  }

  // sequence length byte
  var lenbyte = signature[index++];
  if (lenbyte & 0x80) {
    index += lenbyte - 0x80;
    if (index > length) {
      return null;
    }
  }

  // sequence tag byte for r
  if (signature[index++] !== 0x02) {
    return null;
  }

  // length for r
  var rlen = signature[index++];
  if (rlen & 0x80) {
    lenbyte = rlen - 0x80;
    if (index + lenbyte > length) {
      return null;
    }
    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
      rlen = (rlen << 8) + signature[index];
    }
  }
  if (rlen > length - index) {
    return null;
  }
  var rindex = index;
  index += rlen;

  // sequence tag byte for s
  if (signature[index++] !== 0x02) {
    return null;
  }

  // length for s
  var slen = signature[index++];
  if (slen & 0x80) {
    lenbyte = slen - 0x80;
    if (index + lenbyte > length) {
      return null;
    }
    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1) {}
    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) {
      slen = (slen << 8) + signature[index];
    }
  }
  if (slen > length - index) {
    return null;
  }
  var sindex = index;
  index += slen;

  // ignore leading zeros in r
  for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1) {}
  // copy r value
  if (rlen > 32) {
    return null;
  }
  var rvalue = signature.slice(rindex, rindex + rlen);
  rvalue.copy(r, 32 - rvalue.length);

  // ignore leading zeros in s
  for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1) {}
  // copy s value
  if (slen > 32) {
    return null;
  }
  var svalue = signature.slice(sindex, sindex + slen);
  svalue.copy(s, 32 - svalue.length);

  return { r: r, s: s };
};
},{"buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/ethereumjs-tx/node_modules/ethereumjs-util/dist/secp256k1-adapter.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
'use strict';

var secp256k1 = require('ethereum-cryptography/secp256k1');

var secp256k1v3 = require('./secp256k1-lib/index');
var der = require('./secp256k1-lib/der');

/**
 * Verify an ECDSA privateKey
 * @method privateKeyVerify
 * @param {Buffer} privateKey
 * @return {boolean}
 */
var privateKeyVerify = function privateKeyVerify(privateKey) {
  // secp256k1 v4 version throws when privateKey length is not 32
  if (privateKey.length !== 32) {
    return false;
  }

  return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
};

/**
 * Export a privateKey in DER format
 * @method privateKeyExport
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {boolean}
 */
var privateKeyExport = function privateKeyExport(privateKey, compressed) {
  // privateKeyExport method is not part of secp256k1 v4 package
  // this implementation is based on v3
  if (privateKey.length !== 32) {
    throw new RangeError('private key length is invalid');
  }

  var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);

  return der.privateKeyExport(privateKey, publicKey, compressed);
};

/**
 * Import a privateKey in DER format
 * @method privateKeyImport
 * @param {Buffer} privateKey
 * @return {Buffer}
 */

var privateKeyImport = function privateKeyImport(privateKey) {
  // privateKeyImport method is not part of secp256k1 v4 package
  // this implementation is based on v3
  privateKey = der.privateKeyImport(privateKey);
  if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) {
    return privateKey;
  }

  throw new Error("couldn't import from DER format");
};

/**
 * Negate a privateKey by subtracting it from the order of the curve's base point
 * @method privateKeyNegate
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
var privateKeyNegate = function privateKeyNegate(privateKey) {
  return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
};

/**
 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
 * @method privateKeyModInverse
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
var privateKeyModInverse = function privateKeyModInverse(privateKey) {
  if (privateKey.length !== 32) {
    throw new Error('private key length is invalid');
  }

  return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
};

/**
 * Tweak a privateKey by adding tweak to it.
 * @method privateKeyTweakAdd
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */
var privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {
  return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
};

/**
 * Tweak a privateKey by multiplying it by a tweak.
 * @method privateKeyTweakMul
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */
var privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {
  return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
};

/**
 * Compute the public key for a privateKey.
 * @method publicKeyCreate
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyCreate = function publicKeyCreate(privateKey, compressed) {
  return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
};

/**
 * Convert a publicKey to compressed or uncompressed form.
 * @method publicKeyConvert
 * @param {Buffer} publicKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyConvert = function publicKeyConvert(publicKey, compressed) {
  return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
};

/**
 * Verify an ECDSA publicKey.
 * @method publicKeyVerify
 * @param {Buffer} publicKey
 * @return {boolean}
 */
var publicKeyVerify = function publicKeyVerify(publicKey) {
  // secp256k1 v4 version throws when publicKey length is not 33 or 65
  if (publicKey.length !== 33 && publicKey.length !== 65) {
    return false;
  }

  return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
};

/**
 * Tweak a publicKey by adding tweak times the generator to it.
 * @method publicKeyTweakAdd
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {
  return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};

/**
 * Tweak a publicKey by multiplying it by a tweak value
 * @method publicKeyTweakMul
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {
  return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};

/**
 * Add a given publicKeys together.
 * @method publicKeyCombine
 * @param {Array<Buffer>} publicKeys
 * @param {boolean} compressed
 * @return {Buffer}
 */
var publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {
  var keys = [];
  publicKeys.forEach(function (publicKey) {
    keys.push(Uint8Array.from(publicKey));
  });

  return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
};

/**
 * Convert a signature to a normalized lower-S form.
 * @method signatureNormalize
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureNormalize = function signatureNormalize(signature) {
  return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
};

/**
 * Serialize an ECDSA signature in DER format.
 * @method signatureExport
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureExport = function signatureExport(signature) {
  return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
};

/**
 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImport
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureImport = function signatureImport(signature) {
  return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
};

/**
 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImportLax
 * @param {Buffer} signature
 * @return {Buffer}
 */
var signatureImportLax = function signatureImportLax(signature) {
  // signatureImportLax method is not part of secp256k1 v4 package
  // this implementation is based on v3
  // ensure that signature is greater than 0
  if (signature.length === 0) {
    throw new RangeError('signature length is invalid');
  }

  var sigObj = der.signatureImportLax(signature);
  if (sigObj === null) {
    throw new Error("couldn't parse DER signature");
  }

  return secp256k1v3.signatureImport(sigObj);
};

/**
 * Create an ECDSA signature. Always return low-S signature.
 * @method sign
 * @param {Buffer} message
 * @param {Buffer} privateKey
 * @param {Object} options
 * @return {Buffer}
 */
var sign = function sign(message, privateKey, options) {
  if (options === null) {
    throw new TypeError('options should be an Object');
  }

  var signOptions = void 0;

  if (options) {
    signOptions = {};

    if (options.data === null) {
      throw new TypeError('options.data should be a Buffer');
    }

    if (options.data) {
      // validate option.data length
      if (options.data.length !== 32) {
        throw new RangeError('options.data length is invalid');
      }

      signOptions.data = new Uint8Array(options.data);
    }

    if (options.noncefn === null) {
      throw new TypeError('options.noncefn should be a Function');
    }

    if (options.noncefn) {
      //  convert option.noncefn function signature
      signOptions.noncefn = function (message, privateKey, algo, data, attempt) {
        var bufferAlgo = algo != null ? Buffer.from(algo) : null;
        var bufferData = data != null ? Buffer.from(data) : null;

        var buffer = Buffer.from('');

        if (options.noncefn) {
          buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
        }

        return Uint8Array.from(buffer);
      };
    }
  }

  var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);

  return {
    signature: Buffer.from(sig.signature),
    recovery: sig.recid
  };
};

/**
 * Verify an ECDSA signature.
 * @method verify
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Buffer} publicKey
 * @return {boolean}
 */
var verify = function verify(message, signature, publicKey) {
  // note: secp256k1 v4 verify method has a different argument order
  return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
};

/**
 * Recover an ECDSA public key from a signature.
 * @method recover
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Number} recid
 * @param {boolean} compressed
 * @return {Buffer}
 */
var recover = function recover(message, signature, recid, compressed) {
  // note: secp256k1 v4 recover method has a different argument order
  return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
};

/**
 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
 * @method ecdh
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @return {Buffer}
 */
var ecdh = function ecdh(publicKey, privateKey) {
  // note: secp256k1 v3 doesn't allow optional parameter
  return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
};

/**
 * Compute an EC Diffie-Hellman secret and return public key as result
 * @method ecdhUnsafe
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */
var ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {
  // ecdhUnsafe method is not part of secp256k1 v4 package
  // this implementation is based on v3
  // ensure valid publicKey length
  if (publicKey.length !== 33 && publicKey.length !== 65) {
    throw new RangeError('public key length is invalid');
  }

  // ensure valid privateKey length
  if (privateKey.length !== 32) {
    throw new RangeError('private key length is invalid');
  }

  return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
};

module.exports = {
  privateKeyVerify: privateKeyVerify,
  privateKeyExport: privateKeyExport,
  privateKeyImport: privateKeyImport,
  privateKeyNegate: privateKeyNegate,
  privateKeyModInverse: privateKeyModInverse,
  privateKeyTweakAdd: privateKeyTweakAdd,
  privateKeyTweakMul: privateKeyTweakMul,

  publicKeyCreate: publicKeyCreate,
  publicKeyConvert: publicKeyConvert,
  publicKeyVerify: publicKeyVerify,
  publicKeyTweakAdd: publicKeyTweakAdd,
  publicKeyTweakMul: publicKeyTweakMul,
  publicKeyCombine: publicKeyCombine,

  signatureNormalize: signatureNormalize,
  signatureExport: signatureExport,
  signatureImport: signatureImport,
  signatureImportLax: signatureImportLax,

  sign: sign,
  verify: verify,
  recover: recover,

  ecdh: ecdh,
  ecdhUnsafe: ecdhUnsafe
};
},{"ethereum-cryptography/secp256k1":"node_modules/ethereum-cryptography/secp256k1.js","./secp256k1-lib/index":"node_modules/ethereumjs-tx/node_modules/ethereumjs-util/dist/secp256k1-lib/index.js","./secp256k1-lib/der":"node_modules/ethereumjs-tx/node_modules/ethereumjs-util/dist/secp256k1-lib/der.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/ethereumjs-tx/node_modules/ethereumjs-util/dist/index.js":[function(require,module,exports) {

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _require = require('ethereum-cryptography/keccak'),
    keccak224 = _require.keccak224,
    keccak384 = _require.keccak384,
    k256 = _require.keccak256,
    keccak512 = _require.keccak512;

var secp256k1 = require('./secp256k1-adapter');
var assert = require('assert');
var rlp = require('rlp');
var BN = require('bn.js');
var createHash = require('create-hash');
var Buffer = require('safe-buffer').Buffer;
Object.assign(exports, require('ethjs-util'));

/**
 * the max integer that this VM can handle (a ```BN```)
 * @var {BN} MAX_INTEGER
 */
exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);

/**
 * 2^256 (a ```BN```)
 * @var {BN} TWO_POW256
 */
exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);

/**
 * Keccak-256 hash of null (a ```String```)
 * @var {String} KECCAK256_NULL_S
 */
exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;

/**
 * Keccak-256 hash of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_NULL
 */
exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
exports.SHA3_NULL = exports.KECCAK256_NULL;

/**
 * Keccak-256 of an RLP of an empty array (a ```String```)
 * @var {String} KECCAK256_RLP_ARRAY_S
 */
exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;

/**
 * Keccak-256 of an RLP of an empty array (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP_ARRAY
 */
exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;

/**
 * Keccak-256 hash of the RLP of null  (a ```String```)
 * @var {String} KECCAK256_RLP_S
 */
exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;

/**
 * Keccak-256 hash of the RLP of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP
 */
exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
exports.SHA3_RLP = exports.KECCAK256_RLP;

/**
 * [`BN`](https://github.com/indutny/bn.js)
 * @var {Function}
 */
exports.BN = BN;

/**
 * [`rlp`](https://github.com/ethereumjs/rlp)
 * @var {Function}
 */
exports.rlp = rlp;

/**
 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
 * @var {Object}
 */
exports.secp256k1 = secp256k1;

/**
 * Returns a buffer filled with 0s
 * @method zeros
 * @param {Number} bytes  the number of bytes the buffer should be
 * @return {Buffer}
 */
exports.zeros = function (bytes) {
  return Buffer.allocUnsafe(bytes).fill(0);
};

/**
  * Returns a zero address
  * @method zeroAddress
  * @return {String}
  */
exports.zeroAddress = function () {
  var addressLength = 20;
  var zeroAddress = exports.zeros(addressLength);
  return exports.bufferToHex(zeroAddress);
};

/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @method lsetLength
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @param {Boolean} [right=false] whether to start padding form the left or right
 * @return {Buffer|Array}
 */
exports.setLengthLeft = exports.setLength = function (msg, length, right) {
  var buf = exports.zeros(length);
  msg = exports.toBuffer(msg);
  if (right) {
    if (msg.length < length) {
      msg.copy(buf);
      return buf;
    }
    return msg.slice(0, length);
  } else {
    if (msg.length < length) {
      msg.copy(buf, length - msg.length);
      return buf;
    }
    return msg.slice(-length);
  }
};

/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @return {Buffer|Array}
 */
exports.setLengthRight = function (msg, length) {
  return exports.setLength(msg, length, true);
};

/**
 * Trims leading zeros from a `Buffer` or an `Array`
 * @param {Buffer|Array|String} a
 * @return {Buffer|Array|String}
 */
exports.unpad = exports.stripZeros = function (a) {
  a = exports.stripHexPrefix(a);
  var first = a[0];
  while (a.length > 0 && first.toString() === '0') {
    a = a.slice(1);
    first = a[0];
  }
  return a;
};
/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param {*} v the value
 */
exports.toBuffer = function (v) {
  if (!Buffer.isBuffer(v)) {
    if (Array.isArray(v)) {
      v = Buffer.from(v);
    } else if (typeof v === 'string') {
      if (exports.isHexString(v)) {
        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
      } else {
        v = Buffer.from(v);
      }
    } else if (typeof v === 'number') {
      v = exports.intToBuffer(v);
    } else if (v === null || v === undefined) {
      v = Buffer.allocUnsafe(0);
    } else if (BN.isBN(v)) {
      v = v.toArrayLike(Buffer);
    } else if (v.toArray) {
      // converts a BN to a Buffer
      v = Buffer.from(v.toArray());
    } else {
      throw new Error('invalid type');
    }
  }
  return v;
};

/**
 * Converts a `Buffer` to a `Number`
 * @param {Buffer} buf
 * @return {Number}
 * @throws If the input number exceeds 53 bits.
 */
exports.bufferToInt = function (buf) {
  return new BN(exports.toBuffer(buf)).toNumber();
};

/**
 * Converts a `Buffer` into a hex `String`
 * @param {Buffer} buf
 * @return {String}
 */
exports.bufferToHex = function (buf) {
  buf = exports.toBuffer(buf);
  return '0x' + buf.toString('hex');
};

/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param {Buffer} num
 * @return {BN}
 */
exports.fromSigned = function (num) {
  return new BN(num).fromTwos(256);
};

/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param {BN} num
 * @return {Buffer}
 */
exports.toUnsigned = function (num) {
  return Buffer.from(num.toTwos(256).toArray());
};

/**
 * Creates Keccak hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the Keccak width
 * @return {Buffer}
 */
exports.keccak = function (a, bits) {
  a = exports.toBuffer(a);
  if (!bits) bits = 256;

  switch (bits) {
    case 224:
      {
        return keccak224(a);
      }
    case 256:
      {
        return k256(a);
      }
    case 384:
      {
        return keccak384(a);
      }
    case 512:
      {
        return keccak512(a);
      }
    default:
      {
        throw new Error('Invald algorithm: keccak' + bits);
      }
  }
};

/**
 * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.keccak256 = function (a) {
  return exports.keccak(a);
};

/**
 * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the SHA-3 width
 * @return {Buffer}
 */
exports.sha3 = exports.keccak;

/**
 * Creates SHA256 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.sha256 = function (a) {
  a = exports.toBuffer(a);
  return createHash('sha256').update(a).digest();
};

/**
 * Creates RIPEMD160 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Boolean} padded whether it should be padded to 256 bits or not
 * @return {Buffer}
 */
exports.ripemd160 = function (a, padded) {
  a = exports.toBuffer(a);
  var hash = createHash('rmd160').update(a).digest();
  if (padded === true) {
    return exports.setLength(hash, 32);
  } else {
    return hash;
  }
};

/**
 * Creates SHA-3 hash of the RLP encoded version of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */
exports.rlphash = function (a) {
  return exports.keccak(rlp.encode(a));
};

/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 * @param {Buffer} privateKey
 * @return {Boolean}
 */
exports.isValidPrivate = function (privateKey) {
  return secp256k1.privateKeyVerify(privateKey);
};

/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Boolean}
 */
exports.isValidPublic = function (publicKey, sanitize) {
  if (publicKey.length === 64) {
    // Convert to SEC1 for secp256k1
    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
  }

  if (!sanitize) {
    return false;
  }

  return secp256k1.publicKeyVerify(publicKey);
};

/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Buffer}
 */
exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
  pubKey = exports.toBuffer(pubKey);
  if (sanitize && pubKey.length !== 64) {
    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
  }
  assert(pubKey.length === 64);
  // Only take the lower 160bits of the hash
  return exports.keccak(pubKey).slice(-20);
};

/**
 * Returns the ethereum public key of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
var privateToPublic = exports.privateToPublic = function (privateKey) {
  privateKey = exports.toBuffer(privateKey);
  // skip the type flag and use the X, Y points
  return secp256k1.publicKeyCreate(privateKey, false).slice(1);
};

/**
 * Converts a public key to the Ethereum format.
 * @param {Buffer} publicKey
 * @return {Buffer}
 */
exports.importPublic = function (publicKey) {
  publicKey = exports.toBuffer(publicKey);
  if (publicKey.length !== 64) {
    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
  }
  return publicKey;
};

/**
 * ECDSA sign
 * @param {Buffer} msgHash
 * @param {Buffer} privateKey
 * @return {Object}
 */
exports.ecsign = function (msgHash, privateKey) {
  var sig = secp256k1.sign(msgHash, privateKey);

  var ret = {};
  ret.r = sig.signature.slice(0, 32);
  ret.s = sig.signature.slice(32, 64);
  ret.v = sig.recovery + 27;
  return ret;
};

/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 * @param message
 * @returns {Buffer} hash
 */
exports.hashPersonalMessage = function (message) {
  var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
  return exports.keccak(Buffer.concat([prefix, message]));
};

/**
 * ECDSA public key recovery from signature
 * @param {Buffer} msgHash
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {Buffer} publicKey
 */
exports.ecrecover = function (msgHash, v, r, s) {
  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
  var recovery = v - 27;
  if (recovery !== 0 && recovery !== 1) {
    throw new Error('Invalid signature v value');
  }
  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
};

/**
 * Convert signature parameters into the format of `eth_sign` RPC method
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {String} sig
 */
exports.toRpcSig = function (v, r, s) {
  // NOTE: with potential introduction of chainId this might need to be updated
  if (v !== 27 && v !== 28) {
    throw new Error('Invalid recovery id');
  }

  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
  return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
};

/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 * @param {String} sig
 * @return {Object}
 */
exports.fromRpcSig = function (sig) {
  sig = exports.toBuffer(sig);

  // NOTE: with potential introduction of chainId this might need to be updated
  if (sig.length !== 65) {
    throw new Error('Invalid signature length');
  }

  var v = sig[64];
  // support both versions of `eth_sign` responses
  if (v < 27) {
    v += 27;
  }

  return {
    v: v,
    r: sig.slice(0, 32),
    s: sig.slice(32, 64)
  };
};

/**
 * Returns the ethereum address of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */
exports.privateToAddress = function (privateKey) {
  return exports.publicToAddress(privateToPublic(privateKey));
};

/**
 * Checks if the address is a valid. Accepts checksummed addresses too
 * @param {String} address
 * @return {Boolean}
 */
exports.isValidAddress = function (address) {
  return (/^0x[0-9a-fA-F]{40}$/.test(address)
  );
};

/**
  * Checks if a given address is a zero address
  * @method isZeroAddress
  * @param {String} address
  * @return {Boolean}
  */
exports.isZeroAddress = function (address) {
  var zeroAddress = exports.zeroAddress();
  return zeroAddress === exports.addHexPrefix(address);
};

/**
 * Returns a checksummed address
 * @param {String} address
 * @return {String}
 */
exports.toChecksumAddress = function (address) {
  address = exports.stripHexPrefix(address).toLowerCase();
  var hash = exports.keccak(address).toString('hex');
  var ret = '0x';

  for (var i = 0; i < address.length; i++) {
    if (parseInt(hash[i], 16) >= 8) {
      ret += address[i].toUpperCase();
    } else {
      ret += address[i];
    }
  }

  return ret;
};

/**
 * Checks if the address is a valid checksummed address
 * @param {Buffer} address
 * @return {Boolean}
 */
exports.isValidChecksumAddress = function (address) {
  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
};

/**
 * Generates an address of a newly created contract
 * @param {Buffer} from the address which is creating this new address
 * @param {Buffer} nonce the nonce of the from account
 * @return {Buffer}
 */
exports.generateAddress = function (from, nonce) {
  from = exports.toBuffer(from);
  nonce = new BN(nonce);

  if (nonce.isZero()) {
    // in RLP we want to encode null in the case of zero nonce
    // read the RLP documentation for an answer if you dare
    nonce = null;
  } else {
    nonce = Buffer.from(nonce.toArray());
  }

  // Only take the lower 160bits of the hash
  return exports.rlphash([from, nonce]).slice(-20);
};

/**
 * Returns true if the supplied address belongs to a precompiled account (Byzantium)
 * @param {Buffer|String} address
 * @return {Boolean}
 */
exports.isPrecompiled = function (address) {
  var a = exports.unpad(address);
  return a.length === 1 && a[0] >= 1 && a[0] <= 8;
};

/**
 * Adds "0x" to a given `String` if it does not already start with "0x"
 * @param {String} str
 * @return {String}
 */
exports.addHexPrefix = function (str) {
  if (typeof str !== 'string') {
    return str;
  }

  return exports.isHexPrefixed(str) ? str : '0x' + str;
};

/**
 * Validate ECDSA signature
 * @method isValidSignature
 * @param {Buffer} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @param {Boolean} [homestead=true]
 * @return {Boolean}
 */

exports.isValidSignature = function (v, r, s, homestead) {
  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);

  if (r.length !== 32 || s.length !== 32) {
    return false;
  }

  if (v !== 27 && v !== 28) {
    return false;
  }

  r = new BN(r);
  s = new BN(s);

  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
    return false;
  }

  if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {
    return false;
  }

  return true;
};

/**
 * Converts a `Buffer` or `Array` to JSON
 * @param {Buffer|Array} ba
 * @return {Array|String|null}
 */
exports.baToJSON = function (ba) {
  if (Buffer.isBuffer(ba)) {
    return '0x' + ba.toString('hex');
  } else if (ba instanceof Array) {
    var array = [];
    for (var i = 0; i < ba.length; i++) {
      array.push(exports.baToJSON(ba[i]));
    }
    return array;
  }
};

/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param {Object} self the `Object` to define properties on
 * @param {Array} fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param {*} data data to be validated against the definitions
 */
exports.defineProperties = function (self, fields, data) {
  self.raw = [];
  self._fields = [];

  // attach the `toJSON`
  self.toJSON = function (label) {
    if (label) {
      var obj = {};
      self._fields.forEach(function (field) {
        obj[field] = '0x' + self[field].toString('hex');
      });
      return obj;
    }
    return exports.baToJSON(this.raw);
  };

  self.serialize = function serialize() {
    return rlp.encode(self.raw);
  };

  fields.forEach(function (field, i) {
    self._fields.push(field.name);
    function getter() {
      return self.raw[i];
    }
    function setter(v) {
      v = exports.toBuffer(v);

      if (v.toString('hex') === '00' && !field.allowZero) {
        v = Buffer.allocUnsafe(0);
      }

      if (field.allowLess && field.length) {
        v = exports.stripZeros(v);
        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
      } else if (!(field.allowZero && v.length === 0) && field.length) {
        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
      }

      self.raw[i] = v;
    }

    Object.defineProperty(self, field.name, {
      enumerable: true,
      configurable: true,
      get: getter,
      set: setter
    });

    if (field.default) {
      self[field.name] = field.default;
    }

    // attach alias
    if (field.alias) {
      Object.defineProperty(self, field.alias, {
        enumerable: false,
        configurable: true,
        set: setter,
        get: getter
      });
    }
  });

  // if the constuctor is passed data
  if (data) {
    if (typeof data === 'string') {
      data = Buffer.from(exports.stripHexPrefix(data), 'hex');
    }

    if (Buffer.isBuffer(data)) {
      data = rlp.decode(data);
    }

    if (Array.isArray(data)) {
      if (data.length > self._fields.length) {
        throw new Error('wrong number of fields in data');
      }

      // make sure all the items are buffers
      data.forEach(function (d, i) {
        self[self._fields[i]] = exports.toBuffer(d);
      });
    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
      var keys = Object.keys(data);
      fields.forEach(function (field) {
        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
      });
    } else {
      throw new Error('invalid data');
    }
  }
};
},{"ethereum-cryptography/keccak":"node_modules/ethereum-cryptography/keccak.js","./secp256k1-adapter":"node_modules/ethereumjs-tx/node_modules/ethereumjs-util/dist/secp256k1-adapter.js","assert":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/assert/assert.js","rlp":"node_modules/rlp/dist.browser/index.js","bn.js":"node_modules/bn.js/lib/bn.js","create-hash":"node_modules/create-hash/browser.js","safe-buffer":"node_modules/safe-buffer/index.js","ethjs-util":"node_modules/ethjs-util/lib/index.js"}],"node_modules/ethereumjs-tx/node_modules/ethereum-common/params.json":[function(require,module,exports) {
module.exports = {
  "genesisGasLimit": {
    "v": 5000,
    "d": "Gas limit of the Genesis block."
  },
  "genesisDifficulty": {
    "v": 17179869184,
    "d": "Difficulty of the Genesis block."
  },
  "genesisNonce": {
    "v": "0x0000000000000042",
    "d": "the geneis nonce"
  },
  "genesisExtraData": {
    "v": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
    "d": "extra data "
  },
  "genesisHash": {
    "v": "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
    "d": "genesis hash"
  },
  "genesisStateRoot": {
    "v": "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544",
    "d": "the genesis state root"
  },
  "minGasLimit": {
    "v": 5000,
    "d": "Minimum the gas limit may ever be."
  },
  "gasLimitBoundDivisor": {
    "v": 1024,
    "d": "The bound divisor of the gas limit, used in update calculations."
  },
  "minimumDifficulty": {
    "v": 131072,
    "d": "The minimum that the difficulty may ever be."
  },
  "difficultyBoundDivisor": {
    "v": 2048,
    "d": "The bound divisor of the difficulty, used in the update calculations."
  },
  "durationLimit": {
    "v": 13,
    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."
  },
  "maximumExtraDataSize": {
    "v": 32,
    "d": "Maximum size extra data may be after Genesis."
  },
  "epochDuration": {
    "v": 30000,
    "d": "Duration between proof-of-work epochs."
  },
  "stackLimit": {
    "v": 1024,
    "d": "Maximum size of VM stack allowed."
  },
  "callCreateDepth": {
    "v": 1024,
    "d": "Maximum depth of call/create stack."
  },

  "tierStepGas": {
    "v": [0, 2, 3, 5, 8, 10, 20],
    "d": "Once per operation, for a selection of them."
  },
  "expGas": {
    "v": 10,
    "d": "Once per EXP instuction."
  },
  "expByteGas": {
    "v": 10,
    "d": "Times ceil(log256(exponent)) for the EXP instruction."
  },

  "sha3Gas": {
    "v": 30,
    "d": "Once per SHA3 operation."
  },
  "sha3WordGas": {
    "v": 6,
    "d": "Once per word of the SHA3 operation's data."
  },
  "sloadGas": {
    "v": 50,
    "d": "Once per SLOAD operation."
  },
  "sstoreSetGas": {
    "v": 20000,
    "d": "Once per SSTORE operation if the zeroness changes from zero."
  },
  "sstoreResetGas": {
    "v": 5000,
    "d": "Once per SSTORE operation if the zeroness does not change from zero."
  },
  "sstoreRefundGas": {
    "v": 15000,
    "d": "Once per SSTORE operation if the zeroness changes to zero."
  },
  "jumpdestGas": {
    "v": 1,
    "d": "Refunded gas, once per SSTORE operation if the zeroness changes to zero."
  },

  "logGas": {
    "v": 375,
    "d": "Per LOG* operation."
  },
  "logDataGas": {
    "v": 8,
    "d": "Per byte in a LOG* operation's data."
  },
  "logTopicGas": {
    "v": 375,
    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."
  },

  "createGas": {
    "v": 32000,
    "d": "Once per CREATE operation & contract-creation transaction."
  },

  "callGas": {
    "v": 40,
    "d": "Once per CALL operation & message call transaction."
  },
  "callStipend": {
    "v": 2300,
    "d": "Free gas given at beginning of call."
  },
  "callValueTransferGas": {
    "v": 9000,
    "d": "Paid for CALL when the value transfor is non-zero."
  },
  "callNewAccountGas": {
    "v": 25000,
    "d": "Paid for CALL when the destination address didn't exist prior."
  },

  "suicideRefundGas": {
    "v": 24000,
    "d": "Refunded following a suicide operation."
  },

  "memoryGas": {
    "v": 3,
    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."
  },
  "quadCoeffDiv": {
    "v": 512,
    "d": "Divisor for the quadratic particle of the memory cost equation."
  },

  "createDataGas": {
    "v": 200,
    "d": ""
  },
  "txGas": {
    "v": 21000,
    "d": "Per transaction. NOTE: Not payable on data of calls between transactions."
  },
  "txCreation": {
    "v": 32000,
    "d": "the cost of creating a contract via tx"
  },
  "txDataZeroGas": {
    "v": 4,
    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."
  },
  "txDataNonZeroGas": {
    "v": 68,
    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."
  },

  "copyGas": {
    "v": 3,
    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."
  },

  "ecrecoverGas": {
    "v": 3000,
    "d": ""
  },
  "sha256Gas": {
    "v": 60,
    "d": ""
  },
  "sha256WordGas": {
    "v": 12,
    "d": ""
  },
  "ripemd160Gas": {
    "v": 600,
    "d": ""
  },
  "ripemd160WordGas": {
    "v": 120,
    "d": ""
  },
  "identityGas": {
    "v": 15,
    "d": ""
  },
  "identityWordGas": {
    "v": 3,
    "d": ""
  },
  "minerReward": {
    "v": "5000000000000000000",
    "d": "the amount a miner get rewarded for mining a block"
  },
  "ommerReward": {
    "v": "625000000000000000",
    "d": "The amount of wei a miner of an uncle block gets for being inculded in the blockchain"
  },
  "niblingReward": {
    "v": "156250000000000000",
    "d": "the amount a miner gets for inculding a uncle"
  },
  "homeSteadForkNumber": {
    "v": 1150000,
    "d": "the block that the Homestead fork started at"
  },
  "homesteadRepriceForkNumber": {
    "v": 2463000,
    "d": "the block that the Homestead Reprice (EIP150) fork started at"
  },
  "timebombPeriod": {
    "v": 100000,
    "d": "Exponential difficulty timebomb period"
  },
  "freeBlockPeriod": {
    "v": 2
  }
}
;
},{}],"node_modules/ethereumjs-tx/es5/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ethUtil = require('ethereumjs-util');
var fees = require('ethereum-common/params.json');
var BN = ethUtil.BN;

// secp256k1n/2
var N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);

/**
 * Creates a new transaction object.
 *
 * @example
 * var rawTx = {
 *   nonce: '00',
 *   gasPrice: '09184e72a000',
 *   gasLimit: '2710',
 *   to: '0000000000000000000000000000000000000000',
 *   value: '00',
 *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',
 *   v: '1c',
 *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',
 *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'
 * };
 * var tx = new Transaction(rawTx);
 *
 * @class
 * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.
 *
 * Or lastly an Object containing the Properties of the transaction like in the Usage example.
 *
 * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum
 *
 * @property {Buffer} raw The raw rlp encoded transaction
 * @param {Buffer} data.nonce nonce number
 * @param {Buffer} data.gasLimit transaction gas limit
 * @param {Buffer} data.gasPrice transaction gas price
 * @param {Buffer} data.to to the to address
 * @param {Buffer} data.value the amount of ether sent
 * @param {Buffer} data.data this will contain the data of the message or the init of a contract
 * @param {Buffer} data.v EC signature parameter
 * @param {Buffer} data.r EC signature parameter
 * @param {Buffer} data.s EC recovery ID
 * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3
 * */

var Transaction = function () {
  function Transaction(data) {
    _classCallCheck(this, Transaction);

    data = data || {};
    // Define Properties
    var fields = [{
      name: 'nonce',
      length: 32,
      allowLess: true,
      default: new Buffer([])
    }, {
      name: 'gasPrice',
      length: 32,
      allowLess: true,
      default: new Buffer([])
    }, {
      name: 'gasLimit',
      alias: 'gas',
      length: 32,
      allowLess: true,
      default: new Buffer([])
    }, {
      name: 'to',
      allowZero: true,
      length: 20,
      default: new Buffer([])
    }, {
      name: 'value',
      length: 32,
      allowLess: true,
      default: new Buffer([])
    }, {
      name: 'data',
      alias: 'input',
      allowZero: true,
      default: new Buffer([])
    }, {
      name: 'v',
      allowZero: true,
      default: new Buffer([0x1c])
    }, {
      name: 'r',
      length: 32,
      allowZero: true,
      allowLess: true,
      default: new Buffer([])
    }, {
      name: 's',
      length: 32,
      allowZero: true,
      allowLess: true,
      default: new Buffer([])
    }];

    /**
     * Returns the rlp encoding of the transaction
     * @method serialize
     * @return {Buffer}
     * @memberof Transaction
     * @name serialize
     */
    // attached serialize
    ethUtil.defineProperties(this, fields, data);

    /**
     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.
     * @name from
     * @memberof Transaction
     */
    Object.defineProperty(this, 'from', {
      enumerable: true,
      configurable: true,
      get: this.getSenderAddress.bind(this)
    });

    // calculate chainId from signature
    var sigV = ethUtil.bufferToInt(this.v);
    var chainId = Math.floor((sigV - 35) / 2);
    if (chainId < 0) chainId = 0;

    // set chainId
    this._chainId = chainId || data.chainId || 0;
    this._homestead = true;
  }

  /**
   * If the tx's `to` is to the creation address
   * @return {Boolean}
   */


  Transaction.prototype.toCreationAddress = function toCreationAddress() {
    return this.to.toString('hex') === '';
  };

  /**
   * Computes a sha3-256 hash of the serialized tx
   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature
   * @return {Buffer}
   */


  Transaction.prototype.hash = function hash(includeSignature) {
    if (includeSignature === undefined) includeSignature = true;

    // EIP155 spec:
    // when computing the hash of a transaction for purposes of signing or recovering,
    // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),
    // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0

    var items = void 0;
    if (includeSignature) {
      items = this.raw;
    } else {
      if (this._chainId > 0) {
        var raw = this.raw.slice();
        this.v = this._chainId;
        this.r = 0;
        this.s = 0;
        items = this.raw;
        this.raw = raw;
      } else {
        items = this.raw.slice(0, 6);
      }
    }

    // create hash
    return ethUtil.rlphash(items);
  };

  /**
   * returns the public key of the sender
   * @return {Buffer}
   */


  Transaction.prototype.getChainId = function getChainId() {
    return this._chainId;
  };

  /**
   * returns the sender's address
   * @return {Buffer}
   */


  Transaction.prototype.getSenderAddress = function getSenderAddress() {
    if (this._from) {
      return this._from;
    }
    var pubkey = this.getSenderPublicKey();
    this._from = ethUtil.publicToAddress(pubkey);
    return this._from;
  };

  /**
   * returns the public key of the sender
   * @return {Buffer}
   */


  Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {
    if (!this._senderPubKey || !this._senderPubKey.length) {
      if (!this.verifySignature()) throw new Error('Invalid Signature');
    }
    return this._senderPubKey;
  };

  /**
   * Determines if the signature is valid
   * @return {Boolean}
   */


  Transaction.prototype.verifySignature = function verifySignature() {
    var msgHash = this.hash(false);
    // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
    if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {
      return false;
    }

    try {
      var v = ethUtil.bufferToInt(this.v);
      if (this._chainId > 0) {
        v -= this._chainId * 2 + 8;
      }
      this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);
    } catch (e) {
      return false;
    }

    return !!this._senderPubKey;
  };

  /**
   * sign a transaction with a given a private key
   * @param {Buffer} privateKey
   */


  Transaction.prototype.sign = function sign(privateKey) {
    var msgHash = this.hash(false);
    var sig = ethUtil.ecsign(msgHash, privateKey);
    if (this._chainId > 0) {
      sig.v += this._chainId * 2 + 8;
    }
    Object.assign(this, sig);
  };

  /**
   * The amount of gas paid for the data in this tx
   * @return {BN}
   */


  Transaction.prototype.getDataFee = function getDataFee() {
    var data = this.raw[5];
    var cost = new BN(0);
    for (var i = 0; i < data.length; i++) {
      data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);
    }
    return cost;
  };

  /**
   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
   * @return {BN}
   */


  Transaction.prototype.getBaseFee = function getBaseFee() {
    var fee = this.getDataFee().iaddn(fees.txGas.v);
    if (this._homestead && this.toCreationAddress()) {
      fee.iaddn(fees.txCreation.v);
    }
    return fee;
  };

  /**
   * the up front amount that an account must have for this transaction to be valid
   * @return {BN}
   */


  Transaction.prototype.getUpfrontCost = function getUpfrontCost() {
    return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));
  };

  /**
   * validates the signature and checks to see if it has enough gas
   * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean
   * @return {Boolean|String}
   */


  Transaction.prototype.validate = function validate(stringError) {
    var errors = [];
    if (!this.verifySignature()) {
      errors.push('Invalid Signature');
    }

    if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {
      errors.push(['gas limit is too low. Need at least ' + this.getBaseFee()]);
    }

    if (stringError === undefined || stringError === false) {
      return errors.length === 0;
    } else {
      return errors.join(' ');
    }
  };

  return Transaction;
}();

module.exports = Transaction;
},{"ethereumjs-util":"node_modules/ethereumjs-tx/node_modules/ethereumjs-util/dist/index.js","ethereum-common/params.json":"node_modules/ethereumjs-tx/node_modules/ethereum-common/params.json","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/web3-provider-engine/subproviders/nonce-tracker.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
const inherits = require('util').inherits
const Transaction = require('ethereumjs-tx')
const ethUtil = require('ethereumjs-util')
const Subprovider = require('./subprovider.js')
const blockTagForPayload = require('../util/rpc-cache-utils').blockTagForPayload

module.exports = NonceTrackerSubprovider

// handles the following RPC methods:
//   eth_getTransactionCount (pending only)
//
// observes the following RPC methods:
//   eth_sendRawTransaction
//   evm_revert (to clear the nonce cache)

inherits(NonceTrackerSubprovider, Subprovider)

function NonceTrackerSubprovider(opts){
  const self = this

  self.nonceCache = {}
}

NonceTrackerSubprovider.prototype.handleRequest = function(payload, next, end){
  const self = this

  switch(payload.method) {

    case 'eth_getTransactionCount':
      var blockTag = blockTagForPayload(payload)
      var address = payload.params[0].toLowerCase()
      var cachedResult = self.nonceCache[address]
      // only handle requests against the 'pending' blockTag
      if (blockTag === 'pending') {
        // has a result
        if (cachedResult) {
          end(null, cachedResult)
        // fallthrough then populate cache
        } else {
          next(function(err, result, cb){
            if (err) return cb()
            if (self.nonceCache[address] === undefined) {
              self.nonceCache[address] = result
            }
            cb()
          })
        }
      } else {
        next()
      }
      return

    case 'eth_sendRawTransaction':
      // allow the request to continue normally
      next(function(err, result, cb){
        // only update local nonce if tx was submitted correctly
        if (err) return cb()
        // parse raw tx
        var rawTx = payload.params[0]
        var stripped = ethUtil.stripHexPrefix(rawTx)
        var rawData = Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex')
        var tx = new Transaction(Buffer.from(ethUtil.stripHexPrefix(rawTx), 'hex'))
        // extract address
        var address = '0x'+tx.getSenderAddress().toString('hex').toLowerCase()
        // extract nonce and increment
        var nonce = ethUtil.bufferToInt(tx.nonce)
        nonce++
        // hexify and normalize
        var hexNonce = nonce.toString(16)
        if (hexNonce.length%2) hexNonce = '0'+hexNonce
        hexNonce = '0x'+hexNonce
        // dont update our record on the nonce until the submit was successful
        // update cache
        self.nonceCache[address] = hexNonce
        cb()
      })
      return

   // Clear cache on a testrpc revert
   case 'evm_revert':
      self.nonceCache = {}
      next()
      return

    default:
      next()
      return

  }
}

},{"util":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/util/util.js","ethereumjs-tx":"node_modules/ethereumjs-tx/es5/index.js","ethereumjs-util":"node_modules/web3-provider-engine/node_modules/ethereumjs-util/dist/index.js","./subprovider.js":"node_modules/web3-provider-engine/subproviders/subprovider.js","../util/rpc-cache-utils":"node_modules/web3-provider-engine/util/rpc-cache-utils.js","buffer":"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/eth-json-rpc-filters/subscriptionManager.js":[function(require,module,exports) {
const SafeEventEmitter = require('@metamask/safe-event-emitter').default
const createScaffoldMiddleware = require('eth-json-rpc-middleware/scaffold')
const { createAsyncMiddleware } = require('json-rpc-engine')
const createFilterMiddleware = require('./index.js')
const { unsafeRandomBytes, incrementHexInt } = require('./hexUtils.js')
const getBlocksForRange = require('./getBlocksForRange.js')

module.exports = createSubscriptionMiddleware


function createSubscriptionMiddleware({ blockTracker, provider }) {
  // state and utilities for handling subscriptions
  const subscriptions = {}
  const filterManager = createFilterMiddleware({ blockTracker, provider })

  // internal flag
  let isDestroyed = false

  // create subscriptionManager api object
  const events = new SafeEventEmitter()
  const middleware = createScaffoldMiddleware({
    eth_subscribe: createAsyncMiddleware(subscribe),
    eth_unsubscribe: createAsyncMiddleware(unsubscribe),
  })
  middleware.destroy = destroy
  return { events, middleware }

  async function subscribe(req, res) {

    if (isDestroyed) throw new Error(
      'SubscriptionManager - attempting to use after destroying'
    )

    const subscriptionType = req.params[0]
    // subId is 16 byte hex string
    const subId = unsafeRandomBytes(16)

    // create sub
    let sub
    switch (subscriptionType) {
      case 'newHeads':
        sub = createSubNewHeads({ subId })
        break
      case 'logs':
        const filterParams = req.params[1]
        const filter = await filterManager.newLogFilter(filterParams)
        sub = createSubFromFilter({ subId, filter })
        break
      default:
        throw new Error(`SubscriptionManager - unsupported subscription type "${subscriptionType}"`)

    }
    subscriptions[subId] = sub

    res.result = subId
    return

    function createSubNewHeads({ subId }) {
      const sub = {
        type: subscriptionType,
        destroy: async () => {
          blockTracker.removeListener('sync', sub.update)
        },
        update: async ({ oldBlock, newBlock }) => {
          // for newHeads
          const toBlock = newBlock
          const fromBlock = incrementHexInt(oldBlock)
          const rawBlocks = await getBlocksForRange({ provider, fromBlock, toBlock })
          const results = rawBlocks.map(normalizeBlock)
          results.forEach((value) => {
            _emitSubscriptionResult(subId, value)
          })
        }
      }
      // check for subscription updates on new block
      blockTracker.on('sync', sub.update)
      return sub
    }

    function createSubFromFilter({ subId, filter }){
      filter.on('update', result => _emitSubscriptionResult(subId, result))
      const sub = {
        type: subscriptionType,
        destroy: async () => {
          return await filterManager.uninstallFilter(filter.idHex)
        },
      }
      return sub
    }
  }

  async function unsubscribe(req, res) {

    if (isDestroyed) throw new Error(
      'SubscriptionManager - attempting to use after destroying'
    )

    const id = req.params[0]
    const subscription = subscriptions[id]
    // if missing, return "false" to indicate it was not removed
    if (!subscription) {
      res.result = false
      return
    }
    // cleanup subscription
    delete subscriptions[id]
    await subscription.destroy()
    res.result = true
  }

  function _emitSubscriptionResult(filterIdHex, value) {
    events.emit('notification', {
      jsonrpc: '2.0',
      method: 'eth_subscription',
      params: {
        subscription: filterIdHex,
        result: value,
      },
    })
  }

  function destroy () {
    events.removeAllListeners()
    for (const id in subscriptions) {
      subscriptions[id].destroy()
      delete subscriptions[id]
    }
    isDestroyed = true
  }
}

function normalizeBlock(block) {
  return {
    hash: block.hash,
    parentHash: block.parentHash,
    sha3Uncles: block.sha3Uncles,
    miner: block.miner,
    stateRoot: block.stateRoot,
    transactionsRoot: block.transactionsRoot,
    receiptsRoot: block.receiptsRoot,
    logsBloom: block.logsBloom,
    difficulty: block.difficulty,
    number: block.number,
    gasLimit: block.gasLimit,
    gasUsed: block.gasUsed,
    nonce: block.nonce,
    mixHash: block.mixHash,
    timestamp: block.timestamp,
    extraData: block.extraData,
  }
}

},{"@metamask/safe-event-emitter":"node_modules/@metamask/safe-event-emitter/index.js","eth-json-rpc-middleware/scaffold":"node_modules/eth-json-rpc-middleware/scaffold.js","json-rpc-engine":"node_modules/json-rpc-engine/dist/index.js","./index.js":"node_modules/eth-json-rpc-filters/index.js","./hexUtils.js":"node_modules/eth-json-rpc-filters/hexUtils.js","./getBlocksForRange.js":"node_modules/eth-json-rpc-filters/getBlocksForRange.js"}],"node_modules/web3-provider-engine/subproviders/subscriptions.js":[function(require,module,exports) {
const ProviderSubprovider = require('./json-rpc-engine-middleware')
const createSubscriptionManager = require('eth-json-rpc-filters/subscriptionManager')

class SubscriptionsSubprovider extends ProviderSubprovider {
  constructor() {
    super(({ blockTracker, provider, engine }) => {
      const { events, middleware } = createSubscriptionManager({ blockTracker, provider })
      // forward subscription events on the engine
      events.on('notification', (data) => engine.emit('data', null, data))
      // return the subscription install/remove middleware
      return middleware
    })
  }
}

module.exports = SubscriptionsSubprovider

},{"./json-rpc-engine-middleware":"node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js","eth-json-rpc-filters/subscriptionManager":"node_modules/eth-json-rpc-filters/subscriptionManager.js"}],"node_modules/@walletconnect/web3-provider/dist/esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _client = _interopRequireDefault(require("@walletconnect/client"));
var _qrcodeModal = _interopRequireDefault(require("@walletconnect/qrcode-modal"));
var _httpConnection = _interopRequireDefault(require("@walletconnect/http-connection"));
var _utils = require("@walletconnect/utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ProviderEngine = require("web3-provider-engine");
const CacheSubprovider = require("web3-provider-engine/subproviders/cache");
const FixtureSubprovider = require("web3-provider-engine/subproviders/fixture");
const FilterSubprovider = require("web3-provider-engine/subproviders/filters");
const HookedWalletSubprovider = require("web3-provider-engine/subproviders/hooked-wallet");
const NonceSubprovider = require("web3-provider-engine/subproviders/nonce-tracker");
const SubscriptionsSubprovider = require("web3-provider-engine/subproviders/subscriptions");
class WalletConnectProvider extends ProviderEngine {
  constructor(opts) {
    super({
      pollingInterval: opts.pollingInterval || 8000
    });
    this.bridge = "https://bridge.walletconnect.org";
    this.qrcode = true;
    this.qrcodeModal = _qrcodeModal.default;
    this.qrcodeModalOptions = undefined;
    this.rpc = null;
    this.infuraId = "";
    this.http = null;
    this.isConnecting = false;
    this.connected = false;
    this.connectCallbacks = [];
    this.accounts = [];
    this.chainId = 1;
    this.rpcUrl = "";
    this.enable = async () => {
      const wc = await this.getWalletConnector();
      if (wc) {
        this.start();
        this.subscribeWalletConnector();
        return wc.accounts;
      } else {
        throw new Error("Failed to connect to WalleConnect");
      }
    };
    this.request = async payload => {
      return this.send(payload);
    };
    this.send = async (payload, callback) => {
      var _a;
      if (typeof payload === "string") {
        const method = payload;
        let params = callback;
        if (method === "personal_sign") {
          params = (0, _utils.parsePersonalSign)(params);
        }
        return this.sendAsyncPromise(method, params);
      }
      payload = Object.assign({
        id: (0, _utils.payloadId)(),
        jsonrpc: "2.0"
      }, payload);
      if (payload.method === "personal_sign") {
        payload.params = (0, _utils.parsePersonalSign)(payload.params);
      }
      if (callback) {
        this.sendAsync(payload, callback);
        return;
      }
      if (payload.method === "eth_signTypedData_v4" && ((_a = this.walletMeta) === null || _a === void 0 ? void 0 : _a.name) === "MetaMask") {
        const {
          result
        } = await this.handleOtherRequests(payload);
        return result;
      } else {
        return this.sendAsyncPromise(payload.method, payload.params);
      }
    };
    this.onConnect = callback => {
      this.connectCallbacks.push(callback);
    };
    this.triggerConnect = result => {
      if (this.connectCallbacks && this.connectCallbacks.length) {
        this.connectCallbacks.forEach(callback => callback(result));
      }
    };
    this.bridge = opts.connector ? opts.connector.bridge : opts.bridge || "https://bridge.walletconnect.org";
    this.qrcode = typeof opts.qrcode === "undefined" || opts.qrcode !== false;
    this.qrcodeModal = opts.qrcodeModal || this.qrcodeModal;
    this.qrcodeModalOptions = opts.qrcodeModalOptions;
    this.wc = opts.connector || new _client.default({
      bridge: this.bridge,
      qrcodeModal: this.qrcode ? this.qrcodeModal : undefined,
      qrcodeModalOptions: this.qrcodeModalOptions,
      storageId: opts === null || opts === void 0 ? void 0 : opts.storageId,
      signingMethods: opts === null || opts === void 0 ? void 0 : opts.signingMethods,
      clientMeta: opts === null || opts === void 0 ? void 0 : opts.clientMeta
    });
    this.rpc = opts.rpc || null;
    if (!this.rpc && (!opts.infuraId || typeof opts.infuraId !== "string" || !opts.infuraId.trim())) {
      throw new Error("Missing one of the required parameters: rpc or infuraId");
    }
    this.infuraId = opts.infuraId || "";
    this.chainId = (opts === null || opts === void 0 ? void 0 : opts.chainId) || this.chainId;
    this.initialize();
  }
  get isWalletConnect() {
    return true;
  }
  get connector() {
    return this.wc;
  }
  get walletMeta() {
    return this.wc.peerMeta;
  }
  async disconnect() {
    this.close();
  }
  async close() {
    const wc = await this.getWalletConnector({
      disableSessionCreation: true
    });
    await wc.killSession();
    await this.onDisconnect();
  }
  async handleRequest(payload) {
    try {
      let response;
      let result = null;
      const wc = await this.getWalletConnector();
      switch (payload.method) {
        case "wc_killSession":
          await this.close();
          result = null;
          break;
        case "eth_accounts":
          result = wc.accounts;
          break;
        case "eth_coinbase":
          result = wc.accounts[0];
          break;
        case "eth_chainId":
          result = wc.chainId;
          break;
        case "net_version":
          result = wc.chainId;
          break;
        case "eth_uninstallFilter":
          this.sendAsync(payload, _ => _);
          result = true;
          break;
        default:
          response = await this.handleOtherRequests(payload);
      }
      if (response) {
        return response;
      }
      return this.formatResponse(payload, result);
    } catch (error) {
      this.emit("error", error);
      throw error;
    }
  }
  async handleOtherRequests(payload) {
    if (!_utils.signingMethods.includes(payload.method) && payload.method.startsWith("eth_")) {
      return this.handleReadRequests(payload);
    }
    const wc = await this.getWalletConnector();
    const result = await wc.sendCustomRequest(payload);
    return this.formatResponse(payload, result);
  }
  async handleReadRequests(payload) {
    if (!this.http) {
      const error = new Error("HTTP Connection not available");
      this.emit("error", error);
      throw error;
    }
    return this.http.send(payload);
  }
  formatResponse(payload, result) {
    return {
      id: payload.id,
      jsonrpc: payload.jsonrpc,
      result: result
    };
  }
  getWalletConnector(opts = {}) {
    const {
      disableSessionCreation = false
    } = opts;
    return new Promise((resolve, reject) => {
      const wc = this.wc;
      if (this.isConnecting) {
        this.onConnect(x => resolve(x));
      } else if (!wc.connected && !disableSessionCreation) {
        this.isConnecting = true;
        wc.on("modal_closed", () => {
          reject(new Error("User closed modal"));
        });
        wc.createSession({
          chainId: this.chainId
        }).then(() => {
          wc.on("connect", (error, payload) => {
            if (error) {
              this.isConnecting = false;
              return reject(error);
            }
            this.isConnecting = false;
            this.connected = true;
            if (payload) {
              this.updateState(payload.params[0]);
            }
            this.emit("connect");
            this.triggerConnect(wc);
            resolve(wc);
          });
        }).catch(error => {
          this.isConnecting = false;
          reject(error);
        });
      } else {
        if (!this.connected) {
          this.connected = true;
          this.updateState(wc.session);
        }
        resolve(wc);
      }
    });
  }
  async subscribeWalletConnector() {
    const wc = await this.getWalletConnector();
    wc.on("disconnect", error => {
      if (error) {
        this.emit("error", error);
        return;
      }
      this.onDisconnect();
    });
    wc.on("session_update", (error, payload) => {
      if (error) {
        this.emit("error", error);
        return;
      }
      this.updateState(payload.params[0]);
    });
  }
  async onDisconnect() {
    await this.stop();
    this.emit("close", 1000, "Connection closed");
    this.emit("disconnect", 1000, "Connection disconnected");
    this.connected = false;
  }
  async updateState(sessionParams) {
    const {
      accounts,
      chainId,
      networkId,
      rpcUrl
    } = sessionParams;
    if (!this.accounts || accounts && this.accounts !== accounts) {
      this.accounts = accounts;
      this.emit("accountsChanged", accounts);
    }
    if (!this.chainId || chainId && this.chainId !== chainId) {
      this.chainId = chainId;
      this.emit("chainChanged", chainId);
    }
    if (!this.networkId || networkId && this.networkId !== networkId) {
      this.networkId = networkId;
      this.emit("networkChanged", networkId);
    }
    this.updateRpcUrl(this.chainId, rpcUrl || "");
  }
  updateRpcUrl(chainId, rpcUrl = "") {
    const rpc = {
      infuraId: this.infuraId,
      custom: this.rpc || undefined
    };
    rpcUrl = rpcUrl || (0, _utils.getRpcUrl)(chainId, rpc);
    if (rpcUrl) {
      this.rpcUrl = rpcUrl;
      this.updateHttpConnection();
    } else {
      this.emit("error", new Error(`No RPC Url available for chainId: ${chainId}`));
    }
  }
  updateHttpConnection() {
    if (this.rpcUrl) {
      this.http = new _httpConnection.default(this.rpcUrl);
      this.http.on("payload", payload => this.emit("payload", payload));
      this.http.on("error", error => this.emit("error", error));
    }
  }
  sendAsyncPromise(method, params) {
    return new Promise((resolve, reject) => {
      this.sendAsync({
        id: (0, _utils.payloadId)(),
        jsonrpc: "2.0",
        method,
        params: params || []
      }, (error, response) => {
        if (error) {
          reject(error);
          return;
        }
        resolve(response.result);
      });
    });
  }
  initialize() {
    this.updateRpcUrl(this.chainId);
    this.addProvider(new FixtureSubprovider({
      eth_hashrate: "0x00",
      eth_mining: false,
      eth_syncing: true,
      net_listening: true,
      web3_clientVersion: `WalletConnect/v1.x.x/javascript`
    }));
    this.addProvider(new CacheSubprovider());
    this.addProvider(new SubscriptionsSubprovider());
    this.addProvider(new FilterSubprovider());
    this.addProvider(new NonceSubprovider());
    this.addProvider(new HookedWalletSubprovider(this.configWallet()));
    this.addProvider({
      handleRequest: async (payload, next, end) => {
        try {
          const {
            error,
            result
          } = await this.handleRequest(payload);
          end(error, result);
        } catch (error) {
          end(error);
        }
      },
      setEngine: _ => _
    });
  }
  configWallet() {
    return {
      getAccounts: async cb => {
        try {
          const wc = await this.getWalletConnector();
          const accounts = wc.accounts;
          if (accounts && accounts.length) {
            cb(null, accounts);
          } else {
            cb(new Error("Failed to get accounts"));
          }
        } catch (error) {
          cb(error);
        }
      },
      processMessage: async (msgParams, cb) => {
        try {
          const wc = await this.getWalletConnector();
          const result = await wc.signMessage([msgParams.from, msgParams.data]);
          cb(null, result);
        } catch (error) {
          cb(error);
        }
      },
      processPersonalMessage: async (msgParams, cb) => {
        try {
          const wc = await this.getWalletConnector();
          const result = await wc.signPersonalMessage([msgParams.data, msgParams.from]);
          cb(null, result);
        } catch (error) {
          cb(error);
        }
      },
      processSignTransaction: async (txParams, cb) => {
        try {
          const wc = await this.getWalletConnector();
          const result = await wc.signTransaction(txParams);
          cb(null, result);
        } catch (error) {
          cb(error);
        }
      },
      processTransaction: async (txParams, cb) => {
        try {
          const wc = await this.getWalletConnector();
          const result = await wc.sendTransaction(txParams);
          cb(null, result);
        } catch (error) {
          cb(error);
        }
      },
      processTypedMessage: async (msgParams, cb) => {
        try {
          const wc = await this.getWalletConnector();
          const result = await wc.signTypedData([msgParams.from, msgParams.data]);
          cb(null, result);
        } catch (error) {
          cb(error);
        }
      }
    };
  }
}
var _default = WalletConnectProvider;
exports.default = _default;
},{"@walletconnect/client":"node_modules/@walletconnect/client/dist/esm/index.js","@walletconnect/qrcode-modal":"node_modules/@walletconnect/qrcode-modal/dist/cjs/index.js","@walletconnect/http-connection":"node_modules/@walletconnect/http-connection/dist/esm/index.js","@walletconnect/utils":"node_modules/@walletconnect/utils/dist/esm/index.js","web3-provider-engine":"node_modules/web3-provider-engine/index.js","web3-provider-engine/subproviders/cache":"node_modules/web3-provider-engine/subproviders/cache.js","web3-provider-engine/subproviders/fixture":"node_modules/web3-provider-engine/subproviders/fixture.js","web3-provider-engine/subproviders/filters":"node_modules/web3-provider-engine/subproviders/filters.js","web3-provider-engine/subproviders/hooked-wallet":"node_modules/web3-provider-engine/subproviders/hooked-wallet.js","web3-provider-engine/subproviders/nonce-tracker":"node_modules/web3-provider-engine/subproviders/nonce-tracker.js","web3-provider-engine/subproviders/subscriptions":"node_modules/web3-provider-engine/subproviders/subscriptions.js"}],"index.js":[function(require,module,exports) {
"use strict";

var _OmoideStorage = _interopRequireDefault(require("./truffle/build/contracts/OmoideStorage.json"));
var _web = _interopRequireDefault(require("web3"));
var _web3Provider = _interopRequireDefault(require("@walletconnect/web3-provider"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; } // index.js
var web3;
var account;
var contract;
function initialize() {
  return _initialize.apply(this, arguments);
}
function _initialize() {
  _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var provider, accounts, contractAbi, contractAddress;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          provider = new _web3Provider.default({
            rpc: {
              80001: 'https://rpc-mumbai.maticvigil.com/'
            },
            chainId: 80001
          });
          _context.next = 3;
          return provider.enable();
        case 3:
          web3 = new _web.default(provider);
          _context.next = 6;
          return web3.eth.getAccounts();
        case 6:
          accounts = _context.sent;
          account = accounts[0];
          contractAbi = _OmoideStorage.default.abi;
          contractAddress = _OmoideStorage.default.networks[80001].address;
          contract = new web3.eth.Contract(contractAbi, contractAddress);
          document.getElementById("data-form").addEventListener("submit", storeData);
        case 12:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _initialize.apply(this, arguments);
}
function storeData(_x) {
  return _storeData.apply(this, arguments);
}
function _storeData() {
  _storeData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(event) {
    var uuid, message, profilePic, dataHash, dataSignature, result;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          event.preventDefault();
          uuid = document.getElementById("uuid").value;
          message = document.getElementById("message").value;
          profilePic = document.getElementById("pic").value;
          dataHash = web3.utils.keccak256(message + profilePic);
          dataSignature = web3.eth.accounts.sign(dataHash, account).signature;
          _context2.next = 8;
          return contract.methods.storeData(uuid, message, profilePic, dataHash, dataSignature).send({
            from: account
          });
        case 8:
          result = _context2.sent;
          console.log(result);
        case 10:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _storeData.apply(this, arguments);
}
window.addEventListener('load', initialize);
},{"./truffle/build/contracts/OmoideStorage.json":"truffle/build/contracts/OmoideStorage.json","web3":"node_modules/web3/dist/web3.min.js","@walletconnect/web3-provider":"node_modules/@walletconnect/web3-provider/dist/esm/index.js"}],"../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}
module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "40655" + '/');
  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);
    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);
          if (didAccept) {
            handled = true;
          }
        }
      });

      // Enable HMR for CSS by default.
      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });
      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }
    if (data.type === 'reload') {
      ws.close();
      ws.onclose = function () {
        location.reload();
      };
    }
    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }
    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
  }
}
function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;

  // html encode message and stack trace
  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}
function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}
function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });
    return true;
  }
}
},{}]},{},["../.nvm/versions/node/v18.15.0/lib/node_modules/parcel-bundler/src/builtins/hmr-runtime.js","index.js"], null)
//# sourceMappingURL=/omoide.e31bb0bc.js.map